//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

#[cfg(feature = "shared-data")]
use std::sync::Arc;

#[cfg(feature = "shared-data")]
use yellowstone_vixen_core::InstructionUpdateOutput;

use crate::{
    deserialize_checked,
    instructions::{
        Buy as BuyIxAccounts, BuyInstructionArgs as BuyIxData,
        CollectCoinCreatorFee as CollectCoinCreatorFeeIxAccounts,
        CreateConfig as CreateConfigIxAccounts, CreateConfigInstructionArgs as CreateConfigIxData,
        CreatePool as CreatePoolIxAccounts, CreatePoolInstructionArgs as CreatePoolIxData,
        Deposit as DepositIxAccounts, DepositInstructionArgs as DepositIxData,
        Disable as DisableIxAccounts, DisableInstructionArgs as DisableIxData,
        ExtendAccount as ExtendAccountIxAccounts, Sell as SellIxAccounts,
        SellInstructionArgs as SellIxData, SetCoinCreator as SetCoinCreatorIxAccounts,
        UpdateAdmin as UpdateAdminIxAccounts, UpdateFeeConfig as UpdateFeeConfigIxAccounts,
        UpdateFeeConfigInstructionArgs as UpdateFeeConfigIxData, Withdraw as WithdrawIxAccounts,
        WithdrawInstructionArgs as WithdrawIxData,
    },
    ID,
};

/// PumpAmm Instructions
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum PumpAmmProgramIx {
    Buy(BuyIxAccounts, BuyIxData),
    CollectCoinCreatorFee(CollectCoinCreatorFeeIxAccounts),
    CreateConfig(CreateConfigIxAccounts, CreateConfigIxData),
    CreatePool(CreatePoolIxAccounts, CreatePoolIxData),
    Deposit(DepositIxAccounts, DepositIxData),
    Disable(DisableIxAccounts, DisableIxData),
    ExtendAccount(ExtendAccountIxAccounts),
    Sell(SellIxAccounts, SellIxData),
    SetCoinCreator(SetCoinCreatorIxAccounts),
    UpdateAdmin(UpdateAdminIxAccounts),
    UpdateFeeConfig(UpdateFeeConfigIxAccounts, UpdateFeeConfigIxData),
    Withdraw(WithdrawIxAccounts, WithdrawIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    #[cfg(not(feature = "shared-data"))]
    type Output = PumpAmmProgramIx;
    #[cfg(feature = "shared-data")]
    type Output = InstructionUpdateOutput<PumpAmmProgramIx>;

    fn id(&self) -> std::borrow::Cow<str> { "PumpAmm::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            let res = InstructionParser::parse_impl(ix_update);

            #[cfg(feature = "tracing")]
            if let Err(e) = &res {
                let ix_discriminator: [u8; 8] = ix_update.data[0..8].try_into()?;

                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "deserialization_error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            }

            res
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<<Self as yellowstone_vixen_core::Parser>::Output> {
        let accounts_len = ix.accounts.len();
        let accounts = &mut ix.accounts.iter();

        #[cfg(feature = "shared-data")]
        let shared_data = Arc::clone(&ix.shared);

        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let ix_data = &ix.data[8..];
        let ix = match ix_discriminator {
            [102, 6, 61, 18, 1, 218, 235, 234] => {
                let expected_accounts_len = 19;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = BuyIxAccounts {
                    pool: next_account(accounts)?,
                    user: next_account(accounts)?,
                    global_config: next_account(accounts)?,
                    base_mint: next_account(accounts)?,
                    quote_mint: next_account(accounts)?,
                    user_base_token_account: next_account(accounts)?,
                    user_quote_token_account: next_account(accounts)?,
                    pool_base_token_account: next_account(accounts)?,
                    pool_quote_token_account: next_account(accounts)?,
                    protocol_fee_recipient: next_account(accounts)?,
                    protocol_fee_recipient_token_account: next_account(accounts)?,
                    base_token_program: next_account(accounts)?,
                    quote_token_program: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                    coin_creator_vault_ata: next_account(accounts)?,
                    coin_creator_vault_authority: next_account(accounts)?,
                };
                let de_ix_data: BuyIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(PumpAmmProgramIx::Buy(ix_accounts, de_ix_data))
            },
            [160, 57, 89, 42, 181, 139, 43, 66] => {
                let expected_accounts_len = 8;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = CollectCoinCreatorFeeIxAccounts {
                    quote_mint: next_account(accounts)?,
                    quote_token_program: next_account(accounts)?,
                    coin_creator: next_account(accounts)?,
                    coin_creator_vault_authority: next_account(accounts)?,
                    coin_creator_vault_ata: next_account(accounts)?,
                    coin_creator_token_account: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                Ok(PumpAmmProgramIx::CollectCoinCreatorFee(ix_accounts))
            },
            [201, 207, 243, 114, 75, 111, 47, 189] => {
                let expected_accounts_len = 5;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = CreateConfigIxAccounts {
                    admin: next_account(accounts)?,
                    global_config: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: CreateConfigIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(PumpAmmProgramIx::CreateConfig(ix_accounts, de_ix_data))
            },
            [233, 146, 209, 142, 207, 104, 64, 188] => {
                let expected_accounts_len = 18;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = CreatePoolIxAccounts {
                    pool: next_account(accounts)?,
                    global_config: next_account(accounts)?,
                    creator: next_account(accounts)?,
                    base_mint: next_account(accounts)?,
                    quote_mint: next_account(accounts)?,
                    lp_mint: next_account(accounts)?,
                    user_base_token_account: next_account(accounts)?,
                    user_quote_token_account: next_account(accounts)?,
                    user_pool_token_account: next_account(accounts)?,
                    pool_base_token_account: next_account(accounts)?,
                    pool_quote_token_account: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    token2022_program: next_account(accounts)?,
                    base_token_program: next_account(accounts)?,
                    quote_token_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: CreatePoolIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(PumpAmmProgramIx::CreatePool(ix_accounts, de_ix_data))
            },
            [242, 35, 198, 137, 82, 225, 242, 182] => {
                let expected_accounts_len = 15;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = DepositIxAccounts {
                    pool: next_account(accounts)?,
                    global_config: next_account(accounts)?,
                    user: next_account(accounts)?,
                    base_mint: next_account(accounts)?,
                    quote_mint: next_account(accounts)?,
                    lp_mint: next_account(accounts)?,
                    user_base_token_account: next_account(accounts)?,
                    user_quote_token_account: next_account(accounts)?,
                    user_pool_token_account: next_account(accounts)?,
                    pool_base_token_account: next_account(accounts)?,
                    pool_quote_token_account: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    token2022_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: DepositIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(PumpAmmProgramIx::Deposit(ix_accounts, de_ix_data))
            },
            [185, 173, 187, 90, 216, 15, 238, 233] => {
                let expected_accounts_len = 4;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = DisableIxAccounts {
                    admin: next_account(accounts)?,
                    global_config: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: DisableIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(PumpAmmProgramIx::Disable(ix_accounts, de_ix_data))
            },
            [234, 102, 194, 203, 150, 72, 62, 229] => {
                let expected_accounts_len = 5;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = ExtendAccountIxAccounts {
                    account: next_account(accounts)?,
                    user: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                Ok(PumpAmmProgramIx::ExtendAccount(ix_accounts))
            },
            [51, 230, 133, 164, 1, 127, 131, 173] => {
                let expected_accounts_len = 19;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = SellIxAccounts {
                    pool: next_account(accounts)?,
                    user: next_account(accounts)?,
                    global_config: next_account(accounts)?,
                    base_mint: next_account(accounts)?,
                    quote_mint: next_account(accounts)?,
                    user_base_token_account: next_account(accounts)?,
                    user_quote_token_account: next_account(accounts)?,
                    pool_base_token_account: next_account(accounts)?,
                    pool_quote_token_account: next_account(accounts)?,
                    protocol_fee_recipient: next_account(accounts)?,
                    protocol_fee_recipient_token_account: next_account(accounts)?,
                    base_token_program: next_account(accounts)?,
                    quote_token_program: next_account(accounts)?,
                    system_program: next_account(accounts)?,
                    associated_token_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                    coin_creator_vault_ata: next_account(accounts)?,
                    coin_creator_vault_authority: next_account(accounts)?,
                };
                let de_ix_data: SellIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(PumpAmmProgramIx::Sell(ix_accounts, de_ix_data))
            },
            [210, 149, 128, 45, 188, 58, 78, 175] => {
                let expected_accounts_len = 5;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = SetCoinCreatorIxAccounts {
                    pool: next_account(accounts)?,
                    metadata: next_account(accounts)?,
                    bonding_curve: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                Ok(PumpAmmProgramIx::SetCoinCreator(ix_accounts))
            },
            [161, 176, 40, 213, 60, 184, 179, 228] => {
                let expected_accounts_len = 5;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = UpdateAdminIxAccounts {
                    admin: next_account(accounts)?,
                    global_config: next_account(accounts)?,
                    new_admin: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                Ok(PumpAmmProgramIx::UpdateAdmin(ix_accounts))
            },
            [104, 184, 103, 242, 88, 151, 107, 20] => {
                let expected_accounts_len = 4;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = UpdateFeeConfigIxAccounts {
                    admin: next_account(accounts)?,
                    global_config: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: UpdateFeeConfigIxData =
                    deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(PumpAmmProgramIx::UpdateFeeConfig(ix_accounts, de_ix_data))
            },
            [183, 18, 70, 156, 148, 109, 161, 34] => {
                let expected_accounts_len = 15;
                check_min_accounts_req(accounts_len, expected_accounts_len)?;
                let ix_accounts = WithdrawIxAccounts {
                    pool: next_account(accounts)?,
                    global_config: next_account(accounts)?,
                    user: next_account(accounts)?,
                    base_mint: next_account(accounts)?,
                    quote_mint: next_account(accounts)?,
                    lp_mint: next_account(accounts)?,
                    user_base_token_account: next_account(accounts)?,
                    user_quote_token_account: next_account(accounts)?,
                    user_pool_token_account: next_account(accounts)?,
                    pool_base_token_account: next_account(accounts)?,
                    pool_quote_token_account: next_account(accounts)?,
                    token_program: next_account(accounts)?,
                    token2022_program: next_account(accounts)?,
                    event_authority: next_account(accounts)?,
                    program: next_account(accounts)?,
                };
                let de_ix_data: WithdrawIxData = deserialize_checked(ix_data, &ix_discriminator)?;
                Ok(PumpAmmProgramIx::Withdraw(ix_accounts, de_ix_data))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &ix {
            Ok(ix) => {
                tracing::info!(
                    name: "correctly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = ix.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            },
        }

        #[cfg(not(feature = "shared-data"))]
        return ix;

        #[cfg(feature = "shared-data")]
        ix.map(|ix| InstructionUpdateOutput {
            parsed_ix: ix,
            shared_data,
        })
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

fn next_account<'a, T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>>(
    accounts: &mut T,
) -> Result<solana_pubkey::Pubkey, yellowstone_vixen_core::ParseError> {
    accounts
        .next()
        .ok_or(yellowstone_vixen_core::ParseError::from(
            "No more accounts to parse",
        ))
        .map(|acc| acc.0.into())
}

/// Gets the next optional account using the ommited account strategy (account is not passed at all at the instruction).
/// ### Be careful to use this function when more than one account is optional in the Instruction.
///  Only by order there is no way to which ones of the optional accounts are present.
pub fn next_optional_account<'a, T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>>(
    accounts: &mut T,
    actual_accounts_len: usize,
    expected_accounts_len: &mut usize,
) -> Result<Option<solana_pubkey::Pubkey>, yellowstone_vixen_core::ParseError> {
    if actual_accounts_len == *expected_accounts_len + 1 {
        *expected_accounts_len += 1;
        Ok(Some(next_account(accounts)?))
    } else {
        Ok(None)
    }
}

/// Gets the next optional account using the traditional Program ID strategy.
///  (If account key is the program ID, means account is not present)
pub fn next_program_id_optional_account<
    'a,
    T: Iterator<Item = &'a yellowstone_vixen_core::KeyBytes<32>>,
>(
    accounts: &mut T,
) -> Result<Option<solana_pubkey::Pubkey>, yellowstone_vixen_core::ParseError> {
    let account_key = next_account(accounts)?;
    if account_key.eq(&ID) {
        Ok(None)
    } else {
        Ok(Some(account_key))
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{BuyIxAccounts, InstructionParser, PumpAmmProgramIx};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::BuyIxAccounts> for BuyIxAccounts {
        fn into_proto(self) -> proto_def::BuyIxAccounts {
            proto_def::BuyIxAccounts {
                pool: self.pool.to_string(),
                user: self.user.to_string(),
                global_config: self.global_config.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                pool_base_token_account: self.pool_base_token_account.to_string(),
                pool_quote_token_account: self.pool_quote_token_account.to_string(),
                protocol_fee_recipient: self.protocol_fee_recipient.to_string(),
                protocol_fee_recipient_token_account: self
                    .protocol_fee_recipient_token_account
                    .to_string(),
                base_token_program: self.base_token_program.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                system_program: self.system_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
                coin_creator_vault_ata: self.coin_creator_vault_ata.to_string(),
                coin_creator_vault_authority: self.coin_creator_vault_authority.to_string(),
            }
        }
    }
    use super::BuyIxData;
    impl IntoProto<proto_def::BuyIxData> for BuyIxData {
        fn into_proto(self) -> proto_def::BuyIxData {
            proto_def::BuyIxData {
                base_amount_out: self.base_amount_out,
                max_quote_amount_in: self.max_quote_amount_in,
            }
        }
    }
    use super::CollectCoinCreatorFeeIxAccounts;
    impl IntoProto<proto_def::CollectCoinCreatorFeeIxAccounts> for CollectCoinCreatorFeeIxAccounts {
        fn into_proto(self) -> proto_def::CollectCoinCreatorFeeIxAccounts {
            proto_def::CollectCoinCreatorFeeIxAccounts {
                quote_mint: self.quote_mint.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                coin_creator: self.coin_creator.to_string(),
                coin_creator_vault_authority: self.coin_creator_vault_authority.to_string(),
                coin_creator_vault_ata: self.coin_creator_vault_ata.to_string(),
                coin_creator_token_account: self.coin_creator_token_account.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::CreateConfigIxAccounts;
    impl IntoProto<proto_def::CreateConfigIxAccounts> for CreateConfigIxAccounts {
        fn into_proto(self) -> proto_def::CreateConfigIxAccounts {
            proto_def::CreateConfigIxAccounts {
                admin: self.admin.to_string(),
                global_config: self.global_config.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::CreateConfigIxData;
    impl IntoProto<proto_def::CreateConfigIxData> for CreateConfigIxData {
        fn into_proto(self) -> proto_def::CreateConfigIxData {
            proto_def::CreateConfigIxData {
                lp_fee_basis_points: self.lp_fee_basis_points,
                protocol_fee_basis_points: self.protocol_fee_basis_points,
                protocol_fee_recipients: self
                    .protocol_fee_recipients
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
                coin_creator_fee_basis_points: self.coin_creator_fee_basis_points,
            }
        }
    }
    use super::CreatePoolIxAccounts;
    impl IntoProto<proto_def::CreatePoolIxAccounts> for CreatePoolIxAccounts {
        fn into_proto(self) -> proto_def::CreatePoolIxAccounts {
            proto_def::CreatePoolIxAccounts {
                pool: self.pool.to_string(),
                global_config: self.global_config.to_string(),
                creator: self.creator.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                lp_mint: self.lp_mint.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                user_pool_token_account: self.user_pool_token_account.to_string(),
                pool_base_token_account: self.pool_base_token_account.to_string(),
                pool_quote_token_account: self.pool_quote_token_account.to_string(),
                system_program: self.system_program.to_string(),
                token2022_program: self.token2022_program.to_string(),
                base_token_program: self.base_token_program.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::CreatePoolIxData;
    impl IntoProto<proto_def::CreatePoolIxData> for CreatePoolIxData {
        fn into_proto(self) -> proto_def::CreatePoolIxData {
            proto_def::CreatePoolIxData {
                index: self.index.into(),
                base_amount_in: self.base_amount_in,
                quote_amount_in: self.quote_amount_in,
                coin_creator: self.coin_creator.to_string(),
            }
        }
    }
    use super::DepositIxAccounts;
    impl IntoProto<proto_def::DepositIxAccounts> for DepositIxAccounts {
        fn into_proto(self) -> proto_def::DepositIxAccounts {
            proto_def::DepositIxAccounts {
                pool: self.pool.to_string(),
                global_config: self.global_config.to_string(),
                user: self.user.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                lp_mint: self.lp_mint.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                user_pool_token_account: self.user_pool_token_account.to_string(),
                pool_base_token_account: self.pool_base_token_account.to_string(),
                pool_quote_token_account: self.pool_quote_token_account.to_string(),
                token_program: self.token_program.to_string(),
                token2022_program: self.token2022_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::DepositIxData;
    impl IntoProto<proto_def::DepositIxData> for DepositIxData {
        fn into_proto(self) -> proto_def::DepositIxData {
            proto_def::DepositIxData {
                lp_token_amount_out: self.lp_token_amount_out,
                max_base_amount_in: self.max_base_amount_in,
                max_quote_amount_in: self.max_quote_amount_in,
            }
        }
    }
    use super::DisableIxAccounts;
    impl IntoProto<proto_def::DisableIxAccounts> for DisableIxAccounts {
        fn into_proto(self) -> proto_def::DisableIxAccounts {
            proto_def::DisableIxAccounts {
                admin: self.admin.to_string(),
                global_config: self.global_config.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::DisableIxData;
    impl IntoProto<proto_def::DisableIxData> for DisableIxData {
        fn into_proto(self) -> proto_def::DisableIxData {
            proto_def::DisableIxData {
                disable_create_pool: self.disable_create_pool,
                disable_deposit: self.disable_deposit,
                disable_withdraw: self.disable_withdraw,
                disable_buy: self.disable_buy,
                disable_sell: self.disable_sell,
            }
        }
    }
    use super::ExtendAccountIxAccounts;
    impl IntoProto<proto_def::ExtendAccountIxAccounts> for ExtendAccountIxAccounts {
        fn into_proto(self) -> proto_def::ExtendAccountIxAccounts {
            proto_def::ExtendAccountIxAccounts {
                account: self.account.to_string(),
                user: self.user.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SellIxAccounts;
    impl IntoProto<proto_def::SellIxAccounts> for SellIxAccounts {
        fn into_proto(self) -> proto_def::SellIxAccounts {
            proto_def::SellIxAccounts {
                pool: self.pool.to_string(),
                user: self.user.to_string(),
                global_config: self.global_config.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                pool_base_token_account: self.pool_base_token_account.to_string(),
                pool_quote_token_account: self.pool_quote_token_account.to_string(),
                protocol_fee_recipient: self.protocol_fee_recipient.to_string(),
                protocol_fee_recipient_token_account: self
                    .protocol_fee_recipient_token_account
                    .to_string(),
                base_token_program: self.base_token_program.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                system_program: self.system_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
                coin_creator_vault_ata: self.coin_creator_vault_ata.to_string(),
                coin_creator_vault_authority: self.coin_creator_vault_authority.to_string(),
            }
        }
    }
    use super::SellIxData;
    impl IntoProto<proto_def::SellIxData> for SellIxData {
        fn into_proto(self) -> proto_def::SellIxData {
            proto_def::SellIxData {
                base_amount_in: self.base_amount_in,
                min_quote_amount_out: self.min_quote_amount_out,
            }
        }
    }
    use super::SetCoinCreatorIxAccounts;
    impl IntoProto<proto_def::SetCoinCreatorIxAccounts> for SetCoinCreatorIxAccounts {
        fn into_proto(self) -> proto_def::SetCoinCreatorIxAccounts {
            proto_def::SetCoinCreatorIxAccounts {
                pool: self.pool.to_string(),
                metadata: self.metadata.to_string(),
                bonding_curve: self.bonding_curve.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateAdminIxAccounts;
    impl IntoProto<proto_def::UpdateAdminIxAccounts> for UpdateAdminIxAccounts {
        fn into_proto(self) -> proto_def::UpdateAdminIxAccounts {
            proto_def::UpdateAdminIxAccounts {
                admin: self.admin.to_string(),
                global_config: self.global_config.to_string(),
                new_admin: self.new_admin.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateFeeConfigIxAccounts;
    impl IntoProto<proto_def::UpdateFeeConfigIxAccounts> for UpdateFeeConfigIxAccounts {
        fn into_proto(self) -> proto_def::UpdateFeeConfigIxAccounts {
            proto_def::UpdateFeeConfigIxAccounts {
                admin: self.admin.to_string(),
                global_config: self.global_config.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateFeeConfigIxData;
    impl IntoProto<proto_def::UpdateFeeConfigIxData> for UpdateFeeConfigIxData {
        fn into_proto(self) -> proto_def::UpdateFeeConfigIxData {
            proto_def::UpdateFeeConfigIxData {
                lp_fee_basis_points: self.lp_fee_basis_points,
                protocol_fee_basis_points: self.protocol_fee_basis_points,
                protocol_fee_recipients: self
                    .protocol_fee_recipients
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
                coin_creator_fee_basis_points: self.coin_creator_fee_basis_points,
            }
        }
    }
    use super::WithdrawIxAccounts;
    impl IntoProto<proto_def::WithdrawIxAccounts> for WithdrawIxAccounts {
        fn into_proto(self) -> proto_def::WithdrawIxAccounts {
            proto_def::WithdrawIxAccounts {
                pool: self.pool.to_string(),
                global_config: self.global_config.to_string(),
                user: self.user.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                lp_mint: self.lp_mint.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                user_pool_token_account: self.user_pool_token_account.to_string(),
                pool_base_token_account: self.pool_base_token_account.to_string(),
                pool_quote_token_account: self.pool_quote_token_account.to_string(),
                token_program: self.token_program.to_string(),
                token2022_program: self.token2022_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::WithdrawIxData;
    impl IntoProto<proto_def::WithdrawIxData> for WithdrawIxData {
        fn into_proto(self) -> proto_def::WithdrawIxData {
            proto_def::WithdrawIxData {
                lp_token_amount_in: self.lp_token_amount_in,
                min_base_amount_out: self.min_base_amount_out,
                min_quote_amount_out: self.min_quote_amount_out,
            }
        }
    }

    impl IntoProto<proto_def::ProgramIxs> for PumpAmmProgramIx {
        fn into_proto(self) -> proto_def::ProgramIxs {
            match self {
                PumpAmmProgramIx::Buy(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Buy(proto_def::BuyIx {
                        accounts: Some(acc.into_proto()),
                        data: Some(data.into_proto()),
                    })),
                },
                PumpAmmProgramIx::CollectCoinCreatorFee(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CollectCoinCreatorFee(
                        proto_def::CollectCoinCreatorFeeIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                PumpAmmProgramIx::CreateConfig(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CreateConfig(
                        proto_def::CreateConfigIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                PumpAmmProgramIx::CreatePool(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CreatePool(
                        proto_def::CreatePoolIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                PumpAmmProgramIx::Deposit(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Deposit(
                        proto_def::DepositIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                PumpAmmProgramIx::Disable(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Disable(
                        proto_def::DisableIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                PumpAmmProgramIx::ExtendAccount(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ExtendAccount(
                        proto_def::ExtendAccountIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                PumpAmmProgramIx::Sell(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Sell(proto_def::SellIx {
                        accounts: Some(acc.into_proto()),
                        data: Some(data.into_proto()),
                    })),
                },
                PumpAmmProgramIx::SetCoinCreator(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SetCoinCreator(
                        proto_def::SetCoinCreatorIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                PumpAmmProgramIx::UpdateAdmin(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateAdmin(
                        proto_def::UpdateAdminIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                PumpAmmProgramIx::UpdateFeeConfig(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateFeeConfig(
                        proto_def::UpdateFeeConfigIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                PumpAmmProgramIx::Withdraw(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Withdraw(
                        proto_def::WithdrawIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
            }
        }
    }

    impl ParseProto for InstructionParser {
        type Message = proto_def::ProgramIxs;

        fn output_into_message(value: Self::Output) -> Self::Message {
            #[cfg(not(feature = "shared-data"))]
            return value.into_proto();

            #[cfg(feature = "shared-data")]
            value.parsed_ix.into_proto()
        }
    }
}
