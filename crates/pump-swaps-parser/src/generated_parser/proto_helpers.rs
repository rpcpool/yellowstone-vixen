//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::BuyEvent};
    impl IntoProto<proto_def::BuyEvent> for BuyEvent {
        fn into_proto(self) -> proto_def::BuyEvent {
            proto_def::BuyEvent {
                timestamp: self.timestamp,
                base_amount_out: self.base_amount_out,
                max_quote_amount_in: self.max_quote_amount_in,
                user_base_token_reserves: self.user_base_token_reserves,
                user_quote_token_reserves: self.user_quote_token_reserves,
                pool_base_token_reserves: self.pool_base_token_reserves,
                pool_quote_token_reserves: self.pool_quote_token_reserves,
                quote_amount_in: self.quote_amount_in,
                lp_fee_basis_points: self.lp_fee_basis_points,
                lp_fee: self.lp_fee,
                protocol_fee_basis_points: self.protocol_fee_basis_points,
                protocol_fee: self.protocol_fee,
                quote_amount_in_with_lp_fee: self.quote_amount_in_with_lp_fee,
                user_quote_amount_in: self.user_quote_amount_in,
                pool: self.pool.to_string(),
                user: self.user.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                protocol_fee_recipient: self.protocol_fee_recipient.to_string(),
                protocol_fee_recipient_token_account: self
                    .protocol_fee_recipient_token_account
                    .to_string(),
                coin_creator: self.coin_creator.to_string(),
                coin_creator_fee_basis_points: self.coin_creator_fee_basis_points,
                coin_creator_fee: self.coin_creator_fee,
            }
        }
    }
    use crate::types::CollectCoinCreatorFeeEvent;
    impl IntoProto<proto_def::CollectCoinCreatorFeeEvent> for CollectCoinCreatorFeeEvent {
        fn into_proto(self) -> proto_def::CollectCoinCreatorFeeEvent {
            proto_def::CollectCoinCreatorFeeEvent {
                timestamp: self.timestamp,
                coin_creator: self.coin_creator.to_string(),
                coin_creator_fee: self.coin_creator_fee,
                coin_creator_vault_ata: self.coin_creator_vault_ata.to_string(),
                coin_creator_token_account: self.coin_creator_token_account.to_string(),
            }
        }
    }
    use crate::types::CreateConfigEvent;
    impl IntoProto<proto_def::CreateConfigEvent> for CreateConfigEvent {
        fn into_proto(self) -> proto_def::CreateConfigEvent {
            proto_def::CreateConfigEvent {
                timestamp: self.timestamp,
                admin: self.admin.to_string(),
                lp_fee_basis_points: self.lp_fee_basis_points,
                protocol_fee_basis_points: self.protocol_fee_basis_points,
                protocol_fee_recipients: self
                    .protocol_fee_recipients
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
                coin_creator_fee_basis_points: self.coin_creator_fee_basis_points,
            }
        }
    }
    use crate::types::CreatePoolEvent;
    impl IntoProto<proto_def::CreatePoolEvent> for CreatePoolEvent {
        fn into_proto(self) -> proto_def::CreatePoolEvent {
            proto_def::CreatePoolEvent {
                timestamp: self.timestamp,
                index: self.index.into(),
                creator: self.creator.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                base_mint_decimals: self.base_mint_decimals.into(),
                quote_mint_decimals: self.quote_mint_decimals.into(),
                base_amount_in: self.base_amount_in,
                quote_amount_in: self.quote_amount_in,
                pool_base_amount: self.pool_base_amount,
                pool_quote_amount: self.pool_quote_amount,
                minimum_liquidity: self.minimum_liquidity,
                initial_liquidity: self.initial_liquidity,
                lp_token_amount_out: self.lp_token_amount_out,
                pool_bump: self.pool_bump.into(),
                pool: self.pool.to_string(),
                lp_mint: self.lp_mint.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                coin_creator: self.coin_creator.to_string(),
            }
        }
    }
    use crate::types::DepositEvent;
    impl IntoProto<proto_def::DepositEvent> for DepositEvent {
        fn into_proto(self) -> proto_def::DepositEvent {
            proto_def::DepositEvent {
                timestamp: self.timestamp,
                lp_token_amount_out: self.lp_token_amount_out,
                max_base_amount_in: self.max_base_amount_in,
                max_quote_amount_in: self.max_quote_amount_in,
                user_base_token_reserves: self.user_base_token_reserves,
                user_quote_token_reserves: self.user_quote_token_reserves,
                pool_base_token_reserves: self.pool_base_token_reserves,
                pool_quote_token_reserves: self.pool_quote_token_reserves,
                base_amount_in: self.base_amount_in,
                quote_amount_in: self.quote_amount_in,
                lp_mint_supply: self.lp_mint_supply,
                pool: self.pool.to_string(),
                user: self.user.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                user_pool_token_account: self.user_pool_token_account.to_string(),
            }
        }
    }
    use crate::types::DisableEvent;
    impl IntoProto<proto_def::DisableEvent> for DisableEvent {
        fn into_proto(self) -> proto_def::DisableEvent {
            proto_def::DisableEvent {
                timestamp: self.timestamp,
                admin: self.admin.to_string(),
                disable_create_pool: self.disable_create_pool,
                disable_deposit: self.disable_deposit,
                disable_withdraw: self.disable_withdraw,
                disable_buy: self.disable_buy,
                disable_sell: self.disable_sell,
            }
        }
    }
    use crate::types::ExtendAccountEvent;
    impl IntoProto<proto_def::ExtendAccountEvent> for ExtendAccountEvent {
        fn into_proto(self) -> proto_def::ExtendAccountEvent {
            proto_def::ExtendAccountEvent {
                timestamp: self.timestamp,
                account: self.account.to_string(),
                user: self.user.to_string(),
                current_size: self.current_size,
                new_size: self.new_size,
            }
        }
    }
    use crate::types::SellEvent;
    impl IntoProto<proto_def::SellEvent> for SellEvent {
        fn into_proto(self) -> proto_def::SellEvent {
            proto_def::SellEvent {
                timestamp: self.timestamp,
                base_amount_in: self.base_amount_in,
                min_quote_amount_out: self.min_quote_amount_out,
                user_base_token_reserves: self.user_base_token_reserves,
                user_quote_token_reserves: self.user_quote_token_reserves,
                pool_base_token_reserves: self.pool_base_token_reserves,
                pool_quote_token_reserves: self.pool_quote_token_reserves,
                quote_amount_out: self.quote_amount_out,
                lp_fee_basis_points: self.lp_fee_basis_points,
                lp_fee: self.lp_fee,
                protocol_fee_basis_points: self.protocol_fee_basis_points,
                protocol_fee: self.protocol_fee,
                quote_amount_out_without_lp_fee: self.quote_amount_out_without_lp_fee,
                user_quote_amount_out: self.user_quote_amount_out,
                pool: self.pool.to_string(),
                user: self.user.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                protocol_fee_recipient: self.protocol_fee_recipient.to_string(),
                protocol_fee_recipient_token_account: self
                    .protocol_fee_recipient_token_account
                    .to_string(),
                coin_creator: self.coin_creator.to_string(),
                coin_creator_fee_basis_points: self.coin_creator_fee_basis_points,
                coin_creator_fee: self.coin_creator_fee,
            }
        }
    }
    use crate::types::SetBondingCurveCoinCreatorEvent;
    impl IntoProto<proto_def::SetBondingCurveCoinCreatorEvent> for SetBondingCurveCoinCreatorEvent {
        fn into_proto(self) -> proto_def::SetBondingCurveCoinCreatorEvent {
            proto_def::SetBondingCurveCoinCreatorEvent {
                timestamp: self.timestamp,
                base_mint: self.base_mint.to_string(),
                pool: self.pool.to_string(),
                bonding_curve: self.bonding_curve.to_string(),
                coin_creator: self.coin_creator.to_string(),
            }
        }
    }
    use crate::types::SetMetaplexCoinCreatorEvent;
    impl IntoProto<proto_def::SetMetaplexCoinCreatorEvent> for SetMetaplexCoinCreatorEvent {
        fn into_proto(self) -> proto_def::SetMetaplexCoinCreatorEvent {
            proto_def::SetMetaplexCoinCreatorEvent {
                timestamp: self.timestamp,
                base_mint: self.base_mint.to_string(),
                pool: self.pool.to_string(),
                metadata: self.metadata.to_string(),
                coin_creator: self.coin_creator.to_string(),
            }
        }
    }
    use crate::types::UpdateAdminEvent;
    impl IntoProto<proto_def::UpdateAdminEvent> for UpdateAdminEvent {
        fn into_proto(self) -> proto_def::UpdateAdminEvent {
            proto_def::UpdateAdminEvent {
                timestamp: self.timestamp,
                admin: self.admin.to_string(),
                new_admin: self.new_admin.to_string(),
            }
        }
    }
    use crate::types::UpdateFeeConfigEvent;
    impl IntoProto<proto_def::UpdateFeeConfigEvent> for UpdateFeeConfigEvent {
        fn into_proto(self) -> proto_def::UpdateFeeConfigEvent {
            proto_def::UpdateFeeConfigEvent {
                timestamp: self.timestamp,
                admin: self.admin.to_string(),
                lp_fee_basis_points: self.lp_fee_basis_points,
                protocol_fee_basis_points: self.protocol_fee_basis_points,
                protocol_fee_recipients: self
                    .protocol_fee_recipients
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
                coin_creator_fee_basis_points: self.coin_creator_fee_basis_points,
            }
        }
    }
    use crate::types::WithdrawEvent;
    impl IntoProto<proto_def::WithdrawEvent> for WithdrawEvent {
        fn into_proto(self) -> proto_def::WithdrawEvent {
            proto_def::WithdrawEvent {
                timestamp: self.timestamp,
                lp_token_amount_in: self.lp_token_amount_in,
                min_base_amount_out: self.min_base_amount_out,
                min_quote_amount_out: self.min_quote_amount_out,
                user_base_token_reserves: self.user_base_token_reserves,
                user_quote_token_reserves: self.user_quote_token_reserves,
                pool_base_token_reserves: self.pool_base_token_reserves,
                pool_quote_token_reserves: self.pool_quote_token_reserves,
                base_amount_out: self.base_amount_out,
                quote_amount_out: self.quote_amount_out,
                lp_mint_supply: self.lp_mint_supply,
                pool: self.pool.to_string(),
                user: self.user.to_string(),
                user_base_token_account: self.user_base_token_account.to_string(),
                user_quote_token_account: self.user_quote_token_account.to_string(),
                user_pool_token_account: self.user_pool_token_account.to_string(),
            }
        }
    }
}
