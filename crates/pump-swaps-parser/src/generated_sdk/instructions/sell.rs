//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct Sell {
    pub pool: solana_program::pubkey::Pubkey,

    pub user: solana_program::pubkey::Pubkey,

    pub global_config: solana_program::pubkey::Pubkey,

    pub base_mint: solana_program::pubkey::Pubkey,

    pub quote_mint: solana_program::pubkey::Pubkey,

    pub user_base_token_account: solana_program::pubkey::Pubkey,

    pub user_quote_token_account: solana_program::pubkey::Pubkey,

    pub pool_base_token_account: solana_program::pubkey::Pubkey,

    pub pool_quote_token_account: solana_program::pubkey::Pubkey,

    pub protocol_fee_recipient: solana_program::pubkey::Pubkey,

    pub protocol_fee_recipient_token_account: solana_program::pubkey::Pubkey,

    pub base_token_program: solana_program::pubkey::Pubkey,

    pub quote_token_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl Sell {
    pub fn instruction(
        &self,
        args: SellInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SellInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(17 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_base_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_quote_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_base_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_quote_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.protocol_fee_recipient,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_fee_recipient_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SellInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::PUMP_SWAP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SellInstructionData {
    discriminator: [u8; 8],
}

impl SellInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [51, 230, 133, 164, 1, 127, 131, 173],
        }
    }
}

impl Default for SellInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SellInstructionArgs {
    pub base_amount_in: u64,
    pub min_quote_amount_out: u64,
}

/// Instruction builder for `Sell`.
///
/// ### Accounts:
///
///   0. `[]` pool
///   1. `[writable, signer]` user
///   2. `[]` global_config
///   3. `[]` base_mint
///   4. `[]` quote_mint
///   5. `[writable]` user_base_token_account
///   6. `[writable]` user_quote_token_account
///   7. `[writable]` pool_base_token_account
///   8. `[writable]` pool_quote_token_account
///   9. `[]` protocol_fee_recipient
///   10. `[writable]` protocol_fee_recipient_token_account
///   11. `[]` base_token_program
///   12. `[]` quote_token_program
///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   14. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   15. `[]` event_authority
///   16. `[]` program
#[derive(Clone, Debug, Default)]
pub struct SellBuilder {
    pool: Option<solana_program::pubkey::Pubkey>,
    user: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    base_mint: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    user_base_token_account: Option<solana_program::pubkey::Pubkey>,
    user_quote_token_account: Option<solana_program::pubkey::Pubkey>,
    pool_base_token_account: Option<solana_program::pubkey::Pubkey>,
    pool_quote_token_account: Option<solana_program::pubkey::Pubkey>,
    protocol_fee_recipient: Option<solana_program::pubkey::Pubkey>,
    protocol_fee_recipient_token_account: Option<solana_program::pubkey::Pubkey>,
    base_token_program: Option<solana_program::pubkey::Pubkey>,
    quote_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    base_amount_in: Option<u64>,
    min_quote_amount_out: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SellBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user = Some(user);
        self
    }

    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_mint = Some(base_mint);
        self
    }

    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn user_base_token_account(
        &mut self,
        user_base_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_base_token_account = Some(user_base_token_account);
        self
    }

    #[inline(always)]
    pub fn user_quote_token_account(
        &mut self,
        user_quote_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_quote_token_account = Some(user_quote_token_account);
        self
    }

    #[inline(always)]
    pub fn pool_base_token_account(
        &mut self,
        pool_base_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_base_token_account = Some(pool_base_token_account);
        self
    }

    #[inline(always)]
    pub fn pool_quote_token_account(
        &mut self,
        pool_quote_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_quote_token_account = Some(pool_quote_token_account);
        self
    }

    #[inline(always)]
    pub fn protocol_fee_recipient(
        &mut self,
        protocol_fee_recipient: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_fee_recipient = Some(protocol_fee_recipient);
        self
    }

    #[inline(always)]
    pub fn protocol_fee_recipient_token_account(
        &mut self,
        protocol_fee_recipient_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_fee_recipient_token_account = Some(protocol_fee_recipient_token_account);
        self
    }

    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_token_program = Some(base_token_program);
        self
    }

    #[inline(always)]
    pub fn quote_token_program(
        &mut self,
        quote_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.quote_token_program = Some(quote_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn base_amount_in(&mut self, base_amount_in: u64) -> &mut Self {
        self.base_amount_in = Some(base_amount_in);
        self
    }

    #[inline(always)]
    pub fn min_quote_amount_out(&mut self, min_quote_amount_out: u64) -> &mut Self {
        self.min_quote_amount_out = Some(min_quote_amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Sell {
            pool: self.pool.expect("pool is not set"),
            user: self.user.expect("user is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            base_mint: self.base_mint.expect("base_mint is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            user_base_token_account: self
                .user_base_token_account
                .expect("user_base_token_account is not set"),
            user_quote_token_account: self
                .user_quote_token_account
                .expect("user_quote_token_account is not set"),
            pool_base_token_account: self
                .pool_base_token_account
                .expect("pool_base_token_account is not set"),
            pool_quote_token_account: self
                .pool_quote_token_account
                .expect("pool_quote_token_account is not set"),
            protocol_fee_recipient: self
                .protocol_fee_recipient
                .expect("protocol_fee_recipient is not set"),
            protocol_fee_recipient_token_account: self
                .protocol_fee_recipient_token_account
                .expect("protocol_fee_recipient_token_account is not set"),
            base_token_program: self
                .base_token_program
                .expect("base_token_program is not set"),
            quote_token_program: self
                .quote_token_program
                .expect("quote_token_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = SellInstructionArgs {
            base_amount_in: self
                .base_amount_in
                .clone()
                .expect("base_amount_in is not set"),
            min_quote_amount_out: self
                .min_quote_amount_out
                .clone()
                .expect("min_quote_amount_out is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `sell` CPI accounts.
pub struct SellCpiAccounts<'a, 'b> {
    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_base_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_quote_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_base_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_quote_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee_recipient: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee_recipient_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `sell` CPI instruction.
pub struct SellCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_base_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_quote_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_base_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_quote_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee_recipient: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee_recipient_token_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SellInstructionArgs,
}

impl<'a, 'b> SellCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SellCpiAccounts<'a, 'b>,
        args: SellInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            pool: accounts.pool,
            user: accounts.user,
            global_config: accounts.global_config,
            base_mint: accounts.base_mint,
            quote_mint: accounts.quote_mint,
            user_base_token_account: accounts.user_base_token_account,
            user_quote_token_account: accounts.user_quote_token_account,
            pool_base_token_account: accounts.pool_base_token_account,
            pool_quote_token_account: accounts.pool_quote_token_account,
            protocol_fee_recipient: accounts.protocol_fee_recipient,
            protocol_fee_recipient_token_account: accounts.protocol_fee_recipient_token_account,
            base_token_program: accounts.base_token_program,
            quote_token_program: accounts.quote_token_program,
            system_program: accounts.system_program,
            associated_token_program: accounts.associated_token_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(17 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_base_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_quote_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_base_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_quote_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.protocol_fee_recipient.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_fee_recipient_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SellInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::PUMP_SWAP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(18 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.user.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.base_mint.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.user_base_token_account.clone());
        account_infos.push(self.user_quote_token_account.clone());
        account_infos.push(self.pool_base_token_account.clone());
        account_infos.push(self.pool_quote_token_account.clone());
        account_infos.push(self.protocol_fee_recipient.clone());
        account_infos.push(self.protocol_fee_recipient_token_account.clone());
        account_infos.push(self.base_token_program.clone());
        account_infos.push(self.quote_token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Sell` via CPI.
///
/// ### Accounts:
///
///   0. `[]` pool
///   1. `[writable, signer]` user
///   2. `[]` global_config
///   3. `[]` base_mint
///   4. `[]` quote_mint
///   5. `[writable]` user_base_token_account
///   6. `[writable]` user_quote_token_account
///   7. `[writable]` pool_base_token_account
///   8. `[writable]` pool_quote_token_account
///   9. `[]` protocol_fee_recipient
///   10. `[writable]` protocol_fee_recipient_token_account
///   11. `[]` base_token_program
///   12. `[]` quote_token_program
///   13. `[]` system_program
///   14. `[]` associated_token_program
///   15. `[]` event_authority
///   16. `[]` program
#[derive(Clone, Debug)]
pub struct SellCpiBuilder<'a, 'b> {
    instruction: Box<SellCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SellCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SellCpiBuilderInstruction {
            __program: program,
            pool: None,
            user: None,
            global_config: None,
            base_mint: None,
            quote_mint: None,
            user_base_token_account: None,
            user_quote_token_account: None,
            pool_base_token_account: None,
            pool_quote_token_account: None,
            protocol_fee_recipient: None,
            protocol_fee_recipient_token_account: None,
            base_token_program: None,
            quote_token_program: None,
            system_program: None,
            associated_token_program: None,
            event_authority: None,
            program: None,
            base_amount_in: None,
            min_quote_amount_out: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.user = Some(user);
        self
    }

    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    #[inline(always)]
    pub fn base_mint(
        &mut self,
        base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_mint = Some(base_mint);
        self
    }

    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn user_base_token_account(
        &mut self,
        user_base_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_base_token_account = Some(user_base_token_account);
        self
    }

    #[inline(always)]
    pub fn user_quote_token_account(
        &mut self,
        user_quote_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_quote_token_account = Some(user_quote_token_account);
        self
    }

    #[inline(always)]
    pub fn pool_base_token_account(
        &mut self,
        pool_base_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_base_token_account = Some(pool_base_token_account);
        self
    }

    #[inline(always)]
    pub fn pool_quote_token_account(
        &mut self,
        pool_quote_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_quote_token_account = Some(pool_quote_token_account);
        self
    }

    #[inline(always)]
    pub fn protocol_fee_recipient(
        &mut self,
        protocol_fee_recipient: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_fee_recipient = Some(protocol_fee_recipient);
        self
    }

    #[inline(always)]
    pub fn protocol_fee_recipient_token_account(
        &mut self,
        protocol_fee_recipient_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_fee_recipient_token_account =
            Some(protocol_fee_recipient_token_account);
        self
    }

    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_token_program = Some(base_token_program);
        self
    }

    #[inline(always)]
    pub fn quote_token_program(
        &mut self,
        quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_token_program = Some(quote_token_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn base_amount_in(&mut self, base_amount_in: u64) -> &mut Self {
        self.instruction.base_amount_in = Some(base_amount_in);
        self
    }

    #[inline(always)]
    pub fn min_quote_amount_out(&mut self, min_quote_amount_out: u64) -> &mut Self {
        self.instruction.min_quote_amount_out = Some(min_quote_amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SellInstructionArgs {
            base_amount_in: self
                .instruction
                .base_amount_in
                .clone()
                .expect("base_amount_in is not set"),
            min_quote_amount_out: self
                .instruction
                .min_quote_amount_out
                .clone()
                .expect("min_quote_amount_out is not set"),
        };
        let instruction = SellCpi {
            __program: self.instruction.__program,

            pool: self.instruction.pool.expect("pool is not set"),

            user: self.instruction.user.expect("user is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            base_mint: self.instruction.base_mint.expect("base_mint is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            user_base_token_account: self
                .instruction
                .user_base_token_account
                .expect("user_base_token_account is not set"),

            user_quote_token_account: self
                .instruction
                .user_quote_token_account
                .expect("user_quote_token_account is not set"),

            pool_base_token_account: self
                .instruction
                .pool_base_token_account
                .expect("pool_base_token_account is not set"),

            pool_quote_token_account: self
                .instruction
                .pool_quote_token_account
                .expect("pool_quote_token_account is not set"),

            protocol_fee_recipient: self
                .instruction
                .protocol_fee_recipient
                .expect("protocol_fee_recipient is not set"),

            protocol_fee_recipient_token_account: self
                .instruction
                .protocol_fee_recipient_token_account
                .expect("protocol_fee_recipient_token_account is not set"),

            base_token_program: self
                .instruction
                .base_token_program
                .expect("base_token_program is not set"),

            quote_token_program: self
                .instruction
                .quote_token_program
                .expect("quote_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SellCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_base_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_quote_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_base_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_quote_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_fee_recipient: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_fee_recipient_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_amount_in: Option<u64>,
    min_quote_amount_out: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
