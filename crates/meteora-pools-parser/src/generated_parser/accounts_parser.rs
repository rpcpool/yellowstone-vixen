//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{Config, LockEscrow, Pool},
    ID,
};

/// Amm Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum AmmProgramState {
    Config(Config),
    LockEscrow(LockEscrow),
    Pool(Pool),
}

impl AmmProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [155, 12, 170, 224, 30, 250, 204, 130] => {
                Ok(AmmProgramState::Config(Config::from_bytes(data_bytes)?))
            },
            [190, 106, 121, 6, 200, 182, 21, 75] => Ok(AmmProgramState::LockEscrow(
                LockEscrow::from_bytes(data_bytes)?,
            )),
            [241, 154, 109, 4, 17, 177, 109, 188] => {
                Ok(AmmProgramState::Pool(Pool::from_bytes(data_bytes)?))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = AmmProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "amm::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        AmmProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, AmmProgramState, Config};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::Config> for Config {
        fn into_proto(self) -> proto_def::Config {
            proto_def::Config {
                pool_fees: Some(self.pool_fees.into_proto()),
                activation_duration: self.activation_duration,
                vault_config_key: self.vault_config_key.to_string(),
                pool_creator_authority: self.pool_creator_authority.to_string(),
                activation_type: self.activation_type.into(),
                partner_fee_numerator: self.partner_fee_numerator,
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::LockEscrow;
    impl IntoProto<proto_def::LockEscrow> for LockEscrow {
        fn into_proto(self) -> proto_def::LockEscrow {
            proto_def::LockEscrow {
                pool: self.pool.to_string(),
                owner: self.owner.to_string(),
                escrow_vault: self.escrow_vault.to_string(),
                bump: self.bump.into(),
                total_locked_amount: self.total_locked_amount,
                lp_per_token: self.lp_per_token.to_string(),
                unclaimed_fee_pending: self.unclaimed_fee_pending,
                a_fee: self.a_fee,
                b_fee: self.b_fee,
            }
        }
    }
    use super::Pool;
    impl IntoProto<proto_def::Pool> for Pool {
        fn into_proto(self) -> proto_def::Pool {
            proto_def::Pool {
                lp_mint: self.lp_mint.to_string(),
                token_a_mint: self.token_a_mint.to_string(),
                token_b_mint: self.token_b_mint.to_string(),
                a_vault: self.a_vault.to_string(),
                b_vault: self.b_vault.to_string(),
                a_vault_lp: self.a_vault_lp.to_string(),
                b_vault_lp: self.b_vault_lp.to_string(),
                a_vault_lp_bump: self.a_vault_lp_bump.into(),
                enabled: self.enabled,
                protocol_token_a_fee: self.protocol_token_a_fee.to_string(),
                protocol_token_b_fee: self.protocol_token_b_fee.to_string(),
                fee_last_updated_at: self.fee_last_updated_at,
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
                fees: Some(self.fees.into_proto()),
                pool_type: self.pool_type as i32,
                stake: self.stake.to_string(),
                total_locked_lp: self.total_locked_lp,
                bootstrapping: Some(self.bootstrapping.into_proto()),
                partner_info: Some(self.partner_info.into_proto()),
                padding: Some(self.padding.into_proto()),
                curve_type: Some(self.curve_type.into_proto()),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for AmmProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                AmmProgramState::Config(data) => {
                    proto_def::program_state::StateOneof::Config(data.into_proto())
                },
                AmmProgramState::LockEscrow(data) => {
                    proto_def::program_state::StateOneof::LockEscrow(data.into_proto())
                },
                AmmProgramState::Pool(data) => {
                    proto_def::program_state::StateOneof::Pool(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
