//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct CreateConfig {
    pub config: solana_program::pubkey::Pubkey,

    pub admin: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl CreateConfig {
    pub fn instruction(
        &self,
        args: CreateConfigInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateConfigInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::AMM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigInstructionData {
    discriminator: [u8; 8],
}

impl CreateConfigInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [201, 207, 243, 114, 75, 111, 47, 189],
        }
    }
}

impl Default for CreateConfigInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigInstructionArgs {
    pub trade_fee_numerator: u64,
    pub protocol_trade_fee_numerator: u64,
    pub activation_duration: u64,
    pub vault_config_key: Pubkey,
    pub pool_creator_authority: Pubkey,
    pub activation_type: u8,
    pub index: u64,
    pub partner_fee_numerator: u64,
}

/// Instruction builder for `CreateConfig`.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[writable, signer]` admin
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateConfigBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    trade_fee_numerator: Option<u64>,
    protocol_trade_fee_numerator: Option<u64>,
    activation_duration: Option<u64>,
    vault_config_key: Option<Pubkey>,
    pool_creator_authority: Option<Pubkey>,
    activation_type: Option<u8>,
    index: Option<u64>,
    partner_fee_numerator: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateConfigBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn trade_fee_numerator(&mut self, trade_fee_numerator: u64) -> &mut Self {
        self.trade_fee_numerator = Some(trade_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn protocol_trade_fee_numerator(&mut self, protocol_trade_fee_numerator: u64) -> &mut Self {
        self.protocol_trade_fee_numerator = Some(protocol_trade_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn activation_duration(&mut self, activation_duration: u64) -> &mut Self {
        self.activation_duration = Some(activation_duration);
        self
    }

    #[inline(always)]
    pub fn vault_config_key(&mut self, vault_config_key: Pubkey) -> &mut Self {
        self.vault_config_key = Some(vault_config_key);
        self
    }

    #[inline(always)]
    pub fn pool_creator_authority(&mut self, pool_creator_authority: Pubkey) -> &mut Self {
        self.pool_creator_authority = Some(pool_creator_authority);
        self
    }

    #[inline(always)]
    pub fn activation_type(&mut self, activation_type: u8) -> &mut Self {
        self.activation_type = Some(activation_type);
        self
    }

    #[inline(always)]
    pub fn index(&mut self, index: u64) -> &mut Self {
        self.index = Some(index);
        self
    }

    #[inline(always)]
    pub fn partner_fee_numerator(&mut self, partner_fee_numerator: u64) -> &mut Self {
        self.partner_fee_numerator = Some(partner_fee_numerator);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateConfig {
            config: self.config.expect("config is not set"),
            admin: self.admin.expect("admin is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = CreateConfigInstructionArgs {
            trade_fee_numerator: self
                .trade_fee_numerator
                .clone()
                .expect("trade_fee_numerator is not set"),
            protocol_trade_fee_numerator: self
                .protocol_trade_fee_numerator
                .clone()
                .expect("protocol_trade_fee_numerator is not set"),
            activation_duration: self
                .activation_duration
                .clone()
                .expect("activation_duration is not set"),
            vault_config_key: self
                .vault_config_key
                .clone()
                .expect("vault_config_key is not set"),
            pool_creator_authority: self
                .pool_creator_authority
                .clone()
                .expect("pool_creator_authority is not set"),
            activation_type: self
                .activation_type
                .clone()
                .expect("activation_type is not set"),
            index: self.index.clone().expect("index is not set"),
            partner_fee_numerator: self
                .partner_fee_numerator
                .clone()
                .expect("partner_fee_numerator is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_config` CPI accounts.
pub struct CreateConfigCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_config` CPI instruction.
pub struct CreateConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub admin: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateConfigInstructionArgs,
}

impl<'a, 'b> CreateConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateConfigCpiAccounts<'a, 'b>,
        args: CreateConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            admin: accounts.admin,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::AMM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[writable, signer]` admin
///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateConfigCpiBuilder<'a, 'b> {
    instruction: Box<CreateConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateConfigCpiBuilderInstruction {
            __program: program,
            config: None,
            admin: None,
            system_program: None,
            trade_fee_numerator: None,
            protocol_trade_fee_numerator: None,
            activation_duration: None,
            vault_config_key: None,
            pool_creator_authority: None,
            activation_type: None,
            index: None,
            partner_fee_numerator: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn trade_fee_numerator(&mut self, trade_fee_numerator: u64) -> &mut Self {
        self.instruction.trade_fee_numerator = Some(trade_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn protocol_trade_fee_numerator(&mut self, protocol_trade_fee_numerator: u64) -> &mut Self {
        self.instruction.protocol_trade_fee_numerator = Some(protocol_trade_fee_numerator);
        self
    }

    #[inline(always)]
    pub fn activation_duration(&mut self, activation_duration: u64) -> &mut Self {
        self.instruction.activation_duration = Some(activation_duration);
        self
    }

    #[inline(always)]
    pub fn vault_config_key(&mut self, vault_config_key: Pubkey) -> &mut Self {
        self.instruction.vault_config_key = Some(vault_config_key);
        self
    }

    #[inline(always)]
    pub fn pool_creator_authority(&mut self, pool_creator_authority: Pubkey) -> &mut Self {
        self.instruction.pool_creator_authority = Some(pool_creator_authority);
        self
    }

    #[inline(always)]
    pub fn activation_type(&mut self, activation_type: u8) -> &mut Self {
        self.instruction.activation_type = Some(activation_type);
        self
    }

    #[inline(always)]
    pub fn index(&mut self, index: u64) -> &mut Self {
        self.instruction.index = Some(index);
        self
    }

    #[inline(always)]
    pub fn partner_fee_numerator(&mut self, partner_fee_numerator: u64) -> &mut Self {
        self.instruction.partner_fee_numerator = Some(partner_fee_numerator);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateConfigInstructionArgs {
            trade_fee_numerator: self
                .instruction
                .trade_fee_numerator
                .clone()
                .expect("trade_fee_numerator is not set"),
            protocol_trade_fee_numerator: self
                .instruction
                .protocol_trade_fee_numerator
                .clone()
                .expect("protocol_trade_fee_numerator is not set"),
            activation_duration: self
                .instruction
                .activation_duration
                .clone()
                .expect("activation_duration is not set"),
            vault_config_key: self
                .instruction
                .vault_config_key
                .clone()
                .expect("vault_config_key is not set"),
            pool_creator_authority: self
                .instruction
                .pool_creator_authority
                .clone()
                .expect("pool_creator_authority is not set"),
            activation_type: self
                .instruction
                .activation_type
                .clone()
                .expect("activation_type is not set"),
            index: self.instruction.index.clone().expect("index is not set"),
            partner_fee_numerator: self
                .instruction
                .partner_fee_numerator
                .clone()
                .expect("partner_fee_numerator is not set"),
        };
        let instruction = CreateConfigCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    trade_fee_numerator: Option<u64>,
    protocol_trade_fee_numerator: Option<u64>,
    activation_duration: Option<u64>,
    vault_config_key: Option<Pubkey>,
    pool_creator_authority: Option<Pubkey>,
    activation_type: Option<u8>,
    index: Option<u64>,
    partner_fee_numerator: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
