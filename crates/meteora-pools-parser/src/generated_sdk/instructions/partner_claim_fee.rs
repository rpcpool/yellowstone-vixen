//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct PartnerClaimFee {
    /// Pool account (PDA)
    pub pool: solana_program::pubkey::Pubkey,

    pub a_vault_lp: solana_program::pubkey::Pubkey,

    pub protocol_token_a_fee: solana_program::pubkey::Pubkey,

    pub protocol_token_b_fee: solana_program::pubkey::Pubkey,

    pub partner_token_a: solana_program::pubkey::Pubkey,

    pub partner_token_b: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub partner_authority: solana_program::pubkey::Pubkey,
}

impl PartnerClaimFee {
    pub fn instruction(
        &self,
        args: PartnerClaimFeeInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: PartnerClaimFeeInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.a_vault_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_token_a_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_token_b_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.partner_token_a,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.partner_token_b,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.partner_authority,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&PartnerClaimFeeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::AMM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PartnerClaimFeeInstructionData {
    discriminator: [u8; 8],
}

impl PartnerClaimFeeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [57, 53, 176, 30, 123, 70, 52, 64],
        }
    }
}

impl Default for PartnerClaimFeeInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PartnerClaimFeeInstructionArgs {
    pub max_amount_a: u64,
    pub max_amount_b: u64,
}

/// Instruction builder for `PartnerClaimFee`.
///
/// ### Accounts:
///
///   0. `[writable]` pool
///   1. `[]` a_vault_lp
///   2. `[writable]` protocol_token_a_fee
///   3. `[writable]` protocol_token_b_fee
///   4. `[writable]` partner_token_a
///   5. `[writable]` partner_token_b
///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   7. `[signer]` partner_authority
#[derive(Clone, Debug, Default)]
pub struct PartnerClaimFeeBuilder {
    pool: Option<solana_program::pubkey::Pubkey>,
    a_vault_lp: Option<solana_program::pubkey::Pubkey>,
    protocol_token_a_fee: Option<solana_program::pubkey::Pubkey>,
    protocol_token_b_fee: Option<solana_program::pubkey::Pubkey>,
    partner_token_a: Option<solana_program::pubkey::Pubkey>,
    partner_token_b: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    partner_authority: Option<solana_program::pubkey::Pubkey>,
    max_amount_a: Option<u64>,
    max_amount_b: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl PartnerClaimFeeBuilder {
    pub fn new() -> Self { Self::default() }

    /// Pool account (PDA)
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn a_vault_lp(&mut self, a_vault_lp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.a_vault_lp = Some(a_vault_lp);
        self
    }

    #[inline(always)]
    pub fn protocol_token_a_fee(
        &mut self,
        protocol_token_a_fee: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_token_a_fee = Some(protocol_token_a_fee);
        self
    }

    #[inline(always)]
    pub fn protocol_token_b_fee(
        &mut self,
        protocol_token_b_fee: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_token_b_fee = Some(protocol_token_b_fee);
        self
    }

    #[inline(always)]
    pub fn partner_token_a(
        &mut self,
        partner_token_a: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.partner_token_a = Some(partner_token_a);
        self
    }

    #[inline(always)]
    pub fn partner_token_b(
        &mut self,
        partner_token_b: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.partner_token_b = Some(partner_token_b);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn partner_authority(
        &mut self,
        partner_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.partner_authority = Some(partner_authority);
        self
    }

    #[inline(always)]
    pub fn max_amount_a(&mut self, max_amount_a: u64) -> &mut Self {
        self.max_amount_a = Some(max_amount_a);
        self
    }

    #[inline(always)]
    pub fn max_amount_b(&mut self, max_amount_b: u64) -> &mut Self {
        self.max_amount_b = Some(max_amount_b);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = PartnerClaimFee {
            pool: self.pool.expect("pool is not set"),
            a_vault_lp: self.a_vault_lp.expect("a_vault_lp is not set"),
            protocol_token_a_fee: self
                .protocol_token_a_fee
                .expect("protocol_token_a_fee is not set"),
            protocol_token_b_fee: self
                .protocol_token_b_fee
                .expect("protocol_token_b_fee is not set"),
            partner_token_a: self.partner_token_a.expect("partner_token_a is not set"),
            partner_token_b: self.partner_token_b.expect("partner_token_b is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            partner_authority: self
                .partner_authority
                .expect("partner_authority is not set"),
        };
        let args = PartnerClaimFeeInstructionArgs {
            max_amount_a: self.max_amount_a.clone().expect("max_amount_a is not set"),
            max_amount_b: self.max_amount_b.clone().expect("max_amount_b is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `partner_claim_fee` CPI accounts.
pub struct PartnerClaimFeeCpiAccounts<'a, 'b> {
    /// Pool account (PDA)
    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_a_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_b_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_token_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_token_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_authority: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `partner_claim_fee` CPI instruction.
pub struct PartnerClaimFeeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pool account (PDA)
    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_a_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_b_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_token_a: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_token_b: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub partner_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: PartnerClaimFeeInstructionArgs,
}

impl<'a, 'b> PartnerClaimFeeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: PartnerClaimFeeCpiAccounts<'a, 'b>,
        args: PartnerClaimFeeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            pool: accounts.pool,
            a_vault_lp: accounts.a_vault_lp,
            protocol_token_a_fee: accounts.protocol_token_a_fee,
            protocol_token_b_fee: accounts.protocol_token_b_fee,
            partner_token_a: accounts.partner_token_a,
            partner_token_b: accounts.partner_token_b,
            token_program: accounts.token_program,
            partner_authority: accounts.partner_authority,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.a_vault_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_token_a_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_token_b_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.partner_token_a.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.partner_token_b.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.partner_authority.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&PartnerClaimFeeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::AMM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.a_vault_lp.clone());
        account_infos.push(self.protocol_token_a_fee.clone());
        account_infos.push(self.protocol_token_b_fee.clone());
        account_infos.push(self.partner_token_a.clone());
        account_infos.push(self.partner_token_b.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.partner_authority.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `PartnerClaimFee` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` pool
///   1. `[]` a_vault_lp
///   2. `[writable]` protocol_token_a_fee
///   3. `[writable]` protocol_token_b_fee
///   4. `[writable]` partner_token_a
///   5. `[writable]` partner_token_b
///   6. `[]` token_program
///   7. `[signer]` partner_authority
#[derive(Clone, Debug)]
pub struct PartnerClaimFeeCpiBuilder<'a, 'b> {
    instruction: Box<PartnerClaimFeeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> PartnerClaimFeeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(PartnerClaimFeeCpiBuilderInstruction {
            __program: program,
            pool: None,
            a_vault_lp: None,
            protocol_token_a_fee: None,
            protocol_token_b_fee: None,
            partner_token_a: None,
            partner_token_b: None,
            token_program: None,
            partner_authority: None,
            max_amount_a: None,
            max_amount_b: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Pool account (PDA)
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn a_vault_lp(
        &mut self,
        a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault_lp = Some(a_vault_lp);
        self
    }

    #[inline(always)]
    pub fn protocol_token_a_fee(
        &mut self,
        protocol_token_a_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_token_a_fee = Some(protocol_token_a_fee);
        self
    }

    #[inline(always)]
    pub fn protocol_token_b_fee(
        &mut self,
        protocol_token_b_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_token_b_fee = Some(protocol_token_b_fee);
        self
    }

    #[inline(always)]
    pub fn partner_token_a(
        &mut self,
        partner_token_a: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.partner_token_a = Some(partner_token_a);
        self
    }

    #[inline(always)]
    pub fn partner_token_b(
        &mut self,
        partner_token_b: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.partner_token_b = Some(partner_token_b);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn partner_authority(
        &mut self,
        partner_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.partner_authority = Some(partner_authority);
        self
    }

    #[inline(always)]
    pub fn max_amount_a(&mut self, max_amount_a: u64) -> &mut Self {
        self.instruction.max_amount_a = Some(max_amount_a);
        self
    }

    #[inline(always)]
    pub fn max_amount_b(&mut self, max_amount_b: u64) -> &mut Self {
        self.instruction.max_amount_b = Some(max_amount_b);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = PartnerClaimFeeInstructionArgs {
            max_amount_a: self
                .instruction
                .max_amount_a
                .clone()
                .expect("max_amount_a is not set"),
            max_amount_b: self
                .instruction
                .max_amount_b
                .clone()
                .expect("max_amount_b is not set"),
        };
        let instruction = PartnerClaimFeeCpi {
            __program: self.instruction.__program,

            pool: self.instruction.pool.expect("pool is not set"),

            a_vault_lp: self.instruction.a_vault_lp.expect("a_vault_lp is not set"),

            protocol_token_a_fee: self
                .instruction
                .protocol_token_a_fee
                .expect("protocol_token_a_fee is not set"),

            protocol_token_b_fee: self
                .instruction
                .protocol_token_b_fee
                .expect("protocol_token_b_fee is not set"),

            partner_token_a: self
                .instruction
                .partner_token_a
                .expect("partner_token_a is not set"),

            partner_token_b: self
                .instruction
                .partner_token_b
                .expect("partner_token_b is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            partner_authority: self
                .instruction
                .partner_authority
                .expect("partner_authority is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct PartnerClaimFeeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_token_a_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_token_b_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    partner_token_a: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    partner_token_b: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    partner_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    max_amount_a: Option<u64>,
    max_amount_b: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
