//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct Lock {
    /// Pool account
    pub pool: solana_program::pubkey::Pubkey,
    /// LP token mint of the pool
    pub lp_mint: solana_program::pubkey::Pubkey,
    /// Lock account
    pub lock_escrow: solana_program::pubkey::Pubkey,
    /// Can be anyone
    pub owner: solana_program::pubkey::Pubkey,
    /// owner lp token account
    pub source_tokens: solana_program::pubkey::Pubkey,
    /// Escrow vault
    pub escrow_vault: solana_program::pubkey::Pubkey,
    /// Token program.
    pub token_program: solana_program::pubkey::Pubkey,
    /// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
    pub a_vault: solana_program::pubkey::Pubkey,
    /// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
    pub b_vault: solana_program::pubkey::Pubkey,
    /// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    pub a_vault_lp: solana_program::pubkey::Pubkey,
    /// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    pub b_vault_lp: solana_program::pubkey::Pubkey,
    /// LP token mint of vault a
    pub a_vault_lp_mint: solana_program::pubkey::Pubkey,
    /// LP token mint of vault b
    pub b_vault_lp_mint: solana_program::pubkey::Pubkey,
}

impl Lock {
    pub fn instruction(
        &self,
        args: LockInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: LockInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lock_escrow,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.source_tokens,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.a_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.b_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.a_vault_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.b_vault_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.a_vault_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.b_vault_lp_mint,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&LockInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::AMM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LockInstructionData {
    discriminator: [u8; 8],
}

impl LockInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [21, 19, 208, 43, 237, 62, 255, 87],
        }
    }
}

impl Default for LockInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct LockInstructionArgs {
    pub max_amount: u64,
}

/// Instruction builder for `Lock`.
///
/// ### Accounts:
///
///   0. `[writable]` pool
///   1. `[]` lp_mint
///   2. `[writable]` lock_escrow
///   3. `[writable, signer]` owner
///   4. `[writable]` source_tokens
///   5. `[writable]` escrow_vault
///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   7. `[]` a_vault
///   8. `[]` b_vault
///   9. `[]` a_vault_lp
///   10. `[]` b_vault_lp
///   11. `[]` a_vault_lp_mint
///   12. `[]` b_vault_lp_mint
#[derive(Clone, Debug, Default)]
pub struct LockBuilder {
    pool: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    lock_escrow: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    source_tokens: Option<solana_program::pubkey::Pubkey>,
    escrow_vault: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    a_vault: Option<solana_program::pubkey::Pubkey>,
    b_vault: Option<solana_program::pubkey::Pubkey>,
    a_vault_lp: Option<solana_program::pubkey::Pubkey>,
    b_vault_lp: Option<solana_program::pubkey::Pubkey>,
    a_vault_lp_mint: Option<solana_program::pubkey::Pubkey>,
    b_vault_lp_mint: Option<solana_program::pubkey::Pubkey>,
    max_amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl LockBuilder {
    pub fn new() -> Self { Self::default() }

    /// Pool account
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    /// LP token mint of the pool
    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    /// Lock account
    #[inline(always)]
    pub fn lock_escrow(&mut self, lock_escrow: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lock_escrow = Some(lock_escrow);
        self
    }

    /// Can be anyone
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    /// owner lp token account
    #[inline(always)]
    pub fn source_tokens(&mut self, source_tokens: solana_program::pubkey::Pubkey) -> &mut Self {
        self.source_tokens = Some(source_tokens);
        self
    }

    /// Escrow vault
    #[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.escrow_vault = Some(escrow_vault);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// Token program.
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
    #[inline(always)]
    pub fn a_vault(&mut self, a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.a_vault = Some(a_vault);
        self
    }

    /// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
    #[inline(always)]
    pub fn b_vault(&mut self, b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.b_vault = Some(b_vault);
        self
    }

    /// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    #[inline(always)]
    pub fn a_vault_lp(&mut self, a_vault_lp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.a_vault_lp = Some(a_vault_lp);
        self
    }

    /// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    #[inline(always)]
    pub fn b_vault_lp(&mut self, b_vault_lp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.b_vault_lp = Some(b_vault_lp);
        self
    }

    /// LP token mint of vault a
    #[inline(always)]
    pub fn a_vault_lp_mint(
        &mut self,
        a_vault_lp_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.a_vault_lp_mint = Some(a_vault_lp_mint);
        self
    }

    /// LP token mint of vault b
    #[inline(always)]
    pub fn b_vault_lp_mint(
        &mut self,
        b_vault_lp_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.b_vault_lp_mint = Some(b_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn max_amount(&mut self, max_amount: u64) -> &mut Self {
        self.max_amount = Some(max_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Lock {
            pool: self.pool.expect("pool is not set"),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            lock_escrow: self.lock_escrow.expect("lock_escrow is not set"),
            owner: self.owner.expect("owner is not set"),
            source_tokens: self.source_tokens.expect("source_tokens is not set"),
            escrow_vault: self.escrow_vault.expect("escrow_vault is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            a_vault: self.a_vault.expect("a_vault is not set"),
            b_vault: self.b_vault.expect("b_vault is not set"),
            a_vault_lp: self.a_vault_lp.expect("a_vault_lp is not set"),
            b_vault_lp: self.b_vault_lp.expect("b_vault_lp is not set"),
            a_vault_lp_mint: self.a_vault_lp_mint.expect("a_vault_lp_mint is not set"),
            b_vault_lp_mint: self.b_vault_lp_mint.expect("b_vault_lp_mint is not set"),
        };
        let args = LockInstructionArgs {
            max_amount: self.max_amount.clone().expect("max_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `lock` CPI accounts.
pub struct LockCpiAccounts<'a, 'b> {
    /// Pool account
    pub pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token mint of the pool
    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Lock account
    pub lock_escrow: &'b solana_program::account_info::AccountInfo<'a>,
    /// Can be anyone
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// owner lp token account
    pub source_tokens: &'b solana_program::account_info::AccountInfo<'a>,
    /// Escrow vault
    pub escrow_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
    pub a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
    pub b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    pub a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    pub b_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token mint of vault a
    pub a_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token mint of vault b
    pub b_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `lock` CPI instruction.
pub struct LockCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pool account
    pub pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token mint of the pool
    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Lock account
    pub lock_escrow: &'b solana_program::account_info::AccountInfo<'a>,
    /// Can be anyone
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// owner lp token account
    pub source_tokens: &'b solana_program::account_info::AccountInfo<'a>,
    /// Escrow vault
    pub escrow_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
    pub a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
    pub b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    pub a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    pub b_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token mint of vault a
    pub a_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// LP token mint of vault b
    pub b_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: LockInstructionArgs,
}

impl<'a, 'b> LockCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: LockCpiAccounts<'a, 'b>,
        args: LockInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            pool: accounts.pool,
            lp_mint: accounts.lp_mint,
            lock_escrow: accounts.lock_escrow,
            owner: accounts.owner,
            source_tokens: accounts.source_tokens,
            escrow_vault: accounts.escrow_vault,
            token_program: accounts.token_program,
            a_vault: accounts.a_vault,
            b_vault: accounts.b_vault,
            a_vault_lp: accounts.a_vault_lp,
            b_vault_lp: accounts.b_vault_lp,
            a_vault_lp_mint: accounts.a_vault_lp_mint,
            b_vault_lp_mint: accounts.b_vault_lp_mint,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lock_escrow.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.source_tokens.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.a_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.b_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.a_vault_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.b_vault_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.a_vault_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.b_vault_lp_mint.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&LockInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::AMM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.lock_escrow.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.source_tokens.clone());
        account_infos.push(self.escrow_vault.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.a_vault.clone());
        account_infos.push(self.b_vault.clone());
        account_infos.push(self.a_vault_lp.clone());
        account_infos.push(self.b_vault_lp.clone());
        account_infos.push(self.a_vault_lp_mint.clone());
        account_infos.push(self.b_vault_lp_mint.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Lock` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` pool
///   1. `[]` lp_mint
///   2. `[writable]` lock_escrow
///   3. `[writable, signer]` owner
///   4. `[writable]` source_tokens
///   5. `[writable]` escrow_vault
///   6. `[]` token_program
///   7. `[]` a_vault
///   8. `[]` b_vault
///   9. `[]` a_vault_lp
///   10. `[]` b_vault_lp
///   11. `[]` a_vault_lp_mint
///   12. `[]` b_vault_lp_mint
#[derive(Clone, Debug)]
pub struct LockCpiBuilder<'a, 'b> {
    instruction: Box<LockCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LockCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(LockCpiBuilderInstruction {
            __program: program,
            pool: None,
            lp_mint: None,
            lock_escrow: None,
            owner: None,
            source_tokens: None,
            escrow_vault: None,
            token_program: None,
            a_vault: None,
            b_vault: None,
            a_vault_lp: None,
            b_vault_lp: None,
            a_vault_lp_mint: None,
            b_vault_lp_mint: None,
            max_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Pool account
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    /// LP token mint of the pool
    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    /// Lock account
    #[inline(always)]
    pub fn lock_escrow(
        &mut self,
        lock_escrow: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lock_escrow = Some(lock_escrow);
        self
    }

    /// Can be anyone
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    /// owner lp token account
    #[inline(always)]
    pub fn source_tokens(
        &mut self,
        source_tokens: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_tokens = Some(source_tokens);
        self
    }

    /// Escrow vault
    #[inline(always)]
    pub fn escrow_vault(
        &mut self,
        escrow_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow_vault = Some(escrow_vault);
        self
    }

    /// Token program.
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Vault account for token a. token a of the pool will be deposit / withdraw from this vault account.
    #[inline(always)]
    pub fn a_vault(
        &mut self,
        a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault = Some(a_vault);
        self
    }

    /// Vault account for token b. token b of the pool will be deposit / withdraw from this vault account.
    #[inline(always)]
    pub fn b_vault(
        &mut self,
        b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_vault = Some(b_vault);
        self
    }

    /// LP token account of vault A. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    #[inline(always)]
    pub fn a_vault_lp(
        &mut self,
        a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault_lp = Some(a_vault_lp);
        self
    }

    /// LP token account of vault B. Used to receive/burn the vault LP upon deposit/withdraw from the vault.
    #[inline(always)]
    pub fn b_vault_lp(
        &mut self,
        b_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_vault_lp = Some(b_vault_lp);
        self
    }

    /// LP token mint of vault a
    #[inline(always)]
    pub fn a_vault_lp_mint(
        &mut self,
        a_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault_lp_mint = Some(a_vault_lp_mint);
        self
    }

    /// LP token mint of vault b
    #[inline(always)]
    pub fn b_vault_lp_mint(
        &mut self,
        b_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_vault_lp_mint = Some(b_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn max_amount(&mut self, max_amount: u64) -> &mut Self {
        self.instruction.max_amount = Some(max_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = LockInstructionArgs {
            max_amount: self
                .instruction
                .max_amount
                .clone()
                .expect("max_amount is not set"),
        };
        let instruction = LockCpi {
            __program: self.instruction.__program,

            pool: self.instruction.pool.expect("pool is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            lock_escrow: self
                .instruction
                .lock_escrow
                .expect("lock_escrow is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            source_tokens: self
                .instruction
                .source_tokens
                .expect("source_tokens is not set"),

            escrow_vault: self
                .instruction
                .escrow_vault
                .expect("escrow_vault is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            a_vault: self.instruction.a_vault.expect("a_vault is not set"),

            b_vault: self.instruction.b_vault.expect("b_vault is not set"),

            a_vault_lp: self.instruction.a_vault_lp.expect("a_vault_lp is not set"),

            b_vault_lp: self.instruction.b_vault_lp.expect("b_vault_lp is not set"),

            a_vault_lp_mint: self
                .instruction
                .a_vault_lp_mint
                .expect("a_vault_lp_mint is not set"),

            b_vault_lp_mint: self
                .instruction
                .b_vault_lp_mint
                .expect("b_vault_lp_mint is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct LockCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lock_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_tokens: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_vault_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_vault_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    max_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
