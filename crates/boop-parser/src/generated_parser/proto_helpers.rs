//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::AuthorityTransferCancelledEvent};
    impl IntoProto<proto_def::AuthorityTransferCancelledEvent> for AuthorityTransferCancelledEvent {
        fn into_proto(self) -> proto_def::AuthorityTransferCancelledEvent {
            proto_def::AuthorityTransferCancelledEvent {}
        }
    }
    use crate::types::AuthorityTransferCompletedEvent;
    impl IntoProto<proto_def::AuthorityTransferCompletedEvent> for AuthorityTransferCompletedEvent {
        fn into_proto(self) -> proto_def::AuthorityTransferCompletedEvent {
            proto_def::AuthorityTransferCompletedEvent {
                old_authority: self.old_authority.to_string(),
                new_authority: self.new_authority.to_string(),
            }
        }
    }
    use crate::types::AuthorityTransferInitiatedEvent;
    impl IntoProto<proto_def::AuthorityTransferInitiatedEvent> for AuthorityTransferInitiatedEvent {
        fn into_proto(self) -> proto_def::AuthorityTransferInitiatedEvent {
            proto_def::AuthorityTransferInitiatedEvent {
                old_authority: self.old_authority.to_string(),
                new_authority: self.new_authority.to_string(),
            }
        }
    }
    use crate::types::BondingCurveDeployedEvent;
    impl IntoProto<proto_def::BondingCurveDeployedEvent> for BondingCurveDeployedEvent {
        fn into_proto(self) -> proto_def::BondingCurveDeployedEvent {
            proto_def::BondingCurveDeployedEvent {
                mint: self.mint.to_string(),
                creator: self.creator.to_string(),
            }
        }
    }
    use crate::types::BondingCurveDeployedFallbackEvent;
    impl IntoProto<proto_def::BondingCurveDeployedFallbackEvent> for BondingCurveDeployedFallbackEvent {
        fn into_proto(self) -> proto_def::BondingCurveDeployedFallbackEvent {
            proto_def::BondingCurveDeployedFallbackEvent {
                mint: self.mint.to_string(),
                creator: self.creator.to_string(),
            }
        }
    }
    use crate::types::BondingCurveVaultClosedEvent;
    impl IntoProto<proto_def::BondingCurveVaultClosedEvent> for BondingCurveVaultClosedEvent {
        fn into_proto(self) -> proto_def::BondingCurveVaultClosedEvent {
            proto_def::BondingCurveVaultClosedEvent {
                mint: self.mint.to_string(),
                recipient: self.recipient.to_string(),
                amount: self.amount,
            }
        }
    }
    use crate::types::ConfigUpdatedEvent;
    impl IntoProto<proto_def::ConfigUpdatedEvent> for ConfigUpdatedEvent {
        fn into_proto(self) -> proto_def::ConfigUpdatedEvent {
            proto_def::ConfigUpdatedEvent {
                protocol_fee_recipient: self.protocol_fee_recipient.to_string(),
                virtual_sol_reserves: self.virtual_sol_reserves,
                virtual_token_reserves: self.virtual_token_reserves,
                graduation_target: self.graduation_target,
                graduation_fee: self.graduation_fee,
                damping_term: self.damping_term.into(),
                swap_fee_basis_points: self.swap_fee_basis_points.into(),
                token_for_stakers_basis_points: self.token_for_stakers_basis_points.into(),
                token_amount_for_raydium_liquidity: self.token_amount_for_raydium_liquidity,
                max_graduation_price_deviation_basis_points: self
                    .max_graduation_price_deviation_basis_points
                    .into(),
                max_swap_amount_for_pool_price_correction_basis_points: self
                    .max_swap_amount_for_pool_price_correction_basis_points
                    .into(),
            }
        }
    }
    use crate::types::LiquidityDepositedIntoRaydiumEvent;
    impl IntoProto<proto_def::LiquidityDepositedIntoRaydiumEvent>
        for LiquidityDepositedIntoRaydiumEvent
    {
        fn into_proto(self) -> proto_def::LiquidityDepositedIntoRaydiumEvent {
            proto_def::LiquidityDepositedIntoRaydiumEvent {
                pool_state: self.pool_state.to_string(),
                mint: self.mint.to_string(),
                lp_token_amount: self.lp_token_amount,
                tokens_deposited: self.tokens_deposited,
                wsol_deposited: self.wsol_deposited,
            }
        }
    }
    use crate::types::OperatorsAddedEvent;
    impl IntoProto<proto_def::OperatorsAddedEvent> for OperatorsAddedEvent {
        fn into_proto(self) -> proto_def::OperatorsAddedEvent {
            proto_def::OperatorsAddedEvent {
                operators: self.operators.into_iter().map(|x| x.to_string()).collect(),
            }
        }
    }
    use crate::types::OperatorsRemovedEvent;
    impl IntoProto<proto_def::OperatorsRemovedEvent> for OperatorsRemovedEvent {
        fn into_proto(self) -> proto_def::OperatorsRemovedEvent {
            proto_def::OperatorsRemovedEvent {
                operators: self.operators.into_iter().map(|x| x.to_string()).collect(),
            }
        }
    }
    use crate::types::PausedToggledEvent;
    impl IntoProto<proto_def::PausedToggledEvent> for PausedToggledEvent {
        fn into_proto(self) -> proto_def::PausedToggledEvent {
            proto_def::PausedToggledEvent {
                is_paused: self.is_paused,
            }
        }
    }
    use crate::types::RaydiumLiquidityLockedEvent;
    impl IntoProto<proto_def::RaydiumLiquidityLockedEvent> for RaydiumLiquidityLockedEvent {
        fn into_proto(self) -> proto_def::RaydiumLiquidityLockedEvent {
            proto_def::RaydiumLiquidityLockedEvent {
                pool_state: self.pool_state.to_string(),
                mint: self.mint.to_string(),
                lp_amount: self.lp_amount,
            }
        }
    }
    use crate::types::RaydiumPoolCreatedEvent;
    impl IntoProto<proto_def::RaydiumPoolCreatedEvent> for RaydiumPoolCreatedEvent {
        fn into_proto(self) -> proto_def::RaydiumPoolCreatedEvent {
            proto_def::RaydiumPoolCreatedEvent {
                pool_state: self.pool_state.to_string(),
                mint: self.mint.to_string(),
            }
        }
    }
    use crate::types::RaydiumRandomPoolCreatedEvent;
    impl IntoProto<proto_def::RaydiumRandomPoolCreatedEvent> for RaydiumRandomPoolCreatedEvent {
        fn into_proto(self) -> proto_def::RaydiumRandomPoolCreatedEvent {
            proto_def::RaydiumRandomPoolCreatedEvent {
                pool_state: self.pool_state.to_string(),
                mint: self.mint.to_string(),
            }
        }
    }
    use crate::types::SwapSolForTokensOnRaydiumEvent;
    impl IntoProto<proto_def::SwapSolForTokensOnRaydiumEvent> for SwapSolForTokensOnRaydiumEvent {
        fn into_proto(self) -> proto_def::SwapSolForTokensOnRaydiumEvent {
            proto_def::SwapSolForTokensOnRaydiumEvent {
                mint: self.mint.to_string(),
                amount_in: self.amount_in,
                amount_out: self.amount_out,
            }
        }
    }
    use crate::types::SwapTokensForSolOnRaydiumEvent;
    impl IntoProto<proto_def::SwapTokensForSolOnRaydiumEvent> for SwapTokensForSolOnRaydiumEvent {
        fn into_proto(self) -> proto_def::SwapTokensForSolOnRaydiumEvent {
            proto_def::SwapTokensForSolOnRaydiumEvent {
                mint: self.mint.to_string(),
                amount_in: self.amount_in,
                amount_out: self.amount_out,
            }
        }
    }
    use crate::types::TokenBoughtEvent;
    impl IntoProto<proto_def::TokenBoughtEvent> for TokenBoughtEvent {
        fn into_proto(self) -> proto_def::TokenBoughtEvent {
            proto_def::TokenBoughtEvent {
                mint: self.mint.to_string(),
                amount_in: self.amount_in,
                amount_out: self.amount_out,
                swap_fee: self.swap_fee,
                buyer: self.buyer.to_string(),
                recipient: self.recipient.to_string(),
            }
        }
    }
    use crate::types::TokenCreatedEvent;
    impl IntoProto<proto_def::TokenCreatedEvent> for TokenCreatedEvent {
        fn into_proto(self) -> proto_def::TokenCreatedEvent {
            proto_def::TokenCreatedEvent {
                name: self.name,
                symbol: self.symbol,
                uri: self.uri,
            }
        }
    }
    use crate::types::TokenCreatedFallbackEvent;
    impl IntoProto<proto_def::TokenCreatedFallbackEvent> for TokenCreatedFallbackEvent {
        fn into_proto(self) -> proto_def::TokenCreatedFallbackEvent {
            proto_def::TokenCreatedFallbackEvent {
                name: self.name,
                symbol: self.symbol,
                uri: self.uri,
            }
        }
    }
    use crate::types::TokenGraduatedEvent;
    impl IntoProto<proto_def::TokenGraduatedEvent> for TokenGraduatedEvent {
        fn into_proto(self) -> proto_def::TokenGraduatedEvent {
            proto_def::TokenGraduatedEvent {
                mint: self.mint.to_string(),
                sol_for_liquidity: self.sol_for_liquidity,
                graduation_fee: self.graduation_fee,
                token_for_distributor: self.token_for_distributor,
            }
        }
    }
    use crate::types::TokenSoldEvent;
    impl IntoProto<proto_def::TokenSoldEvent> for TokenSoldEvent {
        fn into_proto(self) -> proto_def::TokenSoldEvent {
            proto_def::TokenSoldEvent {
                mint: self.mint.to_string(),
                amount_in: self.amount_in,
                amount_out: self.amount_out,
                swap_fee: self.swap_fee,
                seller: self.seller.to_string(),
                recipient: self.recipient.to_string(),
            }
        }
    }
    use crate::types::TradingFeesCollectedEvent;
    impl IntoProto<proto_def::TradingFeesCollectedEvent> for TradingFeesCollectedEvent {
        fn into_proto(self) -> proto_def::TradingFeesCollectedEvent {
            proto_def::TradingFeesCollectedEvent {
                pool_state: self.pool_state.to_string(),
                mint: self.mint.to_string(),
            }
        }
    }
    use crate::types::TradingFeesSplitEvent;
    impl IntoProto<proto_def::TradingFeesSplitEvent> for TradingFeesSplitEvent {
        fn into_proto(self) -> proto_def::TradingFeesSplitEvent {
            proto_def::TradingFeesSplitEvent {
                amount: self.amount,
                creator: self.creator.to_string(),
            }
        }
    }
}
