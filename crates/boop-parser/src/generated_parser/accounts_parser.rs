//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{AmmConfig, BondingCurve, Config, LockedCpLiquidityState},
    ID,
};

/// Boop Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum BoopProgramState {
    AmmConfig(AmmConfig),
    BondingCurve(BondingCurve),
    Config(Config),
    LockedCpLiquidityState(LockedCpLiquidityState),
}

impl BoopProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [218, 244, 33, 104, 203, 203, 43, 111] => Ok(BoopProgramState::AmmConfig(
                AmmConfig::from_bytes(data_bytes)?,
            )),
            [23, 183, 248, 55, 96, 216, 172, 96] => Ok(BoopProgramState::BondingCurve(
                BondingCurve::from_bytes(data_bytes)?,
            )),
            [155, 12, 170, 224, 30, 250, 204, 130] => {
                Ok(BoopProgramState::Config(Config::from_bytes(data_bytes)?))
            },
            [25, 10, 238, 197, 207, 234, 73, 22] => Ok(BoopProgramState::LockedCpLiquidityState(
                LockedCpLiquidityState::from_bytes(data_bytes)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = BoopProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "boop::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        BoopProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, AmmConfig, BoopProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::AmmConfig> for AmmConfig {
        fn into_proto(self) -> proto_def::AmmConfig {
            proto_def::AmmConfig {
                bump: self.bump.into(),
                disable_create_pool: self.disable_create_pool,
                index: self.index.into(),
                trade_fee_rate: self.trade_fee_rate,
                protocol_fee_rate: self.protocol_fee_rate,
                fund_fee_rate: self.fund_fee_rate,
                create_pool_fee: self.create_pool_fee,
                protocol_owner: self.protocol_owner.to_string(),
                fund_owner: self.fund_owner.to_string(),
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::BondingCurve;
    impl IntoProto<proto_def::BondingCurve> for BondingCurve {
        fn into_proto(self) -> proto_def::BondingCurve {
            proto_def::BondingCurve {
                creator: self.creator.to_string(),
                mint: self.mint.to_string(),
                virtual_sol_reserves: self.virtual_sol_reserves,
                virtual_token_reserves: self.virtual_token_reserves,
                graduation_target: self.graduation_target,
                graduation_fee: self.graduation_fee,
                sol_reserves: self.sol_reserves,
                token_reserves: self.token_reserves,
                damping_term: self.damping_term.into(),
                swap_fee_basis_points: self.swap_fee_basis_points.into(),
                token_for_stakers_basis_points: self.token_for_stakers_basis_points.into(),
                status: self.status as i32,
            }
        }
    }
    use super::Config;
    impl IntoProto<proto_def::Config> for Config {
        fn into_proto(self) -> proto_def::Config {
            proto_def::Config {
                is_paused: self.is_paused,
                authority: self.authority.to_string(),
                pending_authority: self.pending_authority.to_string(),
                operators: self.operators.into_iter().map(|x| x.to_string()).collect(),
                protocol_fee_recipient: self.protocol_fee_recipient.to_string(),
                token_distributor: self.token_distributor.to_string(),
                virtual_sol_reserves: self.virtual_sol_reserves,
                virtual_token_reserves: self.virtual_token_reserves,
                graduation_target: self.graduation_target,
                graduation_fee: self.graduation_fee,
                damping_term: self.damping_term.into(),
                token_for_stakers_basis_points: self.token_for_stakers_basis_points.into(),
                swap_fee_basis_points: self.swap_fee_basis_points.into(),
                token_amount_for_raydium_liquidity: self.token_amount_for_raydium_liquidity,
                max_graduation_price_deviation_basis_points: self
                    .max_graduation_price_deviation_basis_points
                    .into(),
                max_swap_amount_for_pool_price_correction_basis_points: self
                    .max_swap_amount_for_pool_price_correction_basis_points
                    .into(),
            }
        }
    }
    use super::LockedCpLiquidityState;
    impl IntoProto<proto_def::LockedCpLiquidityState> for LockedCpLiquidityState {
        fn into_proto(self) -> proto_def::LockedCpLiquidityState {
            proto_def::LockedCpLiquidityState {
                locked_lp_amount: self.locked_lp_amount,
                claimed_lp_amount: self.claimed_lp_amount,
                unclaimed_lp_amount: self.unclaimed_lp_amount,
                last_lp: self.last_lp,
                last_k: self.last_k.to_string(),
                recent_epoch: self.recent_epoch,
                pool_id: self.pool_id.to_string(),
                fee_nft_mint: self.fee_nft_mint.to_string(),
                locked_owner: self.locked_owner.to_string(),
                locked_lp_mint: self.locked_lp_mint.to_string(),
                padding: self.padding.to_vec(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for BoopProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                BoopProgramState::AmmConfig(data) => {
                    proto_def::program_state::StateOneof::AmmConfig(data.into_proto())
                },
                BoopProgramState::BondingCurve(data) => {
                    proto_def::program_state::StateOneof::BondingCurve(data.into_proto())
                },
                BoopProgramState::Config(data) => {
                    proto_def::program_state::StateOneof::Config(data.into_proto())
                },
                BoopProgramState::LockedCpLiquidityState(data) => {
                    proto_def::program_state::StateOneof::LockedCpLiquidityState(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
