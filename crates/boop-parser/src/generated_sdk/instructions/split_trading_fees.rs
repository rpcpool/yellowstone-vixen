//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct SplitTradingFees {
    pub operator: solana_program::pubkey::Pubkey,

    pub mint: solana_program::pubkey::Pubkey,

    pub wsol: solana_program::pubkey::Pubkey,

    pub config: solana_program::pubkey::Pubkey,

    pub vault_authority: solana_program::pubkey::Pubkey,

    pub bonding_curve: solana_program::pubkey::Pubkey,

    pub trading_fees_vault: solana_program::pubkey::Pubkey,

    pub fee_splitter_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub fee_splitter_config: solana_program::pubkey::Pubkey,

    pub fee_splitter_creator_vault: solana_program::pubkey::Pubkey,

    pub fee_splitter_vault_authority: solana_program::pubkey::Pubkey,

    pub fee_splitter_creator_vault_authority: solana_program::pubkey::Pubkey,

    pub fee_splitter_staking_mint: solana_program::pubkey::Pubkey,

    pub fee_splitter_wsol_vault: solana_program::pubkey::Pubkey,

    pub fee_splitter_creator_vault_authority_wsol_vault: solana_program::pubkey::Pubkey,

    pub fee_splitter_treasury_wsol_vault: solana_program::pubkey::Pubkey,

    pub fee_splitter_team_wsol_vault: solana_program::pubkey::Pubkey,

    pub fee_splitter_reward_pool: solana_program::pubkey::Pubkey,

    pub fee_splitter_reward_pool_staking_vault: solana_program::pubkey::Pubkey,

    pub fee_splitter_reward_pool_reward_vault: solana_program::pubkey::Pubkey,

    pub fee_splitter_reward_pool_program: solana_program::pubkey::Pubkey,
}

impl SplitTradingFees {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(24 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.operator,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.wsol, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bonding_curve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.trading_fees_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_splitter_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_splitter_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_creator_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_creator_vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_splitter_staking_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_wsol_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_creator_vault_authority_wsol_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_treasury_wsol_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_team_wsol_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_reward_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_reward_pool_staking_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_splitter_reward_pool_reward_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_splitter_reward_pool_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&SplitTradingFeesInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SplitTradingFeesInstructionData {
    discriminator: [u8; 8],
}

impl SplitTradingFeesInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [96, 126, 225, 47, 185, 213, 50, 58],
        }
    }
}

impl Default for SplitTradingFeesInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `SplitTradingFees`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` operator
///   1. `[]` mint
///   2. `[optional]` wsol (default to `So11111111111111111111111111111111111111112`)
///   3. `[]` config
///   4. `[]` vault_authority
///   5. `[writable]` bonding_curve
///   6. `[writable]` trading_fees_vault
///   7. `[optional]` fee_splitter_program (default to `boopEYztaEYSnajfMtjcRysyzyRcchgKsPboRZEbnJi`)
///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   10. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   11. `[]` fee_splitter_config
///   12. `[writable]` fee_splitter_creator_vault
///   13. `[writable]` fee_splitter_vault_authority
///   14. `[writable]` fee_splitter_creator_vault_authority
///   15. `[]` fee_splitter_staking_mint
///   16. `[writable]` fee_splitter_wsol_vault
///   17. `[writable]` fee_splitter_creator_vault_authority_wsol_vault
///   18. `[writable]` fee_splitter_treasury_wsol_vault
///   19. `[writable]` fee_splitter_team_wsol_vault
///   20. `[writable]` fee_splitter_reward_pool
///   21. `[writable]` fee_splitter_reward_pool_staking_vault
///   22. `[writable]` fee_splitter_reward_pool_reward_vault
///   23. `[]` fee_splitter_reward_pool_program
#[derive(Clone, Debug, Default)]
pub struct SplitTradingFeesBuilder {
    operator: Option<solana_program::pubkey::Pubkey>,
    mint: Option<solana_program::pubkey::Pubkey>,
    wsol: Option<solana_program::pubkey::Pubkey>,
    config: Option<solana_program::pubkey::Pubkey>,
    vault_authority: Option<solana_program::pubkey::Pubkey>,
    bonding_curve: Option<solana_program::pubkey::Pubkey>,
    trading_fees_vault: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_config: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_creator_vault: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_vault_authority: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_creator_vault_authority: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_staking_mint: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_wsol_vault: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_creator_vault_authority_wsol_vault: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_treasury_wsol_vault: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_team_wsol_vault: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_reward_pool: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_reward_pool_staking_vault: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_reward_pool_reward_vault: Option<solana_program::pubkey::Pubkey>,
    fee_splitter_reward_pool_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SplitTradingFeesBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn operator(&mut self, operator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn mint(&mut self, mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }

    /// `[optional account, default to 'So11111111111111111111111111111111111111112']`
    #[inline(always)]
    pub fn wsol(&mut self, wsol: solana_program::pubkey::Pubkey) -> &mut Self {
        self.wsol = Some(wsol);
        self
    }

    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn vault_authority(
        &mut self,
        vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vault_authority = Some(vault_authority);
        self
    }

    #[inline(always)]
    pub fn bonding_curve(&mut self, bonding_curve: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bonding_curve = Some(bonding_curve);
        self
    }

    #[inline(always)]
    pub fn trading_fees_vault(
        &mut self,
        trading_fees_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.trading_fees_vault = Some(trading_fees_vault);
        self
    }

    /// `[optional account, default to 'boopEYztaEYSnajfMtjcRysyzyRcchgKsPboRZEbnJi']`
    #[inline(always)]
    pub fn fee_splitter_program(
        &mut self,
        fee_splitter_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_program = Some(fee_splitter_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_config(
        &mut self,
        fee_splitter_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_config = Some(fee_splitter_config);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_creator_vault(
        &mut self,
        fee_splitter_creator_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_creator_vault = Some(fee_splitter_creator_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_vault_authority(
        &mut self,
        fee_splitter_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_vault_authority = Some(fee_splitter_vault_authority);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_creator_vault_authority(
        &mut self,
        fee_splitter_creator_vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_creator_vault_authority = Some(fee_splitter_creator_vault_authority);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_staking_mint(
        &mut self,
        fee_splitter_staking_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_staking_mint = Some(fee_splitter_staking_mint);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_wsol_vault(
        &mut self,
        fee_splitter_wsol_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_wsol_vault = Some(fee_splitter_wsol_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_creator_vault_authority_wsol_vault(
        &mut self,
        fee_splitter_creator_vault_authority_wsol_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_creator_vault_authority_wsol_vault =
            Some(fee_splitter_creator_vault_authority_wsol_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_treasury_wsol_vault(
        &mut self,
        fee_splitter_treasury_wsol_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_treasury_wsol_vault = Some(fee_splitter_treasury_wsol_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_team_wsol_vault(
        &mut self,
        fee_splitter_team_wsol_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_team_wsol_vault = Some(fee_splitter_team_wsol_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_reward_pool(
        &mut self,
        fee_splitter_reward_pool: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_reward_pool = Some(fee_splitter_reward_pool);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_reward_pool_staking_vault(
        &mut self,
        fee_splitter_reward_pool_staking_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_reward_pool_staking_vault = Some(fee_splitter_reward_pool_staking_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_reward_pool_reward_vault(
        &mut self,
        fee_splitter_reward_pool_reward_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_reward_pool_reward_vault = Some(fee_splitter_reward_pool_reward_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_reward_pool_program(
        &mut self,
        fee_splitter_reward_pool_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_splitter_reward_pool_program = Some(fee_splitter_reward_pool_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SplitTradingFees {
            operator: self.operator.expect("operator is not set"),
            mint: self.mint.expect("mint is not set"),
            wsol: self.wsol.unwrap_or(solana_program::pubkey!(
                "So11111111111111111111111111111111111111112"
            )),
            config: self.config.expect("config is not set"),
            vault_authority: self.vault_authority.expect("vault_authority is not set"),
            bonding_curve: self.bonding_curve.expect("bonding_curve is not set"),
            trading_fees_vault: self
                .trading_fees_vault
                .expect("trading_fees_vault is not set"),
            fee_splitter_program: self.fee_splitter_program.unwrap_or(solana_program::pubkey!(
                "boopEYztaEYSnajfMtjcRysyzyRcchgKsPboRZEbnJi"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            fee_splitter_config: self
                .fee_splitter_config
                .expect("fee_splitter_config is not set"),
            fee_splitter_creator_vault: self
                .fee_splitter_creator_vault
                .expect("fee_splitter_creator_vault is not set"),
            fee_splitter_vault_authority: self
                .fee_splitter_vault_authority
                .expect("fee_splitter_vault_authority is not set"),
            fee_splitter_creator_vault_authority: self
                .fee_splitter_creator_vault_authority
                .expect("fee_splitter_creator_vault_authority is not set"),
            fee_splitter_staking_mint: self
                .fee_splitter_staking_mint
                .expect("fee_splitter_staking_mint is not set"),
            fee_splitter_wsol_vault: self
                .fee_splitter_wsol_vault
                .expect("fee_splitter_wsol_vault is not set"),
            fee_splitter_creator_vault_authority_wsol_vault: self
                .fee_splitter_creator_vault_authority_wsol_vault
                .expect("fee_splitter_creator_vault_authority_wsol_vault is not set"),
            fee_splitter_treasury_wsol_vault: self
                .fee_splitter_treasury_wsol_vault
                .expect("fee_splitter_treasury_wsol_vault is not set"),
            fee_splitter_team_wsol_vault: self
                .fee_splitter_team_wsol_vault
                .expect("fee_splitter_team_wsol_vault is not set"),
            fee_splitter_reward_pool: self
                .fee_splitter_reward_pool
                .expect("fee_splitter_reward_pool is not set"),
            fee_splitter_reward_pool_staking_vault: self
                .fee_splitter_reward_pool_staking_vault
                .expect("fee_splitter_reward_pool_staking_vault is not set"),
            fee_splitter_reward_pool_reward_vault: self
                .fee_splitter_reward_pool_reward_vault
                .expect("fee_splitter_reward_pool_reward_vault is not set"),
            fee_splitter_reward_pool_program: self
                .fee_splitter_reward_pool_program
                .expect("fee_splitter_reward_pool_program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `split_trading_fees` CPI accounts.
pub struct SplitTradingFeesCpiAccounts<'a, 'b> {
    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub wsol: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,

    pub trading_fees_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_creator_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_creator_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_staking_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_creator_vault_authority_wsol_vault:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_treasury_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_team_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_reward_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_reward_pool_staking_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_reward_pool_reward_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_reward_pool_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `split_trading_fees` CPI instruction.
pub struct SplitTradingFeesCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub wsol: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,

    pub trading_fees_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_creator_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_creator_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_staking_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_creator_vault_authority_wsol_vault:
        &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_treasury_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_team_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_reward_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_reward_pool_staking_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_reward_pool_reward_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_splitter_reward_pool_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> SplitTradingFeesCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SplitTradingFeesCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            operator: accounts.operator,
            mint: accounts.mint,
            wsol: accounts.wsol,
            config: accounts.config,
            vault_authority: accounts.vault_authority,
            bonding_curve: accounts.bonding_curve,
            trading_fees_vault: accounts.trading_fees_vault,
            fee_splitter_program: accounts.fee_splitter_program,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            fee_splitter_config: accounts.fee_splitter_config,
            fee_splitter_creator_vault: accounts.fee_splitter_creator_vault,
            fee_splitter_vault_authority: accounts.fee_splitter_vault_authority,
            fee_splitter_creator_vault_authority: accounts.fee_splitter_creator_vault_authority,
            fee_splitter_staking_mint: accounts.fee_splitter_staking_mint,
            fee_splitter_wsol_vault: accounts.fee_splitter_wsol_vault,
            fee_splitter_creator_vault_authority_wsol_vault: accounts
                .fee_splitter_creator_vault_authority_wsol_vault,
            fee_splitter_treasury_wsol_vault: accounts.fee_splitter_treasury_wsol_vault,
            fee_splitter_team_wsol_vault: accounts.fee_splitter_team_wsol_vault,
            fee_splitter_reward_pool: accounts.fee_splitter_reward_pool,
            fee_splitter_reward_pool_staking_vault: accounts.fee_splitter_reward_pool_staking_vault,
            fee_splitter_reward_pool_reward_vault: accounts.fee_splitter_reward_pool_reward_vault,
            fee_splitter_reward_pool_program: accounts.fee_splitter_reward_pool_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(24 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.operator.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.wsol.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bonding_curve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.trading_fees_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_splitter_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_splitter_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_creator_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_creator_vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_splitter_staking_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_wsol_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_creator_vault_authority_wsol_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_treasury_wsol_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_team_wsol_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_reward_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_reward_pool_staking_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_splitter_reward_pool_reward_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_splitter_reward_pool_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&SplitTradingFeesInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(25 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.operator.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.wsol.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.vault_authority.clone());
        account_infos.push(self.bonding_curve.clone());
        account_infos.push(self.trading_fees_vault.clone());
        account_infos.push(self.fee_splitter_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.fee_splitter_config.clone());
        account_infos.push(self.fee_splitter_creator_vault.clone());
        account_infos.push(self.fee_splitter_vault_authority.clone());
        account_infos.push(self.fee_splitter_creator_vault_authority.clone());
        account_infos.push(self.fee_splitter_staking_mint.clone());
        account_infos.push(self.fee_splitter_wsol_vault.clone());
        account_infos.push(self.fee_splitter_creator_vault_authority_wsol_vault.clone());
        account_infos.push(self.fee_splitter_treasury_wsol_vault.clone());
        account_infos.push(self.fee_splitter_team_wsol_vault.clone());
        account_infos.push(self.fee_splitter_reward_pool.clone());
        account_infos.push(self.fee_splitter_reward_pool_staking_vault.clone());
        account_infos.push(self.fee_splitter_reward_pool_reward_vault.clone());
        account_infos.push(self.fee_splitter_reward_pool_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SplitTradingFees` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` operator
///   1. `[]` mint
///   2. `[]` wsol
///   3. `[]` config
///   4. `[]` vault_authority
///   5. `[writable]` bonding_curve
///   6. `[writable]` trading_fees_vault
///   7. `[]` fee_splitter_program
///   8. `[]` system_program
///   9. `[]` token_program
///   10. `[]` associated_token_program
///   11. `[]` fee_splitter_config
///   12. `[writable]` fee_splitter_creator_vault
///   13. `[writable]` fee_splitter_vault_authority
///   14. `[writable]` fee_splitter_creator_vault_authority
///   15. `[]` fee_splitter_staking_mint
///   16. `[writable]` fee_splitter_wsol_vault
///   17. `[writable]` fee_splitter_creator_vault_authority_wsol_vault
///   18. `[writable]` fee_splitter_treasury_wsol_vault
///   19. `[writable]` fee_splitter_team_wsol_vault
///   20. `[writable]` fee_splitter_reward_pool
///   21. `[writable]` fee_splitter_reward_pool_staking_vault
///   22. `[writable]` fee_splitter_reward_pool_reward_vault
///   23. `[]` fee_splitter_reward_pool_program
#[derive(Clone, Debug)]
pub struct SplitTradingFeesCpiBuilder<'a, 'b> {
    instruction: Box<SplitTradingFeesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SplitTradingFeesCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SplitTradingFeesCpiBuilderInstruction {
            __program: program,
            operator: None,
            mint: None,
            wsol: None,
            config: None,
            vault_authority: None,
            bonding_curve: None,
            trading_fees_vault: None,
            fee_splitter_program: None,
            system_program: None,
            token_program: None,
            associated_token_program: None,
            fee_splitter_config: None,
            fee_splitter_creator_vault: None,
            fee_splitter_vault_authority: None,
            fee_splitter_creator_vault_authority: None,
            fee_splitter_staking_mint: None,
            fee_splitter_wsol_vault: None,
            fee_splitter_creator_vault_authority_wsol_vault: None,
            fee_splitter_treasury_wsol_vault: None,
            fee_splitter_team_wsol_vault: None,
            fee_splitter_reward_pool: None,
            fee_splitter_reward_pool_staking_vault: None,
            fee_splitter_reward_pool_reward_vault: None,
            fee_splitter_reward_pool_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn operator(
        &mut self,
        operator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }

    #[inline(always)]
    pub fn wsol(&mut self, wsol: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.wsol = Some(wsol);
        self
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn vault_authority(
        &mut self,
        vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_authority = Some(vault_authority);
        self
    }

    #[inline(always)]
    pub fn bonding_curve(
        &mut self,
        bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bonding_curve = Some(bonding_curve);
        self
    }

    #[inline(always)]
    pub fn trading_fees_vault(
        &mut self,
        trading_fees_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.trading_fees_vault = Some(trading_fees_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_program(
        &mut self,
        fee_splitter_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_program = Some(fee_splitter_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_config(
        &mut self,
        fee_splitter_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_config = Some(fee_splitter_config);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_creator_vault(
        &mut self,
        fee_splitter_creator_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_creator_vault = Some(fee_splitter_creator_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_vault_authority(
        &mut self,
        fee_splitter_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_vault_authority = Some(fee_splitter_vault_authority);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_creator_vault_authority(
        &mut self,
        fee_splitter_creator_vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_creator_vault_authority =
            Some(fee_splitter_creator_vault_authority);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_staking_mint(
        &mut self,
        fee_splitter_staking_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_staking_mint = Some(fee_splitter_staking_mint);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_wsol_vault(
        &mut self,
        fee_splitter_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_wsol_vault = Some(fee_splitter_wsol_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_creator_vault_authority_wsol_vault(
        &mut self,
        fee_splitter_creator_vault_authority_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction
            .fee_splitter_creator_vault_authority_wsol_vault =
            Some(fee_splitter_creator_vault_authority_wsol_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_treasury_wsol_vault(
        &mut self,
        fee_splitter_treasury_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_treasury_wsol_vault = Some(fee_splitter_treasury_wsol_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_team_wsol_vault(
        &mut self,
        fee_splitter_team_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_team_wsol_vault = Some(fee_splitter_team_wsol_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_reward_pool(
        &mut self,
        fee_splitter_reward_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_reward_pool = Some(fee_splitter_reward_pool);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_reward_pool_staking_vault(
        &mut self,
        fee_splitter_reward_pool_staking_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_reward_pool_staking_vault =
            Some(fee_splitter_reward_pool_staking_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_reward_pool_reward_vault(
        &mut self,
        fee_splitter_reward_pool_reward_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_reward_pool_reward_vault =
            Some(fee_splitter_reward_pool_reward_vault);
        self
    }

    #[inline(always)]
    pub fn fee_splitter_reward_pool_program(
        &mut self,
        fee_splitter_reward_pool_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_splitter_reward_pool_program = Some(fee_splitter_reward_pool_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = SplitTradingFeesCpi {
            __program: self.instruction.__program,

            operator: self.instruction.operator.expect("operator is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            wsol: self.instruction.wsol.expect("wsol is not set"),

            config: self.instruction.config.expect("config is not set"),

            vault_authority: self
                .instruction
                .vault_authority
                .expect("vault_authority is not set"),

            bonding_curve: self
                .instruction
                .bonding_curve
                .expect("bonding_curve is not set"),

            trading_fees_vault: self
                .instruction
                .trading_fees_vault
                .expect("trading_fees_vault is not set"),

            fee_splitter_program: self
                .instruction
                .fee_splitter_program
                .expect("fee_splitter_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            fee_splitter_config: self
                .instruction
                .fee_splitter_config
                .expect("fee_splitter_config is not set"),

            fee_splitter_creator_vault: self
                .instruction
                .fee_splitter_creator_vault
                .expect("fee_splitter_creator_vault is not set"),

            fee_splitter_vault_authority: self
                .instruction
                .fee_splitter_vault_authority
                .expect("fee_splitter_vault_authority is not set"),

            fee_splitter_creator_vault_authority: self
                .instruction
                .fee_splitter_creator_vault_authority
                .expect("fee_splitter_creator_vault_authority is not set"),

            fee_splitter_staking_mint: self
                .instruction
                .fee_splitter_staking_mint
                .expect("fee_splitter_staking_mint is not set"),

            fee_splitter_wsol_vault: self
                .instruction
                .fee_splitter_wsol_vault
                .expect("fee_splitter_wsol_vault is not set"),

            fee_splitter_creator_vault_authority_wsol_vault: self
                .instruction
                .fee_splitter_creator_vault_authority_wsol_vault
                .expect("fee_splitter_creator_vault_authority_wsol_vault is not set"),

            fee_splitter_treasury_wsol_vault: self
                .instruction
                .fee_splitter_treasury_wsol_vault
                .expect("fee_splitter_treasury_wsol_vault is not set"),

            fee_splitter_team_wsol_vault: self
                .instruction
                .fee_splitter_team_wsol_vault
                .expect("fee_splitter_team_wsol_vault is not set"),

            fee_splitter_reward_pool: self
                .instruction
                .fee_splitter_reward_pool
                .expect("fee_splitter_reward_pool is not set"),

            fee_splitter_reward_pool_staking_vault: self
                .instruction
                .fee_splitter_reward_pool_staking_vault
                .expect("fee_splitter_reward_pool_staking_vault is not set"),

            fee_splitter_reward_pool_reward_vault: self
                .instruction
                .fee_splitter_reward_pool_reward_vault
                .expect("fee_splitter_reward_pool_reward_vault is not set"),

            fee_splitter_reward_pool_program: self
                .instruction
                .fee_splitter_reward_pool_program
                .expect("fee_splitter_reward_pool_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SplitTradingFeesCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    operator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    wsol: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bonding_curve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    trading_fees_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_creator_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_creator_vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_staking_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_wsol_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_creator_vault_authority_wsol_vault:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_treasury_wsol_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_team_wsol_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_reward_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_reward_pool_staking_vault:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_reward_pool_reward_vault:
        Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_splitter_reward_pool_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
