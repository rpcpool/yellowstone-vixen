//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct DepositIntoRaydium {
    pub config: solana_program::pubkey::Pubkey,
    /// Which config the pool belongs to.
    pub amm_config: solana_program::pubkey::Pubkey,

    pub operator: solana_program::pubkey::Pubkey,

    pub operator_wsol_account: solana_program::pubkey::Pubkey,

    pub vault_authority: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub pool_state: solana_program::pubkey::Pubkey,

    pub token0_vault: solana_program::pubkey::Pubkey,

    pub token1_vault: solana_program::pubkey::Pubkey,

    pub bonding_curve_vault: solana_program::pubkey::Pubkey,

    pub bonding_curve_wsol_vault: solana_program::pubkey::Pubkey,
    /// token Program
    pub token_program: solana_program::pubkey::Pubkey,
    /// Token program 2022
    pub token_program2022: solana_program::pubkey::Pubkey,
    /// System program
    pub system_program: solana_program::pubkey::Pubkey,
    /// Program to create an ATA for the operator to recoup any potential remaining WSOL
    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub lp_mint: solana_program::pubkey::Pubkey,

    pub cpmm_program: solana_program::pubkey::Pubkey,

    pub owner_lp_token: solana_program::pubkey::Pubkey,

    pub bonding_curve: solana_program::pubkey::Pubkey,

    pub token0_mint: solana_program::pubkey::Pubkey,
    /// token_1 mint, the key must greater than token_0 mint
    pub token1_mint: solana_program::pubkey::Pubkey,
}

impl DepositIntoRaydium {
    pub fn instruction(
        &self,
        args: DepositIntoRaydiumInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: DepositIntoRaydiumInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(21 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.operator,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.operator_wsol_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token0_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token1_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bonding_curve_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bonding_curve_wsol_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program2022,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cpmm_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner_lp_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bonding_curve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token0_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token1_mint,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&DepositIntoRaydiumInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositIntoRaydiumInstructionData {
    discriminator: [u8; 8],
}

impl DepositIntoRaydiumInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [168, 89, 99, 30, 117, 49, 88, 224],
        }
    }
}

impl Default for DepositIntoRaydiumInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositIntoRaydiumInstructionArgs {
    pub lp_token_amount: u64,
    pub maximum_token0_amount: u64,
    pub maximum_token1_amount: u64,
}

/// Instruction builder for `DepositIntoRaydium`.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[]` amm_config
///   2. `[writable, signer]` operator
///   3. `[writable]` operator_wsol_account
///   4. `[writable]` vault_authority
///   5. `[]` authority
///   6. `[writable]` pool_state
///   7. `[writable]` token0_vault
///   8. `[writable]` token1_vault
///   9. `[writable]` bonding_curve_vault
///   10. `[writable]` bonding_curve_wsol_vault
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[optional]` token_program2022 (default to `TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb`)
///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   14. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   15. `[writable]` lp_mint
///   16. `[optional]` cpmm_program (default to `CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C`)
///   17. `[writable]` owner_lp_token
///   18. `[writable]` bonding_curve
///   19. `[writable]` token0_mint
///   20. `[optional]` token1_mint (default to `So11111111111111111111111111111111111111112`)
#[derive(Clone, Debug, Default)]
pub struct DepositIntoRaydiumBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    amm_config: Option<solana_program::pubkey::Pubkey>,
    operator: Option<solana_program::pubkey::Pubkey>,
    operator_wsol_account: Option<solana_program::pubkey::Pubkey>,
    vault_authority: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    token0_vault: Option<solana_program::pubkey::Pubkey>,
    token1_vault: Option<solana_program::pubkey::Pubkey>,
    bonding_curve_vault: Option<solana_program::pubkey::Pubkey>,
    bonding_curve_wsol_vault: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_program2022: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    cpmm_program: Option<solana_program::pubkey::Pubkey>,
    owner_lp_token: Option<solana_program::pubkey::Pubkey>,
    bonding_curve: Option<solana_program::pubkey::Pubkey>,
    token0_mint: Option<solana_program::pubkey::Pubkey>,
    token1_mint: Option<solana_program::pubkey::Pubkey>,
    lp_token_amount: Option<u64>,
    maximum_token0_amount: Option<u64>,
    maximum_token1_amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DepositIntoRaydiumBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    /// Which config the pool belongs to.
    #[inline(always)]
    pub fn amm_config(&mut self, amm_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_config = Some(amm_config);
        self
    }

    #[inline(always)]
    pub fn operator(&mut self, operator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn operator_wsol_account(
        &mut self,
        operator_wsol_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.operator_wsol_account = Some(operator_wsol_account);
        self
    }

    #[inline(always)]
    pub fn vault_authority(
        &mut self,
        vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vault_authority = Some(vault_authority);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn token0_vault(&mut self, token0_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token0_vault = Some(token0_vault);
        self
    }

    #[inline(always)]
    pub fn token1_vault(&mut self, token1_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token1_vault = Some(token1_vault);
        self
    }

    #[inline(always)]
    pub fn bonding_curve_vault(
        &mut self,
        bonding_curve_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.bonding_curve_vault = Some(bonding_curve_vault);
        self
    }

    #[inline(always)]
    pub fn bonding_curve_wsol_vault(
        &mut self,
        bonding_curve_wsol_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.bonding_curve_wsol_vault = Some(bonding_curve_wsol_vault);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// token Program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb']`
    /// Token program 2022
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program2022 = Some(token_program2022);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// Program to create an ATA for the operator to recoup any potential remaining WSOL
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    /// `[optional account, default to 'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C']`
    #[inline(always)]
    pub fn cpmm_program(&mut self, cpmm_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cpmm_program = Some(cpmm_program);
        self
    }

    #[inline(always)]
    pub fn owner_lp_token(&mut self, owner_lp_token: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner_lp_token = Some(owner_lp_token);
        self
    }

    #[inline(always)]
    pub fn bonding_curve(&mut self, bonding_curve: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bonding_curve = Some(bonding_curve);
        self
    }

    #[inline(always)]
    pub fn token0_mint(&mut self, token0_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token0_mint = Some(token0_mint);
        self
    }

    /// `[optional account, default to 'So11111111111111111111111111111111111111112']`
    /// token_1 mint, the key must greater than token_0 mint
    #[inline(always)]
    pub fn token1_mint(&mut self, token1_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token1_mint = Some(token1_mint);
        self
    }

    #[inline(always)]
    pub fn lp_token_amount(&mut self, lp_token_amount: u64) -> &mut Self {
        self.lp_token_amount = Some(lp_token_amount);
        self
    }

    #[inline(always)]
    pub fn maximum_token0_amount(&mut self, maximum_token0_amount: u64) -> &mut Self {
        self.maximum_token0_amount = Some(maximum_token0_amount);
        self
    }

    #[inline(always)]
    pub fn maximum_token1_amount(&mut self, maximum_token1_amount: u64) -> &mut Self {
        self.maximum_token1_amount = Some(maximum_token1_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = DepositIntoRaydium {
            config: self.config.expect("config is not set"),
            amm_config: self.amm_config.expect("amm_config is not set"),
            operator: self.operator.expect("operator is not set"),
            operator_wsol_account: self
                .operator_wsol_account
                .expect("operator_wsol_account is not set"),
            vault_authority: self.vault_authority.expect("vault_authority is not set"),
            authority: self.authority.expect("authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            token0_vault: self.token0_vault.expect("token0_vault is not set"),
            token1_vault: self.token1_vault.expect("token1_vault is not set"),
            bonding_curve_vault: self
                .bonding_curve_vault
                .expect("bonding_curve_vault is not set"),
            bonding_curve_wsol_vault: self
                .bonding_curve_wsol_vault
                .expect("bonding_curve_wsol_vault is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token_program2022: self.token_program2022.unwrap_or(solana_program::pubkey!(
                "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            cpmm_program: self.cpmm_program.unwrap_or(solana_program::pubkey!(
                "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
            )),
            owner_lp_token: self.owner_lp_token.expect("owner_lp_token is not set"),
            bonding_curve: self.bonding_curve.expect("bonding_curve is not set"),
            token0_mint: self.token0_mint.expect("token0_mint is not set"),
            token1_mint: self.token1_mint.unwrap_or(solana_program::pubkey!(
                "So11111111111111111111111111111111111111112"
            )),
        };
        let args = DepositIntoRaydiumInstructionArgs {
            lp_token_amount: self
                .lp_token_amount
                .clone()
                .expect("lp_token_amount is not set"),
            maximum_token0_amount: self
                .maximum_token0_amount
                .clone()
                .expect("maximum_token0_amount is not set"),
            maximum_token1_amount: self
                .maximum_token1_amount
                .clone()
                .expect("maximum_token1_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `deposit_into_raydium` CPI accounts.
pub struct DepositIntoRaydiumCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Which config the pool belongs to.
    pub amm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_wsol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub token0_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token1_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// token Program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program 2022
    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for the operator to recoup any potential remaining WSOL
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpmm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner_lp_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,

    pub token0_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_1 mint, the key must greater than token_0 mint
    pub token1_mint: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `deposit_into_raydium` CPI instruction.
pub struct DepositIntoRaydiumCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Which config the pool belongs to.
    pub amm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator_wsol_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub token0_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token1_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// token Program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program 2022
    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for the operator to recoup any potential remaining WSOL
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpmm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner_lp_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,

    pub token0_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_1 mint, the key must greater than token_0 mint
    pub token1_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: DepositIntoRaydiumInstructionArgs,
}

impl<'a, 'b> DepositIntoRaydiumCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: DepositIntoRaydiumCpiAccounts<'a, 'b>,
        args: DepositIntoRaydiumInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            amm_config: accounts.amm_config,
            operator: accounts.operator,
            operator_wsol_account: accounts.operator_wsol_account,
            vault_authority: accounts.vault_authority,
            authority: accounts.authority,
            pool_state: accounts.pool_state,
            token0_vault: accounts.token0_vault,
            token1_vault: accounts.token1_vault,
            bonding_curve_vault: accounts.bonding_curve_vault,
            bonding_curve_wsol_vault: accounts.bonding_curve_wsol_vault,
            token_program: accounts.token_program,
            token_program2022: accounts.token_program2022,
            system_program: accounts.system_program,
            associated_token_program: accounts.associated_token_program,
            lp_mint: accounts.lp_mint,
            cpmm_program: accounts.cpmm_program,
            owner_lp_token: accounts.owner_lp_token,
            bonding_curve: accounts.bonding_curve,
            token0_mint: accounts.token0_mint,
            token1_mint: accounts.token1_mint,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(21 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.operator.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.operator_wsol_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token0_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token1_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bonding_curve_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bonding_curve_wsol_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program2022.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cpmm_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner_lp_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bonding_curve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token0_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token1_mint.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&DepositIntoRaydiumInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(22 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.amm_config.clone());
        account_infos.push(self.operator.clone());
        account_infos.push(self.operator_wsol_account.clone());
        account_infos.push(self.vault_authority.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.token0_vault.clone());
        account_infos.push(self.token1_vault.clone());
        account_infos.push(self.bonding_curve_vault.clone());
        account_infos.push(self.bonding_curve_wsol_vault.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_program2022.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.cpmm_program.clone());
        account_infos.push(self.owner_lp_token.clone());
        account_infos.push(self.bonding_curve.clone());
        account_infos.push(self.token0_mint.clone());
        account_infos.push(self.token1_mint.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DepositIntoRaydium` via CPI.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[]` amm_config
///   2. `[writable, signer]` operator
///   3. `[writable]` operator_wsol_account
///   4. `[writable]` vault_authority
///   5. `[]` authority
///   6. `[writable]` pool_state
///   7. `[writable]` token0_vault
///   8. `[writable]` token1_vault
///   9. `[writable]` bonding_curve_vault
///   10. `[writable]` bonding_curve_wsol_vault
///   11. `[]` token_program
///   12. `[]` token_program2022
///   13. `[]` system_program
///   14. `[]` associated_token_program
///   15. `[writable]` lp_mint
///   16. `[]` cpmm_program
///   17. `[writable]` owner_lp_token
///   18. `[writable]` bonding_curve
///   19. `[writable]` token0_mint
///   20. `[]` token1_mint
#[derive(Clone, Debug)]
pub struct DepositIntoRaydiumCpiBuilder<'a, 'b> {
    instruction: Box<DepositIntoRaydiumCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositIntoRaydiumCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DepositIntoRaydiumCpiBuilderInstruction {
            __program: program,
            config: None,
            amm_config: None,
            operator: None,
            operator_wsol_account: None,
            vault_authority: None,
            authority: None,
            pool_state: None,
            token0_vault: None,
            token1_vault: None,
            bonding_curve_vault: None,
            bonding_curve_wsol_vault: None,
            token_program: None,
            token_program2022: None,
            system_program: None,
            associated_token_program: None,
            lp_mint: None,
            cpmm_program: None,
            owner_lp_token: None,
            bonding_curve: None,
            token0_mint: None,
            token1_mint: None,
            lp_token_amount: None,
            maximum_token0_amount: None,
            maximum_token1_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    /// Which config the pool belongs to.
    #[inline(always)]
    pub fn amm_config(
        &mut self,
        amm_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_config = Some(amm_config);
        self
    }

    #[inline(always)]
    pub fn operator(
        &mut self,
        operator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn operator_wsol_account(
        &mut self,
        operator_wsol_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator_wsol_account = Some(operator_wsol_account);
        self
    }

    #[inline(always)]
    pub fn vault_authority(
        &mut self,
        vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_authority = Some(vault_authority);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn token0_vault(
        &mut self,
        token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token0_vault = Some(token0_vault);
        self
    }

    #[inline(always)]
    pub fn token1_vault(
        &mut self,
        token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token1_vault = Some(token1_vault);
        self
    }

    #[inline(always)]
    pub fn bonding_curve_vault(
        &mut self,
        bonding_curve_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bonding_curve_vault = Some(bonding_curve_vault);
        self
    }

    #[inline(always)]
    pub fn bonding_curve_wsol_vault(
        &mut self,
        bonding_curve_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bonding_curve_wsol_vault = Some(bonding_curve_wsol_vault);
        self
    }

    /// token Program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Token program 2022
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program2022 = Some(token_program2022);
        self
    }

    /// System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Program to create an ATA for the operator to recoup any potential remaining WSOL
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn cpmm_program(
        &mut self,
        cpmm_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpmm_program = Some(cpmm_program);
        self
    }

    #[inline(always)]
    pub fn owner_lp_token(
        &mut self,
        owner_lp_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.owner_lp_token = Some(owner_lp_token);
        self
    }

    #[inline(always)]
    pub fn bonding_curve(
        &mut self,
        bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bonding_curve = Some(bonding_curve);
        self
    }

    #[inline(always)]
    pub fn token0_mint(
        &mut self,
        token0_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token0_mint = Some(token0_mint);
        self
    }

    /// token_1 mint, the key must greater than token_0 mint
    #[inline(always)]
    pub fn token1_mint(
        &mut self,
        token1_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token1_mint = Some(token1_mint);
        self
    }

    #[inline(always)]
    pub fn lp_token_amount(&mut self, lp_token_amount: u64) -> &mut Self {
        self.instruction.lp_token_amount = Some(lp_token_amount);
        self
    }

    #[inline(always)]
    pub fn maximum_token0_amount(&mut self, maximum_token0_amount: u64) -> &mut Self {
        self.instruction.maximum_token0_amount = Some(maximum_token0_amount);
        self
    }

    #[inline(always)]
    pub fn maximum_token1_amount(&mut self, maximum_token1_amount: u64) -> &mut Self {
        self.instruction.maximum_token1_amount = Some(maximum_token1_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = DepositIntoRaydiumInstructionArgs {
            lp_token_amount: self
                .instruction
                .lp_token_amount
                .clone()
                .expect("lp_token_amount is not set"),
            maximum_token0_amount: self
                .instruction
                .maximum_token0_amount
                .clone()
                .expect("maximum_token0_amount is not set"),
            maximum_token1_amount: self
                .instruction
                .maximum_token1_amount
                .clone()
                .expect("maximum_token1_amount is not set"),
        };
        let instruction = DepositIntoRaydiumCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            amm_config: self.instruction.amm_config.expect("amm_config is not set"),

            operator: self.instruction.operator.expect("operator is not set"),

            operator_wsol_account: self
                .instruction
                .operator_wsol_account
                .expect("operator_wsol_account is not set"),

            vault_authority: self
                .instruction
                .vault_authority
                .expect("vault_authority is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            token0_vault: self
                .instruction
                .token0_vault
                .expect("token0_vault is not set"),

            token1_vault: self
                .instruction
                .token1_vault
                .expect("token1_vault is not set"),

            bonding_curve_vault: self
                .instruction
                .bonding_curve_vault
                .expect("bonding_curve_vault is not set"),

            bonding_curve_wsol_vault: self
                .instruction
                .bonding_curve_wsol_vault
                .expect("bonding_curve_wsol_vault is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_program2022: self
                .instruction
                .token_program2022
                .expect("token_program2022 is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            cpmm_program: self
                .instruction
                .cpmm_program
                .expect("cpmm_program is not set"),

            owner_lp_token: self
                .instruction
                .owner_lp_token
                .expect("owner_lp_token is not set"),

            bonding_curve: self
                .instruction
                .bonding_curve
                .expect("bonding_curve is not set"),

            token0_mint: self
                .instruction
                .token0_mint
                .expect("token0_mint is not set"),

            token1_mint: self
                .instruction
                .token1_mint
                .expect("token1_mint is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DepositIntoRaydiumCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operator_wsol_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token0_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token1_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bonding_curve_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bonding_curve_wsol_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program2022: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpmm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner_lp_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bonding_curve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token0_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token1_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_token_amount: Option<u64>,
    maximum_token0_amount: Option<u64>,
    maximum_token1_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
