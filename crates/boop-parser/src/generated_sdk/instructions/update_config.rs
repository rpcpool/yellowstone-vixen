//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct UpdateConfig {
    pub config: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl UpdateConfig {
    pub fn instruction(
        &self,
        args: UpdateConfigInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateConfigInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&UpdateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateConfigInstructionData {
    discriminator: [u8; 8],
}

impl UpdateConfigInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [29, 158, 252, 191, 10, 83, 219, 99],
        }
    }
}

impl Default for UpdateConfigInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdateConfigInstructionArgs {
    pub new_protocol_fee_recipient: Pubkey,
    pub new_virtual_sol_reserves: u64,
    pub new_virtual_token_reserves: u64,
    pub new_graduation_target: u64,
    pub new_graduation_fee: u64,
    pub new_damping_term: u8,
    pub new_swap_fee_basis_points: u8,
    pub new_token_for_stakers_basis_points: u16,
    pub new_token_amount_for_raydium_liquidity: u64,
    pub new_max_graduation_price_deviation_basis_points: u16,
    pub new_max_swap_amount_for_pool_price_correction_basis_points: u16,
}

/// Instruction builder for `UpdateConfig`.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[signer]` authority
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct UpdateConfigBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    new_protocol_fee_recipient: Option<Pubkey>,
    new_virtual_sol_reserves: Option<u64>,
    new_virtual_token_reserves: Option<u64>,
    new_graduation_target: Option<u64>,
    new_graduation_fee: Option<u64>,
    new_damping_term: Option<u8>,
    new_swap_fee_basis_points: Option<u8>,
    new_token_for_stakers_basis_points: Option<u16>,
    new_token_amount_for_raydium_liquidity: Option<u64>,
    new_max_graduation_price_deviation_basis_points: Option<u16>,
    new_max_swap_amount_for_pool_price_correction_basis_points: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateConfigBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn new_protocol_fee_recipient(&mut self, new_protocol_fee_recipient: Pubkey) -> &mut Self {
        self.new_protocol_fee_recipient = Some(new_protocol_fee_recipient);
        self
    }

    #[inline(always)]
    pub fn new_virtual_sol_reserves(&mut self, new_virtual_sol_reserves: u64) -> &mut Self {
        self.new_virtual_sol_reserves = Some(new_virtual_sol_reserves);
        self
    }

    #[inline(always)]
    pub fn new_virtual_token_reserves(&mut self, new_virtual_token_reserves: u64) -> &mut Self {
        self.new_virtual_token_reserves = Some(new_virtual_token_reserves);
        self
    }

    #[inline(always)]
    pub fn new_graduation_target(&mut self, new_graduation_target: u64) -> &mut Self {
        self.new_graduation_target = Some(new_graduation_target);
        self
    }

    #[inline(always)]
    pub fn new_graduation_fee(&mut self, new_graduation_fee: u64) -> &mut Self {
        self.new_graduation_fee = Some(new_graduation_fee);
        self
    }

    #[inline(always)]
    pub fn new_damping_term(&mut self, new_damping_term: u8) -> &mut Self {
        self.new_damping_term = Some(new_damping_term);
        self
    }

    #[inline(always)]
    pub fn new_swap_fee_basis_points(&mut self, new_swap_fee_basis_points: u8) -> &mut Self {
        self.new_swap_fee_basis_points = Some(new_swap_fee_basis_points);
        self
    }

    #[inline(always)]
    pub fn new_token_for_stakers_basis_points(
        &mut self,
        new_token_for_stakers_basis_points: u16,
    ) -> &mut Self {
        self.new_token_for_stakers_basis_points = Some(new_token_for_stakers_basis_points);
        self
    }

    #[inline(always)]
    pub fn new_token_amount_for_raydium_liquidity(
        &mut self,
        new_token_amount_for_raydium_liquidity: u64,
    ) -> &mut Self {
        self.new_token_amount_for_raydium_liquidity = Some(new_token_amount_for_raydium_liquidity);
        self
    }

    #[inline(always)]
    pub fn new_max_graduation_price_deviation_basis_points(
        &mut self,
        new_max_graduation_price_deviation_basis_points: u16,
    ) -> &mut Self {
        self.new_max_graduation_price_deviation_basis_points =
            Some(new_max_graduation_price_deviation_basis_points);
        self
    }

    #[inline(always)]
    pub fn new_max_swap_amount_for_pool_price_correction_basis_points(
        &mut self,
        new_max_swap_amount_for_pool_price_correction_basis_points: u16,
    ) -> &mut Self {
        self.new_max_swap_amount_for_pool_price_correction_basis_points =
            Some(new_max_swap_amount_for_pool_price_correction_basis_points);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateConfig {
            config: self.config.expect("config is not set"),
            authority: self.authority.expect("authority is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = UpdateConfigInstructionArgs {
            new_protocol_fee_recipient: self
                .new_protocol_fee_recipient
                .clone()
                .expect("new_protocol_fee_recipient is not set"),
            new_virtual_sol_reserves: self
                .new_virtual_sol_reserves
                .clone()
                .expect("new_virtual_sol_reserves is not set"),
            new_virtual_token_reserves: self
                .new_virtual_token_reserves
                .clone()
                .expect("new_virtual_token_reserves is not set"),
            new_graduation_target: self
                .new_graduation_target
                .clone()
                .expect("new_graduation_target is not set"),
            new_graduation_fee: self
                .new_graduation_fee
                .clone()
                .expect("new_graduation_fee is not set"),
            new_damping_term: self
                .new_damping_term
                .clone()
                .expect("new_damping_term is not set"),
            new_swap_fee_basis_points: self
                .new_swap_fee_basis_points
                .clone()
                .expect("new_swap_fee_basis_points is not set"),
            new_token_for_stakers_basis_points: self
                .new_token_for_stakers_basis_points
                .clone()
                .expect("new_token_for_stakers_basis_points is not set"),
            new_token_amount_for_raydium_liquidity: self
                .new_token_amount_for_raydium_liquidity
                .clone()
                .expect("new_token_amount_for_raydium_liquidity is not set"),
            new_max_graduation_price_deviation_basis_points: self
                .new_max_graduation_price_deviation_basis_points
                .clone()
                .expect("new_max_graduation_price_deviation_basis_points is not set"),
            new_max_swap_amount_for_pool_price_correction_basis_points: self
                .new_max_swap_amount_for_pool_price_correction_basis_points
                .clone()
                .expect("new_max_swap_amount_for_pool_price_correction_basis_points is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_config` CPI accounts.
pub struct UpdateConfigCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_config` CPI instruction.
pub struct UpdateConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateConfigInstructionArgs,
}

impl<'a, 'b> UpdateConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateConfigCpiAccounts<'a, 'b>,
        args: UpdateConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            authority: accounts.authority,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&UpdateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` config
///   1. `[signer]` authority
///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct UpdateConfigCpiBuilder<'a, 'b> {
    instruction: Box<UpdateConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateConfigCpiBuilderInstruction {
            __program: program,
            config: None,
            authority: None,
            system_program: None,
            new_protocol_fee_recipient: None,
            new_virtual_sol_reserves: None,
            new_virtual_token_reserves: None,
            new_graduation_target: None,
            new_graduation_fee: None,
            new_damping_term: None,
            new_swap_fee_basis_points: None,
            new_token_for_stakers_basis_points: None,
            new_token_amount_for_raydium_liquidity: None,
            new_max_graduation_price_deviation_basis_points: None,
            new_max_swap_amount_for_pool_price_correction_basis_points: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn new_protocol_fee_recipient(&mut self, new_protocol_fee_recipient: Pubkey) -> &mut Self {
        self.instruction.new_protocol_fee_recipient = Some(new_protocol_fee_recipient);
        self
    }

    #[inline(always)]
    pub fn new_virtual_sol_reserves(&mut self, new_virtual_sol_reserves: u64) -> &mut Self {
        self.instruction.new_virtual_sol_reserves = Some(new_virtual_sol_reserves);
        self
    }

    #[inline(always)]
    pub fn new_virtual_token_reserves(&mut self, new_virtual_token_reserves: u64) -> &mut Self {
        self.instruction.new_virtual_token_reserves = Some(new_virtual_token_reserves);
        self
    }

    #[inline(always)]
    pub fn new_graduation_target(&mut self, new_graduation_target: u64) -> &mut Self {
        self.instruction.new_graduation_target = Some(new_graduation_target);
        self
    }

    #[inline(always)]
    pub fn new_graduation_fee(&mut self, new_graduation_fee: u64) -> &mut Self {
        self.instruction.new_graduation_fee = Some(new_graduation_fee);
        self
    }

    #[inline(always)]
    pub fn new_damping_term(&mut self, new_damping_term: u8) -> &mut Self {
        self.instruction.new_damping_term = Some(new_damping_term);
        self
    }

    #[inline(always)]
    pub fn new_swap_fee_basis_points(&mut self, new_swap_fee_basis_points: u8) -> &mut Self {
        self.instruction.new_swap_fee_basis_points = Some(new_swap_fee_basis_points);
        self
    }

    #[inline(always)]
    pub fn new_token_for_stakers_basis_points(
        &mut self,
        new_token_for_stakers_basis_points: u16,
    ) -> &mut Self {
        self.instruction.new_token_for_stakers_basis_points =
            Some(new_token_for_stakers_basis_points);
        self
    }

    #[inline(always)]
    pub fn new_token_amount_for_raydium_liquidity(
        &mut self,
        new_token_amount_for_raydium_liquidity: u64,
    ) -> &mut Self {
        self.instruction.new_token_amount_for_raydium_liquidity =
            Some(new_token_amount_for_raydium_liquidity);
        self
    }

    #[inline(always)]
    pub fn new_max_graduation_price_deviation_basis_points(
        &mut self,
        new_max_graduation_price_deviation_basis_points: u16,
    ) -> &mut Self {
        self.instruction
            .new_max_graduation_price_deviation_basis_points =
            Some(new_max_graduation_price_deviation_basis_points);
        self
    }

    #[inline(always)]
    pub fn new_max_swap_amount_for_pool_price_correction_basis_points(
        &mut self,
        new_max_swap_amount_for_pool_price_correction_basis_points: u16,
    ) -> &mut Self {
        self.instruction
            .new_max_swap_amount_for_pool_price_correction_basis_points =
            Some(new_max_swap_amount_for_pool_price_correction_basis_points);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateConfigInstructionArgs {
            new_protocol_fee_recipient: self
                .instruction
                .new_protocol_fee_recipient
                .clone()
                .expect("new_protocol_fee_recipient is not set"),
            new_virtual_sol_reserves: self
                .instruction
                .new_virtual_sol_reserves
                .clone()
                .expect("new_virtual_sol_reserves is not set"),
            new_virtual_token_reserves: self
                .instruction
                .new_virtual_token_reserves
                .clone()
                .expect("new_virtual_token_reserves is not set"),
            new_graduation_target: self
                .instruction
                .new_graduation_target
                .clone()
                .expect("new_graduation_target is not set"),
            new_graduation_fee: self
                .instruction
                .new_graduation_fee
                .clone()
                .expect("new_graduation_fee is not set"),
            new_damping_term: self
                .instruction
                .new_damping_term
                .clone()
                .expect("new_damping_term is not set"),
            new_swap_fee_basis_points: self
                .instruction
                .new_swap_fee_basis_points
                .clone()
                .expect("new_swap_fee_basis_points is not set"),
            new_token_for_stakers_basis_points: self
                .instruction
                .new_token_for_stakers_basis_points
                .clone()
                .expect("new_token_for_stakers_basis_points is not set"),
            new_token_amount_for_raydium_liquidity: self
                .instruction
                .new_token_amount_for_raydium_liquidity
                .clone()
                .expect("new_token_amount_for_raydium_liquidity is not set"),
            new_max_graduation_price_deviation_basis_points: self
                .instruction
                .new_max_graduation_price_deviation_basis_points
                .clone()
                .expect("new_max_graduation_price_deviation_basis_points is not set"),
            new_max_swap_amount_for_pool_price_correction_basis_points: self
                .instruction
                .new_max_swap_amount_for_pool_price_correction_basis_points
                .clone()
                .expect("new_max_swap_amount_for_pool_price_correction_basis_points is not set"),
        };
        let instruction = UpdateConfigCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdateConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_protocol_fee_recipient: Option<Pubkey>,
    new_virtual_sol_reserves: Option<u64>,
    new_virtual_token_reserves: Option<u64>,
    new_graduation_target: Option<u64>,
    new_graduation_fee: Option<u64>,
    new_damping_term: Option<u8>,
    new_swap_fee_basis_points: Option<u8>,
    new_token_for_stakers_basis_points: Option<u16>,
    new_token_amount_for_raydium_liquidity: Option<u64>,
    new_max_graduation_price_deviation_basis_points: Option<u16>,
    new_max_swap_amount_for_pool_price_correction_basis_points: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
