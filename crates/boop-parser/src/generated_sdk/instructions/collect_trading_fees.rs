//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CollectTradingFees {
    pub operator: solana_program::pubkey::Pubkey,

    pub protocol_fee_recipient: solana_program::pubkey::Pubkey,

    pub config: solana_program::pubkey::Pubkey,

    pub lock_program: solana_program::pubkey::Pubkey,

    pub vault_authority: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,
    /// Fee token account
    pub fee_nft_account: solana_program::pubkey::Pubkey,
    /// Store the locked the information of liquidity
    pub locked_liquidity: solana_program::pubkey::Pubkey,

    pub cpmm_program: solana_program::pubkey::Pubkey,

    pub cp_authority: solana_program::pubkey::Pubkey,

    pub pool_state: solana_program::pubkey::Pubkey,
    /// lp mint
    /// address = pool_state.lp_mint
    pub lp_mint: solana_program::pubkey::Pubkey,
    /// The token account for receive token_0
    pub recipient_token0_account: solana_program::pubkey::Pubkey,
    /// The token account for receive token_1
    pub recipient_token1_account: solana_program::pubkey::Pubkey,
    /// The address that holds pool tokens for token_0
    pub token0_vault: solana_program::pubkey::Pubkey,
    /// The address that holds pool tokens for token_1
    pub token1_vault: solana_program::pubkey::Pubkey,
    /// The mint of token_0 vault
    pub vault0_mint: solana_program::pubkey::Pubkey,
    /// The mint of token_1 vault
    pub vault1_mint: solana_program::pubkey::Pubkey,
    /// locked lp token account
    pub locked_lp_vault: solana_program::pubkey::Pubkey,
    /// System program
    pub system_program: solana_program::pubkey::Pubkey,
    /// Associated token program
    pub associated_token_program: solana_program::pubkey::Pubkey,
    /// token Program
    pub token_program: solana_program::pubkey::Pubkey,
    /// Token program 2022
    pub token_program2022: solana_program::pubkey::Pubkey,
    /// memo program
    pub memo_program: solana_program::pubkey::Pubkey,
}

impl CollectTradingFees {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(24 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.operator,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.protocol_fee_recipient,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lock_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_nft_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.locked_liquidity,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cpmm_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cp_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.recipient_token0_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.recipient_token1_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token0_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token1_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault0_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault1_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.locked_lp_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program2022,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.memo_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&CollectTradingFeesInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectTradingFeesInstructionData {
    discriminator: [u8; 8],
}

impl CollectTradingFeesInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [189, 38, 205, 234, 81, 77, 25, 1],
        }
    }
}

impl Default for CollectTradingFeesInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `CollectTradingFees`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` operator
///   1. `[]` protocol_fee_recipient
///   2. `[]` config
///   3. `[optional]` lock_program (default to `LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE`)
///   4. `[]` vault_authority
///   5. `[]` authority
///   6. `[]` fee_nft_account
///   7. `[writable]` locked_liquidity
///   8. `[optional]` cpmm_program (default to `CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C`)
///   9. `[]` cp_authority
///   10. `[writable]` pool_state
///   11. `[writable]` lp_mint
///   12. `[writable]` recipient_token0_account
///   13. `[writable]` recipient_token1_account
///   14. `[writable]` token0_vault
///   15. `[writable]` token1_vault
///   16. `[]` vault0_mint
///   17. `[]` vault1_mint
///   18. `[writable]` locked_lp_vault
///   19. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   20. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   21. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   22. `[optional]` token_program2022 (default to `TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb`)
///   23. `[optional]` memo_program (default to `MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr`)
#[derive(Clone, Debug, Default)]
pub struct CollectTradingFeesBuilder {
    operator: Option<solana_program::pubkey::Pubkey>,
    protocol_fee_recipient: Option<solana_program::pubkey::Pubkey>,
    config: Option<solana_program::pubkey::Pubkey>,
    lock_program: Option<solana_program::pubkey::Pubkey>,
    vault_authority: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    fee_nft_account: Option<solana_program::pubkey::Pubkey>,
    locked_liquidity: Option<solana_program::pubkey::Pubkey>,
    cpmm_program: Option<solana_program::pubkey::Pubkey>,
    cp_authority: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    recipient_token0_account: Option<solana_program::pubkey::Pubkey>,
    recipient_token1_account: Option<solana_program::pubkey::Pubkey>,
    token0_vault: Option<solana_program::pubkey::Pubkey>,
    token1_vault: Option<solana_program::pubkey::Pubkey>,
    vault0_mint: Option<solana_program::pubkey::Pubkey>,
    vault1_mint: Option<solana_program::pubkey::Pubkey>,
    locked_lp_vault: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    token_program2022: Option<solana_program::pubkey::Pubkey>,
    memo_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CollectTradingFeesBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn operator(&mut self, operator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn protocol_fee_recipient(
        &mut self,
        protocol_fee_recipient: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_fee_recipient = Some(protocol_fee_recipient);
        self
    }

    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    /// `[optional account, default to 'LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE']`
    #[inline(always)]
    pub fn lock_program(&mut self, lock_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lock_program = Some(lock_program);
        self
    }

    #[inline(always)]
    pub fn vault_authority(
        &mut self,
        vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vault_authority = Some(vault_authority);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Fee token account
    #[inline(always)]
    pub fn fee_nft_account(
        &mut self,
        fee_nft_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.fee_nft_account = Some(fee_nft_account);
        self
    }

    /// Store the locked the information of liquidity
    #[inline(always)]
    pub fn locked_liquidity(
        &mut self,
        locked_liquidity: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.locked_liquidity = Some(locked_liquidity);
        self
    }

    /// `[optional account, default to 'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C']`
    #[inline(always)]
    pub fn cpmm_program(&mut self, cpmm_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cpmm_program = Some(cpmm_program);
        self
    }

    #[inline(always)]
    pub fn cp_authority(&mut self, cp_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cp_authority = Some(cp_authority);
        self
    }

    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// lp mint
    /// address = pool_state.lp_mint
    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    /// The token account for receive token_0
    #[inline(always)]
    pub fn recipient_token0_account(
        &mut self,
        recipient_token0_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token0_account = Some(recipient_token0_account);
        self
    }

    /// The token account for receive token_1
    #[inline(always)]
    pub fn recipient_token1_account(
        &mut self,
        recipient_token1_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token1_account = Some(recipient_token1_account);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(&mut self, token0_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(&mut self, token1_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token1_vault = Some(token1_vault);
        self
    }

    /// The mint of token_0 vault
    #[inline(always)]
    pub fn vault0_mint(&mut self, vault0_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault0_mint = Some(vault0_mint);
        self
    }

    /// The mint of token_1 vault
    #[inline(always)]
    pub fn vault1_mint(&mut self, vault1_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault1_mint = Some(vault1_mint);
        self
    }

    /// locked lp token account
    #[inline(always)]
    pub fn locked_lp_vault(
        &mut self,
        locked_lp_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.locked_lp_vault = Some(locked_lp_vault);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// Associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// token Program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb']`
    /// Token program 2022
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_program2022 = Some(token_program2022);
        self
    }

    /// `[optional account, default to 'MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr']`
    /// memo program
    #[inline(always)]
    pub fn memo_program(&mut self, memo_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.memo_program = Some(memo_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CollectTradingFees {
            operator: self.operator.expect("operator is not set"),
            protocol_fee_recipient: self
                .protocol_fee_recipient
                .expect("protocol_fee_recipient is not set"),
            config: self.config.expect("config is not set"),
            lock_program: self.lock_program.unwrap_or(solana_program::pubkey!(
                "LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE"
            )),
            vault_authority: self.vault_authority.expect("vault_authority is not set"),
            authority: self.authority.expect("authority is not set"),
            fee_nft_account: self.fee_nft_account.expect("fee_nft_account is not set"),
            locked_liquidity: self.locked_liquidity.expect("locked_liquidity is not set"),
            cpmm_program: self.cpmm_program.unwrap_or(solana_program::pubkey!(
                "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
            )),
            cp_authority: self.cp_authority.expect("cp_authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            recipient_token0_account: self
                .recipient_token0_account
                .expect("recipient_token0_account is not set"),
            recipient_token1_account: self
                .recipient_token1_account
                .expect("recipient_token1_account is not set"),
            token0_vault: self.token0_vault.expect("token0_vault is not set"),
            token1_vault: self.token1_vault.expect("token1_vault is not set"),
            vault0_mint: self.vault0_mint.expect("vault0_mint is not set"),
            vault1_mint: self.vault1_mint.expect("vault1_mint is not set"),
            locked_lp_vault: self.locked_lp_vault.expect("locked_lp_vault is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token_program2022: self.token_program2022.unwrap_or(solana_program::pubkey!(
                "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
            )),
            memo_program: self.memo_program.unwrap_or(solana_program::pubkey!(
                "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `collect_trading_fees` CPI accounts.
pub struct CollectTradingFeesCpiAccounts<'a, 'b> {
    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee_recipient: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Fee token account
    pub fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Store the locked the information of liquidity
    pub locked_liquidity: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpmm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub cp_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// lp mint
    /// address = pool_state.lp_mint
    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account for receive token_0
    pub recipient_token0_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account for receive token_1
    pub recipient_token1_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of token_0 vault
    pub vault0_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of token_1 vault
    pub vault1_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// locked lp token account
    pub locked_lp_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Associated token program
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// token Program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program 2022
    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    /// memo program
    pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `collect_trading_fees` CPI instruction.
pub struct CollectTradingFeesCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_fee_recipient: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Fee token account
    pub fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Store the locked the information of liquidity
    pub locked_liquidity: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpmm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub cp_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// lp mint
    /// address = pool_state.lp_mint
    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account for receive token_0
    pub recipient_token0_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The token account for receive token_1
    pub recipient_token1_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of token_0 vault
    pub vault0_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of token_1 vault
    pub vault1_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// locked lp token account
    pub locked_lp_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Associated token program
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// token Program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program 2022
    pub token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    /// memo program
    pub memo_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> CollectTradingFeesCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CollectTradingFeesCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            operator: accounts.operator,
            protocol_fee_recipient: accounts.protocol_fee_recipient,
            config: accounts.config,
            lock_program: accounts.lock_program,
            vault_authority: accounts.vault_authority,
            authority: accounts.authority,
            fee_nft_account: accounts.fee_nft_account,
            locked_liquidity: accounts.locked_liquidity,
            cpmm_program: accounts.cpmm_program,
            cp_authority: accounts.cp_authority,
            pool_state: accounts.pool_state,
            lp_mint: accounts.lp_mint,
            recipient_token0_account: accounts.recipient_token0_account,
            recipient_token1_account: accounts.recipient_token1_account,
            token0_vault: accounts.token0_vault,
            token1_vault: accounts.token1_vault,
            vault0_mint: accounts.vault0_mint,
            vault1_mint: accounts.vault1_mint,
            locked_lp_vault: accounts.locked_lp_vault,
            system_program: accounts.system_program,
            associated_token_program: accounts.associated_token_program,
            token_program: accounts.token_program,
            token_program2022: accounts.token_program2022,
            memo_program: accounts.memo_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(24 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.operator.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.protocol_fee_recipient.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lock_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_nft_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.locked_liquidity.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cpmm_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cp_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.recipient_token0_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.recipient_token1_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token0_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token1_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault0_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault1_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.locked_lp_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program2022.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.memo_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&CollectTradingFeesInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(25 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.operator.clone());
        account_infos.push(self.protocol_fee_recipient.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.lock_program.clone());
        account_infos.push(self.vault_authority.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.fee_nft_account.clone());
        account_infos.push(self.locked_liquidity.clone());
        account_infos.push(self.cpmm_program.clone());
        account_infos.push(self.cp_authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.recipient_token0_account.clone());
        account_infos.push(self.recipient_token1_account.clone());
        account_infos.push(self.token0_vault.clone());
        account_infos.push(self.token1_vault.clone());
        account_infos.push(self.vault0_mint.clone());
        account_infos.push(self.vault1_mint.clone());
        account_infos.push(self.locked_lp_vault.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_program2022.clone());
        account_infos.push(self.memo_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CollectTradingFees` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` operator
///   1. `[]` protocol_fee_recipient
///   2. `[]` config
///   3. `[]` lock_program
///   4. `[]` vault_authority
///   5. `[]` authority
///   6. `[]` fee_nft_account
///   7. `[writable]` locked_liquidity
///   8. `[]` cpmm_program
///   9. `[]` cp_authority
///   10. `[writable]` pool_state
///   11. `[writable]` lp_mint
///   12. `[writable]` recipient_token0_account
///   13. `[writable]` recipient_token1_account
///   14. `[writable]` token0_vault
///   15. `[writable]` token1_vault
///   16. `[]` vault0_mint
///   17. `[]` vault1_mint
///   18. `[writable]` locked_lp_vault
///   19. `[]` system_program
///   20. `[]` associated_token_program
///   21. `[]` token_program
///   22. `[]` token_program2022
///   23. `[]` memo_program
#[derive(Clone, Debug)]
pub struct CollectTradingFeesCpiBuilder<'a, 'b> {
    instruction: Box<CollectTradingFeesCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CollectTradingFeesCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CollectTradingFeesCpiBuilderInstruction {
            __program: program,
            operator: None,
            protocol_fee_recipient: None,
            config: None,
            lock_program: None,
            vault_authority: None,
            authority: None,
            fee_nft_account: None,
            locked_liquidity: None,
            cpmm_program: None,
            cp_authority: None,
            pool_state: None,
            lp_mint: None,
            recipient_token0_account: None,
            recipient_token1_account: None,
            token0_vault: None,
            token1_vault: None,
            vault0_mint: None,
            vault1_mint: None,
            locked_lp_vault: None,
            system_program: None,
            associated_token_program: None,
            token_program: None,
            token_program2022: None,
            memo_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn operator(
        &mut self,
        operator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn protocol_fee_recipient(
        &mut self,
        protocol_fee_recipient: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_fee_recipient = Some(protocol_fee_recipient);
        self
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn lock_program(
        &mut self,
        lock_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lock_program = Some(lock_program);
        self
    }

    #[inline(always)]
    pub fn vault_authority(
        &mut self,
        vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_authority = Some(vault_authority);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Fee token account
    #[inline(always)]
    pub fn fee_nft_account(
        &mut self,
        fee_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_nft_account = Some(fee_nft_account);
        self
    }

    /// Store the locked the information of liquidity
    #[inline(always)]
    pub fn locked_liquidity(
        &mut self,
        locked_liquidity: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.locked_liquidity = Some(locked_liquidity);
        self
    }

    #[inline(always)]
    pub fn cpmm_program(
        &mut self,
        cpmm_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpmm_program = Some(cpmm_program);
        self
    }

    #[inline(always)]
    pub fn cp_authority(
        &mut self,
        cp_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cp_authority = Some(cp_authority);
        self
    }

    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// lp mint
    /// address = pool_state.lp_mint
    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    /// The token account for receive token_0
    #[inline(always)]
    pub fn recipient_token0_account(
        &mut self,
        recipient_token0_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token0_account = Some(recipient_token0_account);
        self
    }

    /// The token account for receive token_1
    #[inline(always)]
    pub fn recipient_token1_account(
        &mut self,
        recipient_token1_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token1_account = Some(recipient_token1_account);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(
        &mut self,
        token0_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(
        &mut self,
        token1_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token1_vault = Some(token1_vault);
        self
    }

    /// The mint of token_0 vault
    #[inline(always)]
    pub fn vault0_mint(
        &mut self,
        vault0_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault0_mint = Some(vault0_mint);
        self
    }

    /// The mint of token_1 vault
    #[inline(always)]
    pub fn vault1_mint(
        &mut self,
        vault1_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault1_mint = Some(vault1_mint);
        self
    }

    /// locked lp token account
    #[inline(always)]
    pub fn locked_lp_vault(
        &mut self,
        locked_lp_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.locked_lp_vault = Some(locked_lp_vault);
        self
    }

    /// System program
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// token Program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Token program 2022
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program2022 = Some(token_program2022);
        self
    }

    /// memo program
    #[inline(always)]
    pub fn memo_program(
        &mut self,
        memo_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.memo_program = Some(memo_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = CollectTradingFeesCpi {
            __program: self.instruction.__program,

            operator: self.instruction.operator.expect("operator is not set"),

            protocol_fee_recipient: self
                .instruction
                .protocol_fee_recipient
                .expect("protocol_fee_recipient is not set"),

            config: self.instruction.config.expect("config is not set"),

            lock_program: self
                .instruction
                .lock_program
                .expect("lock_program is not set"),

            vault_authority: self
                .instruction
                .vault_authority
                .expect("vault_authority is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            fee_nft_account: self
                .instruction
                .fee_nft_account
                .expect("fee_nft_account is not set"),

            locked_liquidity: self
                .instruction
                .locked_liquidity
                .expect("locked_liquidity is not set"),

            cpmm_program: self
                .instruction
                .cpmm_program
                .expect("cpmm_program is not set"),

            cp_authority: self
                .instruction
                .cp_authority
                .expect("cp_authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            recipient_token0_account: self
                .instruction
                .recipient_token0_account
                .expect("recipient_token0_account is not set"),

            recipient_token1_account: self
                .instruction
                .recipient_token1_account
                .expect("recipient_token1_account is not set"),

            token0_vault: self
                .instruction
                .token0_vault
                .expect("token0_vault is not set"),

            token1_vault: self
                .instruction
                .token1_vault
                .expect("token1_vault is not set"),

            vault0_mint: self
                .instruction
                .vault0_mint
                .expect("vault0_mint is not set"),

            vault1_mint: self
                .instruction
                .vault1_mint
                .expect("vault1_mint is not set"),

            locked_lp_vault: self
                .instruction
                .locked_lp_vault
                .expect("locked_lp_vault is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_program2022: self
                .instruction
                .token_program2022
                .expect("token_program2022 is not set"),

            memo_program: self
                .instruction
                .memo_program
                .expect("memo_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CollectTradingFeesCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    operator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_fee_recipient: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lock_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    locked_liquidity: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpmm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cp_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    recipient_token0_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    recipient_token1_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token0_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token1_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault0_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault1_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    locked_lp_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program2022: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    memo_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
