//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct SwapSolForTokensOnRaydium {
    pub config: solana_program::pubkey::Pubkey,

    pub bonding_curve: solana_program::pubkey::Pubkey,
    /// Which config the pool belongs to.
    pub amm_config: solana_program::pubkey::Pubkey,

    pub operator: solana_program::pubkey::Pubkey,

    pub vault_authority: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub pool_state: solana_program::pubkey::Pubkey,

    pub input_vault: solana_program::pubkey::Pubkey,

    pub output_vault: solana_program::pubkey::Pubkey,

    pub bonding_curve_vault: solana_program::pubkey::Pubkey,

    pub bonding_curve_wsol_vault: solana_program::pubkey::Pubkey,
    /// token_0 mint, the key must smaller than token_1 mint
    pub output_token_mint: solana_program::pubkey::Pubkey,
    /// token_1 mint, the key must greater than token_0 mint
    pub input_token_mint: solana_program::pubkey::Pubkey,
    /// input_token_mint and output_token_mint have the same token program
    pub token_program: solana_program::pubkey::Pubkey,

    pub cp_swap_program: solana_program::pubkey::Pubkey,

    pub observation_state: solana_program::pubkey::Pubkey,
}

impl SwapSolForTokensOnRaydium {
    pub fn instruction(
        &self,
        args: SwapSolForTokensOnRaydiumInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SwapSolForTokensOnRaydiumInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bonding_curve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.operator,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.input_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.output_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bonding_curve_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bonding_curve_wsol_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.output_token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.input_token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cp_swap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.observation_state,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SwapSolForTokensOnRaydiumInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapSolForTokensOnRaydiumInstructionData {
    discriminator: [u8; 8],
}

impl SwapSolForTokensOnRaydiumInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [107, 248, 131, 239, 152, 234, 54, 35],
        }
    }
}

impl Default for SwapSolForTokensOnRaydiumInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapSolForTokensOnRaydiumInstructionArgs {
    pub amount_in: u64,
    pub minimum_amount_out: u64,
}

/// Instruction builder for `SwapSolForTokensOnRaydium`.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` bonding_curve
///   2. `[]` amm_config
///   3. `[writable, signer]` operator
///   4. `[writable]` vault_authority
///   5. `[]` authority
///   6. `[writable]` pool_state
///   7. `[writable]` input_vault
///   8. `[writable]` output_vault
///   9. `[writable]` bonding_curve_vault
///   10. `[writable]` bonding_curve_wsol_vault
///   11. `[]` output_token_mint
///   12. `[optional]` input_token_mint (default to `So11111111111111111111111111111111111111112`)
///   13. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   14. `[optional]` cp_swap_program (default to `CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C`)
///   15. `[writable]` observation_state
#[derive(Clone, Debug, Default)]
pub struct SwapSolForTokensOnRaydiumBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    bonding_curve: Option<solana_program::pubkey::Pubkey>,
    amm_config: Option<solana_program::pubkey::Pubkey>,
    operator: Option<solana_program::pubkey::Pubkey>,
    vault_authority: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    input_vault: Option<solana_program::pubkey::Pubkey>,
    output_vault: Option<solana_program::pubkey::Pubkey>,
    bonding_curve_vault: Option<solana_program::pubkey::Pubkey>,
    bonding_curve_wsol_vault: Option<solana_program::pubkey::Pubkey>,
    output_token_mint: Option<solana_program::pubkey::Pubkey>,
    input_token_mint: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    cp_swap_program: Option<solana_program::pubkey::Pubkey>,
    observation_state: Option<solana_program::pubkey::Pubkey>,
    amount_in: Option<u64>,
    minimum_amount_out: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SwapSolForTokensOnRaydiumBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn bonding_curve(&mut self, bonding_curve: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bonding_curve = Some(bonding_curve);
        self
    }

    /// Which config the pool belongs to.
    #[inline(always)]
    pub fn amm_config(&mut self, amm_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_config = Some(amm_config);
        self
    }

    #[inline(always)]
    pub fn operator(&mut self, operator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn vault_authority(
        &mut self,
        vault_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vault_authority = Some(vault_authority);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn input_vault(&mut self, input_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.input_vault = Some(input_vault);
        self
    }

    #[inline(always)]
    pub fn output_vault(&mut self, output_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.output_vault = Some(output_vault);
        self
    }

    #[inline(always)]
    pub fn bonding_curve_vault(
        &mut self,
        bonding_curve_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.bonding_curve_vault = Some(bonding_curve_vault);
        self
    }

    #[inline(always)]
    pub fn bonding_curve_wsol_vault(
        &mut self,
        bonding_curve_wsol_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.bonding_curve_wsol_vault = Some(bonding_curve_wsol_vault);
        self
    }

    /// token_0 mint, the key must smaller than token_1 mint
    #[inline(always)]
    pub fn output_token_mint(
        &mut self,
        output_token_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_mint = Some(output_token_mint);
        self
    }

    /// `[optional account, default to 'So11111111111111111111111111111111111111112']`
    /// token_1 mint, the key must greater than token_0 mint
    #[inline(always)]
    pub fn input_token_mint(
        &mut self,
        input_token_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.input_token_mint = Some(input_token_mint);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// input_token_mint and output_token_mint have the same token program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to 'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C']`
    #[inline(always)]
    pub fn cp_swap_program(
        &mut self,
        cp_swap_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cp_swap_program = Some(cp_swap_program);
        self
    }

    #[inline(always)]
    pub fn observation_state(
        &mut self,
        observation_state: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.observation_state = Some(observation_state);
        self
    }

    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.amount_in = Some(amount_in);
        self
    }

    #[inline(always)]
    pub fn minimum_amount_out(&mut self, minimum_amount_out: u64) -> &mut Self {
        self.minimum_amount_out = Some(minimum_amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = SwapSolForTokensOnRaydium {
            config: self.config.expect("config is not set"),
            bonding_curve: self.bonding_curve.expect("bonding_curve is not set"),
            amm_config: self.amm_config.expect("amm_config is not set"),
            operator: self.operator.expect("operator is not set"),
            vault_authority: self.vault_authority.expect("vault_authority is not set"),
            authority: self.authority.expect("authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            input_vault: self.input_vault.expect("input_vault is not set"),
            output_vault: self.output_vault.expect("output_vault is not set"),
            bonding_curve_vault: self
                .bonding_curve_vault
                .expect("bonding_curve_vault is not set"),
            bonding_curve_wsol_vault: self
                .bonding_curve_wsol_vault
                .expect("bonding_curve_wsol_vault is not set"),
            output_token_mint: self
                .output_token_mint
                .expect("output_token_mint is not set"),
            input_token_mint: self.input_token_mint.unwrap_or(solana_program::pubkey!(
                "So11111111111111111111111111111111111111112"
            )),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            cp_swap_program: self.cp_swap_program.unwrap_or(solana_program::pubkey!(
                "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
            )),
            observation_state: self
                .observation_state
                .expect("observation_state is not set"),
        };
        let args = SwapSolForTokensOnRaydiumInstructionArgs {
            amount_in: self.amount_in.clone().expect("amount_in is not set"),
            minimum_amount_out: self
                .minimum_amount_out
                .clone()
                .expect("minimum_amount_out is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `swap_sol_for_tokens_on_raydium` CPI accounts.
pub struct SwapSolForTokensOnRaydiumCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,
    /// Which config the pool belongs to.
    pub amm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_0 mint, the key must smaller than token_1 mint
    pub output_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_1 mint, the key must greater than token_0 mint
    pub input_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// input_token_mint and output_token_mint have the same token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub cp_swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub observation_state: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `swap_sol_for_tokens_on_raydium` CPI instruction.
pub struct SwapSolForTokensOnRaydiumCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,
    /// Which config the pool belongs to.
    pub amm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub operator: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,

    pub input_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub output_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub bonding_curve_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_0 mint, the key must smaller than token_1 mint
    pub output_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_1 mint, the key must greater than token_0 mint
    pub input_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// input_token_mint and output_token_mint have the same token program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub cp_swap_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub observation_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SwapSolForTokensOnRaydiumInstructionArgs,
}

impl<'a, 'b> SwapSolForTokensOnRaydiumCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SwapSolForTokensOnRaydiumCpiAccounts<'a, 'b>,
        args: SwapSolForTokensOnRaydiumInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            bonding_curve: accounts.bonding_curve,
            amm_config: accounts.amm_config,
            operator: accounts.operator,
            vault_authority: accounts.vault_authority,
            authority: accounts.authority,
            pool_state: accounts.pool_state,
            input_vault: accounts.input_vault,
            output_vault: accounts.output_vault,
            bonding_curve_vault: accounts.bonding_curve_vault,
            bonding_curve_wsol_vault: accounts.bonding_curve_wsol_vault,
            output_token_mint: accounts.output_token_mint,
            input_token_mint: accounts.input_token_mint,
            token_program: accounts.token_program,
            cp_swap_program: accounts.cp_swap_program,
            observation_state: accounts.observation_state,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bonding_curve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.operator.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.input_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.output_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bonding_curve_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bonding_curve_wsol_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.output_token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.input_token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cp_swap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.observation_state.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SwapSolForTokensOnRaydiumInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::BOOP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(17 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.bonding_curve.clone());
        account_infos.push(self.amm_config.clone());
        account_infos.push(self.operator.clone());
        account_infos.push(self.vault_authority.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.input_vault.clone());
        account_infos.push(self.output_vault.clone());
        account_infos.push(self.bonding_curve_vault.clone());
        account_infos.push(self.bonding_curve_wsol_vault.clone());
        account_infos.push(self.output_token_mint.clone());
        account_infos.push(self.input_token_mint.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.cp_swap_program.clone());
        account_infos.push(self.observation_state.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SwapSolForTokensOnRaydium` via CPI.
///
/// ### Accounts:
///
///   0. `[]` config
///   1. `[writable]` bonding_curve
///   2. `[]` amm_config
///   3. `[writable, signer]` operator
///   4. `[writable]` vault_authority
///   5. `[]` authority
///   6. `[writable]` pool_state
///   7. `[writable]` input_vault
///   8. `[writable]` output_vault
///   9. `[writable]` bonding_curve_vault
///   10. `[writable]` bonding_curve_wsol_vault
///   11. `[]` output_token_mint
///   12. `[]` input_token_mint
///   13. `[]` token_program
///   14. `[]` cp_swap_program
///   15. `[writable]` observation_state
#[derive(Clone, Debug)]
pub struct SwapSolForTokensOnRaydiumCpiBuilder<'a, 'b> {
    instruction: Box<SwapSolForTokensOnRaydiumCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SwapSolForTokensOnRaydiumCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SwapSolForTokensOnRaydiumCpiBuilderInstruction {
            __program: program,
            config: None,
            bonding_curve: None,
            amm_config: None,
            operator: None,
            vault_authority: None,
            authority: None,
            pool_state: None,
            input_vault: None,
            output_vault: None,
            bonding_curve_vault: None,
            bonding_curve_wsol_vault: None,
            output_token_mint: None,
            input_token_mint: None,
            token_program: None,
            cp_swap_program: None,
            observation_state: None,
            amount_in: None,
            minimum_amount_out: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn bonding_curve(
        &mut self,
        bonding_curve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bonding_curve = Some(bonding_curve);
        self
    }

    /// Which config the pool belongs to.
    #[inline(always)]
    pub fn amm_config(
        &mut self,
        amm_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_config = Some(amm_config);
        self
    }

    #[inline(always)]
    pub fn operator(
        &mut self,
        operator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn vault_authority(
        &mut self,
        vault_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_authority = Some(vault_authority);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn input_vault(
        &mut self,
        input_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_vault = Some(input_vault);
        self
    }

    #[inline(always)]
    pub fn output_vault(
        &mut self,
        output_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_vault = Some(output_vault);
        self
    }

    #[inline(always)]
    pub fn bonding_curve_vault(
        &mut self,
        bonding_curve_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bonding_curve_vault = Some(bonding_curve_vault);
        self
    }

    #[inline(always)]
    pub fn bonding_curve_wsol_vault(
        &mut self,
        bonding_curve_wsol_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bonding_curve_wsol_vault = Some(bonding_curve_wsol_vault);
        self
    }

    /// token_0 mint, the key must smaller than token_1 mint
    #[inline(always)]
    pub fn output_token_mint(
        &mut self,
        output_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_mint = Some(output_token_mint);
        self
    }

    /// token_1 mint, the key must greater than token_0 mint
    #[inline(always)]
    pub fn input_token_mint(
        &mut self,
        input_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_mint = Some(input_token_mint);
        self
    }

    /// input_token_mint and output_token_mint have the same token program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn cp_swap_program(
        &mut self,
        cp_swap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cp_swap_program = Some(cp_swap_program);
        self
    }

    #[inline(always)]
    pub fn observation_state(
        &mut self,
        observation_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.observation_state = Some(observation_state);
        self
    }

    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.instruction.amount_in = Some(amount_in);
        self
    }

    #[inline(always)]
    pub fn minimum_amount_out(&mut self, minimum_amount_out: u64) -> &mut Self {
        self.instruction.minimum_amount_out = Some(minimum_amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SwapSolForTokensOnRaydiumInstructionArgs {
            amount_in: self
                .instruction
                .amount_in
                .clone()
                .expect("amount_in is not set"),
            minimum_amount_out: self
                .instruction
                .minimum_amount_out
                .clone()
                .expect("minimum_amount_out is not set"),
        };
        let instruction = SwapSolForTokensOnRaydiumCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            bonding_curve: self
                .instruction
                .bonding_curve
                .expect("bonding_curve is not set"),

            amm_config: self.instruction.amm_config.expect("amm_config is not set"),

            operator: self.instruction.operator.expect("operator is not set"),

            vault_authority: self
                .instruction
                .vault_authority
                .expect("vault_authority is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            input_vault: self
                .instruction
                .input_vault
                .expect("input_vault is not set"),

            output_vault: self
                .instruction
                .output_vault
                .expect("output_vault is not set"),

            bonding_curve_vault: self
                .instruction
                .bonding_curve_vault
                .expect("bonding_curve_vault is not set"),

            bonding_curve_wsol_vault: self
                .instruction
                .bonding_curve_wsol_vault
                .expect("bonding_curve_wsol_vault is not set"),

            output_token_mint: self
                .instruction
                .output_token_mint
                .expect("output_token_mint is not set"),

            input_token_mint: self
                .instruction
                .input_token_mint
                .expect("input_token_mint is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            cp_swap_program: self
                .instruction
                .cp_swap_program
                .expect("cp_swap_program is not set"),

            observation_state: self
                .instruction
                .observation_state
                .expect("observation_state is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SwapSolForTokensOnRaydiumCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bonding_curve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bonding_curve_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bonding_curve_wsol_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cp_swap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    observation_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amount_in: Option<u64>,
    minimum_amount_out: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
