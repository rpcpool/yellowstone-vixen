//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{Strategy, Vault},
    ID,
};

/// Vault Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum VaultProgramState {
    Vault(Vault),
    Strategy(Strategy),
}

impl VaultProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [211, 8, 232, 43, 2, 152, 117, 119] => {
                Ok(VaultProgramState::Vault(Vault::from_bytes(data_bytes)?))
            },
            [174, 110, 39, 119, 82, 106, 169, 102] => Ok(VaultProgramState::Strategy(
                Strategy::from_bytes(data_bytes)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = VaultProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "vault::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        VaultProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, Vault, VaultProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::Vault> for Vault {
        fn into_proto(self) -> proto_def::Vault {
            proto_def::Vault {
                enabled: self.enabled.into(),
                bumps: Some(self.bumps.into_proto()),
                total_amount: self.total_amount,
                token_vault: self.token_vault.to_string(),
                fee_vault: self.fee_vault.to_string(),
                token_mint: self.token_mint.to_string(),
                lp_mint: self.lp_mint.to_string(),
                strategies: self.strategies.into_iter().map(|x| x.to_string()).collect(),
                base: self.base.to_string(),
                admin: self.admin.to_string(),
                operator: self.operator.to_string(),
                locked_profit_tracker: Some(self.locked_profit_tracker.into_proto()),
            }
        }
    }
    use super::Strategy;
    impl IntoProto<proto_def::Strategy> for Strategy {
        fn into_proto(self) -> proto_def::Strategy {
            proto_def::Strategy {
                reserve: self.reserve.to_string(),
                collateral_vault: self.collateral_vault.to_string(),
                strategy_type: self.strategy_type as i32,
                current_liquidity: self.current_liquidity,
                bumps: self.bumps.into_iter().map(|x| x.into()).collect(),
                vault: self.vault.to_string(),
                is_disable: self.is_disable.into(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for VaultProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                VaultProgramState::Vault(data) => {
                    proto_def::program_state::StateOneof::Vault(data.into_proto())
                },
                VaultProgramState::Strategy(data) => {
                    proto_def::program_state::StateOneof::Strategy(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
