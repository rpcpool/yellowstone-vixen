//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::StrategyType;

/// Accounts.
#[derive(Debug)]
pub struct InitializeStrategy {
    /// Vault account
    pub vault: solana_program::pubkey::Pubkey,

    pub strategy_program: solana_program::pubkey::Pubkey,
    /// Strategy account
    pub strategy: solana_program::pubkey::Pubkey,

    pub reserve: solana_program::pubkey::Pubkey,
    /// Collateral vault account
    pub collateral_vault: solana_program::pubkey::Pubkey,
    /// Collateral mint account
    pub collateral_mint: solana_program::pubkey::Pubkey,
    /// Admin account
    pub admin: solana_program::pubkey::Pubkey,
    /// System program account
    pub system_program: solana_program::pubkey::Pubkey,
    /// Rent account
    pub rent: solana_program::pubkey::Pubkey,
    /// Token program account
    pub token_program: solana_program::pubkey::Pubkey,
}

impl InitializeStrategy {
    pub fn instruction(
        &self,
        args: InitializeStrategyInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeStrategyInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.strategy_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.collateral_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.collateral_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.admin, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeStrategyInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::VAULT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeStrategyInstructionData {
    discriminator: [u8; 8],
}

impl InitializeStrategyInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [208, 119, 144, 145, 178, 57, 105, 252],
        }
    }
}

impl Default for InitializeStrategyInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeStrategyInstructionArgs {
    pub strategy_index: u8,
    pub other_bumps: [u8; 10],
    pub strategy_type: StrategyType,
}

/// Instruction builder for `InitializeStrategy`.
///
/// ### Accounts:
///
///   0. `[writable]` vault
///   1. `[]` strategy_program
///   2. `[writable]` strategy
///   3. `[writable]` reserve
///   4. `[writable]` collateral_vault
///   5. `[]` collateral_mint
///   6. `[writable, signer]` admin
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct InitializeStrategyBuilder {
    vault: Option<solana_program::pubkey::Pubkey>,
    strategy_program: Option<solana_program::pubkey::Pubkey>,
    strategy: Option<solana_program::pubkey::Pubkey>,
    reserve: Option<solana_program::pubkey::Pubkey>,
    collateral_vault: Option<solana_program::pubkey::Pubkey>,
    collateral_mint: Option<solana_program::pubkey::Pubkey>,
    admin: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    strategy_index: Option<u8>,
    other_bumps: Option<[u8; 10]>,
    strategy_type: Option<StrategyType>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeStrategyBuilder {
    pub fn new() -> Self { Self::default() }

    /// Vault account
    #[inline(always)]
    pub fn vault(&mut self, vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault = Some(vault);
        self
    }

    #[inline(always)]
    pub fn strategy_program(
        &mut self,
        strategy_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.strategy_program = Some(strategy_program);
        self
    }

    /// Strategy account
    #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
        self.strategy = Some(strategy);
        self
    }

    #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve = Some(reserve);
        self
    }

    /// Collateral vault account
    #[inline(always)]
    pub fn collateral_vault(
        &mut self,
        collateral_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collateral_vault = Some(collateral_vault);
        self
    }

    /// Collateral mint account
    #[inline(always)]
    pub fn collateral_mint(
        &mut self,
        collateral_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collateral_mint = Some(collateral_mint);
        self
    }

    /// Admin account
    #[inline(always)]
    pub fn admin(&mut self, admin: solana_program::pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program account
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    /// Rent account
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// Token program account
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn strategy_index(&mut self, strategy_index: u8) -> &mut Self {
        self.strategy_index = Some(strategy_index);
        self
    }

    #[inline(always)]
    pub fn other_bumps(&mut self, other_bumps: [u8; 10]) -> &mut Self {
        self.other_bumps = Some(other_bumps);
        self
    }

    #[inline(always)]
    pub fn strategy_type(&mut self, strategy_type: StrategyType) -> &mut Self {
        self.strategy_type = Some(strategy_type);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeStrategy {
            vault: self.vault.expect("vault is not set"),
            strategy_program: self.strategy_program.expect("strategy_program is not set"),
            strategy: self.strategy.expect("strategy is not set"),
            reserve: self.reserve.expect("reserve is not set"),
            collateral_vault: self.collateral_vault.expect("collateral_vault is not set"),
            collateral_mint: self.collateral_mint.expect("collateral_mint is not set"),
            admin: self.admin.expect("admin is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = InitializeStrategyInstructionArgs {
            strategy_index: self
                .strategy_index
                .clone()
                .expect("strategy_index is not set"),
            other_bumps: self.other_bumps.clone().expect("other_bumps is not set"),
            strategy_type: self
                .strategy_type
                .clone()
                .expect("strategy_type is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_strategy` CPI accounts.
pub struct InitializeStrategyCpiAccounts<'a, 'b> {
    /// Vault account
    pub vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Strategy account
    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve: &'b solana_program::account_info::AccountInfo<'a>,
    /// Collateral vault account
    pub collateral_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Collateral mint account
    pub collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Admin account
    pub admin: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program account
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Rent account
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program account
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_strategy` CPI instruction.
pub struct InitializeStrategyCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Vault account
    pub vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Strategy account
    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve: &'b solana_program::account_info::AccountInfo<'a>,
    /// Collateral vault account
    pub collateral_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Collateral mint account
    pub collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Admin account
    pub admin: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program account
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Rent account
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program account
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeStrategyInstructionArgs,
}

impl<'a, 'b> InitializeStrategyCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeStrategyCpiAccounts<'a, 'b>,
        args: InitializeStrategyInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            vault: accounts.vault,
            strategy_program: accounts.strategy_program,
            strategy: accounts.strategy,
            reserve: accounts.reserve,
            collateral_vault: accounts.collateral_vault,
            collateral_mint: accounts.collateral_mint,
            admin: accounts.admin,
            system_program: accounts.system_program,
            rent: accounts.rent,
            token_program: accounts.token_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.strategy_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collateral_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.collateral_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.admin.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeStrategyInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::VAULT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.vault.clone());
        account_infos.push(self.strategy_program.clone());
        account_infos.push(self.strategy.clone());
        account_infos.push(self.reserve.clone());
        account_infos.push(self.collateral_vault.clone());
        account_infos.push(self.collateral_mint.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeStrategy` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` vault
///   1. `[]` strategy_program
///   2. `[writable]` strategy
///   3. `[writable]` reserve
///   4. `[writable]` collateral_vault
///   5. `[]` collateral_mint
///   6. `[writable, signer]` admin
///   7. `[]` system_program
///   8. `[]` rent
///   9. `[]` token_program
#[derive(Clone, Debug)]
pub struct InitializeStrategyCpiBuilder<'a, 'b> {
    instruction: Box<InitializeStrategyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeStrategyCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeStrategyCpiBuilderInstruction {
            __program: program,
            vault: None,
            strategy_program: None,
            strategy: None,
            reserve: None,
            collateral_vault: None,
            collateral_mint: None,
            admin: None,
            system_program: None,
            rent: None,
            token_program: None,
            strategy_index: None,
            other_bumps: None,
            strategy_type: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Vault account
    #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vault = Some(vault);
        self
    }

    #[inline(always)]
    pub fn strategy_program(
        &mut self,
        strategy_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy_program = Some(strategy_program);
        self
    }

    /// Strategy account
    #[inline(always)]
    pub fn strategy(
        &mut self,
        strategy: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy = Some(strategy);
        self
    }

    #[inline(always)]
    pub fn reserve(
        &mut self,
        reserve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve = Some(reserve);
        self
    }

    /// Collateral vault account
    #[inline(always)]
    pub fn collateral_vault(
        &mut self,
        collateral_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collateral_vault = Some(collateral_vault);
        self
    }

    /// Collateral mint account
    #[inline(always)]
    pub fn collateral_mint(
        &mut self,
        collateral_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collateral_mint = Some(collateral_mint);
        self
    }

    /// Admin account
    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    /// System program account
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Rent account
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    /// Token program account
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn strategy_index(&mut self, strategy_index: u8) -> &mut Self {
        self.instruction.strategy_index = Some(strategy_index);
        self
    }

    #[inline(always)]
    pub fn other_bumps(&mut self, other_bumps: [u8; 10]) -> &mut Self {
        self.instruction.other_bumps = Some(other_bumps);
        self
    }

    #[inline(always)]
    pub fn strategy_type(&mut self, strategy_type: StrategyType) -> &mut Self {
        self.instruction.strategy_type = Some(strategy_type);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeStrategyInstructionArgs {
            strategy_index: self
                .instruction
                .strategy_index
                .clone()
                .expect("strategy_index is not set"),
            other_bumps: self
                .instruction
                .other_bumps
                .clone()
                .expect("other_bumps is not set"),
            strategy_type: self
                .instruction
                .strategy_type
                .clone()
                .expect("strategy_type is not set"),
        };
        let instruction = InitializeStrategyCpi {
            __program: self.instruction.__program,

            vault: self.instruction.vault.expect("vault is not set"),

            strategy_program: self
                .instruction
                .strategy_program
                .expect("strategy_program is not set"),

            strategy: self.instruction.strategy.expect("strategy is not set"),

            reserve: self.instruction.reserve.expect("reserve is not set"),

            collateral_vault: self
                .instruction
                .collateral_vault
                .expect("collateral_vault is not set"),

            collateral_mint: self
                .instruction
                .collateral_mint
                .expect("collateral_mint is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeStrategyCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collateral_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collateral_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy_index: Option<u8>,
    other_bumps: Option<[u8; 10]>,
    strategy_type: Option<StrategyType>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
