//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct DepositStrategy {
    /// vault
    pub vault: solana_program::pubkey::Pubkey,
    /// strategy
    pub strategy: solana_program::pubkey::Pubkey,
    /// token_vault
    pub token_vault: solana_program::pubkey::Pubkey,
    /// fee_vault
    pub fee_vault: solana_program::pubkey::Pubkey,
    /// lp_mint
    pub lp_mint: solana_program::pubkey::Pubkey,

    pub strategy_program: solana_program::pubkey::Pubkey,
    /// collateral_vault
    pub collateral_vault: solana_program::pubkey::Pubkey,

    pub reserve: solana_program::pubkey::Pubkey,
    /// token_program
    pub token_program: solana_program::pubkey::Pubkey,
    /// operator
    pub operator: solana_program::pubkey::Pubkey,
}

impl DepositStrategy {
    pub fn instruction(
        &self,
        args: DepositStrategyInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: DepositStrategyInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vault, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.strategy,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.fee_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.strategy_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.collateral_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.reserve,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.operator,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&DepositStrategyInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::VAULT_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositStrategyInstructionData {
    discriminator: [u8; 8],
}

impl DepositStrategyInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [246, 82, 57, 226, 131, 222, 253, 249],
        }
    }
}

impl Default for DepositStrategyInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DepositStrategyInstructionArgs {
    pub amount: u64,
}

/// Instruction builder for `DepositStrategy`.
///
/// ### Accounts:
///
///   0. `[writable]` vault
///   1. `[writable]` strategy
///   2. `[writable]` token_vault
///   3. `[writable]` fee_vault
///   4. `[writable]` lp_mint
///   5. `[]` strategy_program
///   6. `[writable]` collateral_vault
///   7. `[writable]` reserve
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   9. `[signer]` operator
#[derive(Clone, Debug, Default)]
pub struct DepositStrategyBuilder {
    vault: Option<solana_program::pubkey::Pubkey>,
    strategy: Option<solana_program::pubkey::Pubkey>,
    token_vault: Option<solana_program::pubkey::Pubkey>,
    fee_vault: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    strategy_program: Option<solana_program::pubkey::Pubkey>,
    collateral_vault: Option<solana_program::pubkey::Pubkey>,
    reserve: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    operator: Option<solana_program::pubkey::Pubkey>,
    amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl DepositStrategyBuilder {
    pub fn new() -> Self { Self::default() }

    /// vault
    #[inline(always)]
    pub fn vault(&mut self, vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault = Some(vault);
        self
    }

    /// strategy
    #[inline(always)]
    pub fn strategy(&mut self, strategy: solana_program::pubkey::Pubkey) -> &mut Self {
        self.strategy = Some(strategy);
        self
    }

    /// token_vault
    #[inline(always)]
    pub fn token_vault(&mut self, token_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_vault = Some(token_vault);
        self
    }

    /// fee_vault
    #[inline(always)]
    pub fn fee_vault(&mut self, fee_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_vault = Some(fee_vault);
        self
    }

    /// lp_mint
    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn strategy_program(
        &mut self,
        strategy_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.strategy_program = Some(strategy_program);
        self
    }

    /// collateral_vault
    #[inline(always)]
    pub fn collateral_vault(
        &mut self,
        collateral_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.collateral_vault = Some(collateral_vault);
        self
    }

    #[inline(always)]
    pub fn reserve(&mut self, reserve: solana_program::pubkey::Pubkey) -> &mut Self {
        self.reserve = Some(reserve);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// token_program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// operator
    #[inline(always)]
    pub fn operator(&mut self, operator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = DepositStrategy {
            vault: self.vault.expect("vault is not set"),
            strategy: self.strategy.expect("strategy is not set"),
            token_vault: self.token_vault.expect("token_vault is not set"),
            fee_vault: self.fee_vault.expect("fee_vault is not set"),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            strategy_program: self.strategy_program.expect("strategy_program is not set"),
            collateral_vault: self.collateral_vault.expect("collateral_vault is not set"),
            reserve: self.reserve.expect("reserve is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            operator: self.operator.expect("operator is not set"),
        };
        let args = DepositStrategyInstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `deposit_strategy` CPI accounts.
pub struct DepositStrategyCpiAccounts<'a, 'b> {
    /// vault
    pub vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// strategy
    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_vault
    pub token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// fee_vault
    pub fee_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// lp_mint
    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// collateral_vault
    pub collateral_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// operator
    pub operator: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `deposit_strategy` CPI instruction.
pub struct DepositStrategyCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// vault
    pub vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// strategy
    pub strategy: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_vault
    pub token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// fee_vault
    pub fee_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// lp_mint
    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub strategy_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// collateral_vault
    pub collateral_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub reserve: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// operator
    pub operator: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: DepositStrategyInstructionArgs,
}

impl<'a, 'b> DepositStrategyCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: DepositStrategyCpiAccounts<'a, 'b>,
        args: DepositStrategyInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            vault: accounts.vault,
            strategy: accounts.strategy,
            token_vault: accounts.token_vault,
            fee_vault: accounts.fee_vault,
            lp_mint: accounts.lp_mint,
            strategy_program: accounts.strategy_program,
            collateral_vault: accounts.collateral_vault,
            reserve: accounts.reserve,
            token_program: accounts.token_program,
            operator: accounts.operator,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.strategy.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.fee_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.strategy_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.collateral_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.reserve.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.operator.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&DepositStrategyInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::VAULT_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.vault.clone());
        account_infos.push(self.strategy.clone());
        account_infos.push(self.token_vault.clone());
        account_infos.push(self.fee_vault.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.strategy_program.clone());
        account_infos.push(self.collateral_vault.clone());
        account_infos.push(self.reserve.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.operator.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DepositStrategy` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` vault
///   1. `[writable]` strategy
///   2. `[writable]` token_vault
///   3. `[writable]` fee_vault
///   4. `[writable]` lp_mint
///   5. `[]` strategy_program
///   6. `[writable]` collateral_vault
///   7. `[writable]` reserve
///   8. `[]` token_program
///   9. `[signer]` operator
#[derive(Clone, Debug)]
pub struct DepositStrategyCpiBuilder<'a, 'b> {
    instruction: Box<DepositStrategyCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DepositStrategyCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DepositStrategyCpiBuilderInstruction {
            __program: program,
            vault: None,
            strategy: None,
            token_vault: None,
            fee_vault: None,
            lp_mint: None,
            strategy_program: None,
            collateral_vault: None,
            reserve: None,
            token_program: None,
            operator: None,
            amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// vault
    #[inline(always)]
    pub fn vault(&mut self, vault: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vault = Some(vault);
        self
    }

    /// strategy
    #[inline(always)]
    pub fn strategy(
        &mut self,
        strategy: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy = Some(strategy);
        self
    }

    /// token_vault
    #[inline(always)]
    pub fn token_vault(
        &mut self,
        token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_vault = Some(token_vault);
        self
    }

    /// fee_vault
    #[inline(always)]
    pub fn fee_vault(
        &mut self,
        fee_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_vault = Some(fee_vault);
        self
    }

    /// lp_mint
    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn strategy_program(
        &mut self,
        strategy_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.strategy_program = Some(strategy_program);
        self
    }

    /// collateral_vault
    #[inline(always)]
    pub fn collateral_vault(
        &mut self,
        collateral_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collateral_vault = Some(collateral_vault);
        self
    }

    #[inline(always)]
    pub fn reserve(
        &mut self,
        reserve: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reserve = Some(reserve);
        self
    }

    /// token_program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// operator
    #[inline(always)]
    pub fn operator(
        &mut self,
        operator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = DepositStrategyInstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
        };
        let instruction = DepositStrategyCpi {
            __program: self.instruction.__program,

            vault: self.instruction.vault.expect("vault is not set"),

            strategy: self.instruction.strategy.expect("strategy is not set"),

            token_vault: self
                .instruction
                .token_vault
                .expect("token_vault is not set"),

            fee_vault: self.instruction.fee_vault.expect("fee_vault is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            strategy_program: self
                .instruction
                .strategy_program
                .expect("strategy_program is not set"),

            collateral_vault: self
                .instruction
                .collateral_vault
                .expect("collateral_vault is not set"),

            reserve: self.instruction.reserve.expect("reserve is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            operator: self.instruction.operator.expect("operator is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DepositStrategyCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    strategy_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collateral_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    reserve: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    operator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
