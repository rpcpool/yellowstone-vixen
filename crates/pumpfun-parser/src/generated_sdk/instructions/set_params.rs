//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_pubkey::Pubkey;

/// Accounts.
#[derive(Debug)]
pub struct SetParams {
    pub global: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub program: solana_pubkey::Pubkey,
}

impl SetParams {
    pub fn instruction(&self, args: SetParamsInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SetParamsInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.global, false));
        accounts.push(solana_instruction::AccountMeta::new(self.authority, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SetParamsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::PUMP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetParamsInstructionData {
    discriminator: [u8; 8],
}

impl SetParamsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [27, 234, 178, 52, 147, 2, 187, 141],
        }
    }
}

impl Default for SetParamsInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SetParamsInstructionArgs {
    pub initial_virtual_token_reserves: u64,
    pub initial_virtual_sol_reserves: u64,
    pub initial_real_token_reserves: u64,
    pub token_total_supply: u64,
    pub fee_basis_points: u64,
    pub withdraw_authority: Pubkey,
    pub enable_migrate: bool,
    pub pool_migration_fee: u64,
    pub creator_fee_basis_points: u64,
    pub set_creator_authority: Pubkey,
}

/// Instruction builder for `SetParams`.
///
/// ### Accounts:
///
///   0. `[writable]` global
///   1. `[writable, signer]` authority
///   2. `[]` event_authority
///   3. `[]` program
#[derive(Clone, Debug, Default)]
pub struct SetParamsBuilder {
    global: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    program: Option<solana_pubkey::Pubkey>,
    initial_virtual_token_reserves: Option<u64>,
    initial_virtual_sol_reserves: Option<u64>,
    initial_real_token_reserves: Option<u64>,
    token_total_supply: Option<u64>,
    fee_basis_points: Option<u64>,
    withdraw_authority: Option<Pubkey>,
    enable_migrate: Option<bool>,
    pool_migration_fee: Option<u64>,
    creator_fee_basis_points: Option<u64>,
    set_creator_authority: Option<Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl SetParamsBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn global(&mut self, global: solana_pubkey::Pubkey) -> &mut Self {
        self.global = Some(global);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn initial_virtual_token_reserves(
        &mut self,
        initial_virtual_token_reserves: u64,
    ) -> &mut Self {
        self.initial_virtual_token_reserves = Some(initial_virtual_token_reserves);
        self
    }

    #[inline(always)]
    pub fn initial_virtual_sol_reserves(&mut self, initial_virtual_sol_reserves: u64) -> &mut Self {
        self.initial_virtual_sol_reserves = Some(initial_virtual_sol_reserves);
        self
    }

    #[inline(always)]
    pub fn initial_real_token_reserves(&mut self, initial_real_token_reserves: u64) -> &mut Self {
        self.initial_real_token_reserves = Some(initial_real_token_reserves);
        self
    }

    #[inline(always)]
    pub fn token_total_supply(&mut self, token_total_supply: u64) -> &mut Self {
        self.token_total_supply = Some(token_total_supply);
        self
    }

    #[inline(always)]
    pub fn fee_basis_points(&mut self, fee_basis_points: u64) -> &mut Self {
        self.fee_basis_points = Some(fee_basis_points);
        self
    }

    #[inline(always)]
    pub fn withdraw_authority(&mut self, withdraw_authority: Pubkey) -> &mut Self {
        self.withdraw_authority = Some(withdraw_authority);
        self
    }

    #[inline(always)]
    pub fn enable_migrate(&mut self, enable_migrate: bool) -> &mut Self {
        self.enable_migrate = Some(enable_migrate);
        self
    }

    #[inline(always)]
    pub fn pool_migration_fee(&mut self, pool_migration_fee: u64) -> &mut Self {
        self.pool_migration_fee = Some(pool_migration_fee);
        self
    }

    #[inline(always)]
    pub fn creator_fee_basis_points(&mut self, creator_fee_basis_points: u64) -> &mut Self {
        self.creator_fee_basis_points = Some(creator_fee_basis_points);
        self
    }

    #[inline(always)]
    pub fn set_creator_authority(&mut self, set_creator_authority: Pubkey) -> &mut Self {
        self.set_creator_authority = Some(set_creator_authority);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = SetParams {
            global: self.global.expect("global is not set"),
            authority: self.authority.expect("authority is not set"),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = SetParamsInstructionArgs {
            initial_virtual_token_reserves: self
                .initial_virtual_token_reserves
                .clone()
                .expect("initial_virtual_token_reserves is not set"),
            initial_virtual_sol_reserves: self
                .initial_virtual_sol_reserves
                .clone()
                .expect("initial_virtual_sol_reserves is not set"),
            initial_real_token_reserves: self
                .initial_real_token_reserves
                .clone()
                .expect("initial_real_token_reserves is not set"),
            token_total_supply: self
                .token_total_supply
                .clone()
                .expect("token_total_supply is not set"),
            fee_basis_points: self
                .fee_basis_points
                .clone()
                .expect("fee_basis_points is not set"),
            withdraw_authority: self
                .withdraw_authority
                .clone()
                .expect("withdraw_authority is not set"),
            enable_migrate: self
                .enable_migrate
                .clone()
                .expect("enable_migrate is not set"),
            pool_migration_fee: self
                .pool_migration_fee
                .clone()
                .expect("pool_migration_fee is not set"),
            creator_fee_basis_points: self
                .creator_fee_basis_points
                .clone()
                .expect("creator_fee_basis_points is not set"),
            set_creator_authority: self
                .set_creator_authority
                .clone()
                .expect("set_creator_authority is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `set_params` CPI accounts.
pub struct SetParamsCpiAccounts<'a, 'b> {
    pub global: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

/// `set_params` CPI instruction.
pub struct SetParamsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub global: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SetParamsInstructionArgs,
}

impl<'a, 'b> SetParamsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: SetParamsCpiAccounts<'a, 'b>,
        args: SetParamsInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            global: accounts.global,
            authority: accounts.authority,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.global.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SetParamsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::PUMP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.global.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SetParams` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` global
///   1. `[writable, signer]` authority
///   2. `[]` event_authority
///   3. `[]` program
#[derive(Clone, Debug)]
pub struct SetParamsCpiBuilder<'a, 'b> {
    instruction: Box<SetParamsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SetParamsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SetParamsCpiBuilderInstruction {
            __program: program,
            global: None,
            authority: None,
            event_authority: None,
            program: None,
            initial_virtual_token_reserves: None,
            initial_virtual_sol_reserves: None,
            initial_real_token_reserves: None,
            token_total_supply: None,
            fee_basis_points: None,
            withdraw_authority: None,
            enable_migrate: None,
            pool_migration_fee: None,
            creator_fee_basis_points: None,
            set_creator_authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn global(&mut self, global: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.global = Some(global);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn initial_virtual_token_reserves(
        &mut self,
        initial_virtual_token_reserves: u64,
    ) -> &mut Self {
        self.instruction.initial_virtual_token_reserves = Some(initial_virtual_token_reserves);
        self
    }

    #[inline(always)]
    pub fn initial_virtual_sol_reserves(&mut self, initial_virtual_sol_reserves: u64) -> &mut Self {
        self.instruction.initial_virtual_sol_reserves = Some(initial_virtual_sol_reserves);
        self
    }

    #[inline(always)]
    pub fn initial_real_token_reserves(&mut self, initial_real_token_reserves: u64) -> &mut Self {
        self.instruction.initial_real_token_reserves = Some(initial_real_token_reserves);
        self
    }

    #[inline(always)]
    pub fn token_total_supply(&mut self, token_total_supply: u64) -> &mut Self {
        self.instruction.token_total_supply = Some(token_total_supply);
        self
    }

    #[inline(always)]
    pub fn fee_basis_points(&mut self, fee_basis_points: u64) -> &mut Self {
        self.instruction.fee_basis_points = Some(fee_basis_points);
        self
    }

    #[inline(always)]
    pub fn withdraw_authority(&mut self, withdraw_authority: Pubkey) -> &mut Self {
        self.instruction.withdraw_authority = Some(withdraw_authority);
        self
    }

    #[inline(always)]
    pub fn enable_migrate(&mut self, enable_migrate: bool) -> &mut Self {
        self.instruction.enable_migrate = Some(enable_migrate);
        self
    }

    #[inline(always)]
    pub fn pool_migration_fee(&mut self, pool_migration_fee: u64) -> &mut Self {
        self.instruction.pool_migration_fee = Some(pool_migration_fee);
        self
    }

    #[inline(always)]
    pub fn creator_fee_basis_points(&mut self, creator_fee_basis_points: u64) -> &mut Self {
        self.instruction.creator_fee_basis_points = Some(creator_fee_basis_points);
        self
    }

    #[inline(always)]
    pub fn set_creator_authority(&mut self, set_creator_authority: Pubkey) -> &mut Self {
        self.instruction.set_creator_authority = Some(set_creator_authority);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = SetParamsInstructionArgs {
            initial_virtual_token_reserves: self
                .instruction
                .initial_virtual_token_reserves
                .clone()
                .expect("initial_virtual_token_reserves is not set"),
            initial_virtual_sol_reserves: self
                .instruction
                .initial_virtual_sol_reserves
                .clone()
                .expect("initial_virtual_sol_reserves is not set"),
            initial_real_token_reserves: self
                .instruction
                .initial_real_token_reserves
                .clone()
                .expect("initial_real_token_reserves is not set"),
            token_total_supply: self
                .instruction
                .token_total_supply
                .clone()
                .expect("token_total_supply is not set"),
            fee_basis_points: self
                .instruction
                .fee_basis_points
                .clone()
                .expect("fee_basis_points is not set"),
            withdraw_authority: self
                .instruction
                .withdraw_authority
                .clone()
                .expect("withdraw_authority is not set"),
            enable_migrate: self
                .instruction
                .enable_migrate
                .clone()
                .expect("enable_migrate is not set"),
            pool_migration_fee: self
                .instruction
                .pool_migration_fee
                .clone()
                .expect("pool_migration_fee is not set"),
            creator_fee_basis_points: self
                .instruction
                .creator_fee_basis_points
                .clone()
                .expect("creator_fee_basis_points is not set"),
            set_creator_authority: self
                .instruction
                .set_creator_authority
                .clone()
                .expect("set_creator_authority is not set"),
        };
        let instruction = SetParamsCpi {
            __program: self.instruction.__program,

            global: self.instruction.global.expect("global is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SetParamsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    global: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program: Option<&'b solana_account_info::AccountInfo<'a>>,
    initial_virtual_token_reserves: Option<u64>,
    initial_virtual_sol_reserves: Option<u64>,
    initial_real_token_reserves: Option<u64>,
    token_total_supply: Option<u64>,
    fee_basis_points: Option<u64>,
    withdraw_authority: Option<Pubkey>,
    enable_migrate: Option<bool>,
    pool_migration_fee: Option<u64>,
    creator_fee_basis_points: Option<u64>,
    set_creator_authority: Option<Pubkey>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
