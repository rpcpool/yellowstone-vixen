//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum LimoError {
    /// 6000 - Order can't be canceled
    #[error("Order can't be canceled")]
    OrderCanNotBeCanceled = 0x1770,
    /// 6001 - Order not active
    #[error("Order not active")]
    OrderNotActive = 0x1771,
    /// 6002 - Invalid admin authority
    #[error("Invalid admin authority")]
    InvalidAdminAuthority = 0x1772,
    /// 6003 - Invalid pda authority
    #[error("Invalid pda authority")]
    InvalidPdaAuthority = 0x1773,
    /// 6004 - Invalid config option
    #[error("Invalid config option")]
    InvalidConfigOption = 0x1774,
    /// 6005 - Order owner account is not the order owner
    #[error("Order owner account is not the order owner")]
    InvalidOrderOwner = 0x1775,
    /// 6006 - Out of range integral conversion attempted
    #[error("Out of range integral conversion attempted")]
    OutOfRangeIntegralConversion = 0x1776,
    /// 6007 - Invalid boolean flag, valid values are 0 and 1
    #[error("Invalid boolean flag, valid values are 0 and 1")]
    InvalidFlag = 0x1777,
    /// 6008 - Mathematical operation with overflow
    #[error("Mathematical operation with overflow")]
    MathOverflow = 0x1778,
    /// 6009 - Order input amount invalid
    #[error("Order input amount invalid")]
    OrderInputAmountInvalid = 0x1779,
    /// 6010 - Order output amount invalid
    #[error("Order output amount invalid")]
    OrderOutputAmountInvalid = 0x177a,
    /// 6011 - Host fee bps must be between 0 and 10000
    #[error("Host fee bps must be between 0 and 10000")]
    InvalidHostFee = 0x177b,
    /// 6012 - Conversion between integers failed
    #[error("Conversion between integers failed")]
    IntegerOverflow = 0x177c,
    /// 6013 - Tip balance less than accounted tip
    #[error("Tip balance less than accounted tip")]
    InvalidTipBalance = 0x177d,
    /// 6014 - Tip transfer amount is less than expected
    #[error("Tip transfer amount is less than expected")]
    InvalidTipTransferAmount = 0x177e,
    /// 6015 - Host tup amount is less than accounted for
    #[error("Host tup amount is less than accounted for")]
    InvalidHostTipBalance = 0x177f,
    /// 6016 - Order within flash operation - all otehr actions are blocked
    #[error("Order within flash operation - all otehr actions are blocked")]
    OrderWithinFlashOperation = 0x1780,
    /// 6017 - CPI not allowed
    #[error("CPI not allowed")]
    CPINotAllowed = 0x1781,
    /// 6018 - Flash take_order is blocked
    #[error("Flash take_order is blocked")]
    FlashTakeOrderBlocked = 0x1782,
    /// 6019 - Some unexpected instructions are present in the tx. Either before or after the flash ixs, or some ix target the same program between
    #[error(
        "Some unexpected instructions are present in the tx. Either before or after the flash \
         ixs, or some ix target the same program between"
    )]
    FlashTxWithUnexpectedIxs = 0x1783,
    /// 6020 - Flash ixs initiated without the closing ix in the transaction
    #[error("Flash ixs initiated without the closing ix in the transaction")]
    FlashIxsNotEnded = 0x1784,
    /// 6021 - Flash ixs ended without the starting ix in the transaction
    #[error("Flash ixs ended without the starting ix in the transaction")]
    FlashIxsNotStarted = 0x1785,
    /// 6022 - Some accounts differ between the two flash ixs
    #[error("Some accounts differ between the two flash ixs")]
    FlashIxsAccountMismatch = 0x1786,
    /// 6023 - Some args differ between the two flash ixs
    #[error("Some args differ between the two flash ixs")]
    FlashIxsArgsMismatch = 0x1787,
    /// 6024 - Order is not within flash operation
    #[error("Order is not within flash operation")]
    OrderNotWithinFlashOperation = 0x1788,
    /// 6025 - Emergency mode is enabled
    #[error("Emergency mode is enabled")]
    EmergencyModeEnabled = 0x1789,
    /// 6026 - Creating new ordersis blocked
    #[error("Creating new ordersis blocked")]
    CreatingNewOrdersBlocked = 0x178a,
    /// 6027 - Orders taking is blocked
    #[error("Orders taking is blocked")]
    OrderTakingBlocked = 0x178b,
    /// 6028 - Order input amount larger than the remaining
    #[error("Order input amount larger than the remaining")]
    OrderInputAmountTooLarge = 0x178c,
    /// 6029 - Permissionless order taking not enabled, please provide permission account
    #[error("Permissionless order taking not enabled, please provide permission account")]
    PermissionRequiredPermissionlessNotEnabled = 0x178d,
    /// 6030 - Permission address does not match order address
    #[error("Permission address does not match order address")]
    PermissionDoesNotMatchOrder = 0x178e,
    /// 6031 - Invalid ata address
    #[error("Invalid ata address")]
    InvalidAtaAddress = 0x178f,
    /// 6032 - Maker output ata required when output mint is not WSOL
    #[error("Maker output ata required when output mint is not WSOL")]
    MakerOutputAtaRequired = 0x1790,
    /// 6033 - Intermediary output token account required when output mint is WSOL
    #[error("Intermediary output token account required when output mint is WSOL")]
    IntermediaryOutputTokenAccountRequired = 0x1791,
    /// 6034 - Not enough balance for rent
    #[error("Not enough balance for rent")]
    NotEnoughBalanceForRent = 0x1792,
    /// 6035 - Order can not be closed - Not enough time passed since last update
    #[error("Order can not be closed - Not enough time passed since last update")]
    NotEnoughTimePassedSinceLastUpdate = 0x1793,
    /// 6036 - Order input and output mints are the same
    #[error("Order input and output mints are the same")]
    OrderSameMint = 0x1794,
    /// 6037 - Mint has a token (2022) extension that is not supported
    #[error("Mint has a token (2022) extension that is not supported")]
    UnsupportedTokenExtension = 0x1795,
    /// 6038 - Can't have an spl token mint with a t22 account
    #[error("Can't have an spl token mint with a t22 account")]
    InvalidTokenAccount = 0x1796,
    /// 6039 - The order type is invalid
    #[error("The order type is invalid")]
    OrderTypeInvalid = 0x1797,
    /// 6040 - Token account is not initialized
    #[error("Token account is not initialized")]
    UninitializedTokenAccount = 0x1798,
    /// 6041 - Account is not owned by the token program
    #[error("Account is not owned by the token program")]
    InvalidTokenAccountOwner = 0x1799,
    /// 6042 - Account is not a valid token account
    #[error("Account is not a valid token account")]
    InvalidAccount = 0x179a,
    /// 6043 - Token account has incorrect mint
    #[error("Token account has incorrect mint")]
    InvalidTokenMint = 0x179b,
    /// 6044 - Token account has incorrect authority
    #[error("Token account has incorrect authority")]
    InvalidTokenAuthority = 0x179c,
}

impl solana_program_error::PrintProgramError for LimoError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

impl<T> solana_decode_error::DecodeError<T> for LimoError {
    fn type_of() -> &'static str { "LimoError" }
}
