//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct TakeOrder {
    pub taker: solana_pubkey::Pubkey,

    pub maker: solana_pubkey::Pubkey,

    pub global_config: solana_pubkey::Pubkey,

    pub pda_authority: solana_pubkey::Pubkey,

    pub order: solana_pubkey::Pubkey,

    pub input_mint: solana_pubkey::Pubkey,

    pub output_mint: solana_pubkey::Pubkey,

    pub input_vault: solana_pubkey::Pubkey,

    pub taker_input_ata: solana_pubkey::Pubkey,

    pub taker_output_ata: solana_pubkey::Pubkey,

    pub intermediary_output_token_account: Option<solana_pubkey::Pubkey>,

    pub maker_output_ata: Option<solana_pubkey::Pubkey>,

    pub express_relay: solana_pubkey::Pubkey,

    pub express_relay_metadata: solana_pubkey::Pubkey,

    pub sysvar_instructions: solana_pubkey::Pubkey,

    pub permission: Option<solana_pubkey::Pubkey>,

    pub config_router: solana_pubkey::Pubkey,

    pub input_token_program: solana_pubkey::Pubkey,

    pub output_token_program: solana_pubkey::Pubkey,

    pub rent: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub program: solana_pubkey::Pubkey,
}

impl TakeOrder {
    pub fn instruction(&self, args: TakeOrderInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: TakeOrderInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(23 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.taker, true));
        accounts.push(solana_instruction::AccountMeta::new(self.maker, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.global_config,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.pda_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.order, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.input_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.output_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.input_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.taker_input_ata,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.taker_output_ata,
            false,
        ));
        if let Some(intermediary_output_token_account) = self.intermediary_output_token_account {
            accounts.push(solana_instruction::AccountMeta::new(
                intermediary_output_token_account,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LIMO_ID,
                false,
            ));
        }
        if let Some(maker_output_ata) = self.maker_output_ata {
            accounts.push(solana_instruction::AccountMeta::new(
                maker_output_ata,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LIMO_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.express_relay,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.express_relay_metadata,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.sysvar_instructions,
            false,
        ));
        if let Some(permission) = self.permission {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                permission, false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LIMO_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.config_router,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.input_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.output_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&TakeOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::LIMO_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TakeOrderInstructionData {
    discriminator: [u8; 8],
}

impl TakeOrderInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [163, 208, 20, 172, 223, 65, 255, 228],
        }
    }
}

impl Default for TakeOrderInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TakeOrderInstructionArgs {
    pub input_amount: u64,
    pub min_output_amount: u64,
    pub tip_amount_permissionless_taking: u64,
}

/// Instruction builder for `TakeOrder`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` taker
///   1. `[writable]` maker
///   2. `[writable]` global_config
///   3. `[writable]` pda_authority
///   4. `[writable]` order
///   5. `[]` input_mint
///   6. `[]` output_mint
///   7. `[writable]` input_vault
///   8. `[writable]` taker_input_ata
///   9. `[writable]` taker_output_ata
///   10. `[writable, optional]` intermediary_output_token_account
///   11. `[writable, optional]` maker_output_ata
///   12. `[]` express_relay
///   13. `[]` express_relay_metadata
///   14. `[optional]` sysvar_instructions (default to `Sysvar1nstructions1111111111111111111111111`)
///   15. `[optional]` permission
///   16. `[]` config_router
///   17. `[]` input_token_program
///   18. `[]` output_token_program
///   19. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   20. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   21. `[]` event_authority
///   22. `[]` program
#[derive(Clone, Debug, Default)]
pub struct TakeOrderBuilder {
    taker: Option<solana_pubkey::Pubkey>,
    maker: Option<solana_pubkey::Pubkey>,
    global_config: Option<solana_pubkey::Pubkey>,
    pda_authority: Option<solana_pubkey::Pubkey>,
    order: Option<solana_pubkey::Pubkey>,
    input_mint: Option<solana_pubkey::Pubkey>,
    output_mint: Option<solana_pubkey::Pubkey>,
    input_vault: Option<solana_pubkey::Pubkey>,
    taker_input_ata: Option<solana_pubkey::Pubkey>,
    taker_output_ata: Option<solana_pubkey::Pubkey>,
    intermediary_output_token_account: Option<solana_pubkey::Pubkey>,
    maker_output_ata: Option<solana_pubkey::Pubkey>,
    express_relay: Option<solana_pubkey::Pubkey>,
    express_relay_metadata: Option<solana_pubkey::Pubkey>,
    sysvar_instructions: Option<solana_pubkey::Pubkey>,
    permission: Option<solana_pubkey::Pubkey>,
    config_router: Option<solana_pubkey::Pubkey>,
    input_token_program: Option<solana_pubkey::Pubkey>,
    output_token_program: Option<solana_pubkey::Pubkey>,
    rent: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    program: Option<solana_pubkey::Pubkey>,
    input_amount: Option<u64>,
    min_output_amount: Option<u64>,
    tip_amount_permissionless_taking: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl TakeOrderBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn taker(&mut self, taker: solana_pubkey::Pubkey) -> &mut Self {
        self.taker = Some(taker);
        self
    }

    #[inline(always)]
    pub fn maker(&mut self, maker: solana_pubkey::Pubkey) -> &mut Self {
        self.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    #[inline(always)]
    pub fn pda_authority(&mut self, pda_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.pda_authority = Some(pda_authority);
        self
    }

    #[inline(always)]
    pub fn order(&mut self, order: solana_pubkey::Pubkey) -> &mut Self {
        self.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn input_mint(&mut self, input_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn output_mint(&mut self, output_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.output_mint = Some(output_mint);
        self
    }

    #[inline(always)]
    pub fn input_vault(&mut self, input_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.input_vault = Some(input_vault);
        self
    }

    #[inline(always)]
    pub fn taker_input_ata(&mut self, taker_input_ata: solana_pubkey::Pubkey) -> &mut Self {
        self.taker_input_ata = Some(taker_input_ata);
        self
    }

    #[inline(always)]
    pub fn taker_output_ata(&mut self, taker_output_ata: solana_pubkey::Pubkey) -> &mut Self {
        self.taker_output_ata = Some(taker_output_ata);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn intermediary_output_token_account(
        &mut self,
        intermediary_output_token_account: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.intermediary_output_token_account = intermediary_output_token_account;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn maker_output_ata(
        &mut self,
        maker_output_ata: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.maker_output_ata = maker_output_ata;
        self
    }

    #[inline(always)]
    pub fn express_relay(&mut self, express_relay: solana_pubkey::Pubkey) -> &mut Self {
        self.express_relay = Some(express_relay);
        self
    }

    #[inline(always)]
    pub fn express_relay_metadata(
        &mut self,
        express_relay_metadata: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.express_relay_metadata = Some(express_relay_metadata);
        self
    }

    /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
    #[inline(always)]
    pub fn sysvar_instructions(&mut self, sysvar_instructions: solana_pubkey::Pubkey) -> &mut Self {
        self.sysvar_instructions = Some(sysvar_instructions);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn permission(&mut self, permission: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.permission = permission;
        self
    }

    #[inline(always)]
    pub fn config_router(&mut self, config_router: solana_pubkey::Pubkey) -> &mut Self {
        self.config_router = Some(config_router);
        self
    }

    #[inline(always)]
    pub fn input_token_program(&mut self, input_token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.input_token_program = Some(input_token_program);
        self
    }

    #[inline(always)]
    pub fn output_token_program(
        &mut self,
        output_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_program = Some(output_token_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn input_amount(&mut self, input_amount: u64) -> &mut Self {
        self.input_amount = Some(input_amount);
        self
    }

    #[inline(always)]
    pub fn min_output_amount(&mut self, min_output_amount: u64) -> &mut Self {
        self.min_output_amount = Some(min_output_amount);
        self
    }

    #[inline(always)]
    pub fn tip_amount_permissionless_taking(
        &mut self,
        tip_amount_permissionless_taking: u64,
    ) -> &mut Self {
        self.tip_amount_permissionless_taking = Some(tip_amount_permissionless_taking);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = TakeOrder {
            taker: self.taker.expect("taker is not set"),
            maker: self.maker.expect("maker is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            pda_authority: self.pda_authority.expect("pda_authority is not set"),
            order: self.order.expect("order is not set"),
            input_mint: self.input_mint.expect("input_mint is not set"),
            output_mint: self.output_mint.expect("output_mint is not set"),
            input_vault: self.input_vault.expect("input_vault is not set"),
            taker_input_ata: self.taker_input_ata.expect("taker_input_ata is not set"),
            taker_output_ata: self.taker_output_ata.expect("taker_output_ata is not set"),
            intermediary_output_token_account: self.intermediary_output_token_account,
            maker_output_ata: self.maker_output_ata,
            express_relay: self.express_relay.expect("express_relay is not set"),
            express_relay_metadata: self
                .express_relay_metadata
                .expect("express_relay_metadata is not set"),
            sysvar_instructions: self.sysvar_instructions.unwrap_or(solana_pubkey::pubkey!(
                "Sysvar1nstructions1111111111111111111111111"
            )),
            permission: self.permission,
            config_router: self.config_router.expect("config_router is not set"),
            input_token_program: self
                .input_token_program
                .expect("input_token_program is not set"),
            output_token_program: self
                .output_token_program
                .expect("output_token_program is not set"),
            rent: self.rent.unwrap_or(solana_pubkey::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = TakeOrderInstructionArgs {
            input_amount: self.input_amount.clone().expect("input_amount is not set"),
            min_output_amount: self
                .min_output_amount
                .clone()
                .expect("min_output_amount is not set"),
            tip_amount_permissionless_taking: self
                .tip_amount_permissionless_taking
                .clone()
                .expect("tip_amount_permissionless_taking is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `take_order` CPI accounts.
pub struct TakeOrderCpiAccounts<'a, 'b> {
    pub taker: &'b solana_account_info::AccountInfo<'a>,

    pub maker: &'b solana_account_info::AccountInfo<'a>,

    pub global_config: &'b solana_account_info::AccountInfo<'a>,

    pub pda_authority: &'b solana_account_info::AccountInfo<'a>,

    pub order: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint: &'b solana_account_info::AccountInfo<'a>,

    pub output_mint: &'b solana_account_info::AccountInfo<'a>,

    pub input_vault: &'b solana_account_info::AccountInfo<'a>,

    pub taker_input_ata: &'b solana_account_info::AccountInfo<'a>,

    pub taker_output_ata: &'b solana_account_info::AccountInfo<'a>,

    pub intermediary_output_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub maker_output_ata: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub express_relay: &'b solana_account_info::AccountInfo<'a>,

    pub express_relay_metadata: &'b solana_account_info::AccountInfo<'a>,

    pub sysvar_instructions: &'b solana_account_info::AccountInfo<'a>,

    pub permission: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub config_router: &'b solana_account_info::AccountInfo<'a>,

    pub input_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub output_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub rent: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

/// `take_order` CPI instruction.
pub struct TakeOrderCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub taker: &'b solana_account_info::AccountInfo<'a>,

    pub maker: &'b solana_account_info::AccountInfo<'a>,

    pub global_config: &'b solana_account_info::AccountInfo<'a>,

    pub pda_authority: &'b solana_account_info::AccountInfo<'a>,

    pub order: &'b solana_account_info::AccountInfo<'a>,

    pub input_mint: &'b solana_account_info::AccountInfo<'a>,

    pub output_mint: &'b solana_account_info::AccountInfo<'a>,

    pub input_vault: &'b solana_account_info::AccountInfo<'a>,

    pub taker_input_ata: &'b solana_account_info::AccountInfo<'a>,

    pub taker_output_ata: &'b solana_account_info::AccountInfo<'a>,

    pub intermediary_output_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub maker_output_ata: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub express_relay: &'b solana_account_info::AccountInfo<'a>,

    pub express_relay_metadata: &'b solana_account_info::AccountInfo<'a>,

    pub sysvar_instructions: &'b solana_account_info::AccountInfo<'a>,

    pub permission: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub config_router: &'b solana_account_info::AccountInfo<'a>,

    pub input_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub output_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub rent: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: TakeOrderInstructionArgs,
}

impl<'a, 'b> TakeOrderCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: TakeOrderCpiAccounts<'a, 'b>,
        args: TakeOrderInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            taker: accounts.taker,
            maker: accounts.maker,
            global_config: accounts.global_config,
            pda_authority: accounts.pda_authority,
            order: accounts.order,
            input_mint: accounts.input_mint,
            output_mint: accounts.output_mint,
            input_vault: accounts.input_vault,
            taker_input_ata: accounts.taker_input_ata,
            taker_output_ata: accounts.taker_output_ata,
            intermediary_output_token_account: accounts.intermediary_output_token_account,
            maker_output_ata: accounts.maker_output_ata,
            express_relay: accounts.express_relay,
            express_relay_metadata: accounts.express_relay_metadata,
            sysvar_instructions: accounts.sysvar_instructions,
            permission: accounts.permission,
            config_router: accounts.config_router,
            input_token_program: accounts.input_token_program,
            output_token_program: accounts.output_token_program,
            rent: accounts.rent,
            system_program: accounts.system_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(23 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.taker.key, true));
        accounts.push(solana_instruction::AccountMeta::new(*self.maker.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pda_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.order.key, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.input_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.output_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.input_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.taker_input_ata.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.taker_output_ata.key,
            false,
        ));
        if let Some(intermediary_output_token_account) = self.intermediary_output_token_account {
            accounts.push(solana_instruction::AccountMeta::new(
                *intermediary_output_token_account.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LIMO_ID,
                false,
            ));
        }
        if let Some(maker_output_ata) = self.maker_output_ata {
            accounts.push(solana_instruction::AccountMeta::new(
                *maker_output_ata.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LIMO_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.express_relay.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.express_relay_metadata.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.sysvar_instructions.key,
            false,
        ));
        if let Some(permission) = self.permission {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *permission.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LIMO_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.config_router.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.input_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.output_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&TakeOrderInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::LIMO_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(24 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.taker.clone());
        account_infos.push(self.maker.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.pda_authority.clone());
        account_infos.push(self.order.clone());
        account_infos.push(self.input_mint.clone());
        account_infos.push(self.output_mint.clone());
        account_infos.push(self.input_vault.clone());
        account_infos.push(self.taker_input_ata.clone());
        account_infos.push(self.taker_output_ata.clone());
        if let Some(intermediary_output_token_account) = self.intermediary_output_token_account {
            account_infos.push(intermediary_output_token_account.clone());
        }
        if let Some(maker_output_ata) = self.maker_output_ata {
            account_infos.push(maker_output_ata.clone());
        }
        account_infos.push(self.express_relay.clone());
        account_infos.push(self.express_relay_metadata.clone());
        account_infos.push(self.sysvar_instructions.clone());
        if let Some(permission) = self.permission {
            account_infos.push(permission.clone());
        }
        account_infos.push(self.config_router.clone());
        account_infos.push(self.input_token_program.clone());
        account_infos.push(self.output_token_program.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `TakeOrder` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` taker
///   1. `[writable]` maker
///   2. `[writable]` global_config
///   3. `[writable]` pda_authority
///   4. `[writable]` order
///   5. `[]` input_mint
///   6. `[]` output_mint
///   7. `[writable]` input_vault
///   8. `[writable]` taker_input_ata
///   9. `[writable]` taker_output_ata
///   10. `[writable, optional]` intermediary_output_token_account
///   11. `[writable, optional]` maker_output_ata
///   12. `[]` express_relay
///   13. `[]` express_relay_metadata
///   14. `[]` sysvar_instructions
///   15. `[optional]` permission
///   16. `[]` config_router
///   17. `[]` input_token_program
///   18. `[]` output_token_program
///   19. `[]` rent
///   20. `[]` system_program
///   21. `[]` event_authority
///   22. `[]` program
#[derive(Clone, Debug)]
pub struct TakeOrderCpiBuilder<'a, 'b> {
    instruction: Box<TakeOrderCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TakeOrderCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(TakeOrderCpiBuilderInstruction {
            __program: program,
            taker: None,
            maker: None,
            global_config: None,
            pda_authority: None,
            order: None,
            input_mint: None,
            output_mint: None,
            input_vault: None,
            taker_input_ata: None,
            taker_output_ata: None,
            intermediary_output_token_account: None,
            maker_output_ata: None,
            express_relay: None,
            express_relay_metadata: None,
            sysvar_instructions: None,
            permission: None,
            config_router: None,
            input_token_program: None,
            output_token_program: None,
            rent: None,
            system_program: None,
            event_authority: None,
            program: None,
            input_amount: None,
            min_output_amount: None,
            tip_amount_permissionless_taking: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn taker(&mut self, taker: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.taker = Some(taker);
        self
    }

    #[inline(always)]
    pub fn maker(&mut self, maker: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.maker = Some(maker);
        self
    }

    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    #[inline(always)]
    pub fn pda_authority(
        &mut self,
        pda_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pda_authority = Some(pda_authority);
        self
    }

    #[inline(always)]
    pub fn order(&mut self, order: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.order = Some(order);
        self
    }

    #[inline(always)]
    pub fn input_mint(
        &mut self,
        input_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_mint = Some(input_mint);
        self
    }

    #[inline(always)]
    pub fn output_mint(
        &mut self,
        output_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_mint = Some(output_mint);
        self
    }

    #[inline(always)]
    pub fn input_vault(
        &mut self,
        input_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_vault = Some(input_vault);
        self
    }

    #[inline(always)]
    pub fn taker_input_ata(
        &mut self,
        taker_input_ata: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.taker_input_ata = Some(taker_input_ata);
        self
    }

    #[inline(always)]
    pub fn taker_output_ata(
        &mut self,
        taker_output_ata: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.taker_output_ata = Some(taker_output_ata);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn intermediary_output_token_account(
        &mut self,
        intermediary_output_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.intermediary_output_token_account = intermediary_output_token_account;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn maker_output_ata(
        &mut self,
        maker_output_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.maker_output_ata = maker_output_ata;
        self
    }

    #[inline(always)]
    pub fn express_relay(
        &mut self,
        express_relay: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.express_relay = Some(express_relay);
        self
    }

    #[inline(always)]
    pub fn express_relay_metadata(
        &mut self,
        express_relay_metadata: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.express_relay_metadata = Some(express_relay_metadata);
        self
    }

    #[inline(always)]
    pub fn sysvar_instructions(
        &mut self,
        sysvar_instructions: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sysvar_instructions = Some(sysvar_instructions);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn permission(
        &mut self,
        permission: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.permission = permission;
        self
    }

    #[inline(always)]
    pub fn config_router(
        &mut self,
        config_router: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config_router = Some(config_router);
        self
    }

    #[inline(always)]
    pub fn input_token_program(
        &mut self,
        input_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_program = Some(input_token_program);
        self
    }

    #[inline(always)]
    pub fn output_token_program(
        &mut self,
        output_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_program = Some(output_token_program);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn input_amount(&mut self, input_amount: u64) -> &mut Self {
        self.instruction.input_amount = Some(input_amount);
        self
    }

    #[inline(always)]
    pub fn min_output_amount(&mut self, min_output_amount: u64) -> &mut Self {
        self.instruction.min_output_amount = Some(min_output_amount);
        self
    }

    #[inline(always)]
    pub fn tip_amount_permissionless_taking(
        &mut self,
        tip_amount_permissionless_taking: u64,
    ) -> &mut Self {
        self.instruction.tip_amount_permissionless_taking = Some(tip_amount_permissionless_taking);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = TakeOrderInstructionArgs {
            input_amount: self
                .instruction
                .input_amount
                .clone()
                .expect("input_amount is not set"),
            min_output_amount: self
                .instruction
                .min_output_amount
                .clone()
                .expect("min_output_amount is not set"),
            tip_amount_permissionless_taking: self
                .instruction
                .tip_amount_permissionless_taking
                .clone()
                .expect("tip_amount_permissionless_taking is not set"),
        };
        let instruction = TakeOrderCpi {
            __program: self.instruction.__program,

            taker: self.instruction.taker.expect("taker is not set"),

            maker: self.instruction.maker.expect("maker is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            pda_authority: self
                .instruction
                .pda_authority
                .expect("pda_authority is not set"),

            order: self.instruction.order.expect("order is not set"),

            input_mint: self.instruction.input_mint.expect("input_mint is not set"),

            output_mint: self
                .instruction
                .output_mint
                .expect("output_mint is not set"),

            input_vault: self
                .instruction
                .input_vault
                .expect("input_vault is not set"),

            taker_input_ata: self
                .instruction
                .taker_input_ata
                .expect("taker_input_ata is not set"),

            taker_output_ata: self
                .instruction
                .taker_output_ata
                .expect("taker_output_ata is not set"),

            intermediary_output_token_account: self.instruction.intermediary_output_token_account,

            maker_output_ata: self.instruction.maker_output_ata,

            express_relay: self
                .instruction
                .express_relay
                .expect("express_relay is not set"),

            express_relay_metadata: self
                .instruction
                .express_relay_metadata
                .expect("express_relay_metadata is not set"),

            sysvar_instructions: self
                .instruction
                .sysvar_instructions
                .expect("sysvar_instructions is not set"),

            permission: self.instruction.permission,

            config_router: self
                .instruction
                .config_router
                .expect("config_router is not set"),

            input_token_program: self
                .instruction
                .input_token_program
                .expect("input_token_program is not set"),

            output_token_program: self
                .instruction
                .output_token_program
                .expect("output_token_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct TakeOrderCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    taker: Option<&'b solana_account_info::AccountInfo<'a>>,
    maker: Option<&'b solana_account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_account_info::AccountInfo<'a>>,
    pda_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    order: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    output_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    taker_input_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
    taker_output_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
    intermediary_output_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    maker_output_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
    express_relay: Option<&'b solana_account_info::AccountInfo<'a>>,
    express_relay_metadata: Option<&'b solana_account_info::AccountInfo<'a>>,
    sysvar_instructions: Option<&'b solana_account_info::AccountInfo<'a>>,
    permission: Option<&'b solana_account_info::AccountInfo<'a>>,
    config_router: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    output_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_amount: Option<u64>,
    min_output_amount: Option<u64>,
    tip_amount_permissionless_taking: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
