//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{GlobalConfig, Order, UserSwapBalancesState},
    ID,
};

/// Limo Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum LimoProgramState {
    Order(Order),
    UserSwapBalancesState(UserSwapBalancesState),
    GlobalConfig(GlobalConfig),
}

impl LimoProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [134, 173, 223, 185, 77, 86, 28, 51] => {
                Ok(LimoProgramState::Order(Order::from_bytes(data_bytes)?))
            },
            [140, 228, 152, 62, 231, 27, 245, 198] => Ok(LimoProgramState::UserSwapBalancesState(
                UserSwapBalancesState::from_bytes(data_bytes)?,
            )),
            [149, 8, 156, 202, 160, 252, 176, 217] => Ok(LimoProgramState::GlobalConfig(
                GlobalConfig::from_bytes(data_bytes)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = LimoProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "limo::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        LimoProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, LimoProgramState, Order};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::Order> for Order {
        fn into_proto(self) -> proto_def::Order {
            proto_def::Order {
                global_config: self.global_config.to_string(),
                maker: self.maker.to_string(),
                input_mint: self.input_mint.to_string(),
                input_mint_program_id: self.input_mint_program_id.to_string(),
                output_mint: self.output_mint.to_string(),
                output_mint_program_id: self.output_mint_program_id.to_string(),
                initial_input_amount: self.initial_input_amount,
                expected_output_amount: self.expected_output_amount,
                remaining_input_amount: self.remaining_input_amount,
                filled_output_amount: self.filled_output_amount,
                tip_amount: self.tip_amount,
                number_of_fills: self.number_of_fills,
                order_type: self.order_type.into(),
                status: self.status.into(),
                in_vault_bump: self.in_vault_bump.into(),
                flash_ix_lock: self.flash_ix_lock.into(),
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
                last_updated_timestamp: self.last_updated_timestamp,
                flash_start_taker_output_balance: self.flash_start_taker_output_balance,
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::UserSwapBalancesState;
    impl IntoProto<proto_def::UserSwapBalancesState> for UserSwapBalancesState {
        fn into_proto(self) -> proto_def::UserSwapBalancesState {
            proto_def::UserSwapBalancesState {
                user_lamports: self.user_lamports,
                input_ta_balance: self.input_ta_balance,
                output_ta_balance: self.output_ta_balance,
            }
        }
    }
    use super::GlobalConfig;
    impl IntoProto<proto_def::GlobalConfig> for GlobalConfig {
        fn into_proto(self) -> proto_def::GlobalConfig {
            proto_def::GlobalConfig {
                emergency_mode: self.emergency_mode.into(),
                flash_take_order_blocked: self.flash_take_order_blocked.into(),
                new_orders_blocked: self.new_orders_blocked.into(),
                orders_taking_blocked: self.orders_taking_blocked.into(),
                host_fee_bps: self.host_fee_bps.into(),
                is_order_taking_permissionless: self.is_order_taking_permissionless.into(),
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
                order_close_delay_seconds: self.order_close_delay_seconds,
                padding1: self.padding1.to_vec(),
                pda_authority_previous_lamports_balance: self
                    .pda_authority_previous_lamports_balance,
                total_tip_amount: self.total_tip_amount,
                host_tip_amount: self.host_tip_amount,
                pda_authority: self.pda_authority.to_string(),
                pda_authority_bump: self.pda_authority_bump,
                admin_authority: self.admin_authority.to_string(),
                admin_authority_cached: self.admin_authority_cached.to_string(),
                txn_fee_cost: self.txn_fee_cost,
                ata_creation_cost: self.ata_creation_cost,
                padding2: self.padding2.to_vec(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for LimoProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                LimoProgramState::Order(data) => {
                    proto_def::program_state::StateOneof::Order(data.into_proto())
                },
                LimoProgramState::UserSwapBalancesState(data) => {
                    proto_def::program_state::StateOneof::UserSwapBalancesState(data.into_proto())
                },
                LimoProgramState::GlobalConfig(data) => {
                    proto_def::program_state::StateOneof::GlobalConfig(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
