//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        CloseOrderAndClaimTip as CloseOrderAndClaimTipIxAccounts,
        CreateOrder as CreateOrderIxAccounts, CreateOrderInstructionArgs as CreateOrderIxData,
        FlashTakeOrderEnd as FlashTakeOrderEndIxAccounts,
        FlashTakeOrderEndInstructionArgs as FlashTakeOrderEndIxData,
        FlashTakeOrderStart as FlashTakeOrderStartIxAccounts,
        FlashTakeOrderStartInstructionArgs as FlashTakeOrderStartIxData,
        InitializeGlobalConfig as InitializeGlobalConfigIxAccounts,
        InitializeVault as InitializeVaultIxAccounts,
        LogUserSwapBalancesEnd as LogUserSwapBalancesEndIxAccounts,
        LogUserSwapBalancesEndInstructionArgs as LogUserSwapBalancesEndIxData,
        LogUserSwapBalancesStart as LogUserSwapBalancesStartIxAccounts,
        TakeOrder as TakeOrderIxAccounts, TakeOrderInstructionArgs as TakeOrderIxData,
        UpdateGlobalConfig as UpdateGlobalConfigIxAccounts,
        UpdateGlobalConfigAdmin as UpdateGlobalConfigAdminIxAccounts,
        UpdateGlobalConfigInstructionArgs as UpdateGlobalConfigIxData,
        WithdrawHostTip as WithdrawHostTipIxAccounts,
    },
    ID,
};

/// Limo Instructions
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum LimoProgramIx {
    InitializeGlobalConfig(InitializeGlobalConfigIxAccounts),
    InitializeVault(InitializeVaultIxAccounts),
    CreateOrder(CreateOrderIxAccounts, CreateOrderIxData),
    CloseOrderAndClaimTip(CloseOrderAndClaimTipIxAccounts),
    TakeOrder(TakeOrderIxAccounts, TakeOrderIxData),
    FlashTakeOrderStart(FlashTakeOrderStartIxAccounts, FlashTakeOrderStartIxData),
    FlashTakeOrderEnd(FlashTakeOrderEndIxAccounts, FlashTakeOrderEndIxData),
    UpdateGlobalConfig(UpdateGlobalConfigIxAccounts, UpdateGlobalConfigIxData),
    UpdateGlobalConfigAdmin(UpdateGlobalConfigAdminIxAccounts),
    WithdrawHostTip(WithdrawHostTipIxAccounts),
    LogUserSwapBalancesStart(LogUserSwapBalancesStartIxAccounts),
    LogUserSwapBalancesEnd(
        LogUserSwapBalancesEndIxAccounts,
        LogUserSwapBalancesEndIxData,
    ),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = LimoProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "Limo::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<LimoProgramIx> {
        let accounts_len = ix.accounts.len();

        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        let ix = match ix_discriminator {
            [113, 216, 122, 131, 225, 209, 22, 55] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = InitializeGlobalConfigIxAccounts {
                    admin_authority: ix.accounts[0].0.into(),
                    pda_authority: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                };
                Ok(LimoProgramIx::InitializeGlobalConfig(ix_accounts))
            },
            [48, 191, 163, 44, 71, 129, 63, 164] => {
                check_min_accounts_req(accounts_len, 7)?;
                let ix_accounts = InitializeVaultIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    global_config: ix.accounts[1].0.into(),
                    pda_authority: ix.accounts[2].0.into(),
                    mint: ix.accounts[3].0.into(),
                    vault: ix.accounts[4].0.into(),
                    token_program: ix.accounts[5].0.into(),
                    system_program: ix.accounts[6].0.into(),
                };
                Ok(LimoProgramIx::InitializeVault(ix_accounts))
            },
            [141, 54, 37, 207, 237, 210, 250, 215] => {
                check_min_accounts_req(accounts_len, 13)?;
                let ix_accounts = CreateOrderIxAccounts {
                    maker: ix.accounts[0].0.into(),
                    global_config: ix.accounts[1].0.into(),
                    pda_authority: ix.accounts[2].0.into(),
                    order: ix.accounts[3].0.into(),
                    input_mint: ix.accounts[4].0.into(),
                    output_mint: ix.accounts[5].0.into(),
                    maker_ata: ix.accounts[6].0.into(),
                    input_vault: ix.accounts[7].0.into(),
                    input_token_program: ix.accounts[8].0.into(),
                    output_token_program: ix.accounts[9].0.into(),
                    system_program: ix.accounts[10].0.into(),
                    event_authority: ix.accounts[11].0.into(),
                    program: ix.accounts[12].0.into(),
                };
                let de_ix_data: CreateOrderIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LimoProgramIx::CreateOrder(ix_accounts, de_ix_data))
            },
            [244, 27, 12, 226, 45, 247, 230, 43] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = CloseOrderAndClaimTipIxAccounts {
                    maker: ix.accounts[0].0.into(),
                    order: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                    pda_authority: ix.accounts[3].0.into(),
                    input_mint: ix.accounts[4].0.into(),
                    output_mint: ix.accounts[5].0.into(),
                    maker_input_ata: ix.accounts[6].0.into(),
                    input_vault: ix.accounts[7].0.into(),
                    input_token_program: ix.accounts[8].0.into(),
                    system_program: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                Ok(LimoProgramIx::CloseOrderAndClaimTip(ix_accounts))
            },
            [163, 208, 20, 172, 223, 65, 255, 228] => {
                check_min_accounts_req(accounts_len, 23)?;
                let ix_accounts = TakeOrderIxAccounts {
                    taker: ix.accounts[0].0.into(),
                    maker: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                    pda_authority: ix.accounts[3].0.into(),
                    order: ix.accounts[4].0.into(),
                    input_mint: ix.accounts[5].0.into(),
                    output_mint: ix.accounts[6].0.into(),
                    input_vault: ix.accounts[7].0.into(),
                    taker_input_ata: ix.accounts[8].0.into(),
                    taker_output_ata: ix.accounts[9].0.into(),
                    intermediary_output_token_account: if ix.accounts[10]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[10].0.into())
                    },
                    maker_output_ata: if ix.accounts[11]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[11].0.into())
                    },
                    express_relay: ix.accounts[12].0.into(),
                    express_relay_metadata: ix.accounts[13].0.into(),
                    sysvar_instructions: ix.accounts[14].0.into(),
                    permission: if ix.accounts[15]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[15].0.into())
                    },
                    config_router: ix.accounts[16].0.into(),
                    input_token_program: ix.accounts[17].0.into(),
                    output_token_program: ix.accounts[18].0.into(),
                    rent: ix.accounts[19].0.into(),
                    system_program: ix.accounts[20].0.into(),
                    event_authority: ix.accounts[21].0.into(),
                    program: ix.accounts[22].0.into(),
                };
                let de_ix_data: TakeOrderIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LimoProgramIx::TakeOrder(ix_accounts, de_ix_data))
            },
            [126, 53, 176, 15, 39, 103, 97, 243] => {
                check_min_accounts_req(accounts_len, 23)?;
                let ix_accounts = FlashTakeOrderStartIxAccounts {
                    taker: ix.accounts[0].0.into(),
                    maker: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                    pda_authority: ix.accounts[3].0.into(),
                    order: ix.accounts[4].0.into(),
                    input_mint: ix.accounts[5].0.into(),
                    output_mint: ix.accounts[6].0.into(),
                    input_vault: ix.accounts[7].0.into(),
                    taker_input_ata: ix.accounts[8].0.into(),
                    taker_output_ata: ix.accounts[9].0.into(),
                    intermediary_output_token_account: if ix.accounts[10]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[10].0.into())
                    },
                    maker_output_ata: if ix.accounts[11]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[11].0.into())
                    },
                    express_relay: ix.accounts[12].0.into(),
                    express_relay_metadata: ix.accounts[13].0.into(),
                    sysvar_instructions: ix.accounts[14].0.into(),
                    permission: if ix.accounts[15]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[15].0.into())
                    },
                    config_router: ix.accounts[16].0.into(),
                    input_token_program: ix.accounts[17].0.into(),
                    output_token_program: ix.accounts[18].0.into(),
                    system_program: ix.accounts[19].0.into(),
                    rent: ix.accounts[20].0.into(),
                    event_authority: ix.accounts[21].0.into(),
                    program: ix.accounts[22].0.into(),
                };
                let de_ix_data: FlashTakeOrderStartIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LimoProgramIx::FlashTakeOrderStart(ix_accounts, de_ix_data))
            },
            [206, 242, 215, 187, 134, 33, 224, 148] => {
                check_min_accounts_req(accounts_len, 23)?;
                let ix_accounts = FlashTakeOrderEndIxAccounts {
                    taker: ix.accounts[0].0.into(),
                    maker: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                    pda_authority: ix.accounts[3].0.into(),
                    order: ix.accounts[4].0.into(),
                    input_mint: ix.accounts[5].0.into(),
                    output_mint: ix.accounts[6].0.into(),
                    input_vault: ix.accounts[7].0.into(),
                    taker_input_ata: ix.accounts[8].0.into(),
                    taker_output_ata: ix.accounts[9].0.into(),
                    intermediary_output_token_account: if ix.accounts[10]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[10].0.into())
                    },
                    maker_output_ata: if ix.accounts[11]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[11].0.into())
                    },
                    express_relay: ix.accounts[12].0.into(),
                    express_relay_metadata: ix.accounts[13].0.into(),
                    sysvar_instructions: ix.accounts[14].0.into(),
                    permission: if ix.accounts[15]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[15].0.into())
                    },
                    config_router: ix.accounts[16].0.into(),
                    input_token_program: ix.accounts[17].0.into(),
                    output_token_program: ix.accounts[18].0.into(),
                    system_program: ix.accounts[19].0.into(),
                    rent: ix.accounts[20].0.into(),
                    event_authority: ix.accounts[21].0.into(),
                    program: ix.accounts[22].0.into(),
                };
                let de_ix_data: FlashTakeOrderEndIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LimoProgramIx::FlashTakeOrderEnd(ix_accounts, de_ix_data))
            },
            [164, 84, 130, 189, 111, 58, 250, 200] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateGlobalConfigIxAccounts {
                    admin_authority: ix.accounts[0].0.into(),
                    global_config: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateGlobalConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LimoProgramIx::UpdateGlobalConfig(ix_accounts, de_ix_data))
            },
            [184, 87, 23, 193, 156, 238, 175, 119] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateGlobalConfigAdminIxAccounts {
                    admin_authority_cached: ix.accounts[0].0.into(),
                    global_config: ix.accounts[1].0.into(),
                };
                Ok(LimoProgramIx::UpdateGlobalConfigAdmin(ix_accounts))
            },
            [140, 246, 105, 165, 80, 85, 143, 18] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = WithdrawHostTipIxAccounts {
                    admin_authority: ix.accounts[0].0.into(),
                    global_config: ix.accounts[1].0.into(),
                    pda_authority: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                };
                Ok(LimoProgramIx::WithdrawHostTip(ix_accounts))
            },
            [133, 108, 23, 15, 226, 215, 176, 95] => {
                check_min_accounts_req(accounts_len, 13)?;
                let ix_accounts = LogUserSwapBalancesStartIxAccounts {
                    maker: ix.accounts[0].0.into(),
                    input_mint: ix.accounts[1].0.into(),
                    output_mint: ix.accounts[2].0.into(),
                    input_ta: ix.accounts[3].0.into(),
                    output_ta: ix.accounts[4].0.into(),
                    pda_referrer: if ix.accounts[5]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[5].0.into())
                    },
                    swap_program_id: ix.accounts[6].0.into(),
                    user_swap_balance_state: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                    rent: ix.accounts[9].0.into(),
                    sysvar_instructions: ix.accounts[10].0.into(),
                    event_authority: ix.accounts[11].0.into(),
                    program: ix.accounts[12].0.into(),
                };
                Ok(LimoProgramIx::LogUserSwapBalancesStart(ix_accounts))
            },
            [140, 42, 198, 82, 147, 144, 44, 113] => {
                check_min_accounts_req(accounts_len, 13)?;
                let ix_accounts = LogUserSwapBalancesEndIxAccounts {
                    maker: ix.accounts[0].0.into(),
                    input_mint: ix.accounts[1].0.into(),
                    output_mint: ix.accounts[2].0.into(),
                    input_ta: ix.accounts[3].0.into(),
                    output_ta: ix.accounts[4].0.into(),
                    pda_referrer: if ix.accounts[5]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[5].0.into())
                    },
                    swap_program_id: ix.accounts[6].0.into(),
                    user_swap_balance_state: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                    rent: ix.accounts[9].0.into(),
                    sysvar_instructions: ix.accounts[10].0.into(),
                    event_authority: ix.accounts[11].0.into(),
                    program: ix.accounts[12].0.into(),
                };
                let de_ix_data: LogUserSwapBalancesEndIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LimoProgramIx::LogUserSwapBalancesEnd(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &ix {
            Ok(ix) => {
                tracing::info!(
                    name: "correctly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = ix.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            },
        }

        ix
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{InitializeGlobalConfigIxAccounts, InstructionParser, LimoProgramIx};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::InitializeGlobalConfigIxAccounts> for InitializeGlobalConfigIxAccounts {
        fn into_proto(self) -> proto_def::InitializeGlobalConfigIxAccounts {
            proto_def::InitializeGlobalConfigIxAccounts {
                admin_authority: self.admin_authority.to_string(),
                pda_authority: self.pda_authority.to_string(),
                global_config: self.global_config.to_string(),
            }
        }
    }
    use super::InitializeVaultIxAccounts;
    impl IntoProto<proto_def::InitializeVaultIxAccounts> for InitializeVaultIxAccounts {
        fn into_proto(self) -> proto_def::InitializeVaultIxAccounts {
            proto_def::InitializeVaultIxAccounts {
                payer: self.payer.to_string(),
                global_config: self.global_config.to_string(),
                pda_authority: self.pda_authority.to_string(),
                mint: self.mint.to_string(),
                vault: self.vault.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::CreateOrderIxAccounts;
    impl IntoProto<proto_def::CreateOrderIxAccounts> for CreateOrderIxAccounts {
        fn into_proto(self) -> proto_def::CreateOrderIxAccounts {
            proto_def::CreateOrderIxAccounts {
                maker: self.maker.to_string(),
                global_config: self.global_config.to_string(),
                pda_authority: self.pda_authority.to_string(),
                order: self.order.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                maker_ata: self.maker_ata.to_string(),
                input_vault: self.input_vault.to_string(),
                input_token_program: self.input_token_program.to_string(),
                output_token_program: self.output_token_program.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::CreateOrderIxData;
    impl IntoProto<proto_def::CreateOrderIxData> for CreateOrderIxData {
        fn into_proto(self) -> proto_def::CreateOrderIxData {
            proto_def::CreateOrderIxData {
                input_amount: self.input_amount,
                output_amount: self.output_amount,
                order_type: self.order_type.into(),
            }
        }
    }
    use super::CloseOrderAndClaimTipIxAccounts;
    impl IntoProto<proto_def::CloseOrderAndClaimTipIxAccounts> for CloseOrderAndClaimTipIxAccounts {
        fn into_proto(self) -> proto_def::CloseOrderAndClaimTipIxAccounts {
            proto_def::CloseOrderAndClaimTipIxAccounts {
                maker: self.maker.to_string(),
                order: self.order.to_string(),
                global_config: self.global_config.to_string(),
                pda_authority: self.pda_authority.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                maker_input_ata: self.maker_input_ata.to_string(),
                input_vault: self.input_vault.to_string(),
                input_token_program: self.input_token_program.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::TakeOrderIxAccounts;
    impl IntoProto<proto_def::TakeOrderIxAccounts> for TakeOrderIxAccounts {
        fn into_proto(self) -> proto_def::TakeOrderIxAccounts {
            proto_def::TakeOrderIxAccounts {
                taker: self.taker.to_string(),
                maker: self.maker.to_string(),
                global_config: self.global_config.to_string(),
                pda_authority: self.pda_authority.to_string(),
                order: self.order.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                input_vault: self.input_vault.to_string(),
                taker_input_ata: self.taker_input_ata.to_string(),
                taker_output_ata: self.taker_output_ata.to_string(),
                intermediary_output_token_account: self
                    .intermediary_output_token_account
                    .map(|p| p.to_string()),
                maker_output_ata: self.maker_output_ata.map(|p| p.to_string()),
                express_relay: self.express_relay.to_string(),
                express_relay_metadata: self.express_relay_metadata.to_string(),
                sysvar_instructions: self.sysvar_instructions.to_string(),
                permission: self.permission.map(|p| p.to_string()),
                config_router: self.config_router.to_string(),
                input_token_program: self.input_token_program.to_string(),
                output_token_program: self.output_token_program.to_string(),
                rent: self.rent.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::TakeOrderIxData;
    impl IntoProto<proto_def::TakeOrderIxData> for TakeOrderIxData {
        fn into_proto(self) -> proto_def::TakeOrderIxData {
            proto_def::TakeOrderIxData {
                input_amount: self.input_amount,
                min_output_amount: self.min_output_amount,
                tip_amount_permissionless_taking: self.tip_amount_permissionless_taking,
            }
        }
    }
    use super::FlashTakeOrderStartIxAccounts;
    impl IntoProto<proto_def::FlashTakeOrderStartIxAccounts> for FlashTakeOrderStartIxAccounts {
        fn into_proto(self) -> proto_def::FlashTakeOrderStartIxAccounts {
            proto_def::FlashTakeOrderStartIxAccounts {
                taker: self.taker.to_string(),
                maker: self.maker.to_string(),
                global_config: self.global_config.to_string(),
                pda_authority: self.pda_authority.to_string(),
                order: self.order.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                input_vault: self.input_vault.to_string(),
                taker_input_ata: self.taker_input_ata.to_string(),
                taker_output_ata: self.taker_output_ata.to_string(),
                intermediary_output_token_account: self
                    .intermediary_output_token_account
                    .map(|p| p.to_string()),
                maker_output_ata: self.maker_output_ata.map(|p| p.to_string()),
                express_relay: self.express_relay.to_string(),
                express_relay_metadata: self.express_relay_metadata.to_string(),
                sysvar_instructions: self.sysvar_instructions.to_string(),
                permission: self.permission.map(|p| p.to_string()),
                config_router: self.config_router.to_string(),
                input_token_program: self.input_token_program.to_string(),
                output_token_program: self.output_token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::FlashTakeOrderStartIxData;
    impl IntoProto<proto_def::FlashTakeOrderStartIxData> for FlashTakeOrderStartIxData {
        fn into_proto(self) -> proto_def::FlashTakeOrderStartIxData {
            proto_def::FlashTakeOrderStartIxData {
                input_amount: self.input_amount,
                min_output_amount: self.min_output_amount,
                tip_amount_permissionless_taking: self.tip_amount_permissionless_taking,
            }
        }
    }
    use super::FlashTakeOrderEndIxAccounts;
    impl IntoProto<proto_def::FlashTakeOrderEndIxAccounts> for FlashTakeOrderEndIxAccounts {
        fn into_proto(self) -> proto_def::FlashTakeOrderEndIxAccounts {
            proto_def::FlashTakeOrderEndIxAccounts {
                taker: self.taker.to_string(),
                maker: self.maker.to_string(),
                global_config: self.global_config.to_string(),
                pda_authority: self.pda_authority.to_string(),
                order: self.order.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                input_vault: self.input_vault.to_string(),
                taker_input_ata: self.taker_input_ata.to_string(),
                taker_output_ata: self.taker_output_ata.to_string(),
                intermediary_output_token_account: self
                    .intermediary_output_token_account
                    .map(|p| p.to_string()),
                maker_output_ata: self.maker_output_ata.map(|p| p.to_string()),
                express_relay: self.express_relay.to_string(),
                express_relay_metadata: self.express_relay_metadata.to_string(),
                sysvar_instructions: self.sysvar_instructions.to_string(),
                permission: self.permission.map(|p| p.to_string()),
                config_router: self.config_router.to_string(),
                input_token_program: self.input_token_program.to_string(),
                output_token_program: self.output_token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::FlashTakeOrderEndIxData;
    impl IntoProto<proto_def::FlashTakeOrderEndIxData> for FlashTakeOrderEndIxData {
        fn into_proto(self) -> proto_def::FlashTakeOrderEndIxData {
            proto_def::FlashTakeOrderEndIxData {
                input_amount: self.input_amount,
                min_output_amount: self.min_output_amount,
                tip_amount_permissionless_taking: self.tip_amount_permissionless_taking,
            }
        }
    }
    use super::UpdateGlobalConfigIxAccounts;
    impl IntoProto<proto_def::UpdateGlobalConfigIxAccounts> for UpdateGlobalConfigIxAccounts {
        fn into_proto(self) -> proto_def::UpdateGlobalConfigIxAccounts {
            proto_def::UpdateGlobalConfigIxAccounts {
                admin_authority: self.admin_authority.to_string(),
                global_config: self.global_config.to_string(),
            }
        }
    }
    use super::UpdateGlobalConfigIxData;
    impl IntoProto<proto_def::UpdateGlobalConfigIxData> for UpdateGlobalConfigIxData {
        fn into_proto(self) -> proto_def::UpdateGlobalConfigIxData {
            proto_def::UpdateGlobalConfigIxData {
                mode: self.mode.into(),
                value: self.value.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::UpdateGlobalConfigAdminIxAccounts;
    impl IntoProto<proto_def::UpdateGlobalConfigAdminIxAccounts> for UpdateGlobalConfigAdminIxAccounts {
        fn into_proto(self) -> proto_def::UpdateGlobalConfigAdminIxAccounts {
            proto_def::UpdateGlobalConfigAdminIxAccounts {
                admin_authority_cached: self.admin_authority_cached.to_string(),
                global_config: self.global_config.to_string(),
            }
        }
    }
    use super::WithdrawHostTipIxAccounts;
    impl IntoProto<proto_def::WithdrawHostTipIxAccounts> for WithdrawHostTipIxAccounts {
        fn into_proto(self) -> proto_def::WithdrawHostTipIxAccounts {
            proto_def::WithdrawHostTipIxAccounts {
                admin_authority: self.admin_authority.to_string(),
                global_config: self.global_config.to_string(),
                pda_authority: self.pda_authority.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::LogUserSwapBalancesStartIxAccounts;
    impl IntoProto<proto_def::LogUserSwapBalancesStartIxAccounts>
        for LogUserSwapBalancesStartIxAccounts
    {
        fn into_proto(self) -> proto_def::LogUserSwapBalancesStartIxAccounts {
            proto_def::LogUserSwapBalancesStartIxAccounts {
                maker: self.maker.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                input_ta: self.input_ta.to_string(),
                output_ta: self.output_ta.to_string(),
                pda_referrer: self.pda_referrer.map(|p| p.to_string()),
                swap_program_id: self.swap_program_id.to_string(),
                user_swap_balance_state: self.user_swap_balance_state.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                sysvar_instructions: self.sysvar_instructions.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::LogUserSwapBalancesEndIxAccounts;
    impl IntoProto<proto_def::LogUserSwapBalancesEndIxAccounts> for LogUserSwapBalancesEndIxAccounts {
        fn into_proto(self) -> proto_def::LogUserSwapBalancesEndIxAccounts {
            proto_def::LogUserSwapBalancesEndIxAccounts {
                maker: self.maker.to_string(),
                input_mint: self.input_mint.to_string(),
                output_mint: self.output_mint.to_string(),
                input_ta: self.input_ta.to_string(),
                output_ta: self.output_ta.to_string(),
                pda_referrer: self.pda_referrer.map(|p| p.to_string()),
                swap_program_id: self.swap_program_id.to_string(),
                user_swap_balance_state: self.user_swap_balance_state.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                sysvar_instructions: self.sysvar_instructions.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::LogUserSwapBalancesEndIxData;
    impl IntoProto<proto_def::LogUserSwapBalancesEndIxData> for LogUserSwapBalancesEndIxData {
        fn into_proto(self) -> proto_def::LogUserSwapBalancesEndIxData {
            proto_def::LogUserSwapBalancesEndIxData {
                simulated_swap_amount_out: self.simulated_swap_amount_out,
                simulated_ts: self.simulated_ts,
                minimum_amount_out: self.minimum_amount_out,
                swap_amount_in: self.swap_amount_in,
                simulated_amount_out_next_best: self.simulated_amount_out_next_best,
                aggregator: self.aggregator.into(),
                next_best_aggregator: self.next_best_aggregator.into(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramIxs> for LimoProgramIx {
        fn into_proto(self) -> proto_def::ProgramIxs {
            match self {
                LimoProgramIx::InitializeGlobalConfig(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializeGlobalConfig(
                        proto_def::InitializeGlobalConfigIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::InitializeVault(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializeVault(
                        proto_def::InitializeVaultIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::CreateOrder(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CreateOrder(
                        proto_def::CreateOrderIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::CloseOrderAndClaimTip(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CloseOrderAndClaimTip(
                        proto_def::CloseOrderAndClaimTipIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::TakeOrder(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::TakeOrder(
                        proto_def::TakeOrderIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::FlashTakeOrderStart(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::FlashTakeOrderStart(
                        proto_def::FlashTakeOrderStartIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::FlashTakeOrderEnd(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::FlashTakeOrderEnd(
                        proto_def::FlashTakeOrderEndIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::UpdateGlobalConfig(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateGlobalConfig(
                        proto_def::UpdateGlobalConfigIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::UpdateGlobalConfigAdmin(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateGlobalConfigAdmin(
                        proto_def::UpdateGlobalConfigAdminIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::WithdrawHostTip(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::WithdrawHostTip(
                        proto_def::WithdrawHostTipIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::LogUserSwapBalancesStart(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::LogUserSwapBalancesStart(
                        proto_def::LogUserSwapBalancesStartIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LimoProgramIx::LogUserSwapBalancesEnd(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::LogUserSwapBalancesEnd(
                        proto_def::LogUserSwapBalancesEndIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
            }
        }
    }

    impl ParseProto for InstructionParser {
        type Message = proto_def::ProgramIxs;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
