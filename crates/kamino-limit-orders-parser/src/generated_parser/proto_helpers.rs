//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use proto_def::update_global_config_value;

    use crate::{proto_def, types::UpdateGlobalConfigValue};
    impl IntoProto<proto_def::UpdateGlobalConfigValue> for UpdateGlobalConfigValue {
        fn into_proto(self) -> proto_def::UpdateGlobalConfigValue {
            let variant = match self {
                UpdateGlobalConfigValue::Bool(field_0) => {
                    update_global_config_value::Variant::Bool(
                        proto_def::UpdateGlobalConfigValueBool { field_0 },
                    )
                },
                UpdateGlobalConfigValue::U16(field_0) => update_global_config_value::Variant::U16(
                    proto_def::UpdateGlobalConfigValueU16 {
                        field_0: field_0.into(),
                    },
                ),
                UpdateGlobalConfigValue::U64(field_0) => update_global_config_value::Variant::U64(
                    proto_def::UpdateGlobalConfigValueU64 { field_0 },
                ),
                UpdateGlobalConfigValue::Pubkey(field_0) => {
                    update_global_config_value::Variant::Pubkey(
                        proto_def::UpdateGlobalConfigValuePubkey {
                            field_0: field_0.to_string(),
                        },
                    )
                },
            };

            proto_def::UpdateGlobalConfigValue {
                variant: Some(variant),
            }
        }
    }
}
