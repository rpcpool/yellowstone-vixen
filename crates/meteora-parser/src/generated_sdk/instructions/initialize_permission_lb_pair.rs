//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct InitializePermissionLbPair {
    pub base: solana_pubkey::Pubkey,

    pub lb_pair: solana_pubkey::Pubkey,

    pub bin_array_bitmap_extension: Option<solana_pubkey::Pubkey>,

    pub token_mint_x: solana_pubkey::Pubkey,

    pub token_mint_y: solana_pubkey::Pubkey,

    pub reserve_x: solana_pubkey::Pubkey,

    pub reserve_y: solana_pubkey::Pubkey,

    pub oracle: solana_pubkey::Pubkey,

    pub admin: solana_pubkey::Pubkey,

    pub token_badge_x: Option<solana_pubkey::Pubkey>,

    pub token_badge_y: Option<solana_pubkey::Pubkey>,

    pub token_program_x: solana_pubkey::Pubkey,

    pub token_program_y: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub rent: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub program: solana_pubkey::Pubkey,
}

impl InitializePermissionLbPair {
    pub fn instruction(
        &self,
        args: InitializePermissionLbPairInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializePermissionLbPairInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(17 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.base, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.lb_pair, false));
        if let Some(bin_array_bitmap_extension) = self.bin_array_bitmap_extension {
            accounts.push(solana_instruction::AccountMeta::new(
                bin_array_bitmap_extension,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LB_CLMM_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint_x,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint_y,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.reserve_x, false));
        accounts.push(solana_instruction::AccountMeta::new(self.reserve_y, false));
        accounts.push(solana_instruction::AccountMeta::new(self.oracle, false));
        accounts.push(solana_instruction::AccountMeta::new(self.admin, true));
        if let Some(token_badge_x) = self.token_badge_x {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                token_badge_x,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LB_CLMM_ID,
                false,
            ));
        }
        if let Some(token_badge_y) = self.token_badge_y {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                token_badge_y,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LB_CLMM_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program_x,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program_y,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializePermissionLbPairInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::LB_CLMM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePermissionLbPairInstructionData {
    discriminator: [u8; 8],
}

impl InitializePermissionLbPairInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [108, 102, 213, 85, 251, 3, 53, 21],
        }
    }
}

impl Default for InitializePermissionLbPairInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePermissionLbPairInstructionArgs {
    pub active_id: i32,
    pub bin_step: u16,
    pub base_factor: u16,
    pub base_fee_power_factor: u8,
    pub activation_type: u8,
    pub protocol_share: u16,
}

/// Instruction builder for `InitializePermissionLbPair`.
///
/// ### Accounts:
///
///   0. `[signer]` base
///   1. `[writable]` lb_pair
///   2. `[writable, optional]` bin_array_bitmap_extension
///   3. `[]` token_mint_x
///   4. `[]` token_mint_y
///   5. `[writable]` reserve_x
///   6. `[writable]` reserve_y
///   7. `[writable]` oracle
///   8. `[writable, signer]` admin
///   9. `[optional]` token_badge_x
///   10. `[optional]` token_badge_y
///   11. `[]` token_program_x
///   12. `[]` token_program_y
///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   14. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   15. `[]` event_authority
///   16. `[]` program
#[derive(Clone, Debug, Default)]
pub struct InitializePermissionLbPairBuilder {
    base: Option<solana_pubkey::Pubkey>,
    lb_pair: Option<solana_pubkey::Pubkey>,
    bin_array_bitmap_extension: Option<solana_pubkey::Pubkey>,
    token_mint_x: Option<solana_pubkey::Pubkey>,
    token_mint_y: Option<solana_pubkey::Pubkey>,
    reserve_x: Option<solana_pubkey::Pubkey>,
    reserve_y: Option<solana_pubkey::Pubkey>,
    oracle: Option<solana_pubkey::Pubkey>,
    admin: Option<solana_pubkey::Pubkey>,
    token_badge_x: Option<solana_pubkey::Pubkey>,
    token_badge_y: Option<solana_pubkey::Pubkey>,
    token_program_x: Option<solana_pubkey::Pubkey>,
    token_program_y: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    rent: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    program: Option<solana_pubkey::Pubkey>,
    active_id: Option<i32>,
    bin_step: Option<u16>,
    base_factor: Option<u16>,
    base_fee_power_factor: Option<u8>,
    activation_type: Option<u8>,
    protocol_share: Option<u16>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializePermissionLbPairBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn base(&mut self, base: solana_pubkey::Pubkey) -> &mut Self {
        self.base = Some(base);
        self
    }

    #[inline(always)]
    pub fn lb_pair(&mut self, lb_pair: solana_pubkey::Pubkey) -> &mut Self {
        self.lb_pair = Some(lb_pair);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn bin_array_bitmap_extension(
        &mut self,
        bin_array_bitmap_extension: Option<solana_pubkey::Pubkey>,
    ) -> &mut Self {
        self.bin_array_bitmap_extension = bin_array_bitmap_extension;
        self
    }

    #[inline(always)]
    pub fn token_mint_x(&mut self, token_mint_x: solana_pubkey::Pubkey) -> &mut Self {
        self.token_mint_x = Some(token_mint_x);
        self
    }

    #[inline(always)]
    pub fn token_mint_y(&mut self, token_mint_y: solana_pubkey::Pubkey) -> &mut Self {
        self.token_mint_y = Some(token_mint_y);
        self
    }

    #[inline(always)]
    pub fn reserve_x(&mut self, reserve_x: solana_pubkey::Pubkey) -> &mut Self {
        self.reserve_x = Some(reserve_x);
        self
    }

    #[inline(always)]
    pub fn reserve_y(&mut self, reserve_y: solana_pubkey::Pubkey) -> &mut Self {
        self.reserve_y = Some(reserve_y);
        self
    }

    #[inline(always)]
    pub fn oracle(&mut self, oracle: solana_pubkey::Pubkey) -> &mut Self {
        self.oracle = Some(oracle);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn token_badge_x(&mut self, token_badge_x: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.token_badge_x = token_badge_x;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn token_badge_y(&mut self, token_badge_y: Option<solana_pubkey::Pubkey>) -> &mut Self {
        self.token_badge_y = token_badge_y;
        self
    }

    #[inline(always)]
    pub fn token_program_x(&mut self, token_program_x: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program_x = Some(token_program_x);
        self
    }

    #[inline(always)]
    pub fn token_program_y(&mut self, token_program_y: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program_y = Some(token_program_y);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn active_id(&mut self, active_id: i32) -> &mut Self {
        self.active_id = Some(active_id);
        self
    }

    #[inline(always)]
    pub fn bin_step(&mut self, bin_step: u16) -> &mut Self {
        self.bin_step = Some(bin_step);
        self
    }

    #[inline(always)]
    pub fn base_factor(&mut self, base_factor: u16) -> &mut Self {
        self.base_factor = Some(base_factor);
        self
    }

    #[inline(always)]
    pub fn base_fee_power_factor(&mut self, base_fee_power_factor: u8) -> &mut Self {
        self.base_fee_power_factor = Some(base_fee_power_factor);
        self
    }

    #[inline(always)]
    pub fn activation_type(&mut self, activation_type: u8) -> &mut Self {
        self.activation_type = Some(activation_type);
        self
    }

    #[inline(always)]
    pub fn protocol_share(&mut self, protocol_share: u16) -> &mut Self {
        self.protocol_share = Some(protocol_share);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = InitializePermissionLbPair {
            base: self.base.expect("base is not set"),
            lb_pair: self.lb_pair.expect("lb_pair is not set"),
            bin_array_bitmap_extension: self.bin_array_bitmap_extension,
            token_mint_x: self.token_mint_x.expect("token_mint_x is not set"),
            token_mint_y: self.token_mint_y.expect("token_mint_y is not set"),
            reserve_x: self.reserve_x.expect("reserve_x is not set"),
            reserve_y: self.reserve_y.expect("reserve_y is not set"),
            oracle: self.oracle.expect("oracle is not set"),
            admin: self.admin.expect("admin is not set"),
            token_badge_x: self.token_badge_x,
            token_badge_y: self.token_badge_y,
            token_program_x: self.token_program_x.expect("token_program_x is not set"),
            token_program_y: self.token_program_y.expect("token_program_y is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            rent: self.rent.unwrap_or(solana_pubkey::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = InitializePermissionLbPairInstructionArgs {
            active_id: self.active_id.clone().expect("active_id is not set"),
            bin_step: self.bin_step.clone().expect("bin_step is not set"),
            base_factor: self.base_factor.clone().expect("base_factor is not set"),
            base_fee_power_factor: self
                .base_fee_power_factor
                .clone()
                .expect("base_fee_power_factor is not set"),
            activation_type: self
                .activation_type
                .clone()
                .expect("activation_type is not set"),
            protocol_share: self
                .protocol_share
                .clone()
                .expect("protocol_share is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_permission_lb_pair` CPI accounts.
pub struct InitializePermissionLbPairCpiAccounts<'a, 'b> {
    pub base: &'b solana_account_info::AccountInfo<'a>,

    pub lb_pair: &'b solana_account_info::AccountInfo<'a>,

    pub bin_array_bitmap_extension: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_mint_x: &'b solana_account_info::AccountInfo<'a>,

    pub token_mint_y: &'b solana_account_info::AccountInfo<'a>,

    pub reserve_x: &'b solana_account_info::AccountInfo<'a>,

    pub reserve_y: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub token_badge_x: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_badge_y: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_program_x: &'b solana_account_info::AccountInfo<'a>,

    pub token_program_y: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub rent: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

/// `initialize_permission_lb_pair` CPI instruction.
pub struct InitializePermissionLbPairCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub base: &'b solana_account_info::AccountInfo<'a>,

    pub lb_pair: &'b solana_account_info::AccountInfo<'a>,

    pub bin_array_bitmap_extension: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_mint_x: &'b solana_account_info::AccountInfo<'a>,

    pub token_mint_y: &'b solana_account_info::AccountInfo<'a>,

    pub reserve_x: &'b solana_account_info::AccountInfo<'a>,

    pub reserve_y: &'b solana_account_info::AccountInfo<'a>,

    pub oracle: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub token_badge_x: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_badge_y: Option<&'b solana_account_info::AccountInfo<'a>>,

    pub token_program_x: &'b solana_account_info::AccountInfo<'a>,

    pub token_program_y: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub rent: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializePermissionLbPairInstructionArgs,
}

impl<'a, 'b> InitializePermissionLbPairCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: InitializePermissionLbPairCpiAccounts<'a, 'b>,
        args: InitializePermissionLbPairInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            base: accounts.base,
            lb_pair: accounts.lb_pair,
            bin_array_bitmap_extension: accounts.bin_array_bitmap_extension,
            token_mint_x: accounts.token_mint_x,
            token_mint_y: accounts.token_mint_y,
            reserve_x: accounts.reserve_x,
            reserve_y: accounts.reserve_y,
            oracle: accounts.oracle,
            admin: accounts.admin,
            token_badge_x: accounts.token_badge_x,
            token_badge_y: accounts.token_badge_y,
            token_program_x: accounts.token_program_x,
            token_program_y: accounts.token_program_y,
            system_program: accounts.system_program,
            rent: accounts.rent,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(17 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.base.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.lb_pair.key,
            false,
        ));
        if let Some(bin_array_bitmap_extension) = self.bin_array_bitmap_extension {
            accounts.push(solana_instruction::AccountMeta::new(
                *bin_array_bitmap_extension.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LB_CLMM_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint_x.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint_y.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve_x.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.reserve_y.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.oracle.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.admin.key, true));
        if let Some(token_badge_x) = self.token_badge_x {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *token_badge_x.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LB_CLMM_ID,
                false,
            ));
        }
        if let Some(token_badge_y) = self.token_badge_y {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                *token_badge_y.key,
                false,
            ));
        } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::LB_CLMM_ID,
                false,
            ));
        }
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program_x.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program_y.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializePermissionLbPairInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::LB_CLMM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(18 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.base.clone());
        account_infos.push(self.lb_pair.clone());
        if let Some(bin_array_bitmap_extension) = self.bin_array_bitmap_extension {
            account_infos.push(bin_array_bitmap_extension.clone());
        }
        account_infos.push(self.token_mint_x.clone());
        account_infos.push(self.token_mint_y.clone());
        account_infos.push(self.reserve_x.clone());
        account_infos.push(self.reserve_y.clone());
        account_infos.push(self.oracle.clone());
        account_infos.push(self.admin.clone());
        if let Some(token_badge_x) = self.token_badge_x {
            account_infos.push(token_badge_x.clone());
        }
        if let Some(token_badge_y) = self.token_badge_y {
            account_infos.push(token_badge_y.clone());
        }
        account_infos.push(self.token_program_x.clone());
        account_infos.push(self.token_program_y.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializePermissionLbPair` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` base
///   1. `[writable]` lb_pair
///   2. `[writable, optional]` bin_array_bitmap_extension
///   3. `[]` token_mint_x
///   4. `[]` token_mint_y
///   5. `[writable]` reserve_x
///   6. `[writable]` reserve_y
///   7. `[writable]` oracle
///   8. `[writable, signer]` admin
///   9. `[optional]` token_badge_x
///   10. `[optional]` token_badge_y
///   11. `[]` token_program_x
///   12. `[]` token_program_y
///   13. `[]` system_program
///   14. `[]` rent
///   15. `[]` event_authority
///   16. `[]` program
#[derive(Clone, Debug)]
pub struct InitializePermissionLbPairCpiBuilder<'a, 'b> {
    instruction: Box<InitializePermissionLbPairCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializePermissionLbPairCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializePermissionLbPairCpiBuilderInstruction {
            __program: program,
            base: None,
            lb_pair: None,
            bin_array_bitmap_extension: None,
            token_mint_x: None,
            token_mint_y: None,
            reserve_x: None,
            reserve_y: None,
            oracle: None,
            admin: None,
            token_badge_x: None,
            token_badge_y: None,
            token_program_x: None,
            token_program_y: None,
            system_program: None,
            rent: None,
            event_authority: None,
            program: None,
            active_id: None,
            bin_step: None,
            base_factor: None,
            base_fee_power_factor: None,
            activation_type: None,
            protocol_share: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn base(&mut self, base: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.base = Some(base);
        self
    }

    #[inline(always)]
    pub fn lb_pair(&mut self, lb_pair: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.lb_pair = Some(lb_pair);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn bin_array_bitmap_extension(
        &mut self,
        bin_array_bitmap_extension: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.bin_array_bitmap_extension = bin_array_bitmap_extension;
        self
    }

    #[inline(always)]
    pub fn token_mint_x(
        &mut self,
        token_mint_x: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint_x = Some(token_mint_x);
        self
    }

    #[inline(always)]
    pub fn token_mint_y(
        &mut self,
        token_mint_y: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint_y = Some(token_mint_y);
        self
    }

    #[inline(always)]
    pub fn reserve_x(&mut self, reserve_x: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.reserve_x = Some(reserve_x);
        self
    }

    #[inline(always)]
    pub fn reserve_y(&mut self, reserve_y: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.reserve_y = Some(reserve_y);
        self
    }

    #[inline(always)]
    pub fn oracle(&mut self, oracle: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.oracle = Some(oracle);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn token_badge_x(
        &mut self,
        token_badge_x: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.token_badge_x = token_badge_x;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn token_badge_y(
        &mut self,
        token_badge_y: Option<&'b solana_account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.token_badge_y = token_badge_y;
        self
    }

    #[inline(always)]
    pub fn token_program_x(
        &mut self,
        token_program_x: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program_x = Some(token_program_x);
        self
    }

    #[inline(always)]
    pub fn token_program_y(
        &mut self,
        token_program_y: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program_y = Some(token_program_y);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn active_id(&mut self, active_id: i32) -> &mut Self {
        self.instruction.active_id = Some(active_id);
        self
    }

    #[inline(always)]
    pub fn bin_step(&mut self, bin_step: u16) -> &mut Self {
        self.instruction.bin_step = Some(bin_step);
        self
    }

    #[inline(always)]
    pub fn base_factor(&mut self, base_factor: u16) -> &mut Self {
        self.instruction.base_factor = Some(base_factor);
        self
    }

    #[inline(always)]
    pub fn base_fee_power_factor(&mut self, base_fee_power_factor: u8) -> &mut Self {
        self.instruction.base_fee_power_factor = Some(base_fee_power_factor);
        self
    }

    #[inline(always)]
    pub fn activation_type(&mut self, activation_type: u8) -> &mut Self {
        self.instruction.activation_type = Some(activation_type);
        self
    }

    #[inline(always)]
    pub fn protocol_share(&mut self, protocol_share: u16) -> &mut Self {
        self.instruction.protocol_share = Some(protocol_share);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = InitializePermissionLbPairInstructionArgs {
            active_id: self
                .instruction
                .active_id
                .clone()
                .expect("active_id is not set"),
            bin_step: self
                .instruction
                .bin_step
                .clone()
                .expect("bin_step is not set"),
            base_factor: self
                .instruction
                .base_factor
                .clone()
                .expect("base_factor is not set"),
            base_fee_power_factor: self
                .instruction
                .base_fee_power_factor
                .clone()
                .expect("base_fee_power_factor is not set"),
            activation_type: self
                .instruction
                .activation_type
                .clone()
                .expect("activation_type is not set"),
            protocol_share: self
                .instruction
                .protocol_share
                .clone()
                .expect("protocol_share is not set"),
        };
        let instruction = InitializePermissionLbPairCpi {
            __program: self.instruction.__program,

            base: self.instruction.base.expect("base is not set"),

            lb_pair: self.instruction.lb_pair.expect("lb_pair is not set"),

            bin_array_bitmap_extension: self.instruction.bin_array_bitmap_extension,

            token_mint_x: self
                .instruction
                .token_mint_x
                .expect("token_mint_x is not set"),

            token_mint_y: self
                .instruction
                .token_mint_y
                .expect("token_mint_y is not set"),

            reserve_x: self.instruction.reserve_x.expect("reserve_x is not set"),

            reserve_y: self.instruction.reserve_y.expect("reserve_y is not set"),

            oracle: self.instruction.oracle.expect("oracle is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            token_badge_x: self.instruction.token_badge_x,

            token_badge_y: self.instruction.token_badge_y,

            token_program_x: self
                .instruction
                .token_program_x
                .expect("token_program_x is not set"),

            token_program_y: self
                .instruction
                .token_program_y
                .expect("token_program_y is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializePermissionLbPairCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    base: Option<&'b solana_account_info::AccountInfo<'a>>,
    lb_pair: Option<&'b solana_account_info::AccountInfo<'a>>,
    bin_array_bitmap_extension: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_mint_x: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_mint_y: Option<&'b solana_account_info::AccountInfo<'a>>,
    reserve_x: Option<&'b solana_account_info::AccountInfo<'a>>,
    reserve_y: Option<&'b solana_account_info::AccountInfo<'a>>,
    oracle: Option<&'b solana_account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_badge_x: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_badge_y: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program_x: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program_y: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program: Option<&'b solana_account_info::AccountInfo<'a>>,
    active_id: Option<i32>,
    bin_step: Option<u16>,
    base_factor: Option<u16>,
    base_fee_power_factor: Option<u8>,
    activation_type: Option<u8>,
    protocol_share: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
