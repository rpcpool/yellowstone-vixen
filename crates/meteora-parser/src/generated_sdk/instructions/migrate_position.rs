//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct MigratePosition {
    pub position_v2: solana_pubkey::Pubkey,

    pub position_v1: solana_pubkey::Pubkey,

    pub lb_pair: solana_pubkey::Pubkey,

    pub bin_array_lower: solana_pubkey::Pubkey,

    pub bin_array_upper: solana_pubkey::Pubkey,

    pub owner: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub rent_receiver: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub program: solana_pubkey::Pubkey,
}

impl MigratePosition {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.position_v2, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.position_v1,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.lb_pair,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.bin_array_lower,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.bin_array_upper,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.owner, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.rent_receiver,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&MigratePositionInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::LB_CLMM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigratePositionInstructionData {
    discriminator: [u8; 8],
}

impl MigratePositionInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [15, 132, 59, 50, 199, 6, 251, 46],
        }
    }
}

impl Default for MigratePositionInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `MigratePosition`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` position_v2
///   1. `[writable]` position_v1
///   2. `[]` lb_pair
///   3. `[writable]` bin_array_lower
///   4. `[writable]` bin_array_upper
///   5. `[writable, signer]` owner
///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   7. `[writable]` rent_receiver
///   8. `[]` event_authority
///   9. `[]` program
#[derive(Clone, Debug, Default)]
pub struct MigratePositionBuilder {
    position_v2: Option<solana_pubkey::Pubkey>,
    position_v1: Option<solana_pubkey::Pubkey>,
    lb_pair: Option<solana_pubkey::Pubkey>,
    bin_array_lower: Option<solana_pubkey::Pubkey>,
    bin_array_upper: Option<solana_pubkey::Pubkey>,
    owner: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    rent_receiver: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl MigratePositionBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn position_v2(&mut self, position_v2: solana_pubkey::Pubkey) -> &mut Self {
        self.position_v2 = Some(position_v2);
        self
    }

    #[inline(always)]
    pub fn position_v1(&mut self, position_v1: solana_pubkey::Pubkey) -> &mut Self {
        self.position_v1 = Some(position_v1);
        self
    }

    #[inline(always)]
    pub fn lb_pair(&mut self, lb_pair: solana_pubkey::Pubkey) -> &mut Self {
        self.lb_pair = Some(lb_pair);
        self
    }

    #[inline(always)]
    pub fn bin_array_lower(&mut self, bin_array_lower: solana_pubkey::Pubkey) -> &mut Self {
        self.bin_array_lower = Some(bin_array_lower);
        self
    }

    #[inline(always)]
    pub fn bin_array_upper(&mut self, bin_array_upper: solana_pubkey::Pubkey) -> &mut Self {
        self.bin_array_upper = Some(bin_array_upper);
        self
    }

    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn rent_receiver(&mut self, rent_receiver: solana_pubkey::Pubkey) -> &mut Self {
        self.rent_receiver = Some(rent_receiver);
        self
    }

    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = MigratePosition {
            position_v2: self.position_v2.expect("position_v2 is not set"),
            position_v1: self.position_v1.expect("position_v1 is not set"),
            lb_pair: self.lb_pair.expect("lb_pair is not set"),
            bin_array_lower: self.bin_array_lower.expect("bin_array_lower is not set"),
            bin_array_upper: self.bin_array_upper.expect("bin_array_upper is not set"),
            owner: self.owner.expect("owner is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            rent_receiver: self.rent_receiver.expect("rent_receiver is not set"),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `migrate_position` CPI accounts.
pub struct MigratePositionCpiAccounts<'a, 'b> {
    pub position_v2: &'b solana_account_info::AccountInfo<'a>,

    pub position_v1: &'b solana_account_info::AccountInfo<'a>,

    pub lb_pair: &'b solana_account_info::AccountInfo<'a>,

    pub bin_array_lower: &'b solana_account_info::AccountInfo<'a>,

    pub bin_array_upper: &'b solana_account_info::AccountInfo<'a>,

    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub rent_receiver: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

/// `migrate_position` CPI instruction.
pub struct MigratePositionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub position_v2: &'b solana_account_info::AccountInfo<'a>,

    pub position_v1: &'b solana_account_info::AccountInfo<'a>,

    pub lb_pair: &'b solana_account_info::AccountInfo<'a>,

    pub bin_array_lower: &'b solana_account_info::AccountInfo<'a>,

    pub bin_array_upper: &'b solana_account_info::AccountInfo<'a>,

    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub rent_receiver: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> MigratePositionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: MigratePositionCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            position_v2: accounts.position_v2,
            position_v1: accounts.position_v1,
            lb_pair: accounts.lb_pair,
            bin_array_lower: accounts.bin_array_lower,
            bin_array_upper: accounts.bin_array_upper,
            owner: accounts.owner,
            system_program: accounts.system_program,
            rent_receiver: accounts.rent_receiver,
            event_authority: accounts.event_authority,
            program: accounts.program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.position_v2.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.position_v1.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.lb_pair.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.bin_array_lower.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.bin_array_upper.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.owner.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.rent_receiver.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&MigratePositionInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::LB_CLMM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.position_v2.clone());
        account_infos.push(self.position_v1.clone());
        account_infos.push(self.lb_pair.clone());
        account_infos.push(self.bin_array_lower.clone());
        account_infos.push(self.bin_array_upper.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.rent_receiver.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MigratePosition` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` position_v2
///   1. `[writable]` position_v1
///   2. `[]` lb_pair
///   3. `[writable]` bin_array_lower
///   4. `[writable]` bin_array_upper
///   5. `[writable, signer]` owner
///   6. `[]` system_program
///   7. `[writable]` rent_receiver
///   8. `[]` event_authority
///   9. `[]` program
#[derive(Clone, Debug)]
pub struct MigratePositionCpiBuilder<'a, 'b> {
    instruction: Box<MigratePositionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MigratePositionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MigratePositionCpiBuilderInstruction {
            __program: program,
            position_v2: None,
            position_v1: None,
            lb_pair: None,
            bin_array_lower: None,
            bin_array_upper: None,
            owner: None,
            system_program: None,
            rent_receiver: None,
            event_authority: None,
            program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn position_v2(
        &mut self,
        position_v2: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_v2 = Some(position_v2);
        self
    }

    #[inline(always)]
    pub fn position_v1(
        &mut self,
        position_v1: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_v1 = Some(position_v1);
        self
    }

    #[inline(always)]
    pub fn lb_pair(&mut self, lb_pair: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.lb_pair = Some(lb_pair);
        self
    }

    #[inline(always)]
    pub fn bin_array_lower(
        &mut self,
        bin_array_lower: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bin_array_lower = Some(bin_array_lower);
        self
    }

    #[inline(always)]
    pub fn bin_array_upper(
        &mut self,
        bin_array_upper: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.bin_array_upper = Some(bin_array_upper);
        self
    }

    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn rent_receiver(
        &mut self,
        rent_receiver: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_receiver = Some(rent_receiver);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = MigratePositionCpi {
            __program: self.instruction.__program,

            position_v2: self
                .instruction
                .position_v2
                .expect("position_v2 is not set"),

            position_v1: self
                .instruction
                .position_v1
                .expect("position_v1 is not set"),

            lb_pair: self.instruction.lb_pair.expect("lb_pair is not set"),

            bin_array_lower: self
                .instruction
                .bin_array_lower
                .expect("bin_array_lower is not set"),

            bin_array_upper: self
                .instruction
                .bin_array_upper
                .expect("bin_array_upper is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            rent_receiver: self
                .instruction
                .rent_receiver
                .expect("rent_receiver is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MigratePositionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    position_v2: Option<&'b solana_account_info::AccountInfo<'a>>,
    position_v1: Option<&'b solana_account_info::AccountInfo<'a>>,
    lb_pair: Option<&'b solana_account_info::AccountInfo<'a>>,
    bin_array_lower: Option<&'b solana_account_info::AccountInfo<'a>>,
    bin_array_upper: Option<&'b solana_account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    rent_receiver: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
