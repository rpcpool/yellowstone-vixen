//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct InitializeTokenBadge {
    pub token_mint: solana_pubkey::Pubkey,

    pub token_badge: solana_pubkey::Pubkey,

    pub admin: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl InitializeTokenBadge {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token_badge,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.admin, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&InitializeTokenBadgeInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::LB_CLMM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeTokenBadgeInstructionData {
    discriminator: [u8; 8],
}

impl InitializeTokenBadgeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [253, 77, 205, 95, 27, 224, 89, 223],
        }
    }
}

impl Default for InitializeTokenBadgeInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `InitializeTokenBadge`.
///
/// ### Accounts:
///
///   0. `[]` token_mint
///   1. `[writable]` token_badge
///   2. `[writable, signer]` admin
///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeTokenBadgeBuilder {
    token_mint: Option<solana_pubkey::Pubkey>,
    token_badge: Option<solana_pubkey::Pubkey>,
    admin: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializeTokenBadgeBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }

    #[inline(always)]
    pub fn token_badge(&mut self, token_badge: solana_pubkey::Pubkey) -> &mut Self {
        self.token_badge = Some(token_badge);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: solana_pubkey::Pubkey) -> &mut Self {
        self.admin = Some(admin);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = InitializeTokenBadge {
            token_mint: self.token_mint.expect("token_mint is not set"),
            token_badge: self.token_badge.expect("token_badge is not set"),
            admin: self.admin.expect("admin is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `initialize_token_badge` CPI accounts.
pub struct InitializeTokenBadgeCpiAccounts<'a, 'b> {
    pub token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub token_badge: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `initialize_token_badge` CPI instruction.
pub struct InitializeTokenBadgeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_account_info::AccountInfo<'a>,

    pub token_badge: &'b solana_account_info::AccountInfo<'a>,

    pub admin: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> InitializeTokenBadgeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: InitializeTokenBadgeCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            token_mint: accounts.token_mint,
            token_badge: accounts.token_badge,
            admin: accounts.admin,
            system_program: accounts.system_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(4 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_badge.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.admin.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&InitializeTokenBadgeInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::LB_CLMM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.token_badge.clone());
        account_infos.push(self.admin.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeTokenBadge` via CPI.
///
/// ### Accounts:
///
///   0. `[]` token_mint
///   1. `[writable]` token_badge
///   2. `[writable, signer]` admin
///   3. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializeTokenBadgeCpiBuilder<'a, 'b> {
    instruction: Box<InitializeTokenBadgeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeTokenBadgeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeTokenBadgeCpiBuilderInstruction {
            __program: program,
            token_mint: None,
            token_badge: None,
            admin: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }

    #[inline(always)]
    pub fn token_badge(
        &mut self,
        token_badge: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_badge = Some(token_badge);
        self
    }

    #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.admin = Some(admin);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = InitializeTokenBadgeCpi {
            __program: self.instruction.__program,

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            token_badge: self
                .instruction
                .token_badge
                .expect("token_badge is not set"),

            admin: self.instruction.admin.expect("admin is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeTokenBadgeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_badge: Option<&'b solana_account_info::AccountInfo<'a>>,
    admin: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
