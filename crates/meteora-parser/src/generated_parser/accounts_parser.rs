//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{
        BinArray, BinArrayBitmapExtension, ClaimFeeOperator, LbPair, Oracle, Position, PositionV2,
        PresetParameter, PresetParameter2, TokenBadge,
    },
    deserialize_checked, ID,
};

/// LbClmm Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum LbClmmProgramState {
    BinArrayBitmapExtension(BinArrayBitmapExtension),
    BinArray(BinArray),
    ClaimFeeOperator(ClaimFeeOperator),
    LbPair(LbPair),
    Oracle(Oracle),
    Position(Position),
    PositionV2(PositionV2),
    PresetParameter2(PresetParameter2),
    PresetParameter(PresetParameter),
    TokenBadge(TokenBadge),
}

impl LbClmmProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [80, 111, 124, 113, 55, 237, 18, 5] => Ok(LbClmmProgramState::BinArrayBitmapExtension(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [92, 142, 92, 220, 5, 148, 70, 181] => Ok(LbClmmProgramState::BinArray(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [166, 48, 134, 86, 34, 200, 188, 150] => Ok(LbClmmProgramState::ClaimFeeOperator(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [33, 11, 49, 98, 181, 101, 177, 13] => Ok(LbClmmProgramState::LbPair(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [139, 194, 131, 179, 140, 179, 229, 244] => Ok(LbClmmProgramState::Oracle(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [170, 188, 143, 228, 122, 64, 247, 208] => Ok(LbClmmProgramState::Position(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [117, 176, 212, 199, 245, 180, 133, 182] => Ok(LbClmmProgramState::PositionV2(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [171, 236, 148, 115, 162, 113, 222, 174] => Ok(LbClmmProgramState::PresetParameter2(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [242, 62, 244, 34, 181, 112, 58, 170] => Ok(LbClmmProgramState::PresetParameter(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [116, 219, 204, 229, 249, 116, 255, 150] => Ok(LbClmmProgramState::TokenBadge(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = LbClmmProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "lb_clmm::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program_error::ProgramError::InvalidArgument)?;
        let res = LbClmmProgramState::try_unpack(&inner.data);

        #[cfg(feature = "tracing")]
        if let Err(e) = &res {
            let acc_discriminator: [u8; 8] = inner.data[0..8].try_into()?;
            tracing::info!(
                name: "incorrectly_parsed_account",
                name = "account_update",
                program = ID.to_string(),
                account = "deserialization_error",
                discriminator = ?acc_discriminator,
                error = ?e
            );
        }

        res
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, BinArrayBitmapExtension, LbClmmProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::BinArrayBitmapExtension> for BinArrayBitmapExtension {
        fn into_proto(self) -> proto_def::BinArrayBitmapExtension {
            proto_def::BinArrayBitmapExtension {
                lb_pair: self.lb_pair.to_string(),
                positive_bin_array_bitmap: self
                    .positive_bin_array_bitmap
                    .into_iter()
                    .map(|x| proto_def::RepeatedUint64Row { rows: x.to_vec() })
                    .collect(),
                negative_bin_array_bitmap: self
                    .negative_bin_array_bitmap
                    .into_iter()
                    .map(|x| proto_def::RepeatedUint64Row { rows: x.to_vec() })
                    .collect(),
            }
        }
    }
    use super::BinArray;
    impl IntoProto<proto_def::BinArray> for BinArray {
        fn into_proto(self) -> proto_def::BinArray {
            proto_def::BinArray {
                index: self.index,
                version: self.version.into(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
                lb_pair: self.lb_pair.to_string(),
                bins: self.bins.into_iter().map(|x| x.into_proto()).collect(),
            }
        }
    }
    use super::ClaimFeeOperator;
    impl IntoProto<proto_def::ClaimFeeOperator> for ClaimFeeOperator {
        fn into_proto(self) -> proto_def::ClaimFeeOperator {
            proto_def::ClaimFeeOperator {
                operator: self.operator.to_string(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::LbPair;
    impl IntoProto<proto_def::LbPair> for LbPair {
        fn into_proto(self) -> proto_def::LbPair {
            proto_def::LbPair {
                parameters: Some(self.parameters.into_proto()),
                v_parameters: Some(self.v_parameters.into_proto()),
                bump_seed: self.bump_seed.into_iter().map(|x| x.into()).collect(),
                bin_step_seed: self.bin_step_seed.into_iter().map(|x| x.into()).collect(),
                pair_type: self.pair_type.into(),
                active_id: self.active_id,
                bin_step: self.bin_step.into(),
                status: self.status.into(),
                require_base_factor_seed: self.require_base_factor_seed.into(),
                base_factor_seed: self
                    .base_factor_seed
                    .into_iter()
                    .map(|x| x.into())
                    .collect(),
                activation_type: self.activation_type.into(),
                creator_pool_on_off_control: self.creator_pool_on_off_control.into(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                protocol_fee: Some(self.protocol_fee.into_proto()),
                padding1: self.padding1.into_iter().map(|x| x.into()).collect(),
                reward_infos: self
                    .reward_infos
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                oracle: self.oracle.to_string(),
                bin_array_bitmap: self.bin_array_bitmap.to_vec(),
                last_updated_at: self.last_updated_at,
                padding2: self.padding2.into_iter().map(|x| x.into()).collect(),
                pre_activation_swap_address: self.pre_activation_swap_address.to_string(),
                base_key: self.base_key.to_string(),
                activation_point: self.activation_point,
                pre_activation_duration: self.pre_activation_duration,
                padding3: self.padding3.into_iter().map(|x| x.into()).collect(),
                padding4: self.padding4,
                creator: self.creator.to_string(),
                token_mint_x_program_flag: self.token_mint_x_program_flag.into(),
                token_mint_y_program_flag: self.token_mint_y_program_flag.into(),
                reserved: self.reserved.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::Oracle;
    impl IntoProto<proto_def::Oracle> for Oracle {
        fn into_proto(self) -> proto_def::Oracle {
            proto_def::Oracle {
                idx: self.idx,
                active_size: self.active_size,
                length: self.length,
                observations: self
                    .observations
                    .iter()
                    .map(|x| proto_def::RepeatedUint32Row {
                        rows: x.iter().map(|x| *x as u32).collect(),
                    })
                    .collect(),
            }
        }
    }
    use super::Position;
    impl IntoProto<proto_def::Position> for Position {
        fn into_proto(self) -> proto_def::Position {
            proto_def::Position {
                lb_pair: self.lb_pair.to_string(),
                owner: self.owner.to_string(),
                liquidity_shares: self.liquidity_shares.to_vec(),
                reward_infos: self
                    .reward_infos
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                fee_infos: self.fee_infos.into_iter().map(|x| x.into_proto()).collect(),
                lower_bin_id: self.lower_bin_id,
                upper_bin_id: self.upper_bin_id,
                last_updated_at: self.last_updated_at,
                total_claimed_fee_x_amount: self.total_claimed_fee_x_amount,
                total_claimed_fee_y_amount: self.total_claimed_fee_y_amount,
                total_claimed_rewards: self.total_claimed_rewards.to_vec(),
                reserved: self.reserved.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::PositionV2;
    impl IntoProto<proto_def::PositionV2> for PositionV2 {
        fn into_proto(self) -> proto_def::PositionV2 {
            proto_def::PositionV2 {
                lb_pair: self.lb_pair.to_string(),
                owner: self.owner.to_string(),
                liquidity_shares: self
                    .liquidity_shares
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
                reward_infos: self
                    .reward_infos
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                fee_infos: self.fee_infos.into_iter().map(|x| x.into_proto()).collect(),
                lower_bin_id: self.lower_bin_id,
                upper_bin_id: self.upper_bin_id,
                last_updated_at: self.last_updated_at,
                total_claimed_fee_x_amount: self.total_claimed_fee_x_amount,
                total_claimed_fee_y_amount: self.total_claimed_fee_y_amount,
                total_claimed_rewards: self.total_claimed_rewards.to_vec(),
                operator: self.operator.to_string(),
                lock_release_point: self.lock_release_point,
                padding0: self.padding0.into(),
                fee_owner: self.fee_owner.to_string(),
                reserved: self.reserved.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::PresetParameter2;
    impl IntoProto<proto_def::PresetParameter2> for PresetParameter2 {
        fn into_proto(self) -> proto_def::PresetParameter2 {
            proto_def::PresetParameter2 {
                bin_step: self.bin_step.into(),
                base_factor: self.base_factor.into(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                variable_fee_control: self.variable_fee_control,
                max_volatility_accumulator: self.max_volatility_accumulator,
                reduction_factor: self.reduction_factor.into(),
                protocol_share: self.protocol_share.into(),
                index: self.index.into(),
                base_fee_power_factor: self.base_fee_power_factor.into(),
                padding0: self.padding0.into(),
                padding1: self.padding1.to_vec(),
            }
        }
    }
    use super::PresetParameter;
    impl IntoProto<proto_def::PresetParameter> for PresetParameter {
        fn into_proto(self) -> proto_def::PresetParameter {
            proto_def::PresetParameter {
                bin_step: self.bin_step.into(),
                base_factor: self.base_factor.into(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                variable_fee_control: self.variable_fee_control,
                max_volatility_accumulator: self.max_volatility_accumulator,
                min_bin_id: self.min_bin_id,
                max_bin_id: self.max_bin_id,
                protocol_share: self.protocol_share.into(),
            }
        }
    }
    use super::TokenBadge;
    impl IntoProto<proto_def::TokenBadge> for TokenBadge {
        fn into_proto(self) -> proto_def::TokenBadge {
            proto_def::TokenBadge {
                token_mint: self.token_mint.to_string(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for LbClmmProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                LbClmmProgramState::BinArrayBitmapExtension(data) => {
                    proto_def::program_state::StateOneof::BinArrayBitmapExtension(data.into_proto())
                },
                LbClmmProgramState::BinArray(data) => {
                    proto_def::program_state::StateOneof::BinArray(data.into_proto())
                },
                LbClmmProgramState::ClaimFeeOperator(data) => {
                    proto_def::program_state::StateOneof::ClaimFeeOperator(data.into_proto())
                },
                LbClmmProgramState::LbPair(data) => {
                    proto_def::program_state::StateOneof::LbPair(data.into_proto())
                },
                LbClmmProgramState::Oracle(data) => {
                    proto_def::program_state::StateOneof::Oracle(data.into_proto())
                },
                LbClmmProgramState::Position(data) => {
                    proto_def::program_state::StateOneof::Position(data.into_proto())
                },
                LbClmmProgramState::PositionV2(data) => {
                    proto_def::program_state::StateOneof::PositionV2(data.into_proto())
                },
                LbClmmProgramState::PresetParameter2(data) => {
                    proto_def::program_state::StateOneof::PresetParameter2(data.into_proto())
                },
                LbClmmProgramState::PresetParameter(data) => {
                    proto_def::program_state::StateOneof::PresetParameter(data.into_proto())
                },
                LbClmmProgramState::TokenBadge(data) => {
                    proto_def::program_state::StateOneof::TokenBadge(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
