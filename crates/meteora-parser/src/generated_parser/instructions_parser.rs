//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        AddLiquidity as AddLiquidityIxAccounts, AddLiquidity2 as AddLiquidity2IxAccounts,
        AddLiquidity2InstructionArgs as AddLiquidity2IxData,
        AddLiquidityByStrategy as AddLiquidityByStrategyIxAccounts,
        AddLiquidityByStrategy2 as AddLiquidityByStrategy2IxAccounts,
        AddLiquidityByStrategy2InstructionArgs as AddLiquidityByStrategy2IxData,
        AddLiquidityByStrategyInstructionArgs as AddLiquidityByStrategyIxData,
        AddLiquidityByStrategyOneSide as AddLiquidityByStrategyOneSideIxAccounts,
        AddLiquidityByStrategyOneSideInstructionArgs as AddLiquidityByStrategyOneSideIxData,
        AddLiquidityByWeight as AddLiquidityByWeightIxAccounts,
        AddLiquidityByWeightInstructionArgs as AddLiquidityByWeightIxData,
        AddLiquidityInstructionArgs as AddLiquidityIxData,
        AddLiquidityOneSide as AddLiquidityOneSideIxAccounts,
        AddLiquidityOneSideInstructionArgs as AddLiquidityOneSideIxData,
        AddLiquidityOneSidePrecise as AddLiquidityOneSidePreciseIxAccounts,
        AddLiquidityOneSidePrecise2 as AddLiquidityOneSidePrecise2IxAccounts,
        AddLiquidityOneSidePrecise2InstructionArgs as AddLiquidityOneSidePrecise2IxData,
        AddLiquidityOneSidePreciseInstructionArgs as AddLiquidityOneSidePreciseIxData,
        ClaimFee as ClaimFeeIxAccounts, ClaimFee2 as ClaimFee2IxAccounts,
        ClaimFee2InstructionArgs as ClaimFee2IxData, ClaimReward as ClaimRewardIxAccounts,
        ClaimReward2 as ClaimReward2IxAccounts, ClaimReward2InstructionArgs as ClaimReward2IxData,
        ClaimRewardInstructionArgs as ClaimRewardIxData,
        CloseClaimProtocolFeeOperator as CloseClaimProtocolFeeOperatorIxAccounts,
        ClosePosition as ClosePositionIxAccounts, ClosePosition2 as ClosePosition2IxAccounts,
        ClosePositionIfEmpty as ClosePositionIfEmptyIxAccounts,
        ClosePresetParameter as ClosePresetParameterIxAccounts,
        ClosePresetParameter2 as ClosePresetParameter2IxAccounts,
        CreateClaimProtocolFeeOperator as CreateClaimProtocolFeeOperatorIxAccounts,
        FundReward as FundRewardIxAccounts, FundRewardInstructionArgs as FundRewardIxData,
        GoToABin as GoToABinIxAccounts, GoToABinInstructionArgs as GoToABinIxData,
        IncreaseOracleLength as IncreaseOracleLengthIxAccounts,
        IncreaseOracleLengthInstructionArgs as IncreaseOracleLengthIxData,
        InitializeBinArray as InitializeBinArrayIxAccounts,
        InitializeBinArrayBitmapExtension as InitializeBinArrayBitmapExtensionIxAccounts,
        InitializeBinArrayInstructionArgs as InitializeBinArrayIxData,
        InitializeCustomizablePermissionlessLbPair as InitializeCustomizablePermissionlessLbPairIxAccounts,
        InitializeCustomizablePermissionlessLbPair2 as InitializeCustomizablePermissionlessLbPair2IxAccounts,
        InitializeCustomizablePermissionlessLbPair2InstructionArgs as InitializeCustomizablePermissionlessLbPair2IxData,
        InitializeCustomizablePermissionlessLbPairInstructionArgs as InitializeCustomizablePermissionlessLbPairIxData,
        InitializeLbPair as InitializeLbPairIxAccounts,
        InitializeLbPair2 as InitializeLbPair2IxAccounts,
        InitializeLbPair2InstructionArgs as InitializeLbPair2IxData,
        InitializeLbPairInstructionArgs as InitializeLbPairIxData,
        InitializePermissionLbPair as InitializePermissionLbPairIxAccounts,
        InitializePermissionLbPairInstructionArgs as InitializePermissionLbPairIxData,
        InitializePosition as InitializePositionIxAccounts,
        InitializePositionByOperator as InitializePositionByOperatorIxAccounts,
        InitializePositionByOperatorInstructionArgs as InitializePositionByOperatorIxData,
        InitializePositionInstructionArgs as InitializePositionIxData,
        InitializePositionPda as InitializePositionPdaIxAccounts,
        InitializePositionPdaInstructionArgs as InitializePositionPdaIxData,
        InitializePresetParameter as InitializePresetParameterIxAccounts,
        InitializePresetParameter2 as InitializePresetParameter2IxAccounts,
        InitializePresetParameter2InstructionArgs as InitializePresetParameter2IxData,
        InitializePresetParameterInstructionArgs as InitializePresetParameterIxData,
        InitializeReward as InitializeRewardIxAccounts,
        InitializeRewardInstructionArgs as InitializeRewardIxData,
        InitializeTokenBadge as InitializeTokenBadgeIxAccounts,
        MigrateBinArray as MigrateBinArrayIxAccounts, MigratePosition as MigratePositionIxAccounts,
        RemoveAllLiquidity as RemoveAllLiquidityIxAccounts,
        RemoveLiquidity as RemoveLiquidityIxAccounts,
        RemoveLiquidity2 as RemoveLiquidity2IxAccounts,
        RemoveLiquidity2InstructionArgs as RemoveLiquidity2IxData,
        RemoveLiquidityByRange as RemoveLiquidityByRangeIxAccounts,
        RemoveLiquidityByRange2 as RemoveLiquidityByRange2IxAccounts,
        RemoveLiquidityByRange2InstructionArgs as RemoveLiquidityByRange2IxData,
        RemoveLiquidityByRangeInstructionArgs as RemoveLiquidityByRangeIxData,
        RemoveLiquidityInstructionArgs as RemoveLiquidityIxData,
        SetActivationPoint as SetActivationPointIxAccounts,
        SetActivationPointInstructionArgs as SetActivationPointIxData,
        SetPairStatus as SetPairStatusIxAccounts,
        SetPairStatusInstructionArgs as SetPairStatusIxData,
        SetPairStatusPermissionless as SetPairStatusPermissionlessIxAccounts,
        SetPairStatusPermissionlessInstructionArgs as SetPairStatusPermissionlessIxData,
        SetPreActivationDuration as SetPreActivationDurationIxAccounts,
        SetPreActivationDurationInstructionArgs as SetPreActivationDurationIxData,
        SetPreActivationSwapAddress as SetPreActivationSwapAddressIxAccounts,
        SetPreActivationSwapAddressInstructionArgs as SetPreActivationSwapAddressIxData,
        Swap as SwapIxAccounts, Swap2 as Swap2IxAccounts, Swap2InstructionArgs as Swap2IxData,
        SwapExactOut as SwapExactOutIxAccounts, SwapExactOut2 as SwapExactOut2IxAccounts,
        SwapExactOut2InstructionArgs as SwapExactOut2IxData,
        SwapExactOutInstructionArgs as SwapExactOutIxData, SwapInstructionArgs as SwapIxData,
        SwapWithPriceImpact as SwapWithPriceImpactIxAccounts,
        SwapWithPriceImpact2 as SwapWithPriceImpact2IxAccounts,
        SwapWithPriceImpact2InstructionArgs as SwapWithPriceImpact2IxData,
        SwapWithPriceImpactInstructionArgs as SwapWithPriceImpactIxData,
        UpdateBaseFeeParameters as UpdateBaseFeeParametersIxAccounts,
        UpdateBaseFeeParametersInstructionArgs as UpdateBaseFeeParametersIxData,
        UpdateDynamicFeeParameters as UpdateDynamicFeeParametersIxAccounts,
        UpdateDynamicFeeParametersInstructionArgs as UpdateDynamicFeeParametersIxData,
        UpdateFeesAndReward2 as UpdateFeesAndReward2IxAccounts,
        UpdateFeesAndReward2InstructionArgs as UpdateFeesAndReward2IxData,
        UpdateFeesAndRewards as UpdateFeesAndRewardsIxAccounts,
        UpdatePositionOperator as UpdatePositionOperatorIxAccounts,
        UpdatePositionOperatorInstructionArgs as UpdatePositionOperatorIxData,
        UpdateRewardDuration as UpdateRewardDurationIxAccounts,
        UpdateRewardDurationInstructionArgs as UpdateRewardDurationIxData,
        UpdateRewardFunder as UpdateRewardFunderIxAccounts,
        UpdateRewardFunderInstructionArgs as UpdateRewardFunderIxData,
        WithdrawIneligibleReward as WithdrawIneligibleRewardIxAccounts,
        WithdrawIneligibleRewardInstructionArgs as WithdrawIneligibleRewardIxData,
        WithdrawProtocolFee as WithdrawProtocolFeeIxAccounts,
        WithdrawProtocolFeeInstructionArgs as WithdrawProtocolFeeIxData,
    },
    ID,
};

/// LbClmm Instructions
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum LbClmmProgramIx {
    InitializeLbPair(InitializeLbPairIxAccounts, InitializeLbPairIxData),
    InitializePermissionLbPair(
        InitializePermissionLbPairIxAccounts,
        InitializePermissionLbPairIxData,
    ),
    InitializeCustomizablePermissionlessLbPair(
        InitializeCustomizablePermissionlessLbPairIxAccounts,
        InitializeCustomizablePermissionlessLbPairIxData,
    ),
    InitializeBinArrayBitmapExtension(InitializeBinArrayBitmapExtensionIxAccounts),
    InitializeBinArray(InitializeBinArrayIxAccounts, InitializeBinArrayIxData),
    AddLiquidity(AddLiquidityIxAccounts, AddLiquidityIxData),
    AddLiquidityByWeight(AddLiquidityByWeightIxAccounts, AddLiquidityByWeightIxData),
    AddLiquidityByStrategy(
        AddLiquidityByStrategyIxAccounts,
        AddLiquidityByStrategyIxData,
    ),
    AddLiquidityByStrategyOneSide(
        AddLiquidityByStrategyOneSideIxAccounts,
        AddLiquidityByStrategyOneSideIxData,
    ),
    AddLiquidityOneSide(AddLiquidityOneSideIxAccounts, AddLiquidityOneSideIxData),
    RemoveLiquidity(RemoveLiquidityIxAccounts, RemoveLiquidityIxData),
    InitializePosition(InitializePositionIxAccounts, InitializePositionIxData),
    InitializePositionPda(InitializePositionPdaIxAccounts, InitializePositionPdaIxData),
    InitializePositionByOperator(
        InitializePositionByOperatorIxAccounts,
        InitializePositionByOperatorIxData,
    ),
    UpdatePositionOperator(
        UpdatePositionOperatorIxAccounts,
        UpdatePositionOperatorIxData,
    ),
    Swap(SwapIxAccounts, SwapIxData),
    SwapExactOut(SwapExactOutIxAccounts, SwapExactOutIxData),
    SwapWithPriceImpact(SwapWithPriceImpactIxAccounts, SwapWithPriceImpactIxData),
    WithdrawProtocolFee(WithdrawProtocolFeeIxAccounts, WithdrawProtocolFeeIxData),
    InitializeReward(InitializeRewardIxAccounts, InitializeRewardIxData),
    FundReward(FundRewardIxAccounts, FundRewardIxData),
    UpdateRewardFunder(UpdateRewardFunderIxAccounts, UpdateRewardFunderIxData),
    UpdateRewardDuration(UpdateRewardDurationIxAccounts, UpdateRewardDurationIxData),
    ClaimReward(ClaimRewardIxAccounts, ClaimRewardIxData),
    ClaimFee(ClaimFeeIxAccounts),
    ClosePosition(ClosePositionIxAccounts),
    UpdateBaseFeeParameters(
        UpdateBaseFeeParametersIxAccounts,
        UpdateBaseFeeParametersIxData,
    ),
    UpdateDynamicFeeParameters(
        UpdateDynamicFeeParametersIxAccounts,
        UpdateDynamicFeeParametersIxData,
    ),
    IncreaseOracleLength(IncreaseOracleLengthIxAccounts, IncreaseOracleLengthIxData),
    InitializePresetParameter(
        InitializePresetParameterIxAccounts,
        InitializePresetParameterIxData,
    ),
    ClosePresetParameter(ClosePresetParameterIxAccounts),
    ClosePresetParameter2(ClosePresetParameter2IxAccounts),
    RemoveAllLiquidity(RemoveAllLiquidityIxAccounts),
    SetPairStatus(SetPairStatusIxAccounts, SetPairStatusIxData),
    MigratePosition(MigratePositionIxAccounts),
    MigrateBinArray(MigrateBinArrayIxAccounts),
    UpdateFeesAndRewards(UpdateFeesAndRewardsIxAccounts),
    WithdrawIneligibleReward(
        WithdrawIneligibleRewardIxAccounts,
        WithdrawIneligibleRewardIxData,
    ),
    SetActivationPoint(SetActivationPointIxAccounts, SetActivationPointIxData),
    RemoveLiquidityByRange(
        RemoveLiquidityByRangeIxAccounts,
        RemoveLiquidityByRangeIxData,
    ),
    AddLiquidityOneSidePrecise(
        AddLiquidityOneSidePreciseIxAccounts,
        AddLiquidityOneSidePreciseIxData,
    ),
    GoToABin(GoToABinIxAccounts, GoToABinIxData),
    SetPreActivationDuration(
        SetPreActivationDurationIxAccounts,
        SetPreActivationDurationIxData,
    ),
    SetPreActivationSwapAddress(
        SetPreActivationSwapAddressIxAccounts,
        SetPreActivationSwapAddressIxData,
    ),
    SetPairStatusPermissionless(
        SetPairStatusPermissionlessIxAccounts,
        SetPairStatusPermissionlessIxData,
    ),
    InitializeTokenBadge(InitializeTokenBadgeIxAccounts),
    CreateClaimProtocolFeeOperator(CreateClaimProtocolFeeOperatorIxAccounts),
    CloseClaimProtocolFeeOperator(CloseClaimProtocolFeeOperatorIxAccounts),
    InitializePresetParameter2(
        InitializePresetParameter2IxAccounts,
        InitializePresetParameter2IxData,
    ),
    InitializeLbPair2(InitializeLbPair2IxAccounts, InitializeLbPair2IxData),
    InitializeCustomizablePermissionlessLbPair2(
        InitializeCustomizablePermissionlessLbPair2IxAccounts,
        InitializeCustomizablePermissionlessLbPair2IxData,
    ),
    ClaimFee2(ClaimFee2IxAccounts, ClaimFee2IxData),
    ClaimReward2(ClaimReward2IxAccounts, ClaimReward2IxData),
    AddLiquidity2(AddLiquidity2IxAccounts, AddLiquidity2IxData),
    AddLiquidityByStrategy2(
        AddLiquidityByStrategy2IxAccounts,
        AddLiquidityByStrategy2IxData,
    ),
    AddLiquidityOneSidePrecise2(
        AddLiquidityOneSidePrecise2IxAccounts,
        AddLiquidityOneSidePrecise2IxData,
    ),
    RemoveLiquidity2(RemoveLiquidity2IxAccounts, RemoveLiquidity2IxData),
    RemoveLiquidityByRange2(
        RemoveLiquidityByRange2IxAccounts,
        RemoveLiquidityByRange2IxData,
    ),
    Swap2(Swap2IxAccounts, Swap2IxData),
    SwapExactOut2(SwapExactOut2IxAccounts, SwapExactOut2IxData),
    SwapWithPriceImpact2(SwapWithPriceImpact2IxAccounts, SwapWithPriceImpact2IxData),
    ClosePosition2(ClosePosition2IxAccounts),
    UpdateFeesAndReward2(UpdateFeesAndReward2IxAccounts, UpdateFeesAndReward2IxData),
    ClosePositionIfEmpty(ClosePositionIfEmptyIxAccounts),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = LbClmmProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "LbClmm::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<LbClmmProgramIx> {
        let accounts_len = ix.accounts.len();

        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        let ix = match ix_discriminator {
            [45, 154, 237, 210, 221, 15, 166, 92] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = InitializeLbPairIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    token_mint_x: ix.accounts[2].0.into(),
                    token_mint_y: ix.accounts[3].0.into(),
                    reserve_x: ix.accounts[4].0.into(),
                    reserve_y: ix.accounts[5].0.into(),
                    oracle: ix.accounts[6].0.into(),
                    preset_parameter: ix.accounts[7].0.into(),
                    funder: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    system_program: ix.accounts[10].0.into(),
                    rent: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: InitializeLbPairIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeLbPair(ix_accounts, de_ix_data))
            },
            [108, 102, 213, 85, 251, 3, 53, 21] => {
                check_min_accounts_req(accounts_len, 17)?;
                let ix_accounts = InitializePermissionLbPairIxAccounts {
                    base: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    token_mint_x: ix.accounts[3].0.into(),
                    token_mint_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    oracle: ix.accounts[7].0.into(),
                    admin: ix.accounts[8].0.into(),
                    token_badge_x: if ix.accounts[9]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[9].0.into())
                    },
                    token_badge_y: if ix.accounts[10]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[10].0.into())
                    },
                    token_program_x: ix.accounts[11].0.into(),
                    token_program_y: ix.accounts[12].0.into(),
                    system_program: ix.accounts[13].0.into(),
                    rent: ix.accounts[14].0.into(),
                    event_authority: ix.accounts[15].0.into(),
                    program: ix.accounts[16].0.into(),
                };
                let de_ix_data: InitializePermissionLbPairIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePermissionLbPair(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [46, 39, 41, 135, 111, 183, 200, 64] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = InitializeCustomizablePermissionlessLbPairIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    token_mint_x: ix.accounts[2].0.into(),
                    token_mint_y: ix.accounts[3].0.into(),
                    reserve_x: ix.accounts[4].0.into(),
                    reserve_y: ix.accounts[5].0.into(),
                    oracle: ix.accounts[6].0.into(),
                    user_token_x: ix.accounts[7].0.into(),
                    funder: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    system_program: ix.accounts[10].0.into(),
                    user_token_y: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: InitializeCustomizablePermissionlessLbPairIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeCustomizablePermissionlessLbPair(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [47, 157, 226, 180, 12, 240, 33, 71] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = InitializeBinArrayBitmapExtensionIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: ix.accounts[1].0.into(),
                    funder: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                    rent: ix.accounts[4].0.into(),
                };
                Ok(LbClmmProgramIx::InitializeBinArrayBitmapExtension(
                    ix_accounts,
                ))
            },
            [35, 86, 19, 185, 78, 212, 75, 211] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = InitializeBinArrayIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array: ix.accounts[1].0.into(),
                    funder: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                };
                let de_ix_data: InitializeBinArrayIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeBinArray(ix_accounts, de_ix_data))
            },
            [181, 157, 89, 67, 143, 182, 52, 72] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = AddLiquidityIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: AddLiquidityIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidity(ix_accounts, de_ix_data))
            },
            [28, 140, 238, 99, 231, 162, 21, 149] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = AddLiquidityByWeightIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: AddLiquidityByWeightIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityByWeight(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [7, 3, 150, 127, 148, 40, 61, 200] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = AddLiquidityByStrategyIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: AddLiquidityByStrategyIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityByStrategy(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [41, 5, 238, 175, 100, 225, 6, 205] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = AddLiquidityByStrategyOneSideIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token: ix.accounts[3].0.into(),
                    reserve: ix.accounts[4].0.into(),
                    token_mint: ix.accounts[5].0.into(),
                    bin_array_lower: ix.accounts[6].0.into(),
                    bin_array_upper: ix.accounts[7].0.into(),
                    sender: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                let de_ix_data: AddLiquidityByStrategyOneSideIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityByStrategyOneSide(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [94, 155, 103, 151, 70, 95, 220, 165] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = AddLiquidityOneSideIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token: ix.accounts[3].0.into(),
                    reserve: ix.accounts[4].0.into(),
                    token_mint: ix.accounts[5].0.into(),
                    bin_array_lower: ix.accounts[6].0.into(),
                    bin_array_upper: ix.accounts[7].0.into(),
                    sender: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                let de_ix_data: AddLiquidityOneSideIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityOneSide(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [80, 85, 209, 72, 24, 206, 177, 108] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = RemoveLiquidityIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: RemoveLiquidityIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::RemoveLiquidity(ix_accounts, de_ix_data))
            },
            [219, 192, 234, 71, 190, 191, 102, 80] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = InitializePositionIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    lb_pair: ix.accounts[2].0.into(),
                    owner: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                    rent: ix.accounts[5].0.into(),
                    event_authority: ix.accounts[6].0.into(),
                    program: ix.accounts[7].0.into(),
                };
                let de_ix_data: InitializePositionIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePosition(ix_accounts, de_ix_data))
            },
            [46, 82, 125, 146, 85, 141, 228, 153] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = InitializePositionPdaIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    base: ix.accounts[1].0.into(),
                    position: ix.accounts[2].0.into(),
                    lb_pair: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                    system_program: ix.accounts[5].0.into(),
                    rent: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: InitializePositionPdaIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePositionPda(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [251, 189, 190, 244, 117, 254, 35, 148] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = InitializePositionByOperatorIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    base: ix.accounts[1].0.into(),
                    position: ix.accounts[2].0.into(),
                    lb_pair: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                    operator: ix.accounts[5].0.into(),
                    operator_token_x: ix.accounts[6].0.into(),
                    owner_token_x: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                    event_authority: ix.accounts[9].0.into(),
                    program: ix.accounts[10].0.into(),
                };
                let de_ix_data: InitializePositionByOperatorIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePositionByOperator(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [202, 184, 103, 143, 180, 191, 116, 217] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdatePositionOperatorIxAccounts {
                    position: ix.accounts[0].0.into(),
                    owner: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdatePositionOperatorIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdatePositionOperator(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [248, 198, 158, 145, 225, 117, 135, 200] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = SwapIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    reserve_x: ix.accounts[2].0.into(),
                    reserve_y: ix.accounts[3].0.into(),
                    user_token_in: ix.accounts[4].0.into(),
                    user_token_out: ix.accounts[5].0.into(),
                    token_x_mint: ix.accounts[6].0.into(),
                    token_y_mint: ix.accounts[7].0.into(),
                    oracle: ix.accounts[8].0.into(),
                    host_fee_in: if ix.accounts[9]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[9].0.into())
                    },
                    user: ix.accounts[10].0.into(),
                    token_x_program: ix.accounts[11].0.into(),
                    token_y_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: SwapIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::Swap(ix_accounts, de_ix_data))
            },
            [250, 73, 101, 33, 38, 207, 75, 184] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = SwapExactOutIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    reserve_x: ix.accounts[2].0.into(),
                    reserve_y: ix.accounts[3].0.into(),
                    user_token_in: ix.accounts[4].0.into(),
                    user_token_out: ix.accounts[5].0.into(),
                    token_x_mint: ix.accounts[6].0.into(),
                    token_y_mint: ix.accounts[7].0.into(),
                    oracle: ix.accounts[8].0.into(),
                    host_fee_in: if ix.accounts[9]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[9].0.into())
                    },
                    user: ix.accounts[10].0.into(),
                    token_x_program: ix.accounts[11].0.into(),
                    token_y_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: SwapExactOutIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SwapExactOut(ix_accounts, de_ix_data))
            },
            [56, 173, 230, 208, 173, 228, 156, 205] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = SwapWithPriceImpactIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    reserve_x: ix.accounts[2].0.into(),
                    reserve_y: ix.accounts[3].0.into(),
                    user_token_in: ix.accounts[4].0.into(),
                    user_token_out: ix.accounts[5].0.into(),
                    token_x_mint: ix.accounts[6].0.into(),
                    token_y_mint: ix.accounts[7].0.into(),
                    oracle: ix.accounts[8].0.into(),
                    host_fee_in: if ix.accounts[9]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[9].0.into())
                    },
                    user: ix.accounts[10].0.into(),
                    token_x_program: ix.accounts[11].0.into(),
                    token_y_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: SwapWithPriceImpactIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SwapWithPriceImpact(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [158, 201, 158, 189, 33, 93, 162, 103] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = WithdrawProtocolFeeIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reserve_x: ix.accounts[1].0.into(),
                    reserve_y: ix.accounts[2].0.into(),
                    token_x_mint: ix.accounts[3].0.into(),
                    token_y_mint: ix.accounts[4].0.into(),
                    receiver_token_x: ix.accounts[5].0.into(),
                    receiver_token_y: ix.accounts[6].0.into(),
                    claim_fee_operator: ix.accounts[7].0.into(),
                    operator: ix.accounts[8].0.into(),
                    token_x_program: ix.accounts[9].0.into(),
                    token_y_program: ix.accounts[10].0.into(),
                    memo_program: ix.accounts[11].0.into(),
                };
                let de_ix_data: WithdrawProtocolFeeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::WithdrawProtocolFee(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [95, 135, 192, 196, 242, 129, 230, 68] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = InitializeRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reward_vault: ix.accounts[1].0.into(),
                    reward_mint: ix.accounts[2].0.into(),
                    token_badge: if ix.accounts[3]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[3].0.into())
                    },
                    admin: ix.accounts[4].0.into(),
                    token_program: ix.accounts[5].0.into(),
                    system_program: ix.accounts[6].0.into(),
                    rent: ix.accounts[7].0.into(),
                    event_authority: ix.accounts[8].0.into(),
                    program: ix.accounts[9].0.into(),
                };
                let de_ix_data: InitializeRewardIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeReward(ix_accounts, de_ix_data))
            },
            [188, 50, 249, 165, 93, 151, 38, 63] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = FundRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reward_vault: ix.accounts[1].0.into(),
                    reward_mint: ix.accounts[2].0.into(),
                    funder_token_account: ix.accounts[3].0.into(),
                    funder: ix.accounts[4].0.into(),
                    bin_array: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    event_authority: ix.accounts[7].0.into(),
                    program: ix.accounts[8].0.into(),
                };
                let de_ix_data: FundRewardIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::FundReward(ix_accounts, de_ix_data))
            },
            [211, 28, 48, 32, 215, 160, 35, 23] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateRewardFunderIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdateRewardFunderIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateRewardFunder(ix_accounts, de_ix_data))
            },
            [138, 174, 196, 169, 213, 235, 254, 107] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdateRewardDurationIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    bin_array: ix.accounts[2].0.into(),
                    event_authority: ix.accounts[3].0.into(),
                    program: ix.accounts[4].0.into(),
                };
                let de_ix_data: UpdateRewardDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateRewardDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [149, 95, 181, 242, 94, 90, 158, 162] => {
                check_min_accounts_req(accounts_len, 11)?;
                let ix_accounts = ClaimRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    sender: ix.accounts[4].0.into(),
                    reward_vault: ix.accounts[5].0.into(),
                    reward_mint: ix.accounts[6].0.into(),
                    user_token_account: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    event_authority: ix.accounts[9].0.into(),
                    program: ix.accounts[10].0.into(),
                };
                let de_ix_data: ClaimRewardIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::ClaimReward(ix_accounts, de_ix_data))
            },
            [169, 32, 79, 137, 136, 232, 70, 137] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = ClaimFeeIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    sender: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    user_token_x: ix.accounts[7].0.into(),
                    user_token_y: ix.accounts[8].0.into(),
                    token_x_mint: ix.accounts[9].0.into(),
                    token_y_mint: ix.accounts[10].0.into(),
                    token_program: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                Ok(LbClmmProgramIx::ClaimFee(ix_accounts))
            },
            [123, 134, 81, 0, 49, 68, 98, 98] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = ClosePositionIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    sender: ix.accounts[4].0.into(),
                    rent_receiver: ix.accounts[5].0.into(),
                    event_authority: ix.accounts[6].0.into(),
                    program: ix.accounts[7].0.into(),
                };
                Ok(LbClmmProgramIx::ClosePosition(ix_accounts))
            },
            [75, 168, 223, 161, 16, 195, 3, 47] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateBaseFeeParametersIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdateBaseFeeParametersIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateBaseFeeParameters(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [92, 161, 46, 246, 255, 189, 22, 22] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = UpdateDynamicFeeParametersIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    event_authority: ix.accounts[2].0.into(),
                    program: ix.accounts[3].0.into(),
                };
                let de_ix_data: UpdateDynamicFeeParametersIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateDynamicFeeParameters(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [190, 61, 125, 87, 103, 79, 158, 173] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = IncreaseOracleLengthIxAccounts {
                    oracle: ix.accounts[0].0.into(),
                    funder: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                    event_authority: ix.accounts[3].0.into(),
                    program: ix.accounts[4].0.into(),
                };
                let de_ix_data: IncreaseOracleLengthIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::IncreaseOracleLength(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [66, 188, 71, 211, 98, 109, 14, 186] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = InitializePresetParameterIxAccounts {
                    preset_parameter: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                    rent: ix.accounts[3].0.into(),
                };
                let de_ix_data: InitializePresetParameterIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePresetParameter(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [4, 148, 145, 100, 134, 26, 181, 61] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = ClosePresetParameterIxAccounts {
                    preset_parameter: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    rent_receiver: ix.accounts[2].0.into(),
                };
                Ok(LbClmmProgramIx::ClosePresetParameter(ix_accounts))
            },
            [39, 25, 95, 107, 116, 17, 115, 28] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = ClosePresetParameter2IxAccounts {
                    preset_parameter: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    rent_receiver: ix.accounts[2].0.into(),
                };
                Ok(LbClmmProgramIx::ClosePresetParameter2(ix_accounts))
            },
            [10, 51, 61, 35, 112, 105, 24, 85] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = RemoveAllLiquidityIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                Ok(LbClmmProgramIx::RemoveAllLiquidity(ix_accounts))
            },
            [67, 248, 231, 137, 154, 149, 217, 174] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetPairStatusIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetPairStatusIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetPairStatus(ix_accounts, de_ix_data))
            },
            [15, 132, 59, 50, 199, 6, 251, 46] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = MigratePositionIxAccounts {
                    position_v2: ix.accounts[0].0.into(),
                    position_v1: ix.accounts[1].0.into(),
                    lb_pair: ix.accounts[2].0.into(),
                    bin_array_lower: ix.accounts[3].0.into(),
                    bin_array_upper: ix.accounts[4].0.into(),
                    owner: ix.accounts[5].0.into(),
                    system_program: ix.accounts[6].0.into(),
                    rent_receiver: ix.accounts[7].0.into(),
                    event_authority: ix.accounts[8].0.into(),
                    program: ix.accounts[9].0.into(),
                };
                Ok(LbClmmProgramIx::MigratePosition(ix_accounts))
            },
            [17, 23, 159, 211, 101, 184, 41, 241] => {
                check_min_accounts_req(accounts_len, 1)?;
                let ix_accounts = MigrateBinArrayIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                };
                Ok(LbClmmProgramIx::MigrateBinArray(ix_accounts))
            },
            [154, 230, 250, 13, 236, 209, 75, 223] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = UpdateFeesAndRewardsIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_lower: ix.accounts[2].0.into(),
                    bin_array_upper: ix.accounts[3].0.into(),
                    owner: ix.accounts[4].0.into(),
                };
                Ok(LbClmmProgramIx::UpdateFeesAndRewards(ix_accounts))
            },
            [148, 206, 42, 195, 247, 49, 103, 8] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = WithdrawIneligibleRewardIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    reward_vault: ix.accounts[1].0.into(),
                    reward_mint: ix.accounts[2].0.into(),
                    funder_token_account: ix.accounts[3].0.into(),
                    funder: ix.accounts[4].0.into(),
                    bin_array: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    memo_program: ix.accounts[7].0.into(),
                    event_authority: ix.accounts[8].0.into(),
                    program: ix.accounts[9].0.into(),
                };
                let de_ix_data: WithdrawIneligibleRewardIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::WithdrawIneligibleReward(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [91, 249, 15, 165, 26, 129, 254, 125] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetActivationPointIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetActivationPointIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetActivationPoint(ix_accounts, de_ix_data))
            },
            [26, 82, 102, 152, 240, 74, 105, 26] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = RemoveLiquidityByRangeIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    bin_array_lower: ix.accounts[9].0.into(),
                    bin_array_upper: ix.accounts[10].0.into(),
                    sender: ix.accounts[11].0.into(),
                    token_x_program: ix.accounts[12].0.into(),
                    token_y_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: RemoveLiquidityByRangeIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::RemoveLiquidityByRange(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [161, 194, 103, 84, 171, 71, 250, 154] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = AddLiquidityOneSidePreciseIxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token: ix.accounts[3].0.into(),
                    reserve: ix.accounts[4].0.into(),
                    token_mint: ix.accounts[5].0.into(),
                    bin_array_lower: ix.accounts[6].0.into(),
                    bin_array_upper: ix.accounts[7].0.into(),
                    sender: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                    event_authority: ix.accounts[10].0.into(),
                    program: ix.accounts[11].0.into(),
                };
                let de_ix_data: AddLiquidityOneSidePreciseIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityOneSidePrecise(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [146, 72, 174, 224, 40, 253, 84, 174] => {
                check_min_accounts_req(accounts_len, 6)?;
                let ix_accounts = GoToABinIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    from_bin_array: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    to_bin_array: if ix.accounts[3]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[3].0.into())
                    },
                    event_authority: ix.accounts[4].0.into(),
                    program: ix.accounts[5].0.into(),
                };
                let de_ix_data: GoToABinIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::GoToABin(ix_accounts, de_ix_data))
            },
            [165, 61, 201, 244, 130, 159, 22, 100] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetPreActivationDurationIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    creator: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetPreActivationDurationIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetPreActivationDuration(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [57, 139, 47, 123, 216, 80, 223, 10] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetPreActivationSwapAddressIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    creator: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetPreActivationSwapAddressIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetPreActivationSwapAddress(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [78, 59, 152, 211, 70, 183, 46, 208] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = SetPairStatusPermissionlessIxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    creator: ix.accounts[1].0.into(),
                };
                let de_ix_data: SetPairStatusPermissionlessIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SetPairStatusPermissionless(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [253, 77, 205, 95, 27, 224, 89, 223] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = InitializeTokenBadgeIxAccounts {
                    token_mint: ix.accounts[0].0.into(),
                    token_badge: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                };
                Ok(LbClmmProgramIx::InitializeTokenBadge(ix_accounts))
            },
            [51, 19, 150, 252, 105, 157, 48, 91] => {
                check_min_accounts_req(accounts_len, 4)?;
                let ix_accounts = CreateClaimProtocolFeeOperatorIxAccounts {
                    claim_fee_operator: ix.accounts[0].0.into(),
                    operator: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                    system_program: ix.accounts[3].0.into(),
                };
                Ok(LbClmmProgramIx::CreateClaimProtocolFeeOperator(ix_accounts))
            },
            [8, 41, 87, 35, 80, 48, 121, 26] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = CloseClaimProtocolFeeOperatorIxAccounts {
                    claim_fee_operator: ix.accounts[0].0.into(),
                    rent_receiver: ix.accounts[1].0.into(),
                    admin: ix.accounts[2].0.into(),
                };
                Ok(LbClmmProgramIx::CloseClaimProtocolFeeOperator(ix_accounts))
            },
            [184, 7, 240, 171, 103, 47, 183, 121] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = InitializePresetParameter2IxAccounts {
                    preset_parameter: ix.accounts[0].0.into(),
                    admin: ix.accounts[1].0.into(),
                    system_program: ix.accounts[2].0.into(),
                };
                let de_ix_data: InitializePresetParameter2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializePresetParameter2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [73, 59, 36, 120, 237, 83, 108, 198] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = InitializeLbPair2IxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    token_mint_x: ix.accounts[2].0.into(),
                    token_mint_y: ix.accounts[3].0.into(),
                    reserve_x: ix.accounts[4].0.into(),
                    reserve_y: ix.accounts[5].0.into(),
                    oracle: ix.accounts[6].0.into(),
                    preset_parameter: ix.accounts[7].0.into(),
                    funder: ix.accounts[8].0.into(),
                    token_badge_x: if ix.accounts[9]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[9].0.into())
                    },
                    token_badge_y: if ix.accounts[10]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[10].0.into())
                    },
                    token_program_x: ix.accounts[11].0.into(),
                    token_program_y: ix.accounts[12].0.into(),
                    system_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: InitializeLbPair2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::InitializeLbPair2(ix_accounts, de_ix_data))
            },
            [243, 73, 129, 126, 51, 19, 241, 107] => {
                check_min_accounts_req(accounts_len, 17)?;
                let ix_accounts = InitializeCustomizablePermissionlessLbPair2IxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    token_mint_x: ix.accounts[2].0.into(),
                    token_mint_y: ix.accounts[3].0.into(),
                    reserve_x: ix.accounts[4].0.into(),
                    reserve_y: ix.accounts[5].0.into(),
                    oracle: ix.accounts[6].0.into(),
                    user_token_x: ix.accounts[7].0.into(),
                    funder: ix.accounts[8].0.into(),
                    token_badge_x: if ix.accounts[9]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[9].0.into())
                    },
                    token_badge_y: if ix.accounts[10]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[10].0.into())
                    },
                    token_program_x: ix.accounts[11].0.into(),
                    token_program_y: ix.accounts[12].0.into(),
                    system_program: ix.accounts[13].0.into(),
                    user_token_y: ix.accounts[14].0.into(),
                    event_authority: ix.accounts[15].0.into(),
                    program: ix.accounts[16].0.into(),
                };
                let de_ix_data: InitializeCustomizablePermissionlessLbPair2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(
                    LbClmmProgramIx::InitializeCustomizablePermissionlessLbPair2(
                        ix_accounts,
                        de_ix_data,
                    ),
                )
            },
            [112, 191, 101, 171, 28, 144, 127, 187] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = ClaimFee2IxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    sender: ix.accounts[2].0.into(),
                    reserve_x: ix.accounts[3].0.into(),
                    reserve_y: ix.accounts[4].0.into(),
                    user_token_x: ix.accounts[5].0.into(),
                    user_token_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    token_program_x: ix.accounts[9].0.into(),
                    token_program_y: ix.accounts[10].0.into(),
                    memo_program: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: ClaimFee2IxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::ClaimFee2(ix_accounts, de_ix_data))
            },
            [190, 3, 127, 119, 178, 87, 157, 183] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = ClaimReward2IxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    position: ix.accounts[1].0.into(),
                    sender: ix.accounts[2].0.into(),
                    reward_vault: ix.accounts[3].0.into(),
                    reward_mint: ix.accounts[4].0.into(),
                    user_token_account: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    memo_program: ix.accounts[7].0.into(),
                    event_authority: ix.accounts[8].0.into(),
                    program: ix.accounts[9].0.into(),
                };
                let de_ix_data: ClaimReward2IxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::ClaimReward2(ix_accounts, de_ix_data))
            },
            [228, 162, 78, 28, 70, 219, 116, 115] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = AddLiquidity2IxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    sender: ix.accounts[9].0.into(),
                    token_x_program: ix.accounts[10].0.into(),
                    token_y_program: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: AddLiquidity2IxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidity2(ix_accounts, de_ix_data))
            },
            [3, 221, 149, 218, 111, 141, 118, 213] => {
                check_min_accounts_req(accounts_len, 14)?;
                let ix_accounts = AddLiquidityByStrategy2IxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    sender: ix.accounts[9].0.into(),
                    token_x_program: ix.accounts[10].0.into(),
                    token_y_program: ix.accounts[11].0.into(),
                    event_authority: ix.accounts[12].0.into(),
                    program: ix.accounts[13].0.into(),
                };
                let de_ix_data: AddLiquidityByStrategy2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityByStrategy2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [33, 51, 163, 201, 117, 98, 125, 231] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = AddLiquidityOneSidePrecise2IxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token: ix.accounts[3].0.into(),
                    reserve: ix.accounts[4].0.into(),
                    token_mint: ix.accounts[5].0.into(),
                    sender: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                    event_authority: ix.accounts[8].0.into(),
                    program: ix.accounts[9].0.into(),
                };
                let de_ix_data: AddLiquidityOneSidePrecise2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::AddLiquidityOneSidePrecise2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [230, 215, 82, 127, 241, 101, 227, 146] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = RemoveLiquidity2IxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    sender: ix.accounts[9].0.into(),
                    token_x_program: ix.accounts[10].0.into(),
                    token_y_program: ix.accounts[11].0.into(),
                    memo_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: RemoveLiquidity2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::RemoveLiquidity2(ix_accounts, de_ix_data))
            },
            [204, 2, 195, 145, 53, 145, 145, 205] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = RemoveLiquidityByRange2IxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[2]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[2].0.into())
                    },
                    user_token_x: ix.accounts[3].0.into(),
                    user_token_y: ix.accounts[4].0.into(),
                    reserve_x: ix.accounts[5].0.into(),
                    reserve_y: ix.accounts[6].0.into(),
                    token_x_mint: ix.accounts[7].0.into(),
                    token_y_mint: ix.accounts[8].0.into(),
                    sender: ix.accounts[9].0.into(),
                    token_x_program: ix.accounts[10].0.into(),
                    token_y_program: ix.accounts[11].0.into(),
                    memo_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: RemoveLiquidityByRange2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::RemoveLiquidityByRange2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [65, 75, 63, 76, 235, 91, 91, 136] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = Swap2IxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    reserve_x: ix.accounts[2].0.into(),
                    reserve_y: ix.accounts[3].0.into(),
                    user_token_in: ix.accounts[4].0.into(),
                    user_token_out: ix.accounts[5].0.into(),
                    token_x_mint: ix.accounts[6].0.into(),
                    token_y_mint: ix.accounts[7].0.into(),
                    oracle: ix.accounts[8].0.into(),
                    host_fee_in: if ix.accounts[9]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[9].0.into())
                    },
                    user: ix.accounts[10].0.into(),
                    token_x_program: ix.accounts[11].0.into(),
                    token_y_program: ix.accounts[12].0.into(),
                    memo_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: Swap2IxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::Swap2(ix_accounts, de_ix_data))
            },
            [43, 215, 247, 132, 137, 60, 243, 81] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = SwapExactOut2IxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    reserve_x: ix.accounts[2].0.into(),
                    reserve_y: ix.accounts[3].0.into(),
                    user_token_in: ix.accounts[4].0.into(),
                    user_token_out: ix.accounts[5].0.into(),
                    token_x_mint: ix.accounts[6].0.into(),
                    token_y_mint: ix.accounts[7].0.into(),
                    oracle: ix.accounts[8].0.into(),
                    host_fee_in: if ix.accounts[9]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[9].0.into())
                    },
                    user: ix.accounts[10].0.into(),
                    token_x_program: ix.accounts[11].0.into(),
                    token_y_program: ix.accounts[12].0.into(),
                    memo_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: SwapExactOut2IxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SwapExactOut2(ix_accounts, de_ix_data))
            },
            [74, 98, 192, 214, 177, 51, 75, 51] => {
                check_min_accounts_req(accounts_len, 16)?;
                let ix_accounts = SwapWithPriceImpact2IxAccounts {
                    lb_pair: ix.accounts[0].0.into(),
                    bin_array_bitmap_extension: if ix.accounts[1]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[1].0.into())
                    },
                    reserve_x: ix.accounts[2].0.into(),
                    reserve_y: ix.accounts[3].0.into(),
                    user_token_in: ix.accounts[4].0.into(),
                    user_token_out: ix.accounts[5].0.into(),
                    token_x_mint: ix.accounts[6].0.into(),
                    token_y_mint: ix.accounts[7].0.into(),
                    oracle: ix.accounts[8].0.into(),
                    host_fee_in: if ix.accounts[9]
                        .eq(&yellowstone_vixen_core::KeyBytes::from(ID.to_bytes()))
                    {
                        None
                    } else {
                        Some(ix.accounts[9].0.into())
                    },
                    user: ix.accounts[10].0.into(),
                    token_x_program: ix.accounts[11].0.into(),
                    token_y_program: ix.accounts[12].0.into(),
                    memo_program: ix.accounts[13].0.into(),
                    event_authority: ix.accounts[14].0.into(),
                    program: ix.accounts[15].0.into(),
                };
                let de_ix_data: SwapWithPriceImpact2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::SwapWithPriceImpact2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [174, 90, 35, 115, 186, 40, 147, 226] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = ClosePosition2IxAccounts {
                    position: ix.accounts[0].0.into(),
                    sender: ix.accounts[1].0.into(),
                    rent_receiver: ix.accounts[2].0.into(),
                    event_authority: ix.accounts[3].0.into(),
                    program: ix.accounts[4].0.into(),
                };
                Ok(LbClmmProgramIx::ClosePosition2(ix_accounts))
            },
            [32, 142, 184, 154, 103, 65, 184, 88] => {
                check_min_accounts_req(accounts_len, 3)?;
                let ix_accounts = UpdateFeesAndReward2IxAccounts {
                    position: ix.accounts[0].0.into(),
                    lb_pair: ix.accounts[1].0.into(),
                    owner: ix.accounts[2].0.into(),
                };
                let de_ix_data: UpdateFeesAndReward2IxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(LbClmmProgramIx::UpdateFeesAndReward2(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [59, 124, 212, 118, 91, 152, 110, 157] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = ClosePositionIfEmptyIxAccounts {
                    position: ix.accounts[0].0.into(),
                    sender: ix.accounts[1].0.into(),
                    rent_receiver: ix.accounts[2].0.into(),
                    event_authority: ix.accounts[3].0.into(),
                    program: ix.accounts[4].0.into(),
                };
                Ok(LbClmmProgramIx::ClosePositionIfEmpty(ix_accounts))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &ix {
            Ok(ix) => {
                tracing::info!(
                    name: "correctly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = ix.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            },
        }

        ix
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{InitializeLbPairIxAccounts, InstructionParser, LbClmmProgramIx};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::InitializeLbPairIxAccounts> for InitializeLbPairIxAccounts {
        fn into_proto(self) -> proto_def::InitializeLbPairIxAccounts {
            proto_def::InitializeLbPairIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                token_mint_x: self.token_mint_x.to_string(),
                token_mint_y: self.token_mint_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                oracle: self.oracle.to_string(),
                preset_parameter: self.preset_parameter.to_string(),
                funder: self.funder.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializeLbPairIxData;
    impl IntoProto<proto_def::InitializeLbPairIxData> for InitializeLbPairIxData {
        fn into_proto(self) -> proto_def::InitializeLbPairIxData {
            proto_def::InitializeLbPairIxData {
                active_id: self.active_id,
                bin_step: self.bin_step.into(),
            }
        }
    }
    use super::InitializePermissionLbPairIxAccounts;
    impl IntoProto<proto_def::InitializePermissionLbPairIxAccounts>
        for InitializePermissionLbPairIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializePermissionLbPairIxAccounts {
            proto_def::InitializePermissionLbPairIxAccounts {
                base: self.base.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                token_mint_x: self.token_mint_x.to_string(),
                token_mint_y: self.token_mint_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                oracle: self.oracle.to_string(),
                admin: self.admin.to_string(),
                token_badge_x: self.token_badge_x.map(|p| p.to_string()),
                token_badge_y: self.token_badge_y.map(|p| p.to_string()),
                token_program_x: self.token_program_x.to_string(),
                token_program_y: self.token_program_y.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializePermissionLbPairIxData;
    impl IntoProto<proto_def::InitializePermissionLbPairIxData> for InitializePermissionLbPairIxData {
        fn into_proto(self) -> proto_def::InitializePermissionLbPairIxData {
            proto_def::InitializePermissionLbPairIxData {
                active_id: self.active_id,
                bin_step: self.bin_step.into(),
                base_factor: self.base_factor.into(),
                base_fee_power_factor: self.base_fee_power_factor.into(),
                activation_type: self.activation_type.into(),
                protocol_share: self.protocol_share.into(),
            }
        }
    }
    use super::InitializeCustomizablePermissionlessLbPairIxAccounts;
    impl IntoProto<proto_def::InitializeCustomizablePermissionlessLbPairIxAccounts>
        for InitializeCustomizablePermissionlessLbPairIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializeCustomizablePermissionlessLbPairIxAccounts {
            proto_def::InitializeCustomizablePermissionlessLbPairIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                token_mint_x: self.token_mint_x.to_string(),
                token_mint_y: self.token_mint_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                oracle: self.oracle.to_string(),
                user_token_x: self.user_token_x.to_string(),
                funder: self.funder.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
                user_token_y: self.user_token_y.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializeCustomizablePermissionlessLbPairIxData;
    impl IntoProto<proto_def::InitializeCustomizablePermissionlessLbPairIxData>
        for InitializeCustomizablePermissionlessLbPairIxData
    {
        fn into_proto(self) -> proto_def::InitializeCustomizablePermissionlessLbPairIxData {
            proto_def::InitializeCustomizablePermissionlessLbPairIxData {
                params: Some(self.params.into_proto()),
            }
        }
    }
    use super::InitializeBinArrayBitmapExtensionIxAccounts;
    impl IntoProto<proto_def::InitializeBinArrayBitmapExtensionIxAccounts>
        for InitializeBinArrayBitmapExtensionIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializeBinArrayBitmapExtensionIxAccounts {
            proto_def::InitializeBinArrayBitmapExtensionIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.to_string(),
                funder: self.funder.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
            }
        }
    }
    use super::InitializeBinArrayIxAccounts;
    impl IntoProto<proto_def::InitializeBinArrayIxAccounts> for InitializeBinArrayIxAccounts {
        fn into_proto(self) -> proto_def::InitializeBinArrayIxAccounts {
            proto_def::InitializeBinArrayIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array: self.bin_array.to_string(),
                funder: self.funder.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::InitializeBinArrayIxData;
    impl IntoProto<proto_def::InitializeBinArrayIxData> for InitializeBinArrayIxData {
        fn into_proto(self) -> proto_def::InitializeBinArrayIxData {
            proto_def::InitializeBinArrayIxData { index: self.index }
        }
    }
    use super::AddLiquidityIxAccounts;
    impl IntoProto<proto_def::AddLiquidityIxAccounts> for AddLiquidityIxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidityIxAccounts {
            proto_def::AddLiquidityIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityIxData;
    impl IntoProto<proto_def::AddLiquidityIxData> for AddLiquidityIxData {
        fn into_proto(self) -> proto_def::AddLiquidityIxData {
            proto_def::AddLiquidityIxData {
                liquidity_parameter: Some(self.liquidity_parameter.into_proto()),
            }
        }
    }
    use super::AddLiquidityByWeightIxAccounts;
    impl IntoProto<proto_def::AddLiquidityByWeightIxAccounts> for AddLiquidityByWeightIxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidityByWeightIxAccounts {
            proto_def::AddLiquidityByWeightIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityByWeightIxData;
    impl IntoProto<proto_def::AddLiquidityByWeightIxData> for AddLiquidityByWeightIxData {
        fn into_proto(self) -> proto_def::AddLiquidityByWeightIxData {
            proto_def::AddLiquidityByWeightIxData {
                amount_x: self.amount_x,
                amount_y: self.amount_y,
                active_id: self.active_id,
                max_active_bin_slippage: self.max_active_bin_slippage,
                bin_liquidity_dist: self
                    .bin_liquidity_dist
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
            }
        }
    }
    use super::AddLiquidityByStrategyIxAccounts;
    impl IntoProto<proto_def::AddLiquidityByStrategyIxAccounts> for AddLiquidityByStrategyIxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategyIxAccounts {
            proto_def::AddLiquidityByStrategyIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityByStrategyIxData;
    impl IntoProto<proto_def::AddLiquidityByStrategyIxData> for AddLiquidityByStrategyIxData {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategyIxData {
            proto_def::AddLiquidityByStrategyIxData {
                liquidity_parameter: Some(self.liquidity_parameter.into_proto()),
            }
        }
    }
    use super::AddLiquidityByStrategyOneSideIxAccounts;
    impl IntoProto<proto_def::AddLiquidityByStrategyOneSideIxAccounts>
        for AddLiquidityByStrategyOneSideIxAccounts
    {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategyOneSideIxAccounts {
            proto_def::AddLiquidityByStrategyOneSideIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token: self.user_token.to_string(),
                reserve: self.reserve.to_string(),
                token_mint: self.token_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityByStrategyOneSideIxData;
    impl IntoProto<proto_def::AddLiquidityByStrategyOneSideIxData>
        for AddLiquidityByStrategyOneSideIxData
    {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategyOneSideIxData {
            proto_def::AddLiquidityByStrategyOneSideIxData {
                amount: self.amount,
                active_id: self.active_id,
                max_active_bin_slippage: self.max_active_bin_slippage,
                strategy_parameters: Some(self.strategy_parameters.into_proto()),
            }
        }
    }
    use super::AddLiquidityOneSideIxAccounts;
    impl IntoProto<proto_def::AddLiquidityOneSideIxAccounts> for AddLiquidityOneSideIxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidityOneSideIxAccounts {
            proto_def::AddLiquidityOneSideIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token: self.user_token.to_string(),
                reserve: self.reserve.to_string(),
                token_mint: self.token_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityOneSideIxData;
    impl IntoProto<proto_def::AddLiquidityOneSideIxData> for AddLiquidityOneSideIxData {
        fn into_proto(self) -> proto_def::AddLiquidityOneSideIxData {
            proto_def::AddLiquidityOneSideIxData {
                amount: self.amount,
                active_id: self.active_id,
                max_active_bin_slippage: self.max_active_bin_slippage,
                bin_liquidity_dist: self
                    .bin_liquidity_dist
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
            }
        }
    }
    use super::RemoveLiquidityIxAccounts;
    impl IntoProto<proto_def::RemoveLiquidityIxAccounts> for RemoveLiquidityIxAccounts {
        fn into_proto(self) -> proto_def::RemoveLiquidityIxAccounts {
            proto_def::RemoveLiquidityIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::RemoveLiquidityIxData;
    impl IntoProto<proto_def::RemoveLiquidityIxData> for RemoveLiquidityIxData {
        fn into_proto(self) -> proto_def::RemoveLiquidityIxData {
            proto_def::RemoveLiquidityIxData {
                bin_liquidity_removal: self
                    .bin_liquidity_removal
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
            }
        }
    }
    use super::InitializePositionIxAccounts;
    impl IntoProto<proto_def::InitializePositionIxAccounts> for InitializePositionIxAccounts {
        fn into_proto(self) -> proto_def::InitializePositionIxAccounts {
            proto_def::InitializePositionIxAccounts {
                payer: self.payer.to_string(),
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                owner: self.owner.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializePositionIxData;
    impl IntoProto<proto_def::InitializePositionIxData> for InitializePositionIxData {
        fn into_proto(self) -> proto_def::InitializePositionIxData {
            proto_def::InitializePositionIxData {
                lower_bin_id: self.lower_bin_id,
                width: self.width,
            }
        }
    }
    use super::InitializePositionPdaIxAccounts;
    impl IntoProto<proto_def::InitializePositionPdaIxAccounts> for InitializePositionPdaIxAccounts {
        fn into_proto(self) -> proto_def::InitializePositionPdaIxAccounts {
            proto_def::InitializePositionPdaIxAccounts {
                payer: self.payer.to_string(),
                base: self.base.to_string(),
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                owner: self.owner.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializePositionPdaIxData;
    impl IntoProto<proto_def::InitializePositionPdaIxData> for InitializePositionPdaIxData {
        fn into_proto(self) -> proto_def::InitializePositionPdaIxData {
            proto_def::InitializePositionPdaIxData {
                lower_bin_id: self.lower_bin_id,
                width: self.width,
            }
        }
    }
    use super::InitializePositionByOperatorIxAccounts;
    impl IntoProto<proto_def::InitializePositionByOperatorIxAccounts>
        for InitializePositionByOperatorIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializePositionByOperatorIxAccounts {
            proto_def::InitializePositionByOperatorIxAccounts {
                payer: self.payer.to_string(),
                base: self.base.to_string(),
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                owner: self.owner.to_string(),
                operator: self.operator.to_string(),
                operator_token_x: self.operator_token_x.to_string(),
                owner_token_x: self.owner_token_x.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializePositionByOperatorIxData;
    impl IntoProto<proto_def::InitializePositionByOperatorIxData>
        for InitializePositionByOperatorIxData
    {
        fn into_proto(self) -> proto_def::InitializePositionByOperatorIxData {
            proto_def::InitializePositionByOperatorIxData {
                lower_bin_id: self.lower_bin_id,
                width: self.width,
                fee_owner: self.fee_owner.to_string(),
                lock_release_point: self.lock_release_point,
            }
        }
    }
    use super::UpdatePositionOperatorIxAccounts;
    impl IntoProto<proto_def::UpdatePositionOperatorIxAccounts> for UpdatePositionOperatorIxAccounts {
        fn into_proto(self) -> proto_def::UpdatePositionOperatorIxAccounts {
            proto_def::UpdatePositionOperatorIxAccounts {
                position: self.position.to_string(),
                owner: self.owner.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdatePositionOperatorIxData;
    impl IntoProto<proto_def::UpdatePositionOperatorIxData> for UpdatePositionOperatorIxData {
        fn into_proto(self) -> proto_def::UpdatePositionOperatorIxData {
            proto_def::UpdatePositionOperatorIxData {
                operator: self.operator.to_string(),
            }
        }
    }
    use super::SwapIxAccounts;
    impl IntoProto<proto_def::SwapIxAccounts> for SwapIxAccounts {
        fn into_proto(self) -> proto_def::SwapIxAccounts {
            proto_def::SwapIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_in: self.user_token_in.to_string(),
                user_token_out: self.user_token_out.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                oracle: self.oracle.to_string(),
                host_fee_in: self.host_fee_in.map(|p| p.to_string()),
                user: self.user.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapIxData;
    impl IntoProto<proto_def::SwapIxData> for SwapIxData {
        fn into_proto(self) -> proto_def::SwapIxData {
            proto_def::SwapIxData {
                amount_in: self.amount_in,
                min_amount_out: self.min_amount_out,
            }
        }
    }
    use super::SwapExactOutIxAccounts;
    impl IntoProto<proto_def::SwapExactOutIxAccounts> for SwapExactOutIxAccounts {
        fn into_proto(self) -> proto_def::SwapExactOutIxAccounts {
            proto_def::SwapExactOutIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_in: self.user_token_in.to_string(),
                user_token_out: self.user_token_out.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                oracle: self.oracle.to_string(),
                host_fee_in: self.host_fee_in.map(|p| p.to_string()),
                user: self.user.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapExactOutIxData;
    impl IntoProto<proto_def::SwapExactOutIxData> for SwapExactOutIxData {
        fn into_proto(self) -> proto_def::SwapExactOutIxData {
            proto_def::SwapExactOutIxData {
                max_in_amount: self.max_in_amount,
                out_amount: self.out_amount,
            }
        }
    }
    use super::SwapWithPriceImpactIxAccounts;
    impl IntoProto<proto_def::SwapWithPriceImpactIxAccounts> for SwapWithPriceImpactIxAccounts {
        fn into_proto(self) -> proto_def::SwapWithPriceImpactIxAccounts {
            proto_def::SwapWithPriceImpactIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_in: self.user_token_in.to_string(),
                user_token_out: self.user_token_out.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                oracle: self.oracle.to_string(),
                host_fee_in: self.host_fee_in.map(|p| p.to_string()),
                user: self.user.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapWithPriceImpactIxData;
    impl IntoProto<proto_def::SwapWithPriceImpactIxData> for SwapWithPriceImpactIxData {
        fn into_proto(self) -> proto_def::SwapWithPriceImpactIxData {
            proto_def::SwapWithPriceImpactIxData {
                amount_in: self.amount_in,
                active_id: self.active_id,
                max_price_impact_bps: self.max_price_impact_bps.into(),
            }
        }
    }
    use super::WithdrawProtocolFeeIxAccounts;
    impl IntoProto<proto_def::WithdrawProtocolFeeIxAccounts> for WithdrawProtocolFeeIxAccounts {
        fn into_proto(self) -> proto_def::WithdrawProtocolFeeIxAccounts {
            proto_def::WithdrawProtocolFeeIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                receiver_token_x: self.receiver_token_x.to_string(),
                receiver_token_y: self.receiver_token_y.to_string(),
                claim_fee_operator: self.claim_fee_operator.to_string(),
                operator: self.operator.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                memo_program: self.memo_program.to_string(),
            }
        }
    }
    use super::WithdrawProtocolFeeIxData;
    impl IntoProto<proto_def::WithdrawProtocolFeeIxData> for WithdrawProtocolFeeIxData {
        fn into_proto(self) -> proto_def::WithdrawProtocolFeeIxData {
            proto_def::WithdrawProtocolFeeIxData {
                amount_x: self.amount_x,
                amount_y: self.amount_y,
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::InitializeRewardIxAccounts;
    impl IntoProto<proto_def::InitializeRewardIxAccounts> for InitializeRewardIxAccounts {
        fn into_proto(self) -> proto_def::InitializeRewardIxAccounts {
            proto_def::InitializeRewardIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                reward_vault: self.reward_vault.to_string(),
                reward_mint: self.reward_mint.to_string(),
                token_badge: self.token_badge.map(|p| p.to_string()),
                admin: self.admin.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializeRewardIxData;
    impl IntoProto<proto_def::InitializeRewardIxData> for InitializeRewardIxData {
        fn into_proto(self) -> proto_def::InitializeRewardIxData {
            proto_def::InitializeRewardIxData {
                reward_index: self.reward_index,
                reward_duration: self.reward_duration,
                funder: self.funder.to_string(),
            }
        }
    }
    use super::FundRewardIxAccounts;
    impl IntoProto<proto_def::FundRewardIxAccounts> for FundRewardIxAccounts {
        fn into_proto(self) -> proto_def::FundRewardIxAccounts {
            proto_def::FundRewardIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                reward_vault: self.reward_vault.to_string(),
                reward_mint: self.reward_mint.to_string(),
                funder_token_account: self.funder_token_account.to_string(),
                funder: self.funder.to_string(),
                bin_array: self.bin_array.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::FundRewardIxData;
    impl IntoProto<proto_def::FundRewardIxData> for FundRewardIxData {
        fn into_proto(self) -> proto_def::FundRewardIxData {
            proto_def::FundRewardIxData {
                reward_index: self.reward_index,
                amount: self.amount,
                carry_forward: self.carry_forward,
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::UpdateRewardFunderIxAccounts;
    impl IntoProto<proto_def::UpdateRewardFunderIxAccounts> for UpdateRewardFunderIxAccounts {
        fn into_proto(self) -> proto_def::UpdateRewardFunderIxAccounts {
            proto_def::UpdateRewardFunderIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateRewardFunderIxData;
    impl IntoProto<proto_def::UpdateRewardFunderIxData> for UpdateRewardFunderIxData {
        fn into_proto(self) -> proto_def::UpdateRewardFunderIxData {
            proto_def::UpdateRewardFunderIxData {
                reward_index: self.reward_index,
                new_funder: self.new_funder.to_string(),
            }
        }
    }
    use super::UpdateRewardDurationIxAccounts;
    impl IntoProto<proto_def::UpdateRewardDurationIxAccounts> for UpdateRewardDurationIxAccounts {
        fn into_proto(self) -> proto_def::UpdateRewardDurationIxAccounts {
            proto_def::UpdateRewardDurationIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
                bin_array: self.bin_array.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateRewardDurationIxData;
    impl IntoProto<proto_def::UpdateRewardDurationIxData> for UpdateRewardDurationIxData {
        fn into_proto(self) -> proto_def::UpdateRewardDurationIxData {
            proto_def::UpdateRewardDurationIxData {
                reward_index: self.reward_index,
                new_duration: self.new_duration,
            }
        }
    }
    use super::ClaimRewardIxAccounts;
    impl IntoProto<proto_def::ClaimRewardIxAccounts> for ClaimRewardIxAccounts {
        fn into_proto(self) -> proto_def::ClaimRewardIxAccounts {
            proto_def::ClaimRewardIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                position: self.position.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                reward_vault: self.reward_vault.to_string(),
                reward_mint: self.reward_mint.to_string(),
                user_token_account: self.user_token_account.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::ClaimRewardIxData;
    impl IntoProto<proto_def::ClaimRewardIxData> for ClaimRewardIxData {
        fn into_proto(self) -> proto_def::ClaimRewardIxData {
            proto_def::ClaimRewardIxData {
                reward_index: self.reward_index,
            }
        }
    }
    use super::ClaimFeeIxAccounts;
    impl IntoProto<proto_def::ClaimFeeIxAccounts> for ClaimFeeIxAccounts {
        fn into_proto(self) -> proto_def::ClaimFeeIxAccounts {
            proto_def::ClaimFeeIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                position: self.position.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::ClosePositionIxAccounts;
    impl IntoProto<proto_def::ClosePositionIxAccounts> for ClosePositionIxAccounts {
        fn into_proto(self) -> proto_def::ClosePositionIxAccounts {
            proto_def::ClosePositionIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateBaseFeeParametersIxAccounts;
    impl IntoProto<proto_def::UpdateBaseFeeParametersIxAccounts> for UpdateBaseFeeParametersIxAccounts {
        fn into_proto(self) -> proto_def::UpdateBaseFeeParametersIxAccounts {
            proto_def::UpdateBaseFeeParametersIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateBaseFeeParametersIxData;
    impl IntoProto<proto_def::UpdateBaseFeeParametersIxData> for UpdateBaseFeeParametersIxData {
        fn into_proto(self) -> proto_def::UpdateBaseFeeParametersIxData {
            proto_def::UpdateBaseFeeParametersIxData {
                protocol_share: self.protocol_share.into(),
                base_factor: self.base_factor.into(),
                base_fee_power_factor: self.base_fee_power_factor.into(),
            }
        }
    }
    use super::UpdateDynamicFeeParametersIxAccounts;
    impl IntoProto<proto_def::UpdateDynamicFeeParametersIxAccounts>
        for UpdateDynamicFeeParametersIxAccounts
    {
        fn into_proto(self) -> proto_def::UpdateDynamicFeeParametersIxAccounts {
            proto_def::UpdateDynamicFeeParametersIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateDynamicFeeParametersIxData;
    impl IntoProto<proto_def::UpdateDynamicFeeParametersIxData> for UpdateDynamicFeeParametersIxData {
        fn into_proto(self) -> proto_def::UpdateDynamicFeeParametersIxData {
            proto_def::UpdateDynamicFeeParametersIxData {
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                variable_fee_control: self.variable_fee_control,
                max_volatility_accumulator: self.max_volatility_accumulator,
            }
        }
    }
    use super::IncreaseOracleLengthIxAccounts;
    impl IntoProto<proto_def::IncreaseOracleLengthIxAccounts> for IncreaseOracleLengthIxAccounts {
        fn into_proto(self) -> proto_def::IncreaseOracleLengthIxAccounts {
            proto_def::IncreaseOracleLengthIxAccounts {
                oracle: self.oracle.to_string(),
                funder: self.funder.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::IncreaseOracleLengthIxData;
    impl IntoProto<proto_def::IncreaseOracleLengthIxData> for IncreaseOracleLengthIxData {
        fn into_proto(self) -> proto_def::IncreaseOracleLengthIxData {
            proto_def::IncreaseOracleLengthIxData {
                length_to_add: self.length_to_add,
            }
        }
    }
    use super::InitializePresetParameterIxAccounts;
    impl IntoProto<proto_def::InitializePresetParameterIxAccounts>
        for InitializePresetParameterIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializePresetParameterIxAccounts {
            proto_def::InitializePresetParameterIxAccounts {
                preset_parameter: self.preset_parameter.to_string(),
                admin: self.admin.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
            }
        }
    }
    use super::InitializePresetParameterIxData;
    impl IntoProto<proto_def::InitializePresetParameterIxData> for InitializePresetParameterIxData {
        fn into_proto(self) -> proto_def::InitializePresetParameterIxData {
            proto_def::InitializePresetParameterIxData {
                bin_step: self.bin_step.into(),
                base_factor: self.base_factor.into(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                variable_fee_control: self.variable_fee_control,
                max_volatility_accumulator: self.max_volatility_accumulator,
                protocol_share: self.protocol_share.into(),
            }
        }
    }
    use super::ClosePresetParameterIxAccounts;
    impl IntoProto<proto_def::ClosePresetParameterIxAccounts> for ClosePresetParameterIxAccounts {
        fn into_proto(self) -> proto_def::ClosePresetParameterIxAccounts {
            proto_def::ClosePresetParameterIxAccounts {
                preset_parameter: self.preset_parameter.to_string(),
                admin: self.admin.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
            }
        }
    }
    use super::ClosePresetParameter2IxAccounts;
    impl IntoProto<proto_def::ClosePresetParameter2IxAccounts> for ClosePresetParameter2IxAccounts {
        fn into_proto(self) -> proto_def::ClosePresetParameter2IxAccounts {
            proto_def::ClosePresetParameter2IxAccounts {
                preset_parameter: self.preset_parameter.to_string(),
                admin: self.admin.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
            }
        }
    }
    use super::RemoveAllLiquidityIxAccounts;
    impl IntoProto<proto_def::RemoveAllLiquidityIxAccounts> for RemoveAllLiquidityIxAccounts {
        fn into_proto(self) -> proto_def::RemoveAllLiquidityIxAccounts {
            proto_def::RemoveAllLiquidityIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SetPairStatusIxAccounts;
    impl IntoProto<proto_def::SetPairStatusIxAccounts> for SetPairStatusIxAccounts {
        fn into_proto(self) -> proto_def::SetPairStatusIxAccounts {
            proto_def::SetPairStatusIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
            }
        }
    }
    use super::SetPairStatusIxData;
    impl IntoProto<proto_def::SetPairStatusIxData> for SetPairStatusIxData {
        fn into_proto(self) -> proto_def::SetPairStatusIxData {
            proto_def::SetPairStatusIxData {
                status: self.status.into(),
            }
        }
    }
    use super::MigratePositionIxAccounts;
    impl IntoProto<proto_def::MigratePositionIxAccounts> for MigratePositionIxAccounts {
        fn into_proto(self) -> proto_def::MigratePositionIxAccounts {
            proto_def::MigratePositionIxAccounts {
                position_v2: self.position_v2.to_string(),
                position_v1: self.position_v1.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                owner: self.owner.to_string(),
                system_program: self.system_program.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::MigrateBinArrayIxAccounts;
    impl IntoProto<proto_def::MigrateBinArrayIxAccounts> for MigrateBinArrayIxAccounts {
        fn into_proto(self) -> proto_def::MigrateBinArrayIxAccounts {
            proto_def::MigrateBinArrayIxAccounts {
                lb_pair: self.lb_pair.to_string(),
            }
        }
    }
    use super::UpdateFeesAndRewardsIxAccounts;
    impl IntoProto<proto_def::UpdateFeesAndRewardsIxAccounts> for UpdateFeesAndRewardsIxAccounts {
        fn into_proto(self) -> proto_def::UpdateFeesAndRewardsIxAccounts {
            proto_def::UpdateFeesAndRewardsIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                owner: self.owner.to_string(),
            }
        }
    }
    use super::WithdrawIneligibleRewardIxAccounts;
    impl IntoProto<proto_def::WithdrawIneligibleRewardIxAccounts>
        for WithdrawIneligibleRewardIxAccounts
    {
        fn into_proto(self) -> proto_def::WithdrawIneligibleRewardIxAccounts {
            proto_def::WithdrawIneligibleRewardIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                reward_vault: self.reward_vault.to_string(),
                reward_mint: self.reward_mint.to_string(),
                funder_token_account: self.funder_token_account.to_string(),
                funder: self.funder.to_string(),
                bin_array: self.bin_array.to_string(),
                token_program: self.token_program.to_string(),
                memo_program: self.memo_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::WithdrawIneligibleRewardIxData;
    impl IntoProto<proto_def::WithdrawIneligibleRewardIxData> for WithdrawIneligibleRewardIxData {
        fn into_proto(self) -> proto_def::WithdrawIneligibleRewardIxData {
            proto_def::WithdrawIneligibleRewardIxData {
                reward_index: self.reward_index,
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::SetActivationPointIxAccounts;
    impl IntoProto<proto_def::SetActivationPointIxAccounts> for SetActivationPointIxAccounts {
        fn into_proto(self) -> proto_def::SetActivationPointIxAccounts {
            proto_def::SetActivationPointIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                admin: self.admin.to_string(),
            }
        }
    }
    use super::SetActivationPointIxData;
    impl IntoProto<proto_def::SetActivationPointIxData> for SetActivationPointIxData {
        fn into_proto(self) -> proto_def::SetActivationPointIxData {
            proto_def::SetActivationPointIxData {
                activation_point: self.activation_point,
            }
        }
    }
    use super::RemoveLiquidityByRangeIxAccounts;
    impl IntoProto<proto_def::RemoveLiquidityByRangeIxAccounts> for RemoveLiquidityByRangeIxAccounts {
        fn into_proto(self) -> proto_def::RemoveLiquidityByRangeIxAccounts {
            proto_def::RemoveLiquidityByRangeIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::RemoveLiquidityByRangeIxData;
    impl IntoProto<proto_def::RemoveLiquidityByRangeIxData> for RemoveLiquidityByRangeIxData {
        fn into_proto(self) -> proto_def::RemoveLiquidityByRangeIxData {
            proto_def::RemoveLiquidityByRangeIxData {
                from_bin_id: self.from_bin_id,
                to_bin_id: self.to_bin_id,
                bps_to_remove: self.bps_to_remove.into(),
            }
        }
    }
    use super::AddLiquidityOneSidePreciseIxAccounts;
    impl IntoProto<proto_def::AddLiquidityOneSidePreciseIxAccounts>
        for AddLiquidityOneSidePreciseIxAccounts
    {
        fn into_proto(self) -> proto_def::AddLiquidityOneSidePreciseIxAccounts {
            proto_def::AddLiquidityOneSidePreciseIxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token: self.user_token.to_string(),
                reserve: self.reserve.to_string(),
                token_mint: self.token_mint.to_string(),
                bin_array_lower: self.bin_array_lower.to_string(),
                bin_array_upper: self.bin_array_upper.to_string(),
                sender: self.sender.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityOneSidePreciseIxData;
    impl IntoProto<proto_def::AddLiquidityOneSidePreciseIxData> for AddLiquidityOneSidePreciseIxData {
        fn into_proto(self) -> proto_def::AddLiquidityOneSidePreciseIxData {
            proto_def::AddLiquidityOneSidePreciseIxData {
                bins: self.bins.into_iter().map(|x| x.into_proto()).collect(),
                decompress_multiplier: self.decompress_multiplier,
            }
        }
    }
    use super::GoToABinIxAccounts;
    impl IntoProto<proto_def::GoToABinIxAccounts> for GoToABinIxAccounts {
        fn into_proto(self) -> proto_def::GoToABinIxAccounts {
            proto_def::GoToABinIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                from_bin_array: self.from_bin_array.map(|p| p.to_string()),
                to_bin_array: self.to_bin_array.map(|p| p.to_string()),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::GoToABinIxData;
    impl IntoProto<proto_def::GoToABinIxData> for GoToABinIxData {
        fn into_proto(self) -> proto_def::GoToABinIxData {
            proto_def::GoToABinIxData {
                bin_id: self.bin_id,
            }
        }
    }
    use super::SetPreActivationDurationIxAccounts;
    impl IntoProto<proto_def::SetPreActivationDurationIxAccounts>
        for SetPreActivationDurationIxAccounts
    {
        fn into_proto(self) -> proto_def::SetPreActivationDurationIxAccounts {
            proto_def::SetPreActivationDurationIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                creator: self.creator.to_string(),
            }
        }
    }
    use super::SetPreActivationDurationIxData;
    impl IntoProto<proto_def::SetPreActivationDurationIxData> for SetPreActivationDurationIxData {
        fn into_proto(self) -> proto_def::SetPreActivationDurationIxData {
            proto_def::SetPreActivationDurationIxData {
                pre_activation_duration: self.pre_activation_duration,
            }
        }
    }
    use super::SetPreActivationSwapAddressIxAccounts;
    impl IntoProto<proto_def::SetPreActivationSwapAddressIxAccounts>
        for SetPreActivationSwapAddressIxAccounts
    {
        fn into_proto(self) -> proto_def::SetPreActivationSwapAddressIxAccounts {
            proto_def::SetPreActivationSwapAddressIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                creator: self.creator.to_string(),
            }
        }
    }
    use super::SetPreActivationSwapAddressIxData;
    impl IntoProto<proto_def::SetPreActivationSwapAddressIxData> for SetPreActivationSwapAddressIxData {
        fn into_proto(self) -> proto_def::SetPreActivationSwapAddressIxData {
            proto_def::SetPreActivationSwapAddressIxData {
                pre_activation_swap_address: self.pre_activation_swap_address.to_string(),
            }
        }
    }
    use super::SetPairStatusPermissionlessIxAccounts;
    impl IntoProto<proto_def::SetPairStatusPermissionlessIxAccounts>
        for SetPairStatusPermissionlessIxAccounts
    {
        fn into_proto(self) -> proto_def::SetPairStatusPermissionlessIxAccounts {
            proto_def::SetPairStatusPermissionlessIxAccounts {
                lb_pair: self.lb_pair.to_string(),
                creator: self.creator.to_string(),
            }
        }
    }
    use super::SetPairStatusPermissionlessIxData;
    impl IntoProto<proto_def::SetPairStatusPermissionlessIxData> for SetPairStatusPermissionlessIxData {
        fn into_proto(self) -> proto_def::SetPairStatusPermissionlessIxData {
            proto_def::SetPairStatusPermissionlessIxData {
                status: self.status.into(),
            }
        }
    }
    use super::InitializeTokenBadgeIxAccounts;
    impl IntoProto<proto_def::InitializeTokenBadgeIxAccounts> for InitializeTokenBadgeIxAccounts {
        fn into_proto(self) -> proto_def::InitializeTokenBadgeIxAccounts {
            proto_def::InitializeTokenBadgeIxAccounts {
                token_mint: self.token_mint.to_string(),
                token_badge: self.token_badge.to_string(),
                admin: self.admin.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::CreateClaimProtocolFeeOperatorIxAccounts;
    impl IntoProto<proto_def::CreateClaimProtocolFeeOperatorIxAccounts>
        for CreateClaimProtocolFeeOperatorIxAccounts
    {
        fn into_proto(self) -> proto_def::CreateClaimProtocolFeeOperatorIxAccounts {
            proto_def::CreateClaimProtocolFeeOperatorIxAccounts {
                claim_fee_operator: self.claim_fee_operator.to_string(),
                operator: self.operator.to_string(),
                admin: self.admin.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::CloseClaimProtocolFeeOperatorIxAccounts;
    impl IntoProto<proto_def::CloseClaimProtocolFeeOperatorIxAccounts>
        for CloseClaimProtocolFeeOperatorIxAccounts
    {
        fn into_proto(self) -> proto_def::CloseClaimProtocolFeeOperatorIxAccounts {
            proto_def::CloseClaimProtocolFeeOperatorIxAccounts {
                claim_fee_operator: self.claim_fee_operator.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
                admin: self.admin.to_string(),
            }
        }
    }
    use super::InitializePresetParameter2IxAccounts;
    impl IntoProto<proto_def::InitializePresetParameter2IxAccounts>
        for InitializePresetParameter2IxAccounts
    {
        fn into_proto(self) -> proto_def::InitializePresetParameter2IxAccounts {
            proto_def::InitializePresetParameter2IxAccounts {
                preset_parameter: self.preset_parameter.to_string(),
                admin: self.admin.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::InitializePresetParameter2IxData;
    impl IntoProto<proto_def::InitializePresetParameter2IxData> for InitializePresetParameter2IxData {
        fn into_proto(self) -> proto_def::InitializePresetParameter2IxData {
            proto_def::InitializePresetParameter2IxData {
                index: self.index.into(),
                bin_step: self.bin_step.into(),
                base_factor: self.base_factor.into(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                variable_fee_control: self.variable_fee_control,
                max_volatility_accumulator: self.max_volatility_accumulator,
                protocol_share: self.protocol_share.into(),
                base_fee_power_factor: self.base_fee_power_factor.into(),
            }
        }
    }
    use super::InitializeLbPair2IxAccounts;
    impl IntoProto<proto_def::InitializeLbPair2IxAccounts> for InitializeLbPair2IxAccounts {
        fn into_proto(self) -> proto_def::InitializeLbPair2IxAccounts {
            proto_def::InitializeLbPair2IxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                token_mint_x: self.token_mint_x.to_string(),
                token_mint_y: self.token_mint_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                oracle: self.oracle.to_string(),
                preset_parameter: self.preset_parameter.to_string(),
                funder: self.funder.to_string(),
                token_badge_x: self.token_badge_x.map(|p| p.to_string()),
                token_badge_y: self.token_badge_y.map(|p| p.to_string()),
                token_program_x: self.token_program_x.to_string(),
                token_program_y: self.token_program_y.to_string(),
                system_program: self.system_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializeLbPair2IxData;
    impl IntoProto<proto_def::InitializeLbPair2IxData> for InitializeLbPair2IxData {
        fn into_proto(self) -> proto_def::InitializeLbPair2IxData {
            proto_def::InitializeLbPair2IxData {
                active_id: self.active_id,
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::InitializeCustomizablePermissionlessLbPair2IxAccounts;
    impl IntoProto<proto_def::InitializeCustomizablePermissionlessLbPair2IxAccounts>
        for InitializeCustomizablePermissionlessLbPair2IxAccounts
    {
        fn into_proto(self) -> proto_def::InitializeCustomizablePermissionlessLbPair2IxAccounts {
            proto_def::InitializeCustomizablePermissionlessLbPair2IxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                token_mint_x: self.token_mint_x.to_string(),
                token_mint_y: self.token_mint_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                oracle: self.oracle.to_string(),
                user_token_x: self.user_token_x.to_string(),
                funder: self.funder.to_string(),
                token_badge_x: self.token_badge_x.map(|p| p.to_string()),
                token_badge_y: self.token_badge_y.map(|p| p.to_string()),
                token_program_x: self.token_program_x.to_string(),
                token_program_y: self.token_program_y.to_string(),
                system_program: self.system_program.to_string(),
                user_token_y: self.user_token_y.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializeCustomizablePermissionlessLbPair2IxData;
    impl IntoProto<proto_def::InitializeCustomizablePermissionlessLbPair2IxData>
        for InitializeCustomizablePermissionlessLbPair2IxData
    {
        fn into_proto(self) -> proto_def::InitializeCustomizablePermissionlessLbPair2IxData {
            proto_def::InitializeCustomizablePermissionlessLbPair2IxData {
                params: Some(self.params.into_proto()),
            }
        }
    }
    use super::ClaimFee2IxAccounts;
    impl IntoProto<proto_def::ClaimFee2IxAccounts> for ClaimFee2IxAccounts {
        fn into_proto(self) -> proto_def::ClaimFee2IxAccounts {
            proto_def::ClaimFee2IxAccounts {
                lb_pair: self.lb_pair.to_string(),
                position: self.position.to_string(),
                sender: self.sender.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                token_program_x: self.token_program_x.to_string(),
                token_program_y: self.token_program_y.to_string(),
                memo_program: self.memo_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::ClaimFee2IxData;
    impl IntoProto<proto_def::ClaimFee2IxData> for ClaimFee2IxData {
        fn into_proto(self) -> proto_def::ClaimFee2IxData {
            proto_def::ClaimFee2IxData {
                min_bin_id: self.min_bin_id,
                max_bin_id: self.max_bin_id,
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::ClaimReward2IxAccounts;
    impl IntoProto<proto_def::ClaimReward2IxAccounts> for ClaimReward2IxAccounts {
        fn into_proto(self) -> proto_def::ClaimReward2IxAccounts {
            proto_def::ClaimReward2IxAccounts {
                lb_pair: self.lb_pair.to_string(),
                position: self.position.to_string(),
                sender: self.sender.to_string(),
                reward_vault: self.reward_vault.to_string(),
                reward_mint: self.reward_mint.to_string(),
                user_token_account: self.user_token_account.to_string(),
                token_program: self.token_program.to_string(),
                memo_program: self.memo_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::ClaimReward2IxData;
    impl IntoProto<proto_def::ClaimReward2IxData> for ClaimReward2IxData {
        fn into_proto(self) -> proto_def::ClaimReward2IxData {
            proto_def::ClaimReward2IxData {
                reward_index: self.reward_index,
                min_bin_id: self.min_bin_id,
                max_bin_id: self.max_bin_id,
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::AddLiquidity2IxAccounts;
    impl IntoProto<proto_def::AddLiquidity2IxAccounts> for AddLiquidity2IxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidity2IxAccounts {
            proto_def::AddLiquidity2IxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidity2IxData;
    impl IntoProto<proto_def::AddLiquidity2IxData> for AddLiquidity2IxData {
        fn into_proto(self) -> proto_def::AddLiquidity2IxData {
            proto_def::AddLiquidity2IxData {
                liquidity_parameter: Some(self.liquidity_parameter.into_proto()),
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::AddLiquidityByStrategy2IxAccounts;
    impl IntoProto<proto_def::AddLiquidityByStrategy2IxAccounts> for AddLiquidityByStrategy2IxAccounts {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategy2IxAccounts {
            proto_def::AddLiquidityByStrategy2IxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityByStrategy2IxData;
    impl IntoProto<proto_def::AddLiquidityByStrategy2IxData> for AddLiquidityByStrategy2IxData {
        fn into_proto(self) -> proto_def::AddLiquidityByStrategy2IxData {
            proto_def::AddLiquidityByStrategy2IxData {
                liquidity_parameter: Some(self.liquidity_parameter.into_proto()),
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::AddLiquidityOneSidePrecise2IxAccounts;
    impl IntoProto<proto_def::AddLiquidityOneSidePrecise2IxAccounts>
        for AddLiquidityOneSidePrecise2IxAccounts
    {
        fn into_proto(self) -> proto_def::AddLiquidityOneSidePrecise2IxAccounts {
            proto_def::AddLiquidityOneSidePrecise2IxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token: self.user_token.to_string(),
                reserve: self.reserve.to_string(),
                token_mint: self.token_mint.to_string(),
                sender: self.sender.to_string(),
                token_program: self.token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::AddLiquidityOneSidePrecise2IxData;
    impl IntoProto<proto_def::AddLiquidityOneSidePrecise2IxData> for AddLiquidityOneSidePrecise2IxData {
        fn into_proto(self) -> proto_def::AddLiquidityOneSidePrecise2IxData {
            proto_def::AddLiquidityOneSidePrecise2IxData {
                bins: self.bins.into_iter().map(|x| x.into_proto()).collect(),
                decompress_multiplier: self.decompress_multiplier,
                max_amount: self.max_amount,
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::RemoveLiquidity2IxAccounts;
    impl IntoProto<proto_def::RemoveLiquidity2IxAccounts> for RemoveLiquidity2IxAccounts {
        fn into_proto(self) -> proto_def::RemoveLiquidity2IxAccounts {
            proto_def::RemoveLiquidity2IxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                memo_program: self.memo_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::RemoveLiquidity2IxData;
    impl IntoProto<proto_def::RemoveLiquidity2IxData> for RemoveLiquidity2IxData {
        fn into_proto(self) -> proto_def::RemoveLiquidity2IxData {
            proto_def::RemoveLiquidity2IxData {
                bin_liquidity_removal: self
                    .bin_liquidity_removal
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::RemoveLiquidityByRange2IxAccounts;
    impl IntoProto<proto_def::RemoveLiquidityByRange2IxAccounts> for RemoveLiquidityByRange2IxAccounts {
        fn into_proto(self) -> proto_def::RemoveLiquidityByRange2IxAccounts {
            proto_def::RemoveLiquidityByRange2IxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                user_token_x: self.user_token_x.to_string(),
                user_token_y: self.user_token_y.to_string(),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                sender: self.sender.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                memo_program: self.memo_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::RemoveLiquidityByRange2IxData;
    impl IntoProto<proto_def::RemoveLiquidityByRange2IxData> for RemoveLiquidityByRange2IxData {
        fn into_proto(self) -> proto_def::RemoveLiquidityByRange2IxData {
            proto_def::RemoveLiquidityByRange2IxData {
                from_bin_id: self.from_bin_id,
                to_bin_id: self.to_bin_id,
                bps_to_remove: self.bps_to_remove.into(),
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::Swap2IxAccounts;
    impl IntoProto<proto_def::Swap2IxAccounts> for Swap2IxAccounts {
        fn into_proto(self) -> proto_def::Swap2IxAccounts {
            proto_def::Swap2IxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_in: self.user_token_in.to_string(),
                user_token_out: self.user_token_out.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                oracle: self.oracle.to_string(),
                host_fee_in: self.host_fee_in.map(|p| p.to_string()),
                user: self.user.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                memo_program: self.memo_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::Swap2IxData;
    impl IntoProto<proto_def::Swap2IxData> for Swap2IxData {
        fn into_proto(self) -> proto_def::Swap2IxData {
            proto_def::Swap2IxData {
                amount_in: self.amount_in,
                min_amount_out: self.min_amount_out,
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::SwapExactOut2IxAccounts;
    impl IntoProto<proto_def::SwapExactOut2IxAccounts> for SwapExactOut2IxAccounts {
        fn into_proto(self) -> proto_def::SwapExactOut2IxAccounts {
            proto_def::SwapExactOut2IxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_in: self.user_token_in.to_string(),
                user_token_out: self.user_token_out.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                oracle: self.oracle.to_string(),
                host_fee_in: self.host_fee_in.map(|p| p.to_string()),
                user: self.user.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                memo_program: self.memo_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapExactOut2IxData;
    impl IntoProto<proto_def::SwapExactOut2IxData> for SwapExactOut2IxData {
        fn into_proto(self) -> proto_def::SwapExactOut2IxData {
            proto_def::SwapExactOut2IxData {
                max_in_amount: self.max_in_amount,
                out_amount: self.out_amount,
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::SwapWithPriceImpact2IxAccounts;
    impl IntoProto<proto_def::SwapWithPriceImpact2IxAccounts> for SwapWithPriceImpact2IxAccounts {
        fn into_proto(self) -> proto_def::SwapWithPriceImpact2IxAccounts {
            proto_def::SwapWithPriceImpact2IxAccounts {
                lb_pair: self.lb_pair.to_string(),
                bin_array_bitmap_extension: self.bin_array_bitmap_extension.map(|p| p.to_string()),
                reserve_x: self.reserve_x.to_string(),
                reserve_y: self.reserve_y.to_string(),
                user_token_in: self.user_token_in.to_string(),
                user_token_out: self.user_token_out.to_string(),
                token_x_mint: self.token_x_mint.to_string(),
                token_y_mint: self.token_y_mint.to_string(),
                oracle: self.oracle.to_string(),
                host_fee_in: self.host_fee_in.map(|p| p.to_string()),
                user: self.user.to_string(),
                token_x_program: self.token_x_program.to_string(),
                token_y_program: self.token_y_program.to_string(),
                memo_program: self.memo_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SwapWithPriceImpact2IxData;
    impl IntoProto<proto_def::SwapWithPriceImpact2IxData> for SwapWithPriceImpact2IxData {
        fn into_proto(self) -> proto_def::SwapWithPriceImpact2IxData {
            proto_def::SwapWithPriceImpact2IxData {
                amount_in: self.amount_in,
                active_id: self.active_id,
                max_price_impact_bps: self.max_price_impact_bps.into(),
                remaining_accounts_info: Some(self.remaining_accounts_info.into_proto()),
            }
        }
    }
    use super::ClosePosition2IxAccounts;
    impl IntoProto<proto_def::ClosePosition2IxAccounts> for ClosePosition2IxAccounts {
        fn into_proto(self) -> proto_def::ClosePosition2IxAccounts {
            proto_def::ClosePosition2IxAccounts {
                position: self.position.to_string(),
                sender: self.sender.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::UpdateFeesAndReward2IxAccounts;
    impl IntoProto<proto_def::UpdateFeesAndReward2IxAccounts> for UpdateFeesAndReward2IxAccounts {
        fn into_proto(self) -> proto_def::UpdateFeesAndReward2IxAccounts {
            proto_def::UpdateFeesAndReward2IxAccounts {
                position: self.position.to_string(),
                lb_pair: self.lb_pair.to_string(),
                owner: self.owner.to_string(),
            }
        }
    }
    use super::UpdateFeesAndReward2IxData;
    impl IntoProto<proto_def::UpdateFeesAndReward2IxData> for UpdateFeesAndReward2IxData {
        fn into_proto(self) -> proto_def::UpdateFeesAndReward2IxData {
            proto_def::UpdateFeesAndReward2IxData {
                min_bin_id: self.min_bin_id,
                max_bin_id: self.max_bin_id,
            }
        }
    }
    use super::ClosePositionIfEmptyIxAccounts;
    impl IntoProto<proto_def::ClosePositionIfEmptyIxAccounts> for ClosePositionIfEmptyIxAccounts {
        fn into_proto(self) -> proto_def::ClosePositionIfEmptyIxAccounts {
            proto_def::ClosePositionIfEmptyIxAccounts {
                position: self.position.to_string(),
                sender: self.sender.to_string(),
                rent_receiver: self.rent_receiver.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramIxs> for LbClmmProgramIx {
        fn into_proto(self) -> proto_def::ProgramIxs {
            match self {
                LbClmmProgramIx::InitializeLbPair(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializeLbPair(
                        proto_def::InitializeLbPairIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::InitializePermissionLbPair(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializePermissionLbPair(
                        proto_def::InitializePermissionLbPairIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::InitializeCustomizablePermissionlessLbPair(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::InitializeCustomizablePermissionlessLbPair(
                            proto_def::InitializeCustomizablePermissionlessLbPairIx {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::InitializeBinArrayBitmapExtension(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::InitializeBinArrayBitmapExtension(
                            proto_def::InitializeBinArrayBitmapExtensionIx {
                                accounts: Some(acc.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::InitializeBinArray(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializeBinArray(
                        proto_def::InitializeBinArrayIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::AddLiquidity(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::AddLiquidity(
                        proto_def::AddLiquidityIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::AddLiquidityByWeight(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::AddLiquidityByWeight(
                        proto_def::AddLiquidityByWeightIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::AddLiquidityByStrategy(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::AddLiquidityByStrategy(
                        proto_def::AddLiquidityByStrategyIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::AddLiquidityByStrategyOneSide(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::AddLiquidityByStrategyOneSide(
                            proto_def::AddLiquidityByStrategyOneSideIx {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::AddLiquidityOneSide(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::AddLiquidityOneSide(
                        proto_def::AddLiquidityOneSideIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::RemoveLiquidity(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::RemoveLiquidity(
                        proto_def::RemoveLiquidityIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::InitializePosition(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializePosition(
                        proto_def::InitializePositionIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::InitializePositionPda(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializePositionPda(
                        proto_def::InitializePositionPdaIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::InitializePositionByOperator(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::InitializePositionByOperator(
                            proto_def::InitializePositionByOperatorIx {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::UpdatePositionOperator(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdatePositionOperator(
                        proto_def::UpdatePositionOperatorIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::Swap(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Swap(proto_def::SwapIx {
                        accounts: Some(acc.into_proto()),
                        data: Some(data.into_proto()),
                    })),
                },
                LbClmmProgramIx::SwapExactOut(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SwapExactOut(
                        proto_def::SwapExactOutIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::SwapWithPriceImpact(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SwapWithPriceImpact(
                        proto_def::SwapWithPriceImpactIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::WithdrawProtocolFee(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::WithdrawProtocolFee(
                        proto_def::WithdrawProtocolFeeIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::InitializeReward(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializeReward(
                        proto_def::InitializeRewardIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::FundReward(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::FundReward(
                        proto_def::FundRewardIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::UpdateRewardFunder(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateRewardFunder(
                        proto_def::UpdateRewardFunderIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::UpdateRewardDuration(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateRewardDuration(
                        proto_def::UpdateRewardDurationIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::ClaimReward(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClaimReward(
                        proto_def::ClaimRewardIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::ClaimFee(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClaimFee(
                        proto_def::ClaimFeeIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::ClosePosition(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClosePosition(
                        proto_def::ClosePositionIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::UpdateBaseFeeParameters(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateBaseFeeParameters(
                        proto_def::UpdateBaseFeeParametersIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::UpdateDynamicFeeParameters(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateDynamicFeeParameters(
                        proto_def::UpdateDynamicFeeParametersIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::IncreaseOracleLength(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::IncreaseOracleLength(
                        proto_def::IncreaseOracleLengthIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::InitializePresetParameter(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializePresetParameter(
                        proto_def::InitializePresetParameterIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::ClosePresetParameter(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClosePresetParameter(
                        proto_def::ClosePresetParameterIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::ClosePresetParameter2(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClosePresetParameter2(
                        proto_def::ClosePresetParameter2Ix {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::RemoveAllLiquidity(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::RemoveAllLiquidity(
                        proto_def::RemoveAllLiquidityIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::SetPairStatus(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SetPairStatus(
                        proto_def::SetPairStatusIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::MigratePosition(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::MigratePosition(
                        proto_def::MigratePositionIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::MigrateBinArray(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::MigrateBinArray(
                        proto_def::MigrateBinArrayIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::UpdateFeesAndRewards(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateFeesAndRewards(
                        proto_def::UpdateFeesAndRewardsIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::WithdrawIneligibleReward(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::WithdrawIneligibleReward(
                        proto_def::WithdrawIneligibleRewardIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::SetActivationPoint(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SetActivationPoint(
                        proto_def::SetActivationPointIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::RemoveLiquidityByRange(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::RemoveLiquidityByRange(
                        proto_def::RemoveLiquidityByRangeIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::AddLiquidityOneSidePrecise(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::AddLiquidityOneSidePrecise(
                        proto_def::AddLiquidityOneSidePreciseIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::GoToABin(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::GoToABin(
                        proto_def::GoToABinIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::SetPreActivationDuration(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SetPreActivationDuration(
                        proto_def::SetPreActivationDurationIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::SetPreActivationSwapAddress(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::SetPreActivationSwapAddress(
                            proto_def::SetPreActivationSwapAddressIx {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::SetPairStatusPermissionless(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::SetPairStatusPermissionless(
                            proto_def::SetPairStatusPermissionlessIx {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::InitializeTokenBadge(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializeTokenBadge(
                        proto_def::InitializeTokenBadgeIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::CreateClaimProtocolFeeOperator(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::CreateClaimProtocolFeeOperator(
                            proto_def::CreateClaimProtocolFeeOperatorIx {
                                accounts: Some(acc.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::CloseClaimProtocolFeeOperator(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::CloseClaimProtocolFeeOperator(
                            proto_def::CloseClaimProtocolFeeOperatorIx {
                                accounts: Some(acc.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::InitializePresetParameter2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializePresetParameter2(
                        proto_def::InitializePresetParameter2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::InitializeLbPair2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializeLbPair2(
                        proto_def::InitializeLbPair2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::InitializeCustomizablePermissionlessLbPair2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::InitializeCustomizablePermissionlessLbPair2(
                            proto_def::InitializeCustomizablePermissionlessLbPair2Ix {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::ClaimFee2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClaimFee2(
                        proto_def::ClaimFee2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::ClaimReward2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClaimReward2(
                        proto_def::ClaimReward2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::AddLiquidity2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::AddLiquidity2(
                        proto_def::AddLiquidity2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::AddLiquidityByStrategy2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::AddLiquidityByStrategy2(
                        proto_def::AddLiquidityByStrategy2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::AddLiquidityOneSidePrecise2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(
                        proto_def::program_ixs::IxOneof::AddLiquidityOneSidePrecise2(
                            proto_def::AddLiquidityOneSidePrecise2Ix {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        ),
                    ),
                },
                LbClmmProgramIx::RemoveLiquidity2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::RemoveLiquidity2(
                        proto_def::RemoveLiquidity2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::RemoveLiquidityByRange2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::RemoveLiquidityByRange2(
                        proto_def::RemoveLiquidityByRange2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::Swap2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Swap2(proto_def::Swap2Ix {
                        accounts: Some(acc.into_proto()),
                        data: Some(data.into_proto()),
                    })),
                },
                LbClmmProgramIx::SwapExactOut2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SwapExactOut2(
                        proto_def::SwapExactOut2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::SwapWithPriceImpact2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SwapWithPriceImpact2(
                        proto_def::SwapWithPriceImpact2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::ClosePosition2(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClosePosition2(
                        proto_def::ClosePosition2Ix {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::UpdateFeesAndReward2(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateFeesAndReward2(
                        proto_def::UpdateFeesAndReward2Ix {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                LbClmmProgramIx::ClosePositionIfEmpty(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClosePositionIfEmpty(
                        proto_def::ClosePositionIfEmptyIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
            }
        }
    }

    impl ParseProto for InstructionParser {
        type Message = proto_def::ProgramIxs;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
