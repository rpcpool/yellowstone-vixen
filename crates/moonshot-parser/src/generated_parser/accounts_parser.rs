//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{ConfigAccount, CurveAccount},
    deserialize_checked, ID,
};

/// TokenLaunchpad Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum TokenLaunchpadProgramState {
    ConfigAccount(ConfigAccount),
    CurveAccount(CurveAccount),
}

impl TokenLaunchpadProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [189, 255, 97, 70, 186, 189, 24, 102] => Ok(TokenLaunchpadProgramState::ConfigAccount(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [8, 91, 83, 28, 132, 216, 248, 22] => Ok(TokenLaunchpadProgramState::CurveAccount(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = TokenLaunchpadProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "token_launchpad::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program_error::ProgramError::InvalidArgument)?;
        let res = TokenLaunchpadProgramState::try_unpack(&inner.data);

        #[cfg(feature = "tracing")]
        if let Err(e) = &res {
            let acc_discriminator: [u8; 8] = inner.data[0..8].try_into()?;
            tracing::info!(
                name: "incorrectly_parsed_account",
                name = "account_update",
                program = ID.to_string(),
                account = "deserialization_error",
                discriminator = ?acc_discriminator,
                error = ?e
            );
        }

        res
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, ConfigAccount, TokenLaunchpadProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::ConfigAccount> for ConfigAccount {
        fn into_proto(self) -> proto_def::ConfigAccount {
            proto_def::ConfigAccount {
                migration_authority: self.migration_authority.to_string(),
                backend_authority: self.backend_authority.to_string(),
                config_authority: self.config_authority.to_string(),
                helio_fee: self.helio_fee.to_string(),
                dex_fee: self.dex_fee.to_string(),
                fee_bps: self.fee_bps.into(),
                dex_fee_share: self.dex_fee_share.into(),
                migration_fee: self.migration_fee,
                marketcap_threshold: self.marketcap_threshold,
                marketcap_currency: self.marketcap_currency as i32,
                min_supported_decimal_places: self.min_supported_decimal_places.into(),
                max_supported_decimal_places: self.max_supported_decimal_places.into(),
                min_supported_token_supply: self.min_supported_token_supply,
                max_supported_token_supply: self.max_supported_token_supply,
                bump: self.bump.into(),
                coef_b: self.coef_b,
            }
        }
    }
    use super::CurveAccount;
    impl IntoProto<proto_def::CurveAccount> for CurveAccount {
        fn into_proto(self) -> proto_def::CurveAccount {
            proto_def::CurveAccount {
                total_supply: self.total_supply,
                curve_amount: self.curve_amount,
                mint: self.mint.to_string(),
                decimals: self.decimals.into(),
                collateral_currency: self.collateral_currency as i32,
                curve_type: self.curve_type as i32,
                marketcap_threshold: self.marketcap_threshold,
                marketcap_currency: self.marketcap_currency as i32,
                migration_fee: self.migration_fee,
                coef_b: self.coef_b,
                bump: self.bump.into(),
                migration_target: self.migration_target as i32,
                price_increase: self.price_increase.into(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for TokenLaunchpadProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                TokenLaunchpadProgramState::ConfigAccount(data) => {
                    proto_def::program_state::StateOneof::ConfigAccount(data.into_proto())
                },
                TokenLaunchpadProgramState::CurveAccount(data) => {
                    proto_def::program_state::StateOneof::CurveAccount(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
