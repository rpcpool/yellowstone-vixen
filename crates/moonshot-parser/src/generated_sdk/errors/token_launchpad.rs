//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum TokenLaunchpadError {
    /// 6000 - Insufficient SOL to pay for the transaction.
    #[error("Insufficient SOL to pay for the transaction.")]
    InsufficientBalance = 0x1770,
    /// 6001 - The amount must be available in the curve .
    #[error("The amount must be available in the curve .")]
    InvalidAmount = 0x1771,
    /// 6002 - The slippage must be under 100 percent.
    #[error("The slippage must be under 100 percent.")]
    InvalidSlippage = 0x1772,
    /// 6003 - The cost amount is not in the allowed slippage interval.
    #[error("The cost amount is not in the allowed slippage interval.")]
    SlippageOverflow = 0x1773,
    /// 6004 - Threshold limit exceeded.
    #[error("Threshold limit exceeded.")]
    ThresholdReached = 0x1774,
    /// 6005 - Trade disabled, market cap threshold reached.
    #[error("Trade disabled, market cap threshold reached.")]
    InvalidTokenAccount = 0x1775,
    /// 6006 - Invalid curve account.
    #[error("Invalid curve account.")]
    InvalidCurveAccount = 0x1776,
    /// 6007 - Invalid fee account address.
    #[error("Invalid fee account address.")]
    InvalidFeeAccount = 0x1777,
    /// 6008 - Curve limit exceeded.
    #[error("Curve limit exceeded.")]
    CurveLimit = 0x1778,
    /// 6009 - Invalid curve type.
    #[error("Invalid curve type.")]
    InvalidCurveType = 0x1779,
    /// 6010 - Invalid currency.
    #[error("Invalid currency.")]
    InvalidCurrency = 0x177a,
    /// 6011 - Artithmetics error
    #[error("Artithmetics error")]
    Arithmetics = 0x177b,
    /// 6012 - Market Cap threshold not hit, cannot migrate funds yet
    #[error("Market Cap threshold not hit, cannot migrate funds yet")]
    ThresholdNotHit = 0x177c,
    /// 6013 - Invalid Authority provided.
    #[error("Invalid Authority provided.")]
    InvalidAuthority = 0x177d,
    /// 6014 - Trade amount too low , resulting in 0 costs
    #[error("Trade amount too low , resulting in 0 costs")]
    TradeAmountTooLow = 0x177e,
    /// 6015 - Config field needs to be present during initialization
    #[error("Config field needs to be present during initialization")]
    ConfigFieldMissing = 0x177f,
    /// 6016 - Unsupported different currency types
    #[error("Unsupported different currency types")]
    DifferentCurrencies = 0x1780,
    /// 6017 - Basis points too high
    #[error("Basis points too high")]
    BasisPointTooHigh = 0x1781,
    /// 6018 - Fee share too High
    #[error("Fee share too High")]
    FeeShareTooHigh = 0x1782,
    /// 6019 - Token decimals are not within the supported range
    #[error("Token decimals are not within the supported range")]
    TokenDecimalsOutOfRange = 0x1783,
    /// 6020 - Token Name too long, max supported length is 32 bytes
    #[error("Token Name too long, max supported length is 32 bytes")]
    TokenNameTooLong = 0x1784,
    /// 6021 - Token Symbol too long, max supported length is 10 bytes
    #[error("Token Symbol too long, max supported length is 10 bytes")]
    TokenSymbolTooLong = 0x1785,
    /// 6022 - Token URI too long, max supported length is 200 bytes
    #[error("Token URI too long, max supported length is 200 bytes")]
    TokenURITooLong = 0x1786,
    /// 6023 - Minimum Decimal Places cannot be lower than Maximum Decimal Places
    #[error("Minimum Decimal Places cannot be lower than Maximum Decimal Places")]
    IncorrectDecimalPlacesBounds = 0x1787,
    /// 6024 - Minimum Token Supply cannot be lower than Maximum Token Supply
    #[error("Minimum Token Supply cannot be lower than Maximum Token Supply")]
    IncorrectTokenSupplyBounds = 0x1788,
    /// 6025 - Token Total Supply out of bounds
    #[error("Token Total Supply out of bounds")]
    TotalSupplyOutOfBounds = 0x1789,
    /// 6026 - This setup will produce final collateral amount less than the migration fee
    #[error("This setup will produce final collateral amount less than the migration fee")]
    FinalCollateralTooLow = 0x178a,
    /// 6027 - One of the Coefficients is equal to ZERO
    #[error("One of the Coefficients is equal to ZERO")]
    CoefficientZero = 0x178b,
    /// 6028 - Market cap Threshold under the Hard lower bound limits
    #[error("Market cap Threshold under the Hard lower bound limits")]
    MarketCapThresholdTooLow = 0x178c,
    /// 6029 - Default coef_b set out of hard limit bounds
    #[error("Default coef_b set out of hard limit bounds")]
    CoefBOutofBounds = 0x178d,
    /// 6030 - For Constant Product the Market Cap threshold cannot be higher than 325 SOL
    #[error("For Constant Product the Market Cap threshold cannot be higher than 325 SOL")]
    IncorrectMarketCap = 0x178e,
    /// 6031 - For Constant Product the Decimal places cannot be other than 9
    #[error("For Constant Product the Decimal places cannot be other than 9")]
    IncorrectDecimals = 0x178f,
    /// 6032 - For Constant Product the Maximal Token Supply cannot be other than 1_000_000_000
    #[error("For Constant Product the Maximal Token Supply cannot be other than 1_000_000_000")]
    IncorrectMaxSupply = 0x1790,
    /// 6033 - Market Cap Threshold set too high, will not be hit even if Curve Hard Limit reached
    #[error("Market Cap Threshold set too high, will not be hit even if Curve Hard Limit reached")]
    MarketCapTooHigh = 0x1791,
    /// 6034 - This Migration Target is not supported!
    #[error("This Migration Target is not supported!")]
    InvalidMigrationTarget = 0x1792,
    /// 6035 - General error
    #[error("General error")]
    General = 0x1793,
}

impl solana_program_error::PrintProgramError for TokenLaunchpadError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

impl<T> solana_decode_error::DecodeError<T> for TokenLaunchpadError {
    fn type_of() -> &'static str { "TokenLaunchpadError" }
}
