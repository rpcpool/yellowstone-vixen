//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct TokenMint {
    pub sender: solana_pubkey::Pubkey,

    pub backend_authority: solana_pubkey::Pubkey,

    pub curve_account: solana_pubkey::Pubkey,

    pub mint: solana_pubkey::Pubkey,
    /// Type validating that the account is owned by the System Program = uninitialized
    /// seeds should ensure that the address is correct
    pub mint_metadata: solana_pubkey::Pubkey,

    pub curve_token_account: solana_pubkey::Pubkey,

    pub config_account: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub associated_token_program: solana_pubkey::Pubkey,

    pub mpl_token_metadata: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl TokenMint {
    pub fn instruction(&self, args: TokenMintInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: TokenMintInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.sender, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.backend_authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.curve_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.mint, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.mint_metadata,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.curve_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.config_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mpl_token_metadata,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&TokenMintInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::TOKEN_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TokenMintInstructionData {
    discriminator: [u8; 8],
}

impl TokenMintInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [3, 44, 164, 184, 123, 13, 245, 179],
        }
    }
}

impl Default for TokenMintInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct TokenMintInstructionArgs {
    pub name: String,
    pub symbol: String,
    pub uri: String,
    pub decimals: u8,
    pub collateral_currency: u8,
    pub amount: u64,
    pub curve_type: u8,
    pub migration_target: u8,
}

/// Instruction builder for `TokenMint`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` sender
///   1. `[signer]` backend_authority
///   2. `[writable]` curve_account
///   3. `[writable, signer]` mint
///   4. `[writable]` mint_metadata
///   5. `[writable]` curve_token_account
///   6. `[]` config_account
///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   8. `[]` associated_token_program
///   9. `[]` mpl_token_metadata
///   10. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct TokenMintBuilder {
    sender: Option<solana_pubkey::Pubkey>,
    backend_authority: Option<solana_pubkey::Pubkey>,
    curve_account: Option<solana_pubkey::Pubkey>,
    mint: Option<solana_pubkey::Pubkey>,
    mint_metadata: Option<solana_pubkey::Pubkey>,
    curve_token_account: Option<solana_pubkey::Pubkey>,
    config_account: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    associated_token_program: Option<solana_pubkey::Pubkey>,
    mpl_token_metadata: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    name: Option<String>,
    symbol: Option<String>,
    uri: Option<String>,
    decimals: Option<u8>,
    collateral_currency: Option<u8>,
    amount: Option<u64>,
    curve_type: Option<u8>,
    migration_target: Option<u8>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl TokenMintBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn sender(&mut self, sender: solana_pubkey::Pubkey) -> &mut Self {
        self.sender = Some(sender);
        self
    }

    #[inline(always)]
    pub fn backend_authority(&mut self, backend_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.backend_authority = Some(backend_authority);
        self
    }

    #[inline(always)]
    pub fn curve_account(&mut self, curve_account: solana_pubkey::Pubkey) -> &mut Self {
        self.curve_account = Some(curve_account);
        self
    }

    #[inline(always)]
    pub fn mint(&mut self, mint: solana_pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }

    /// Type validating that the account is owned by the System Program = uninitialized
    /// seeds should ensure that the address is correct
    #[inline(always)]
    pub fn mint_metadata(&mut self, mint_metadata: solana_pubkey::Pubkey) -> &mut Self {
        self.mint_metadata = Some(mint_metadata);
        self
    }

    #[inline(always)]
    pub fn curve_token_account(&mut self, curve_token_account: solana_pubkey::Pubkey) -> &mut Self {
        self.curve_token_account = Some(curve_token_account);
        self
    }

    #[inline(always)]
    pub fn config_account(&mut self, config_account: solana_pubkey::Pubkey) -> &mut Self {
        self.config_account = Some(config_account);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn mpl_token_metadata(&mut self, mpl_token_metadata: solana_pubkey::Pubkey) -> &mut Self {
        self.mpl_token_metadata = Some(mpl_token_metadata);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }

    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.symbol = Some(symbol);
        self
    }

    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
    }

    #[inline(always)]
    pub fn decimals(&mut self, decimals: u8) -> &mut Self {
        self.decimals = Some(decimals);
        self
    }

    #[inline(always)]
    pub fn collateral_currency(&mut self, collateral_currency: u8) -> &mut Self {
        self.collateral_currency = Some(collateral_currency);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }

    #[inline(always)]
    pub fn curve_type(&mut self, curve_type: u8) -> &mut Self {
        self.curve_type = Some(curve_type);
        self
    }

    #[inline(always)]
    pub fn migration_target(&mut self, migration_target: u8) -> &mut Self {
        self.migration_target = Some(migration_target);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = TokenMint {
            sender: self.sender.expect("sender is not set"),
            backend_authority: self
                .backend_authority
                .expect("backend_authority is not set"),
            curve_account: self.curve_account.expect("curve_account is not set"),
            mint: self.mint.expect("mint is not set"),
            mint_metadata: self.mint_metadata.expect("mint_metadata is not set"),
            curve_token_account: self
                .curve_token_account
                .expect("curve_token_account is not set"),
            config_account: self.config_account.expect("config_account is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            mpl_token_metadata: self
                .mpl_token_metadata
                .expect("mpl_token_metadata is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = TokenMintInstructionArgs {
            name: self.name.clone().expect("name is not set"),
            symbol: self.symbol.clone().expect("symbol is not set"),
            uri: self.uri.clone().expect("uri is not set"),
            decimals: self.decimals.clone().expect("decimals is not set"),
            collateral_currency: self
                .collateral_currency
                .clone()
                .expect("collateral_currency is not set"),
            amount: self.amount.clone().expect("amount is not set"),
            curve_type: self.curve_type.clone().expect("curve_type is not set"),
            migration_target: self
                .migration_target
                .clone()
                .expect("migration_target is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `token_mint` CPI accounts.
pub struct TokenMintCpiAccounts<'a, 'b> {
    pub sender: &'b solana_account_info::AccountInfo<'a>,

    pub backend_authority: &'b solana_account_info::AccountInfo<'a>,

    pub curve_account: &'b solana_account_info::AccountInfo<'a>,

    pub mint: &'b solana_account_info::AccountInfo<'a>,
    /// Type validating that the account is owned by the System Program = uninitialized
    /// seeds should ensure that the address is correct
    pub mint_metadata: &'b solana_account_info::AccountInfo<'a>,

    pub curve_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub config_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub mpl_token_metadata: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `token_mint` CPI instruction.
pub struct TokenMintCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub sender: &'b solana_account_info::AccountInfo<'a>,

    pub backend_authority: &'b solana_account_info::AccountInfo<'a>,

    pub curve_account: &'b solana_account_info::AccountInfo<'a>,

    pub mint: &'b solana_account_info::AccountInfo<'a>,
    /// Type validating that the account is owned by the System Program = uninitialized
    /// seeds should ensure that the address is correct
    pub mint_metadata: &'b solana_account_info::AccountInfo<'a>,

    pub curve_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub config_account: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub mpl_token_metadata: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: TokenMintInstructionArgs,
}

impl<'a, 'b> TokenMintCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: TokenMintCpiAccounts<'a, 'b>,
        args: TokenMintInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            sender: accounts.sender,
            backend_authority: accounts.backend_authority,
            curve_account: accounts.curve_account,
            mint: accounts.mint,
            mint_metadata: accounts.mint_metadata,
            curve_token_account: accounts.curve_token_account,
            config_account: accounts.config_account,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            mpl_token_metadata: accounts.mpl_token_metadata,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(11 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.sender.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.backend_authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.curve_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.mint.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.mint_metadata.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.curve_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.config_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mpl_token_metadata.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&TokenMintInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::TOKEN_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.sender.clone());
        account_infos.push(self.backend_authority.clone());
        account_infos.push(self.curve_account.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.mint_metadata.clone());
        account_infos.push(self.curve_token_account.clone());
        account_infos.push(self.config_account.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.mpl_token_metadata.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `TokenMint` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` sender
///   1. `[signer]` backend_authority
///   2. `[writable]` curve_account
///   3. `[writable, signer]` mint
///   4. `[writable]` mint_metadata
///   5. `[writable]` curve_token_account
///   6. `[]` config_account
///   7. `[]` token_program
///   8. `[]` associated_token_program
///   9. `[]` mpl_token_metadata
///   10. `[]` system_program
#[derive(Clone, Debug)]
pub struct TokenMintCpiBuilder<'a, 'b> {
    instruction: Box<TokenMintCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TokenMintCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(TokenMintCpiBuilderInstruction {
            __program: program,
            sender: None,
            backend_authority: None,
            curve_account: None,
            mint: None,
            mint_metadata: None,
            curve_token_account: None,
            config_account: None,
            token_program: None,
            associated_token_program: None,
            mpl_token_metadata: None,
            system_program: None,
            name: None,
            symbol: None,
            uri: None,
            decimals: None,
            collateral_currency: None,
            amount: None,
            curve_type: None,
            migration_target: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn sender(&mut self, sender: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.sender = Some(sender);
        self
    }

    #[inline(always)]
    pub fn backend_authority(
        &mut self,
        backend_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.backend_authority = Some(backend_authority);
        self
    }

    #[inline(always)]
    pub fn curve_account(
        &mut self,
        curve_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.curve_account = Some(curve_account);
        self
    }

    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }

    /// Type validating that the account is owned by the System Program = uninitialized
    /// seeds should ensure that the address is correct
    #[inline(always)]
    pub fn mint_metadata(
        &mut self,
        mint_metadata: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_metadata = Some(mint_metadata);
        self
    }

    #[inline(always)]
    pub fn curve_token_account(
        &mut self,
        curve_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.curve_token_account = Some(curve_token_account);
        self
    }

    #[inline(always)]
    pub fn config_account(
        &mut self,
        config_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config_account = Some(config_account);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn mpl_token_metadata(
        &mut self,
        mpl_token_metadata: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mpl_token_metadata = Some(mpl_token_metadata);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }

    #[inline(always)]
    pub fn symbol(&mut self, symbol: String) -> &mut Self {
        self.instruction.symbol = Some(symbol);
        self
    }

    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
    }

    #[inline(always)]
    pub fn decimals(&mut self, decimals: u8) -> &mut Self {
        self.instruction.decimals = Some(decimals);
        self
    }

    #[inline(always)]
    pub fn collateral_currency(&mut self, collateral_currency: u8) -> &mut Self {
        self.instruction.collateral_currency = Some(collateral_currency);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }

    #[inline(always)]
    pub fn curve_type(&mut self, curve_type: u8) -> &mut Self {
        self.instruction.curve_type = Some(curve_type);
        self
    }

    #[inline(always)]
    pub fn migration_target(&mut self, migration_target: u8) -> &mut Self {
        self.instruction.migration_target = Some(migration_target);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = TokenMintInstructionArgs {
            name: self.instruction.name.clone().expect("name is not set"),
            symbol: self.instruction.symbol.clone().expect("symbol is not set"),
            uri: self.instruction.uri.clone().expect("uri is not set"),
            decimals: self
                .instruction
                .decimals
                .clone()
                .expect("decimals is not set"),
            collateral_currency: self
                .instruction
                .collateral_currency
                .clone()
                .expect("collateral_currency is not set"),
            amount: self.instruction.amount.clone().expect("amount is not set"),
            curve_type: self
                .instruction
                .curve_type
                .clone()
                .expect("curve_type is not set"),
            migration_target: self
                .instruction
                .migration_target
                .clone()
                .expect("migration_target is not set"),
        };
        let instruction = TokenMintCpi {
            __program: self.instruction.__program,

            sender: self.instruction.sender.expect("sender is not set"),

            backend_authority: self
                .instruction
                .backend_authority
                .expect("backend_authority is not set"),

            curve_account: self
                .instruction
                .curve_account
                .expect("curve_account is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            mint_metadata: self
                .instruction
                .mint_metadata
                .expect("mint_metadata is not set"),

            curve_token_account: self
                .instruction
                .curve_token_account
                .expect("curve_token_account is not set"),

            config_account: self
                .instruction
                .config_account
                .expect("config_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            mpl_token_metadata: self
                .instruction
                .mpl_token_metadata
                .expect("mpl_token_metadata is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct TokenMintCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    sender: Option<&'b solana_account_info::AccountInfo<'a>>,
    backend_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    curve_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    mint_metadata: Option<&'b solana_account_info::AccountInfo<'a>>,
    curve_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    config_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    mpl_token_metadata: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    name: Option<String>,
    symbol: Option<String>,
    uri: Option<String>,
    decimals: Option<u8>,
    collateral_currency: Option<u8>,
    amount: Option<u64>,
    curve_type: Option<u8>,
    migration_target: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
