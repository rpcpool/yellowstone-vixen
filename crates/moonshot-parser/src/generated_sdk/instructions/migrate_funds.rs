//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct MigrateFunds {
    /// BE Authority
    pub backend_authority: solana_pubkey::Pubkey,
    /// Migration Authority
    /// Owner and Payer over Token Accounts, needs to be mutable
    pub migration_authority: solana_pubkey::Pubkey,
    /// Curve Account
    /// The account is closed after this instruction
    pub curve_account: solana_pubkey::Pubkey,
    /// Curve Token Account
    /// The account is closed after this instruction
    pub curve_token_account: solana_pubkey::Pubkey,
    /// Authority token Account
    /// Init on demand
    pub migration_authority_token_account: solana_pubkey::Pubkey,
    /// InterfaceAccount: checks program ownership + deserialize into Mint
    pub mint: solana_pubkey::Pubkey,

    pub dex_fee_account: solana_pubkey::Pubkey,

    pub helio_fee_account: solana_pubkey::Pubkey,

    pub config_account: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub associated_token_program: solana_pubkey::Pubkey,
}

impl MigrateFunds {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.backend_authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.migration_authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.curve_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.curve_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.migration_authority_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.mint, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.dex_fee_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.helio_fee_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.config_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&MigrateFundsInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::TOKEN_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateFundsInstructionData {
    discriminator: [u8; 8],
}

impl MigrateFundsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [42, 229, 10, 231, 189, 62, 193, 174],
        }
    }
}

impl Default for MigrateFundsInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `MigrateFunds`.
///
/// ### Accounts:
///
///   0. `[signer]` backend_authority
///   1. `[writable, signer]` migration_authority
///   2. `[writable]` curve_account
///   3. `[writable]` curve_token_account
///   4. `[writable]` migration_authority_token_account
///   5. `[writable]` mint
///   6. `[writable]` dex_fee_account
///   7. `[writable]` helio_fee_account
///   8. `[]` config_account
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   11. `[]` associated_token_program
#[derive(Clone, Debug, Default)]
pub struct MigrateFundsBuilder {
    backend_authority: Option<solana_pubkey::Pubkey>,
    migration_authority: Option<solana_pubkey::Pubkey>,
    curve_account: Option<solana_pubkey::Pubkey>,
    curve_token_account: Option<solana_pubkey::Pubkey>,
    migration_authority_token_account: Option<solana_pubkey::Pubkey>,
    mint: Option<solana_pubkey::Pubkey>,
    dex_fee_account: Option<solana_pubkey::Pubkey>,
    helio_fee_account: Option<solana_pubkey::Pubkey>,
    config_account: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    associated_token_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl MigrateFundsBuilder {
    pub fn new() -> Self { Self::default() }

    /// BE Authority
    #[inline(always)]
    pub fn backend_authority(&mut self, backend_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.backend_authority = Some(backend_authority);
        self
    }

    /// Migration Authority
    /// Owner and Payer over Token Accounts, needs to be mutable
    #[inline(always)]
    pub fn migration_authority(&mut self, migration_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.migration_authority = Some(migration_authority);
        self
    }

    /// Curve Account
    /// The account is closed after this instruction
    #[inline(always)]
    pub fn curve_account(&mut self, curve_account: solana_pubkey::Pubkey) -> &mut Self {
        self.curve_account = Some(curve_account);
        self
    }

    /// Curve Token Account
    /// The account is closed after this instruction
    #[inline(always)]
    pub fn curve_token_account(&mut self, curve_token_account: solana_pubkey::Pubkey) -> &mut Self {
        self.curve_token_account = Some(curve_token_account);
        self
    }

    /// Authority token Account
    /// Init on demand
    #[inline(always)]
    pub fn migration_authority_token_account(
        &mut self,
        migration_authority_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.migration_authority_token_account = Some(migration_authority_token_account);
        self
    }

    /// InterfaceAccount: checks program ownership + deserialize into Mint
    #[inline(always)]
    pub fn mint(&mut self, mint: solana_pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }

    #[inline(always)]
    pub fn dex_fee_account(&mut self, dex_fee_account: solana_pubkey::Pubkey) -> &mut Self {
        self.dex_fee_account = Some(dex_fee_account);
        self
    }

    #[inline(always)]
    pub fn helio_fee_account(&mut self, helio_fee_account: solana_pubkey::Pubkey) -> &mut Self {
        self.helio_fee_account = Some(helio_fee_account);
        self
    }

    #[inline(always)]
    pub fn config_account(&mut self, config_account: solana_pubkey::Pubkey) -> &mut Self {
        self.config_account = Some(config_account);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = MigrateFunds {
            backend_authority: self
                .backend_authority
                .expect("backend_authority is not set"),
            migration_authority: self
                .migration_authority
                .expect("migration_authority is not set"),
            curve_account: self.curve_account.expect("curve_account is not set"),
            curve_token_account: self
                .curve_token_account
                .expect("curve_token_account is not set"),
            migration_authority_token_account: self
                .migration_authority_token_account
                .expect("migration_authority_token_account is not set"),
            mint: self.mint.expect("mint is not set"),
            dex_fee_account: self.dex_fee_account.expect("dex_fee_account is not set"),
            helio_fee_account: self
                .helio_fee_account
                .expect("helio_fee_account is not set"),
            config_account: self.config_account.expect("config_account is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `migrate_funds` CPI accounts.
pub struct MigrateFundsCpiAccounts<'a, 'b> {
    /// BE Authority
    pub backend_authority: &'b solana_account_info::AccountInfo<'a>,
    /// Migration Authority
    /// Owner and Payer over Token Accounts, needs to be mutable
    pub migration_authority: &'b solana_account_info::AccountInfo<'a>,
    /// Curve Account
    /// The account is closed after this instruction
    pub curve_account: &'b solana_account_info::AccountInfo<'a>,
    /// Curve Token Account
    /// The account is closed after this instruction
    pub curve_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// Authority token Account
    /// Init on demand
    pub migration_authority_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// InterfaceAccount: checks program ownership + deserialize into Mint
    pub mint: &'b solana_account_info::AccountInfo<'a>,

    pub dex_fee_account: &'b solana_account_info::AccountInfo<'a>,

    pub helio_fee_account: &'b solana_account_info::AccountInfo<'a>,

    pub config_account: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `migrate_funds` CPI instruction.
pub struct MigrateFundsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// BE Authority
    pub backend_authority: &'b solana_account_info::AccountInfo<'a>,
    /// Migration Authority
    /// Owner and Payer over Token Accounts, needs to be mutable
    pub migration_authority: &'b solana_account_info::AccountInfo<'a>,
    /// Curve Account
    /// The account is closed after this instruction
    pub curve_account: &'b solana_account_info::AccountInfo<'a>,
    /// Curve Token Account
    /// The account is closed after this instruction
    pub curve_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// Authority token Account
    /// Init on demand
    pub migration_authority_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// InterfaceAccount: checks program ownership + deserialize into Mint
    pub mint: &'b solana_account_info::AccountInfo<'a>,

    pub dex_fee_account: &'b solana_account_info::AccountInfo<'a>,

    pub helio_fee_account: &'b solana_account_info::AccountInfo<'a>,

    pub config_account: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> MigrateFundsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: MigrateFundsCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            backend_authority: accounts.backend_authority,
            migration_authority: accounts.migration_authority,
            curve_account: accounts.curve_account,
            curve_token_account: accounts.curve_token_account,
            migration_authority_token_account: accounts.migration_authority_token_account,
            mint: accounts.mint,
            dex_fee_account: accounts.dex_fee_account,
            helio_fee_account: accounts.helio_fee_account,
            config_account: accounts.config_account,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.backend_authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.migration_authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.curve_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.curve_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.migration_authority_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.mint.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.dex_fee_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.helio_fee_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.config_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&MigrateFundsInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::TOKEN_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.backend_authority.clone());
        account_infos.push(self.migration_authority.clone());
        account_infos.push(self.curve_account.clone());
        account_infos.push(self.curve_token_account.clone());
        account_infos.push(self.migration_authority_token_account.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.dex_fee_account.clone());
        account_infos.push(self.helio_fee_account.clone());
        account_infos.push(self.config_account.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MigrateFunds` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` backend_authority
///   1. `[writable, signer]` migration_authority
///   2. `[writable]` curve_account
///   3. `[writable]` curve_token_account
///   4. `[writable]` migration_authority_token_account
///   5. `[writable]` mint
///   6. `[writable]` dex_fee_account
///   7. `[writable]` helio_fee_account
///   8. `[]` config_account
///   9. `[]` system_program
///   10. `[]` token_program
///   11. `[]` associated_token_program
#[derive(Clone, Debug)]
pub struct MigrateFundsCpiBuilder<'a, 'b> {
    instruction: Box<MigrateFundsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MigrateFundsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MigrateFundsCpiBuilderInstruction {
            __program: program,
            backend_authority: None,
            migration_authority: None,
            curve_account: None,
            curve_token_account: None,
            migration_authority_token_account: None,
            mint: None,
            dex_fee_account: None,
            helio_fee_account: None,
            config_account: None,
            system_program: None,
            token_program: None,
            associated_token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// BE Authority
    #[inline(always)]
    pub fn backend_authority(
        &mut self,
        backend_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.backend_authority = Some(backend_authority);
        self
    }

    /// Migration Authority
    /// Owner and Payer over Token Accounts, needs to be mutable
    #[inline(always)]
    pub fn migration_authority(
        &mut self,
        migration_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.migration_authority = Some(migration_authority);
        self
    }

    /// Curve Account
    /// The account is closed after this instruction
    #[inline(always)]
    pub fn curve_account(
        &mut self,
        curve_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.curve_account = Some(curve_account);
        self
    }

    /// Curve Token Account
    /// The account is closed after this instruction
    #[inline(always)]
    pub fn curve_token_account(
        &mut self,
        curve_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.curve_token_account = Some(curve_token_account);
        self
    }

    /// Authority token Account
    /// Init on demand
    #[inline(always)]
    pub fn migration_authority_token_account(
        &mut self,
        migration_authority_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.migration_authority_token_account =
            Some(migration_authority_token_account);
        self
    }

    /// InterfaceAccount: checks program ownership + deserialize into Mint
    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }

    #[inline(always)]
    pub fn dex_fee_account(
        &mut self,
        dex_fee_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dex_fee_account = Some(dex_fee_account);
        self
    }

    #[inline(always)]
    pub fn helio_fee_account(
        &mut self,
        helio_fee_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.helio_fee_account = Some(helio_fee_account);
        self
    }

    #[inline(always)]
    pub fn config_account(
        &mut self,
        config_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config_account = Some(config_account);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = MigrateFundsCpi {
            __program: self.instruction.__program,

            backend_authority: self
                .instruction
                .backend_authority
                .expect("backend_authority is not set"),

            migration_authority: self
                .instruction
                .migration_authority
                .expect("migration_authority is not set"),

            curve_account: self
                .instruction
                .curve_account
                .expect("curve_account is not set"),

            curve_token_account: self
                .instruction
                .curve_token_account
                .expect("curve_token_account is not set"),

            migration_authority_token_account: self
                .instruction
                .migration_authority_token_account
                .expect("migration_authority_token_account is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            dex_fee_account: self
                .instruction
                .dex_fee_account
                .expect("dex_fee_account is not set"),

            helio_fee_account: self
                .instruction
                .helio_fee_account
                .expect("helio_fee_account is not set"),

            config_account: self
                .instruction
                .config_account
                .expect("config_account is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MigrateFundsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    backend_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    migration_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    curve_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    curve_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    migration_authority_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    dex_fee_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    helio_fee_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    config_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
