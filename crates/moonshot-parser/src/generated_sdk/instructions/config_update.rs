//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::ConfigParams;

/// Accounts.
#[derive(Debug)]
pub struct ConfigUpdate {
    pub config_authority: solana_pubkey::Pubkey,

    pub config_account: solana_pubkey::Pubkey,
}

impl ConfigUpdate {
    pub fn instruction(
        &self,
        args: ConfigUpdateInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ConfigUpdateInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.config_authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.config_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&ConfigUpdateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::TOKEN_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConfigUpdateInstructionData {
    discriminator: [u8; 8],
}

impl ConfigUpdateInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [80, 37, 109, 136, 82, 135, 89, 241],
        }
    }
}

impl Default for ConfigUpdateInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ConfigUpdateInstructionArgs {
    pub data: ConfigParams,
}

/// Instruction builder for `ConfigUpdate`.
///
/// ### Accounts:
///
///   0. `[signer]` config_authority
///   1. `[writable]` config_account
#[derive(Clone, Debug, Default)]
pub struct ConfigUpdateBuilder {
    config_authority: Option<solana_pubkey::Pubkey>,
    config_account: Option<solana_pubkey::Pubkey>,
    data: Option<ConfigParams>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ConfigUpdateBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn config_authority(&mut self, config_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.config_authority = Some(config_authority);
        self
    }

    #[inline(always)]
    pub fn config_account(&mut self, config_account: solana_pubkey::Pubkey) -> &mut Self {
        self.config_account = Some(config_account);
        self
    }

    #[inline(always)]
    pub fn data(&mut self, data: ConfigParams) -> &mut Self {
        self.data = Some(data);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = ConfigUpdate {
            config_authority: self.config_authority.expect("config_authority is not set"),
            config_account: self.config_account.expect("config_account is not set"),
        };
        let args = ConfigUpdateInstructionArgs {
            data: self.data.clone().expect("data is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `config_update` CPI accounts.
pub struct ConfigUpdateCpiAccounts<'a, 'b> {
    pub config_authority: &'b solana_account_info::AccountInfo<'a>,

    pub config_account: &'b solana_account_info::AccountInfo<'a>,
}

/// `config_update` CPI instruction.
pub struct ConfigUpdateCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub config_authority: &'b solana_account_info::AccountInfo<'a>,

    pub config_account: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ConfigUpdateInstructionArgs,
}

impl<'a, 'b> ConfigUpdateCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: ConfigUpdateCpiAccounts<'a, 'b>,
        args: ConfigUpdateInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config_authority: accounts.config_authority,
            config_account: accounts.config_account,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.config_authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.config_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&ConfigUpdateInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::TOKEN_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config_authority.clone());
        account_infos.push(self.config_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ConfigUpdate` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` config_authority
///   1. `[writable]` config_account
#[derive(Clone, Debug)]
pub struct ConfigUpdateCpiBuilder<'a, 'b> {
    instruction: Box<ConfigUpdateCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ConfigUpdateCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ConfigUpdateCpiBuilderInstruction {
            __program: program,
            config_authority: None,
            config_account: None,
            data: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn config_authority(
        &mut self,
        config_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config_authority = Some(config_authority);
        self
    }

    #[inline(always)]
    pub fn config_account(
        &mut self,
        config_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config_account = Some(config_account);
        self
    }

    #[inline(always)]
    pub fn data(&mut self, data: ConfigParams) -> &mut Self {
        self.instruction.data = Some(data);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = ConfigUpdateInstructionArgs {
            data: self.instruction.data.clone().expect("data is not set"),
        };
        let instruction = ConfigUpdateCpi {
            __program: self.instruction.__program,

            config_authority: self
                .instruction
                .config_authority
                .expect("config_authority is not set"),

            config_account: self
                .instruction
                .config_account
                .expect("config_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ConfigUpdateCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    config_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    config_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    data: Option<ConfigParams>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
