//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CreateAmmConfig {
    pub owner: solana_pubkey::Pubkey,

    pub amm_config: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl CreateAmmConfig {
    pub fn instruction(
        &self,
        args: CreateAmmConfigInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateAmmConfigInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.owner, true));
        accounts.push(solana_instruction::AccountMeta::new(self.amm_config, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateAmmConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateAmmConfigInstructionData {
    discriminator: [u8; 8],
}

impl CreateAmmConfigInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [137, 52, 237, 212, 215, 117, 108, 104],
        }
    }
}

impl Default for CreateAmmConfigInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateAmmConfigInstructionArgs {
    pub index: u16,
    pub tick_spacing: u16,
    pub trade_fee_rate: u32,
    pub protocol_fee_rate: u32,
    pub fund_fee_rate: u32,
}

/// Instruction builder for `CreateAmmConfig`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` owner
///   1. `[writable]` amm_config
///   2. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateAmmConfigBuilder {
    owner: Option<solana_pubkey::Pubkey>,
    amm_config: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    index: Option<u16>,
    tick_spacing: Option<u16>,
    trade_fee_rate: Option<u32>,
    protocol_fee_rate: Option<u32>,
    fund_fee_rate: Option<u32>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateAmmConfigBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn amm_config(&mut self, amm_config: solana_pubkey::Pubkey) -> &mut Self {
        self.amm_config = Some(amm_config);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn index(&mut self, index: u16) -> &mut Self {
        self.index = Some(index);
        self
    }

    #[inline(always)]
    pub fn tick_spacing(&mut self, tick_spacing: u16) -> &mut Self {
        self.tick_spacing = Some(tick_spacing);
        self
    }

    #[inline(always)]
    pub fn trade_fee_rate(&mut self, trade_fee_rate: u32) -> &mut Self {
        self.trade_fee_rate = Some(trade_fee_rate);
        self
    }

    #[inline(always)]
    pub fn protocol_fee_rate(&mut self, protocol_fee_rate: u32) -> &mut Self {
        self.protocol_fee_rate = Some(protocol_fee_rate);
        self
    }

    #[inline(always)]
    pub fn fund_fee_rate(&mut self, fund_fee_rate: u32) -> &mut Self {
        self.fund_fee_rate = Some(fund_fee_rate);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CreateAmmConfig {
            owner: self.owner.expect("owner is not set"),
            amm_config: self.amm_config.expect("amm_config is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = CreateAmmConfigInstructionArgs {
            index: self.index.clone().expect("index is not set"),
            tick_spacing: self.tick_spacing.clone().expect("tick_spacing is not set"),
            trade_fee_rate: self
                .trade_fee_rate
                .clone()
                .expect("trade_fee_rate is not set"),
            protocol_fee_rate: self
                .protocol_fee_rate
                .clone()
                .expect("protocol_fee_rate is not set"),
            fund_fee_rate: self
                .fund_fee_rate
                .clone()
                .expect("fund_fee_rate is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_amm_config` CPI accounts.
pub struct CreateAmmConfigCpiAccounts<'a, 'b> {
    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub amm_config: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `create_amm_config` CPI instruction.
pub struct CreateAmmConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub amm_config: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateAmmConfigInstructionArgs,
}

impl<'a, 'b> CreateAmmConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CreateAmmConfigCpiAccounts<'a, 'b>,
        args: CreateAmmConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            amm_config: accounts.amm_config,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.owner.key, true));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.amm_config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateAmmConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(4 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.amm_config.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateAmmConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` owner
///   1. `[writable]` amm_config
///   2. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateAmmConfigCpiBuilder<'a, 'b> {
    instruction: Box<CreateAmmConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateAmmConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateAmmConfigCpiBuilderInstruction {
            __program: program,
            owner: None,
            amm_config: None,
            system_program: None,
            index: None,
            tick_spacing: None,
            trade_fee_rate: None,
            protocol_fee_rate: None,
            fund_fee_rate: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn amm_config(
        &mut self,
        amm_config: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_config = Some(amm_config);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn index(&mut self, index: u16) -> &mut Self {
        self.instruction.index = Some(index);
        self
    }

    #[inline(always)]
    pub fn tick_spacing(&mut self, tick_spacing: u16) -> &mut Self {
        self.instruction.tick_spacing = Some(tick_spacing);
        self
    }

    #[inline(always)]
    pub fn trade_fee_rate(&mut self, trade_fee_rate: u32) -> &mut Self {
        self.instruction.trade_fee_rate = Some(trade_fee_rate);
        self
    }

    #[inline(always)]
    pub fn protocol_fee_rate(&mut self, protocol_fee_rate: u32) -> &mut Self {
        self.instruction.protocol_fee_rate = Some(protocol_fee_rate);
        self
    }

    #[inline(always)]
    pub fn fund_fee_rate(&mut self, fund_fee_rate: u32) -> &mut Self {
        self.instruction.fund_fee_rate = Some(fund_fee_rate);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = CreateAmmConfigInstructionArgs {
            index: self.instruction.index.clone().expect("index is not set"),
            tick_spacing: self
                .instruction
                .tick_spacing
                .clone()
                .expect("tick_spacing is not set"),
            trade_fee_rate: self
                .instruction
                .trade_fee_rate
                .clone()
                .expect("trade_fee_rate is not set"),
            protocol_fee_rate: self
                .instruction
                .protocol_fee_rate
                .clone()
                .expect("protocol_fee_rate is not set"),
            fund_fee_rate: self
                .instruction
                .fund_fee_rate
                .clone()
                .expect("fund_fee_rate is not set"),
        };
        let instruction = CreateAmmConfigCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            amm_config: self.instruction.amm_config.expect("amm_config is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateAmmConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    amm_config: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    index: Option<u16>,
    tick_spacing: Option<u16>,
    trade_fee_rate: Option<u32>,
    protocol_fee_rate: Option<u32>,
    fund_fee_rate: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
