//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CollectRemainingRewards {
    pub reward_funder: solana_pubkey::Pubkey,

    pub funder_token_account: solana_pubkey::Pubkey,

    pub pool_state: solana_pubkey::Pubkey,

    pub reward_token_vault: solana_pubkey::Pubkey,

    pub reward_vault_mint: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub token_program2022: solana_pubkey::Pubkey,

    pub memo_program: solana_pubkey::Pubkey,
}

impl CollectRemainingRewards {
    pub fn instruction(
        &self,
        args: CollectRemainingRewardsInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CollectRemainingRewardsInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.reward_funder,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.funder_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.pool_state, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.reward_token_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.reward_vault_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program2022,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.memo_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CollectRemainingRewardsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectRemainingRewardsInstructionData {
    discriminator: [u8; 8],
}

impl CollectRemainingRewardsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [18, 237, 166, 197, 34, 16, 213, 144],
        }
    }
}

impl Default for CollectRemainingRewardsInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectRemainingRewardsInstructionArgs {
    pub reward_index: u8,
}

/// Instruction builder for `CollectRemainingRewards`.
///
/// ### Accounts:
///
///   0. `[signer]` reward_funder
///   1. `[writable]` funder_token_account
///   2. `[writable]` pool_state
///   3. `[]` reward_token_vault
///   4. `[]` reward_vault_mint
///   5. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   6. `[]` token_program2022
///   7. `[]` memo_program
#[derive(Clone, Debug, Default)]
pub struct CollectRemainingRewardsBuilder {
    reward_funder: Option<solana_pubkey::Pubkey>,
    funder_token_account: Option<solana_pubkey::Pubkey>,
    pool_state: Option<solana_pubkey::Pubkey>,
    reward_token_vault: Option<solana_pubkey::Pubkey>,
    reward_vault_mint: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    token_program2022: Option<solana_pubkey::Pubkey>,
    memo_program: Option<solana_pubkey::Pubkey>,
    reward_index: Option<u8>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CollectRemainingRewardsBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn reward_funder(&mut self, reward_funder: solana_pubkey::Pubkey) -> &mut Self {
        self.reward_funder = Some(reward_funder);
        self
    }

    #[inline(always)]
    pub fn funder_token_account(
        &mut self,
        funder_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.funder_token_account = Some(funder_token_account);
        self
    }

    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn reward_token_vault(&mut self, reward_token_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.reward_token_vault = Some(reward_token_vault);
        self
    }

    #[inline(always)]
    pub fn reward_vault_mint(&mut self, reward_vault_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.reward_vault_mint = Some(reward_vault_mint);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn token_program2022(&mut self, token_program2022: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program2022 = Some(token_program2022);
        self
    }

    #[inline(always)]
    pub fn memo_program(&mut self, memo_program: solana_pubkey::Pubkey) -> &mut Self {
        self.memo_program = Some(memo_program);
        self
    }

    #[inline(always)]
    pub fn reward_index(&mut self, reward_index: u8) -> &mut Self {
        self.reward_index = Some(reward_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CollectRemainingRewards {
            reward_funder: self.reward_funder.expect("reward_funder is not set"),
            funder_token_account: self
                .funder_token_account
                .expect("funder_token_account is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            reward_token_vault: self
                .reward_token_vault
                .expect("reward_token_vault is not set"),
            reward_vault_mint: self
                .reward_vault_mint
                .expect("reward_vault_mint is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token_program2022: self
                .token_program2022
                .expect("token_program2022 is not set"),
            memo_program: self.memo_program.expect("memo_program is not set"),
        };
        let args = CollectRemainingRewardsInstructionArgs {
            reward_index: self.reward_index.clone().expect("reward_index is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `collect_remaining_rewards` CPI accounts.
pub struct CollectRemainingRewardsCpiAccounts<'a, 'b> {
    pub reward_funder: &'b solana_account_info::AccountInfo<'a>,

    pub funder_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_account_info::AccountInfo<'a>,

    pub reward_token_vault: &'b solana_account_info::AccountInfo<'a>,

    pub reward_vault_mint: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program2022: &'b solana_account_info::AccountInfo<'a>,

    pub memo_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `collect_remaining_rewards` CPI instruction.
pub struct CollectRemainingRewardsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub reward_funder: &'b solana_account_info::AccountInfo<'a>,

    pub funder_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_account_info::AccountInfo<'a>,

    pub reward_token_vault: &'b solana_account_info::AccountInfo<'a>,

    pub reward_vault_mint: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program2022: &'b solana_account_info::AccountInfo<'a>,

    pub memo_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CollectRemainingRewardsInstructionArgs,
}

impl<'a, 'b> CollectRemainingRewardsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CollectRemainingRewardsCpiAccounts<'a, 'b>,
        args: CollectRemainingRewardsInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            reward_funder: accounts.reward_funder,
            funder_token_account: accounts.funder_token_account,
            pool_state: accounts.pool_state,
            reward_token_vault: accounts.reward_token_vault,
            reward_vault_mint: accounts.reward_vault_mint,
            token_program: accounts.token_program,
            token_program2022: accounts.token_program2022,
            memo_program: accounts.memo_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.reward_funder.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.funder_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.reward_token_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.reward_vault_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program2022.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.memo_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CollectRemainingRewardsInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.reward_funder.clone());
        account_infos.push(self.funder_token_account.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.reward_token_vault.clone());
        account_infos.push(self.reward_vault_mint.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_program2022.clone());
        account_infos.push(self.memo_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CollectRemainingRewards` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` reward_funder
///   1. `[writable]` funder_token_account
///   2. `[writable]` pool_state
///   3. `[]` reward_token_vault
///   4. `[]` reward_vault_mint
///   5. `[]` token_program
///   6. `[]` token_program2022
///   7. `[]` memo_program
#[derive(Clone, Debug)]
pub struct CollectRemainingRewardsCpiBuilder<'a, 'b> {
    instruction: Box<CollectRemainingRewardsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CollectRemainingRewardsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CollectRemainingRewardsCpiBuilderInstruction {
            __program: program,
            reward_funder: None,
            funder_token_account: None,
            pool_state: None,
            reward_token_vault: None,
            reward_vault_mint: None,
            token_program: None,
            token_program2022: None,
            memo_program: None,
            reward_index: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn reward_funder(
        &mut self,
        reward_funder: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward_funder = Some(reward_funder);
        self
    }

    #[inline(always)]
    pub fn funder_token_account(
        &mut self,
        funder_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.funder_token_account = Some(funder_token_account);
        self
    }

    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn reward_token_vault(
        &mut self,
        reward_token_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward_token_vault = Some(reward_token_vault);
        self
    }

    #[inline(always)]
    pub fn reward_vault_mint(
        &mut self,
        reward_vault_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.reward_vault_mint = Some(reward_vault_mint);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program2022 = Some(token_program2022);
        self
    }

    #[inline(always)]
    pub fn memo_program(
        &mut self,
        memo_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.memo_program = Some(memo_program);
        self
    }

    #[inline(always)]
    pub fn reward_index(&mut self, reward_index: u8) -> &mut Self {
        self.instruction.reward_index = Some(reward_index);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = CollectRemainingRewardsInstructionArgs {
            reward_index: self
                .instruction
                .reward_index
                .clone()
                .expect("reward_index is not set"),
        };
        let instruction = CollectRemainingRewardsCpi {
            __program: self.instruction.__program,

            reward_funder: self
                .instruction
                .reward_funder
                .expect("reward_funder is not set"),

            funder_token_account: self
                .instruction
                .funder_token_account
                .expect("funder_token_account is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            reward_token_vault: self
                .instruction
                .reward_token_vault
                .expect("reward_token_vault is not set"),

            reward_vault_mint: self
                .instruction
                .reward_vault_mint
                .expect("reward_vault_mint is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_program2022: self
                .instruction
                .token_program2022
                .expect("token_program2022 is not set"),

            memo_program: self
                .instruction
                .memo_program
                .expect("memo_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CollectRemainingRewardsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    reward_funder: Option<&'b solana_account_info::AccountInfo<'a>>,
    funder_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    reward_token_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    reward_vault_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program2022: Option<&'b solana_account_info::AccountInfo<'a>>,
    memo_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    reward_index: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
