//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct ClosePosition {
    pub nft_owner: solana_pubkey::Pubkey,

    pub position_nft_mint: solana_pubkey::Pubkey,

    pub position_nft_account: solana_pubkey::Pubkey,

    pub personal_position: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,
}

impl ClosePosition {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.nft_owner, true));
        accounts.push(solana_instruction::AccountMeta::new(
            self.position_nft_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.position_nft_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.personal_position,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ClosePositionInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClosePositionInstructionData {
    discriminator: [u8; 8],
}

impl ClosePositionInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [123, 134, 81, 0, 49, 68, 98, 98],
        }
    }
}

impl Default for ClosePositionInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `ClosePosition`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` nft_owner
///   1. `[writable]` position_nft_mint
///   2. `[writable]` position_nft_account
///   3. `[writable]` personal_position
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   5. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct ClosePositionBuilder {
    nft_owner: Option<solana_pubkey::Pubkey>,
    position_nft_mint: Option<solana_pubkey::Pubkey>,
    position_nft_account: Option<solana_pubkey::Pubkey>,
    personal_position: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ClosePositionBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn nft_owner(&mut self, nft_owner: solana_pubkey::Pubkey) -> &mut Self {
        self.nft_owner = Some(nft_owner);
        self
    }

    #[inline(always)]
    pub fn position_nft_mint(&mut self, position_nft_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.position_nft_mint = Some(position_nft_mint);
        self
    }

    #[inline(always)]
    pub fn position_nft_account(
        &mut self,
        position_nft_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.position_nft_account = Some(position_nft_account);
        self
    }

    #[inline(always)]
    pub fn personal_position(&mut self, personal_position: solana_pubkey::Pubkey) -> &mut Self {
        self.personal_position = Some(personal_position);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = ClosePosition {
            nft_owner: self.nft_owner.expect("nft_owner is not set"),
            position_nft_mint: self
                .position_nft_mint
                .expect("position_nft_mint is not set"),
            position_nft_account: self
                .position_nft_account
                .expect("position_nft_account is not set"),
            personal_position: self
                .personal_position
                .expect("personal_position is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `close_position` CPI accounts.
pub struct ClosePositionCpiAccounts<'a, 'b> {
    pub nft_owner: &'b solana_account_info::AccountInfo<'a>,

    pub position_nft_mint: &'b solana_account_info::AccountInfo<'a>,

    pub position_nft_account: &'b solana_account_info::AccountInfo<'a>,

    pub personal_position: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `close_position` CPI instruction.
pub struct ClosePositionCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub nft_owner: &'b solana_account_info::AccountInfo<'a>,

    pub position_nft_mint: &'b solana_account_info::AccountInfo<'a>,

    pub position_nft_account: &'b solana_account_info::AccountInfo<'a>,

    pub personal_position: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> ClosePositionCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: ClosePositionCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            nft_owner: accounts.nft_owner,
            position_nft_mint: accounts.position_nft_mint,
            position_nft_account: accounts.position_nft_account,
            personal_position: accounts.personal_position,
            system_program: accounts.system_program,
            token_program: accounts.token_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.nft_owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.position_nft_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.position_nft_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.personal_position.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ClosePositionInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.nft_owner.clone());
        account_infos.push(self.position_nft_mint.clone());
        account_infos.push(self.position_nft_account.clone());
        account_infos.push(self.personal_position.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ClosePosition` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` nft_owner
///   1. `[writable]` position_nft_mint
///   2. `[writable]` position_nft_account
///   3. `[writable]` personal_position
///   4. `[]` system_program
///   5. `[]` token_program
#[derive(Clone, Debug)]
pub struct ClosePositionCpiBuilder<'a, 'b> {
    instruction: Box<ClosePositionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClosePositionCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ClosePositionCpiBuilderInstruction {
            __program: program,
            nft_owner: None,
            position_nft_mint: None,
            position_nft_account: None,
            personal_position: None,
            system_program: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn nft_owner(&mut self, nft_owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.nft_owner = Some(nft_owner);
        self
    }

    #[inline(always)]
    pub fn position_nft_mint(
        &mut self,
        position_nft_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_nft_mint = Some(position_nft_mint);
        self
    }

    #[inline(always)]
    pub fn position_nft_account(
        &mut self,
        position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_nft_account = Some(position_nft_account);
        self
    }

    #[inline(always)]
    pub fn personal_position(
        &mut self,
        personal_position: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.personal_position = Some(personal_position);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = ClosePositionCpi {
            __program: self.instruction.__program,

            nft_owner: self.instruction.nft_owner.expect("nft_owner is not set"),

            position_nft_mint: self
                .instruction
                .position_nft_mint
                .expect("position_nft_mint is not set"),

            position_nft_account: self
                .instruction
                .position_nft_account
                .expect("position_nft_account is not set"),

            personal_position: self
                .instruction
                .personal_position
                .expect("personal_position is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ClosePositionCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    nft_owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    position_nft_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    position_nft_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    personal_position: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
