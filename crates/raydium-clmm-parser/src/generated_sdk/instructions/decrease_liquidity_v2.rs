//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct DecreaseLiquidityV2 {
    pub nft_owner: solana_pubkey::Pubkey,

    pub nft_account: solana_pubkey::Pubkey,

    pub personal_position: solana_pubkey::Pubkey,

    pub pool_state: solana_pubkey::Pubkey,

    pub protocol_position: solana_pubkey::Pubkey,

    pub token_vault0: solana_pubkey::Pubkey,

    pub token_vault1: solana_pubkey::Pubkey,

    pub tick_array_lower: solana_pubkey::Pubkey,

    pub tick_array_upper: solana_pubkey::Pubkey,

    pub recipient_token_account0: solana_pubkey::Pubkey,

    pub recipient_token_account1: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub token_program2022: solana_pubkey::Pubkey,

    pub memo_program: solana_pubkey::Pubkey,

    pub vault0_mint: solana_pubkey::Pubkey,

    pub vault1_mint: solana_pubkey::Pubkey,
}

impl DecreaseLiquidityV2 {
    pub fn instruction(
        &self,
        args: DecreaseLiquidityV2InstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: DecreaseLiquidityV2InstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.nft_owner,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.nft_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.personal_position,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.pool_state, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.protocol_position,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token_vault0,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token_vault1,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tick_array_lower,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.tick_array_upper,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.recipient_token_account0,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.recipient_token_account1,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program2022,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.memo_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault0_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault1_mint,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&DecreaseLiquidityV2InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DecreaseLiquidityV2InstructionData {
    discriminator: [u8; 8],
}

impl DecreaseLiquidityV2InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [58, 127, 188, 62, 79, 82, 196, 96],
        }
    }
}

impl Default for DecreaseLiquidityV2InstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct DecreaseLiquidityV2InstructionArgs {
    pub liquidity: u128,
    pub amount0_min: u64,
    pub amount1_min: u64,
}

/// Instruction builder for `DecreaseLiquidityV2`.
///
/// ### Accounts:
///
///   0. `[signer]` nft_owner
///   1. `[]` nft_account
///   2. `[writable]` personal_position
///   3. `[writable]` pool_state
///   4. `[writable]` protocol_position
///   5. `[writable]` token_vault0
///   6. `[writable]` token_vault1
///   7. `[writable]` tick_array_lower
///   8. `[writable]` tick_array_upper
///   9. `[writable]` recipient_token_account0
///   10. `[writable]` recipient_token_account1
///   11. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[]` token_program2022
///   13. `[]` memo_program
///   14. `[]` vault0_mint
///   15. `[]` vault1_mint
#[derive(Clone, Debug, Default)]
pub struct DecreaseLiquidityV2Builder {
    nft_owner: Option<solana_pubkey::Pubkey>,
    nft_account: Option<solana_pubkey::Pubkey>,
    personal_position: Option<solana_pubkey::Pubkey>,
    pool_state: Option<solana_pubkey::Pubkey>,
    protocol_position: Option<solana_pubkey::Pubkey>,
    token_vault0: Option<solana_pubkey::Pubkey>,
    token_vault1: Option<solana_pubkey::Pubkey>,
    tick_array_lower: Option<solana_pubkey::Pubkey>,
    tick_array_upper: Option<solana_pubkey::Pubkey>,
    recipient_token_account0: Option<solana_pubkey::Pubkey>,
    recipient_token_account1: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    token_program2022: Option<solana_pubkey::Pubkey>,
    memo_program: Option<solana_pubkey::Pubkey>,
    vault0_mint: Option<solana_pubkey::Pubkey>,
    vault1_mint: Option<solana_pubkey::Pubkey>,
    liquidity: Option<u128>,
    amount0_min: Option<u64>,
    amount1_min: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl DecreaseLiquidityV2Builder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn nft_owner(&mut self, nft_owner: solana_pubkey::Pubkey) -> &mut Self {
        self.nft_owner = Some(nft_owner);
        self
    }

    #[inline(always)]
    pub fn nft_account(&mut self, nft_account: solana_pubkey::Pubkey) -> &mut Self {
        self.nft_account = Some(nft_account);
        self
    }

    #[inline(always)]
    pub fn personal_position(&mut self, personal_position: solana_pubkey::Pubkey) -> &mut Self {
        self.personal_position = Some(personal_position);
        self
    }

    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn protocol_position(&mut self, protocol_position: solana_pubkey::Pubkey) -> &mut Self {
        self.protocol_position = Some(protocol_position);
        self
    }

    #[inline(always)]
    pub fn token_vault0(&mut self, token_vault0: solana_pubkey::Pubkey) -> &mut Self {
        self.token_vault0 = Some(token_vault0);
        self
    }

    #[inline(always)]
    pub fn token_vault1(&mut self, token_vault1: solana_pubkey::Pubkey) -> &mut Self {
        self.token_vault1 = Some(token_vault1);
        self
    }

    #[inline(always)]
    pub fn tick_array_lower(&mut self, tick_array_lower: solana_pubkey::Pubkey) -> &mut Self {
        self.tick_array_lower = Some(tick_array_lower);
        self
    }

    #[inline(always)]
    pub fn tick_array_upper(&mut self, tick_array_upper: solana_pubkey::Pubkey) -> &mut Self {
        self.tick_array_upper = Some(tick_array_upper);
        self
    }

    #[inline(always)]
    pub fn recipient_token_account0(
        &mut self,
        recipient_token_account0: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token_account0 = Some(recipient_token_account0);
        self
    }

    #[inline(always)]
    pub fn recipient_token_account1(
        &mut self,
        recipient_token_account1: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token_account1 = Some(recipient_token_account1);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn token_program2022(&mut self, token_program2022: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program2022 = Some(token_program2022);
        self
    }

    #[inline(always)]
    pub fn memo_program(&mut self, memo_program: solana_pubkey::Pubkey) -> &mut Self {
        self.memo_program = Some(memo_program);
        self
    }

    #[inline(always)]
    pub fn vault0_mint(&mut self, vault0_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.vault0_mint = Some(vault0_mint);
        self
    }

    #[inline(always)]
    pub fn vault1_mint(&mut self, vault1_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.vault1_mint = Some(vault1_mint);
        self
    }

    #[inline(always)]
    pub fn liquidity(&mut self, liquidity: u128) -> &mut Self {
        self.liquidity = Some(liquidity);
        self
    }

    #[inline(always)]
    pub fn amount0_min(&mut self, amount0_min: u64) -> &mut Self {
        self.amount0_min = Some(amount0_min);
        self
    }

    #[inline(always)]
    pub fn amount1_min(&mut self, amount1_min: u64) -> &mut Self {
        self.amount1_min = Some(amount1_min);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = DecreaseLiquidityV2 {
            nft_owner: self.nft_owner.expect("nft_owner is not set"),
            nft_account: self.nft_account.expect("nft_account is not set"),
            personal_position: self
                .personal_position
                .expect("personal_position is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            protocol_position: self
                .protocol_position
                .expect("protocol_position is not set"),
            token_vault0: self.token_vault0.expect("token_vault0 is not set"),
            token_vault1: self.token_vault1.expect("token_vault1 is not set"),
            tick_array_lower: self.tick_array_lower.expect("tick_array_lower is not set"),
            tick_array_upper: self.tick_array_upper.expect("tick_array_upper is not set"),
            recipient_token_account0: self
                .recipient_token_account0
                .expect("recipient_token_account0 is not set"),
            recipient_token_account1: self
                .recipient_token_account1
                .expect("recipient_token_account1 is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token_program2022: self
                .token_program2022
                .expect("token_program2022 is not set"),
            memo_program: self.memo_program.expect("memo_program is not set"),
            vault0_mint: self.vault0_mint.expect("vault0_mint is not set"),
            vault1_mint: self.vault1_mint.expect("vault1_mint is not set"),
        };
        let args = DecreaseLiquidityV2InstructionArgs {
            liquidity: self.liquidity.clone().expect("liquidity is not set"),
            amount0_min: self.amount0_min.clone().expect("amount0_min is not set"),
            amount1_min: self.amount1_min.clone().expect("amount1_min is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `decrease_liquidity_v2` CPI accounts.
pub struct DecreaseLiquidityV2CpiAccounts<'a, 'b> {
    pub nft_owner: &'b solana_account_info::AccountInfo<'a>,

    pub nft_account: &'b solana_account_info::AccountInfo<'a>,

    pub personal_position: &'b solana_account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_account_info::AccountInfo<'a>,

    pub protocol_position: &'b solana_account_info::AccountInfo<'a>,

    pub token_vault0: &'b solana_account_info::AccountInfo<'a>,

    pub token_vault1: &'b solana_account_info::AccountInfo<'a>,

    pub tick_array_lower: &'b solana_account_info::AccountInfo<'a>,

    pub tick_array_upper: &'b solana_account_info::AccountInfo<'a>,

    pub recipient_token_account0: &'b solana_account_info::AccountInfo<'a>,

    pub recipient_token_account1: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program2022: &'b solana_account_info::AccountInfo<'a>,

    pub memo_program: &'b solana_account_info::AccountInfo<'a>,

    pub vault0_mint: &'b solana_account_info::AccountInfo<'a>,

    pub vault1_mint: &'b solana_account_info::AccountInfo<'a>,
}

/// `decrease_liquidity_v2` CPI instruction.
pub struct DecreaseLiquidityV2Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub nft_owner: &'b solana_account_info::AccountInfo<'a>,

    pub nft_account: &'b solana_account_info::AccountInfo<'a>,

    pub personal_position: &'b solana_account_info::AccountInfo<'a>,

    pub pool_state: &'b solana_account_info::AccountInfo<'a>,

    pub protocol_position: &'b solana_account_info::AccountInfo<'a>,

    pub token_vault0: &'b solana_account_info::AccountInfo<'a>,

    pub token_vault1: &'b solana_account_info::AccountInfo<'a>,

    pub tick_array_lower: &'b solana_account_info::AccountInfo<'a>,

    pub tick_array_upper: &'b solana_account_info::AccountInfo<'a>,

    pub recipient_token_account0: &'b solana_account_info::AccountInfo<'a>,

    pub recipient_token_account1: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub token_program2022: &'b solana_account_info::AccountInfo<'a>,

    pub memo_program: &'b solana_account_info::AccountInfo<'a>,

    pub vault0_mint: &'b solana_account_info::AccountInfo<'a>,

    pub vault1_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: DecreaseLiquidityV2InstructionArgs,
}

impl<'a, 'b> DecreaseLiquidityV2Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: DecreaseLiquidityV2CpiAccounts<'a, 'b>,
        args: DecreaseLiquidityV2InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            nft_owner: accounts.nft_owner,
            nft_account: accounts.nft_account,
            personal_position: accounts.personal_position,
            pool_state: accounts.pool_state,
            protocol_position: accounts.protocol_position,
            token_vault0: accounts.token_vault0,
            token_vault1: accounts.token_vault1,
            tick_array_lower: accounts.tick_array_lower,
            tick_array_upper: accounts.tick_array_upper,
            recipient_token_account0: accounts.recipient_token_account0,
            recipient_token_account1: accounts.recipient_token_account1,
            token_program: accounts.token_program,
            token_program2022: accounts.token_program2022,
            memo_program: accounts.memo_program,
            vault0_mint: accounts.vault0_mint,
            vault1_mint: accounts.vault1_mint,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(16 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.nft_owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.nft_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.personal_position.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.protocol_position.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_vault0.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_vault1.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tick_array_lower.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.tick_array_upper.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.recipient_token_account0.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.recipient_token_account1.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program2022.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.memo_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault0_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault1_mint.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&DecreaseLiquidityV2InstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::AMM_V3_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(17 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.nft_owner.clone());
        account_infos.push(self.nft_account.clone());
        account_infos.push(self.personal_position.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.protocol_position.clone());
        account_infos.push(self.token_vault0.clone());
        account_infos.push(self.token_vault1.clone());
        account_infos.push(self.tick_array_lower.clone());
        account_infos.push(self.tick_array_upper.clone());
        account_infos.push(self.recipient_token_account0.clone());
        account_infos.push(self.recipient_token_account1.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_program2022.clone());
        account_infos.push(self.memo_program.clone());
        account_infos.push(self.vault0_mint.clone());
        account_infos.push(self.vault1_mint.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `DecreaseLiquidityV2` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` nft_owner
///   1. `[]` nft_account
///   2. `[writable]` personal_position
///   3. `[writable]` pool_state
///   4. `[writable]` protocol_position
///   5. `[writable]` token_vault0
///   6. `[writable]` token_vault1
///   7. `[writable]` tick_array_lower
///   8. `[writable]` tick_array_upper
///   9. `[writable]` recipient_token_account0
///   10. `[writable]` recipient_token_account1
///   11. `[]` token_program
///   12. `[]` token_program2022
///   13. `[]` memo_program
///   14. `[]` vault0_mint
///   15. `[]` vault1_mint
#[derive(Clone, Debug)]
pub struct DecreaseLiquidityV2CpiBuilder<'a, 'b> {
    instruction: Box<DecreaseLiquidityV2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DecreaseLiquidityV2CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(DecreaseLiquidityV2CpiBuilderInstruction {
            __program: program,
            nft_owner: None,
            nft_account: None,
            personal_position: None,
            pool_state: None,
            protocol_position: None,
            token_vault0: None,
            token_vault1: None,
            tick_array_lower: None,
            tick_array_upper: None,
            recipient_token_account0: None,
            recipient_token_account1: None,
            token_program: None,
            token_program2022: None,
            memo_program: None,
            vault0_mint: None,
            vault1_mint: None,
            liquidity: None,
            amount0_min: None,
            amount1_min: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn nft_owner(&mut self, nft_owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.nft_owner = Some(nft_owner);
        self
    }

    #[inline(always)]
    pub fn nft_account(
        &mut self,
        nft_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.nft_account = Some(nft_account);
        self
    }

    #[inline(always)]
    pub fn personal_position(
        &mut self,
        personal_position: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.personal_position = Some(personal_position);
        self
    }

    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    #[inline(always)]
    pub fn protocol_position(
        &mut self,
        protocol_position: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_position = Some(protocol_position);
        self
    }

    #[inline(always)]
    pub fn token_vault0(
        &mut self,
        token_vault0: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_vault0 = Some(token_vault0);
        self
    }

    #[inline(always)]
    pub fn token_vault1(
        &mut self,
        token_vault1: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_vault1 = Some(token_vault1);
        self
    }

    #[inline(always)]
    pub fn tick_array_lower(
        &mut self,
        tick_array_lower: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tick_array_lower = Some(tick_array_lower);
        self
    }

    #[inline(always)]
    pub fn tick_array_upper(
        &mut self,
        tick_array_upper: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.tick_array_upper = Some(tick_array_upper);
        self
    }

    #[inline(always)]
    pub fn recipient_token_account0(
        &mut self,
        recipient_token_account0: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token_account0 = Some(recipient_token_account0);
        self
    }

    #[inline(always)]
    pub fn recipient_token_account1(
        &mut self,
        recipient_token_account1: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token_account1 = Some(recipient_token_account1);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program2022 = Some(token_program2022);
        self
    }

    #[inline(always)]
    pub fn memo_program(
        &mut self,
        memo_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.memo_program = Some(memo_program);
        self
    }

    #[inline(always)]
    pub fn vault0_mint(
        &mut self,
        vault0_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault0_mint = Some(vault0_mint);
        self
    }

    #[inline(always)]
    pub fn vault1_mint(
        &mut self,
        vault1_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault1_mint = Some(vault1_mint);
        self
    }

    #[inline(always)]
    pub fn liquidity(&mut self, liquidity: u128) -> &mut Self {
        self.instruction.liquidity = Some(liquidity);
        self
    }

    #[inline(always)]
    pub fn amount0_min(&mut self, amount0_min: u64) -> &mut Self {
        self.instruction.amount0_min = Some(amount0_min);
        self
    }

    #[inline(always)]
    pub fn amount1_min(&mut self, amount1_min: u64) -> &mut Self {
        self.instruction.amount1_min = Some(amount1_min);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = DecreaseLiquidityV2InstructionArgs {
            liquidity: self
                .instruction
                .liquidity
                .clone()
                .expect("liquidity is not set"),
            amount0_min: self
                .instruction
                .amount0_min
                .clone()
                .expect("amount0_min is not set"),
            amount1_min: self
                .instruction
                .amount1_min
                .clone()
                .expect("amount1_min is not set"),
        };
        let instruction = DecreaseLiquidityV2Cpi {
            __program: self.instruction.__program,

            nft_owner: self.instruction.nft_owner.expect("nft_owner is not set"),

            nft_account: self
                .instruction
                .nft_account
                .expect("nft_account is not set"),

            personal_position: self
                .instruction
                .personal_position
                .expect("personal_position is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            protocol_position: self
                .instruction
                .protocol_position
                .expect("protocol_position is not set"),

            token_vault0: self
                .instruction
                .token_vault0
                .expect("token_vault0 is not set"),

            token_vault1: self
                .instruction
                .token_vault1
                .expect("token_vault1 is not set"),

            tick_array_lower: self
                .instruction
                .tick_array_lower
                .expect("tick_array_lower is not set"),

            tick_array_upper: self
                .instruction
                .tick_array_upper
                .expect("tick_array_upper is not set"),

            recipient_token_account0: self
                .instruction
                .recipient_token_account0
                .expect("recipient_token_account0 is not set"),

            recipient_token_account1: self
                .instruction
                .recipient_token_account1
                .expect("recipient_token_account1 is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_program2022: self
                .instruction
                .token_program2022
                .expect("token_program2022 is not set"),

            memo_program: self
                .instruction
                .memo_program
                .expect("memo_program is not set"),

            vault0_mint: self
                .instruction
                .vault0_mint
                .expect("vault0_mint is not set"),

            vault1_mint: self
                .instruction
                .vault1_mint
                .expect("vault1_mint is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct DecreaseLiquidityV2CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    nft_owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    nft_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    personal_position: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    protocol_position: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_vault0: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_vault1: Option<&'b solana_account_info::AccountInfo<'a>>,
    tick_array_lower: Option<&'b solana_account_info::AccountInfo<'a>>,
    tick_array_upper: Option<&'b solana_account_info::AccountInfo<'a>>,
    recipient_token_account0: Option<&'b solana_account_info::AccountInfo<'a>>,
    recipient_token_account1: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program2022: Option<&'b solana_account_info::AccountInfo<'a>>,
    memo_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault0_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault1_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    liquidity: Option<u128>,
    amount0_min: Option<u64>,
    amount1_min: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
