//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{
        AmmConfig, ObservationState, OperationState, PersonalPositionState, PoolState,
        ProtocolPositionState, TickArrayBitmapExtension, TickArrayState,
    },
    ID,
};

/// AmmV3 Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum AmmV3ProgramState {
    AmmConfig(AmmConfig),
    OperationState(OperationState),
    ObservationState(ObservationState),
    PersonalPositionState(PersonalPositionState),
    PoolState(PoolState),
    ProtocolPositionState(ProtocolPositionState),
    TickArrayState(TickArrayState),
    TickArrayBitmapExtension(TickArrayBitmapExtension),
}

impl AmmV3ProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [218, 244, 33, 104, 203, 203, 43, 111] => Ok(AmmV3ProgramState::AmmConfig(
                AmmConfig::from_bytes(data_bytes)?,
            )),
            [19, 236, 58, 237, 81, 222, 183, 252] => Ok(AmmV3ProgramState::OperationState(
                OperationState::from_bytes(data_bytes)?,
            )),
            [122, 174, 197, 53, 129, 9, 165, 132] => Ok(AmmV3ProgramState::ObservationState(
                ObservationState::from_bytes(data_bytes)?,
            )),
            [70, 111, 150, 126, 230, 15, 25, 117] => Ok(AmmV3ProgramState::PersonalPositionState(
                PersonalPositionState::from_bytes(data_bytes)?,
            )),
            [247, 237, 227, 245, 215, 195, 222, 70] => Ok(AmmV3ProgramState::PoolState(
                PoolState::from_bytes(data_bytes)?,
            )),
            [100, 226, 145, 99, 146, 218, 160, 106] => {
                Ok(AmmV3ProgramState::ProtocolPositionState(
                    ProtocolPositionState::from_bytes(data_bytes)?,
                ))
            },
            [192, 155, 85, 205, 49, 249, 129, 42] => Ok(AmmV3ProgramState::TickArrayState(
                TickArrayState::from_bytes(data_bytes)?,
            )),
            [60, 150, 36, 219, 97, 128, 139, 153] => {
                Ok(AmmV3ProgramState::TickArrayBitmapExtension(
                    TickArrayBitmapExtension::from_bytes(data_bytes)?,
                ))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = AmmV3ProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "amm_v3::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        AmmV3ProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, AmmConfig, AmmV3ProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::AmmConfig> for AmmConfig {
        fn into_proto(self) -> proto_def::AmmConfig {
            proto_def::AmmConfig {
                bump: self.bump.into(),
                index: self.index.into(),
                owner: self.owner.to_string(),
                protocol_fee_rate: self.protocol_fee_rate,
                trade_fee_rate: self.trade_fee_rate,
                tick_spacing: self.tick_spacing.into(),
                fund_fee_rate: self.fund_fee_rate,
                padding_u32: self.padding_u32,
                fund_owner: self.fund_owner.to_string(),
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::OperationState;
    impl IntoProto<proto_def::OperationState> for OperationState {
        fn into_proto(self) -> proto_def::OperationState {
            proto_def::OperationState {
                bump: self.bump.into(),
                operation_owners: self
                    .operation_owners
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
                whitelist_mints: self
                    .whitelist_mints
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
            }
        }
    }
    use super::ObservationState;
    impl IntoProto<proto_def::ObservationState> for ObservationState {
        fn into_proto(self) -> proto_def::ObservationState {
            proto_def::ObservationState {
                initialized: self.initialized,
                recent_epoch: self.recent_epoch,
                observation_index: self.observation_index.into(),
                pool_id: self.pool_id.to_string(),
                observations: self
                    .observations
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::PersonalPositionState;
    impl IntoProto<proto_def::PersonalPositionState> for PersonalPositionState {
        fn into_proto(self) -> proto_def::PersonalPositionState {
            proto_def::PersonalPositionState {
                bump: self.bump.into_iter().map(|x| x.into()).collect(),
                nft_mint: self.nft_mint.to_string(),
                pool_id: self.pool_id.to_string(),
                tick_lower_index: self.tick_lower_index,
                tick_upper_index: self.tick_upper_index,
                liquidity: self.liquidity.to_string(),
                fee_growth_inside0_last_x64: self.fee_growth_inside0_last_x64.to_string(),
                fee_growth_inside1_last_x64: self.fee_growth_inside1_last_x64.to_string(),
                token_fees_owed0: self.token_fees_owed0,
                token_fees_owed1: self.token_fees_owed1,
                reward_infos: self
                    .reward_infos
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                recent_epoch: self.recent_epoch,
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::PoolState;
    impl IntoProto<proto_def::PoolState> for PoolState {
        fn into_proto(self) -> proto_def::PoolState {
            proto_def::PoolState {
                bump: self.bump.into_iter().map(|x| x.into()).collect(),
                amm_config: self.amm_config.to_string(),
                owner: self.owner.to_string(),
                token_mint0: self.token_mint0.to_string(),
                token_mint1: self.token_mint1.to_string(),
                token_vault0: self.token_vault0.to_string(),
                token_vault1: self.token_vault1.to_string(),
                observation_key: self.observation_key.to_string(),
                mint_decimals0: self.mint_decimals0.into(),
                mint_decimals1: self.mint_decimals1.into(),
                tick_spacing: self.tick_spacing.into(),
                liquidity: self.liquidity.to_string(),
                sqrt_price_x64: self.sqrt_price_x64.to_string(),
                tick_current: self.tick_current,
                padding3: self.padding3.into(),
                padding4: self.padding4.into(),
                fee_growth_global0_x64: self.fee_growth_global0_x64.to_string(),
                fee_growth_global1_x64: self.fee_growth_global1_x64.to_string(),
                protocol_fees_token0: self.protocol_fees_token0,
                protocol_fees_token1: self.protocol_fees_token1,
                swap_in_amount_token0: self.swap_in_amount_token0.to_string(),
                swap_out_amount_token1: self.swap_out_amount_token1.to_string(),
                swap_in_amount_token1: self.swap_in_amount_token1.to_string(),
                swap_out_amount_token0: self.swap_out_amount_token0.to_string(),
                status: self.status.into(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
                reward_infos: self
                    .reward_infos
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                tick_array_bitmap: self.tick_array_bitmap.to_vec(),
                total_fees_token0: self.total_fees_token0,
                total_fees_claimed_token0: self.total_fees_claimed_token0,
                total_fees_token1: self.total_fees_token1,
                total_fees_claimed_token1: self.total_fees_claimed_token1,
                fund_fees_token0: self.fund_fees_token0,
                fund_fees_token1: self.fund_fees_token1,
                open_time: self.open_time,
                recent_epoch: self.recent_epoch,
                padding1: self.padding1.to_vec(),
                padding2: self.padding2.to_vec(),
            }
        }
    }
    use super::ProtocolPositionState;
    impl IntoProto<proto_def::ProtocolPositionState> for ProtocolPositionState {
        fn into_proto(self) -> proto_def::ProtocolPositionState {
            proto_def::ProtocolPositionState {
                bump: self.bump.into(),
                pool_id: self.pool_id.to_string(),
                tick_lower_index: self.tick_lower_index,
                tick_upper_index: self.tick_upper_index,
                liquidity: self.liquidity.to_string(),
                fee_growth_inside0_last_x64: self.fee_growth_inside0_last_x64.to_string(),
                fee_growth_inside1_last_x64: self.fee_growth_inside1_last_x64.to_string(),
                token_fees_owed0: self.token_fees_owed0,
                token_fees_owed1: self.token_fees_owed1,
                reward_growth_inside: self
                    .reward_growth_inside
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
                recent_epoch: self.recent_epoch,
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::TickArrayState;
    impl IntoProto<proto_def::TickArrayState> for TickArrayState {
        fn into_proto(self) -> proto_def::TickArrayState {
            proto_def::TickArrayState {
                pool_id: self.pool_id.to_string(),
                start_tick_index: self.start_tick_index,
                ticks: self.ticks.into_iter().map(|x| x.into_proto()).collect(),
                initialized_tick_count: self.initialized_tick_count.into(),
                recent_epoch: self.recent_epoch,
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::TickArrayBitmapExtension;
    impl IntoProto<proto_def::TickArrayBitmapExtension> for TickArrayBitmapExtension {
        fn into_proto(self) -> proto_def::TickArrayBitmapExtension {
            proto_def::TickArrayBitmapExtension {
                pool_id: self.pool_id.to_string(),
                positive_tick_array_bitmap: self
                    .positive_tick_array_bitmap
                    .into_iter()
                    .map(|x| proto_def::RepeatedUint64Row { rows: x.to_vec() })
                    .collect(),
                negative_tick_array_bitmap: self
                    .negative_tick_array_bitmap
                    .into_iter()
                    .map(|x| proto_def::RepeatedUint64Row { rows: x.to_vec() })
                    .collect(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for AmmV3ProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                AmmV3ProgramState::AmmConfig(data) => {
                    proto_def::program_state::StateOneof::AmmConfig(data.into_proto())
                },
                AmmV3ProgramState::OperationState(data) => {
                    proto_def::program_state::StateOneof::OperationState(data.into_proto())
                },
                AmmV3ProgramState::ObservationState(data) => {
                    proto_def::program_state::StateOneof::ObservationState(data.into_proto())
                },
                AmmV3ProgramState::PersonalPositionState(data) => {
                    proto_def::program_state::StateOneof::PersonalPositionState(data.into_proto())
                },
                AmmV3ProgramState::PoolState(data) => {
                    proto_def::program_state::StateOneof::PoolState(data.into_proto())
                },
                AmmV3ProgramState::ProtocolPositionState(data) => {
                    proto_def::program_state::StateOneof::ProtocolPositionState(data.into_proto())
                },
                AmmV3ProgramState::TickArrayState(data) => {
                    proto_def::program_state::StateOneof::TickArrayState(data.into_proto())
                },
                AmmV3ProgramState::TickArrayBitmapExtension(data) => {
                    proto_def::program_state::StateOneof::TickArrayBitmapExtension(
                        data.into_proto(),
                    )
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
