//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

pub const COLLECT_CREATOR_FEE_DISCRIMINATOR: [u8; 8] = [20, 22, 86, 123, 198, 28, 219, 132];

/// Accounts.
#[derive(Debug)]
pub struct CollectCreatorFee {
    /// Only pool creator can collect fee
    pub creator: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,
    /// Pool state stores accumulated protocol fee amount
    pub pool_state: solana_pubkey::Pubkey,
    /// Amm config account stores fund_owner
    pub amm_config: solana_pubkey::Pubkey,
    /// The address that holds pool tokens for token_0
    pub token0_vault: solana_pubkey::Pubkey,
    /// The address that holds pool tokens for token_1
    pub token1_vault: solana_pubkey::Pubkey,
    /// The mint of token_0 vault
    pub vault0_mint: solana_pubkey::Pubkey,
    /// The mint of token_1 vault
    pub vault1_mint: solana_pubkey::Pubkey,
    /// The address that receives the collected token_0 fund fees
    pub creator_token0: solana_pubkey::Pubkey,
    /// The address that receives the collected token_1 fund fees
    pub creator_token1: solana_pubkey::Pubkey,
    /// Spl token program or token program 2022
    pub token0_program: solana_pubkey::Pubkey,
    /// Spl token program or token program 2022
    pub token1_program: solana_pubkey::Pubkey,
    /// Program to create an ATA for receiving position NFT
    pub associated_token_program: solana_pubkey::Pubkey,
    /// To create a new program account
    pub system_program: solana_pubkey::Pubkey,
}

impl CollectCreatorFee {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.creator, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.pool_state, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.amm_config,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token0_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token1_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault0_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault1_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.creator_token0,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.creator_token1,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token0_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token1_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&CollectCreatorFeeInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::RAYDIUM_CP_SWAP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectCreatorFeeInstructionData {
    discriminator: [u8; 8],
}

impl CollectCreatorFeeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [20, 22, 86, 123, 198, 28, 219, 132],
        }
    }
}

impl Default for CollectCreatorFeeInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `CollectCreatorFee`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` creator
///   1. `[]` authority
///   2. `[writable]` pool_state
///   3. `[]` amm_config
///   4. `[writable]` token0_vault
///   5. `[writable]` token1_vault
///   6. `[]` vault0_mint
///   7. `[]` vault1_mint
///   8. `[writable]` creator_token0
///   9. `[writable]` creator_token1
///   10. `[]` token0_program
///   11. `[]` token1_program
///   12. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CollectCreatorFeeBuilder {
    creator: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    pool_state: Option<solana_pubkey::Pubkey>,
    amm_config: Option<solana_pubkey::Pubkey>,
    token0_vault: Option<solana_pubkey::Pubkey>,
    token1_vault: Option<solana_pubkey::Pubkey>,
    vault0_mint: Option<solana_pubkey::Pubkey>,
    vault1_mint: Option<solana_pubkey::Pubkey>,
    creator_token0: Option<solana_pubkey::Pubkey>,
    creator_token1: Option<solana_pubkey::Pubkey>,
    token0_program: Option<solana_pubkey::Pubkey>,
    token1_program: Option<solana_pubkey::Pubkey>,
    associated_token_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CollectCreatorFeeBuilder {
    pub fn new() -> Self { Self::default() }

    /// Only pool creator can collect fee
    #[inline(always)]
    pub fn creator(&mut self, creator: solana_pubkey::Pubkey) -> &mut Self {
        self.creator = Some(creator);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Pool state stores accumulated protocol fee amount
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// Amm config account stores fund_owner
    #[inline(always)]
    pub fn amm_config(&mut self, amm_config: solana_pubkey::Pubkey) -> &mut Self {
        self.amm_config = Some(amm_config);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(&mut self, token0_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(&mut self, token1_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.token1_vault = Some(token1_vault);
        self
    }

    /// The mint of token_0 vault
    #[inline(always)]
    pub fn vault0_mint(&mut self, vault0_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.vault0_mint = Some(vault0_mint);
        self
    }

    /// The mint of token_1 vault
    #[inline(always)]
    pub fn vault1_mint(&mut self, vault1_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.vault1_mint = Some(vault1_mint);
        self
    }

    /// The address that receives the collected token_0 fund fees
    #[inline(always)]
    pub fn creator_token0(&mut self, creator_token0: solana_pubkey::Pubkey) -> &mut Self {
        self.creator_token0 = Some(creator_token0);
        self
    }

    /// The address that receives the collected token_1 fund fees
    #[inline(always)]
    pub fn creator_token1(&mut self, creator_token1: solana_pubkey::Pubkey) -> &mut Self {
        self.creator_token1 = Some(creator_token1);
        self
    }

    /// Spl token program or token program 2022
    #[inline(always)]
    pub fn token0_program(&mut self, token0_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token0_program = Some(token0_program);
        self
    }

    /// Spl token program or token program 2022
    #[inline(always)]
    pub fn token1_program(&mut self, token1_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token1_program = Some(token1_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// Program to create an ATA for receiving position NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// To create a new program account
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CollectCreatorFee {
            creator: self.creator.expect("creator is not set"),
            authority: self.authority.expect("authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            amm_config: self.amm_config.expect("amm_config is not set"),
            token0_vault: self.token0_vault.expect("token0_vault is not set"),
            token1_vault: self.token1_vault.expect("token1_vault is not set"),
            vault0_mint: self.vault0_mint.expect("vault0_mint is not set"),
            vault1_mint: self.vault1_mint.expect("vault1_mint is not set"),
            creator_token0: self.creator_token0.expect("creator_token0 is not set"),
            creator_token1: self.creator_token1.expect("creator_token1 is not set"),
            token0_program: self.token0_program.expect("token0_program is not set"),
            token1_program: self.token1_program.expect("token1_program is not set"),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `collect_creator_fee` CPI accounts.
pub struct CollectCreatorFeeCpiAccounts<'a, 'b> {
    /// Only pool creator can collect fee
    pub creator: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Pool state stores accumulated protocol fee amount
    pub pool_state: &'b solana_account_info::AccountInfo<'a>,
    /// Amm config account stores fund_owner
    pub amm_config: &'b solana_account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of token_0 vault
    pub vault0_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of token_1 vault
    pub vault1_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected token_0 fund fees
    pub creator_token0: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected token_1 fund fees
    pub creator_token1: &'b solana_account_info::AccountInfo<'a>,
    /// Spl token program or token program 2022
    pub token0_program: &'b solana_account_info::AccountInfo<'a>,
    /// Spl token program or token program 2022
    pub token1_program: &'b solana_account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving position NFT
    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// To create a new program account
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `collect_creator_fee` CPI instruction.
pub struct CollectCreatorFeeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// Only pool creator can collect fee
    pub creator: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Pool state stores accumulated protocol fee amount
    pub pool_state: &'b solana_account_info::AccountInfo<'a>,
    /// Amm config account stores fund_owner
    pub amm_config: &'b solana_account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of token_0 vault
    pub vault0_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of token_1 vault
    pub vault1_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected token_0 fund fees
    pub creator_token0: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected token_1 fund fees
    pub creator_token1: &'b solana_account_info::AccountInfo<'a>,
    /// Spl token program or token program 2022
    pub token0_program: &'b solana_account_info::AccountInfo<'a>,
    /// Spl token program or token program 2022
    pub token1_program: &'b solana_account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving position NFT
    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// To create a new program account
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> CollectCreatorFeeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CollectCreatorFeeCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            creator: accounts.creator,
            authority: accounts.authority,
            pool_state: accounts.pool_state,
            amm_config: accounts.amm_config,
            token0_vault: accounts.token0_vault,
            token1_vault: accounts.token1_vault,
            vault0_mint: accounts.vault0_mint,
            vault1_mint: accounts.vault1_mint,
            creator_token0: accounts.creator_token0,
            creator_token1: accounts.creator_token1,
            token0_program: accounts.token0_program,
            token1_program: accounts.token1_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(14 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.creator.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.amm_config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token0_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token1_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault0_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault1_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.creator_token0.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.creator_token1.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token0_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token1_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&CollectCreatorFeeInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::RAYDIUM_CP_SWAP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(15 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.creator.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.amm_config.clone());
        account_infos.push(self.token0_vault.clone());
        account_infos.push(self.token1_vault.clone());
        account_infos.push(self.vault0_mint.clone());
        account_infos.push(self.vault1_mint.clone());
        account_infos.push(self.creator_token0.clone());
        account_infos.push(self.creator_token1.clone());
        account_infos.push(self.token0_program.clone());
        account_infos.push(self.token1_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CollectCreatorFee` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` creator
///   1. `[]` authority
///   2. `[writable]` pool_state
///   3. `[]` amm_config
///   4. `[writable]` token0_vault
///   5. `[writable]` token1_vault
///   6. `[]` vault0_mint
///   7. `[]` vault1_mint
///   8. `[writable]` creator_token0
///   9. `[writable]` creator_token1
///   10. `[]` token0_program
///   11. `[]` token1_program
///   12. `[]` associated_token_program
///   13. `[]` system_program
#[derive(Clone, Debug)]
pub struct CollectCreatorFeeCpiBuilder<'a, 'b> {
    instruction: Box<CollectCreatorFeeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CollectCreatorFeeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CollectCreatorFeeCpiBuilderInstruction {
            __program: program,
            creator: None,
            authority: None,
            pool_state: None,
            amm_config: None,
            token0_vault: None,
            token1_vault: None,
            vault0_mint: None,
            vault1_mint: None,
            creator_token0: None,
            creator_token1: None,
            token0_program: None,
            token1_program: None,
            associated_token_program: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Only pool creator can collect fee
    #[inline(always)]
    pub fn creator(&mut self, creator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.creator = Some(creator);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Pool state stores accumulated protocol fee amount
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// Amm config account stores fund_owner
    #[inline(always)]
    pub fn amm_config(
        &mut self,
        amm_config: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_config = Some(amm_config);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(
        &mut self,
        token0_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(
        &mut self,
        token1_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token1_vault = Some(token1_vault);
        self
    }

    /// The mint of token_0 vault
    #[inline(always)]
    pub fn vault0_mint(
        &mut self,
        vault0_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault0_mint = Some(vault0_mint);
        self
    }

    /// The mint of token_1 vault
    #[inline(always)]
    pub fn vault1_mint(
        &mut self,
        vault1_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault1_mint = Some(vault1_mint);
        self
    }

    /// The address that receives the collected token_0 fund fees
    #[inline(always)]
    pub fn creator_token0(
        &mut self,
        creator_token0: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.creator_token0 = Some(creator_token0);
        self
    }

    /// The address that receives the collected token_1 fund fees
    #[inline(always)]
    pub fn creator_token1(
        &mut self,
        creator_token1: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.creator_token1 = Some(creator_token1);
        self
    }

    /// Spl token program or token program 2022
    #[inline(always)]
    pub fn token0_program(
        &mut self,
        token0_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token0_program = Some(token0_program);
        self
    }

    /// Spl token program or token program 2022
    #[inline(always)]
    pub fn token1_program(
        &mut self,
        token1_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token1_program = Some(token1_program);
        self
    }

    /// Program to create an ATA for receiving position NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// To create a new program account
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = CollectCreatorFeeCpi {
            __program: self.instruction.__program,

            creator: self.instruction.creator.expect("creator is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            amm_config: self.instruction.amm_config.expect("amm_config is not set"),

            token0_vault: self
                .instruction
                .token0_vault
                .expect("token0_vault is not set"),

            token1_vault: self
                .instruction
                .token1_vault
                .expect("token1_vault is not set"),

            vault0_mint: self
                .instruction
                .vault0_mint
                .expect("vault0_mint is not set"),

            vault1_mint: self
                .instruction
                .vault1_mint
                .expect("vault1_mint is not set"),

            creator_token0: self
                .instruction
                .creator_token0
                .expect("creator_token0 is not set"),

            creator_token1: self
                .instruction
                .creator_token1
                .expect("creator_token1 is not set"),

            token0_program: self
                .instruction
                .token0_program
                .expect("token0_program is not set"),

            token1_program: self
                .instruction
                .token1_program
                .expect("token1_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CollectCreatorFeeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    creator: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    amm_config: Option<&'b solana_account_info::AccountInfo<'a>>,
    token0_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    token1_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault0_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault1_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    creator_token0: Option<&'b solana_account_info::AccountInfo<'a>>,
    creator_token1: Option<&'b solana_account_info::AccountInfo<'a>>,
    token0_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token1_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
