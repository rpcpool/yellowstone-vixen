//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct SwapBaseOutput {
    /// The user performing the swap
    pub payer: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,
    /// The factory state to read protocol fees
    pub amm_config: solana_pubkey::Pubkey,
    /// The program account of the pool in which the swap will be performed
    pub pool_state: solana_pubkey::Pubkey,
    /// The user token account for input token
    pub input_token_account: solana_pubkey::Pubkey,
    /// The user token account for output token
    pub output_token_account: solana_pubkey::Pubkey,
    /// The vault token account for input token
    pub input_vault: solana_pubkey::Pubkey,
    /// The vault token account for output token
    pub output_vault: solana_pubkey::Pubkey,
    /// SPL program for input token transfers
    pub input_token_program: solana_pubkey::Pubkey,
    /// SPL program for output token transfers
    pub output_token_program: solana_pubkey::Pubkey,
    /// The mint of input token
    pub input_token_mint: solana_pubkey::Pubkey,
    /// The mint of output token
    pub output_token_mint: solana_pubkey::Pubkey,
    /// The program account for the most recent oracle observation
    pub observation_state: solana_pubkey::Pubkey,
}

impl SwapBaseOutput {
    pub fn instruction(
        &self,
        args: SwapBaseOutputInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SwapBaseOutputInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.payer, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.amm_config,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.pool_state, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.input_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.output_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.input_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.output_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.input_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.output_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.input_token_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.output_token_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.observation_state,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SwapBaseOutputInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::RAYDIUM_CP_SWAP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapBaseOutputInstructionData {
    discriminator: [u8; 8],
}

impl SwapBaseOutputInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [55, 217, 98, 86, 163, 74, 180, 173],
        }
    }
}

impl Default for SwapBaseOutputInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapBaseOutputInstructionArgs {
    pub max_amount_in: u64,
    pub amount_out: u64,
}

/// Instruction builder for `SwapBaseOutput`.
///
/// ### Accounts:
///
///   0. `[signer]` payer
///   1. `[]` authority
///   2. `[]` amm_config
///   3. `[writable]` pool_state
///   4. `[writable]` input_token_account
///   5. `[writable]` output_token_account
///   6. `[writable]` input_vault
///   7. `[writable]` output_vault
///   8. `[]` input_token_program
///   9. `[]` output_token_program
///   10. `[]` input_token_mint
///   11. `[]` output_token_mint
///   12. `[writable]` observation_state
#[derive(Clone, Debug, Default)]
pub struct SwapBaseOutputBuilder {
    payer: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    amm_config: Option<solana_pubkey::Pubkey>,
    pool_state: Option<solana_pubkey::Pubkey>,
    input_token_account: Option<solana_pubkey::Pubkey>,
    output_token_account: Option<solana_pubkey::Pubkey>,
    input_vault: Option<solana_pubkey::Pubkey>,
    output_vault: Option<solana_pubkey::Pubkey>,
    input_token_program: Option<solana_pubkey::Pubkey>,
    output_token_program: Option<solana_pubkey::Pubkey>,
    input_token_mint: Option<solana_pubkey::Pubkey>,
    output_token_mint: Option<solana_pubkey::Pubkey>,
    observation_state: Option<solana_pubkey::Pubkey>,
    max_amount_in: Option<u64>,
    amount_out: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl SwapBaseOutputBuilder {
    pub fn new() -> Self { Self::default() }

    /// The user performing the swap
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// The factory state to read protocol fees
    #[inline(always)]
    pub fn amm_config(&mut self, amm_config: solana_pubkey::Pubkey) -> &mut Self {
        self.amm_config = Some(amm_config);
        self
    }

    /// The program account of the pool in which the swap will be performed
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// The user token account for input token
    #[inline(always)]
    pub fn input_token_account(&mut self, input_token_account: solana_pubkey::Pubkey) -> &mut Self {
        self.input_token_account = Some(input_token_account);
        self
    }

    /// The user token account for output token
    #[inline(always)]
    pub fn output_token_account(
        &mut self,
        output_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_account = Some(output_token_account);
        self
    }

    /// The vault token account for input token
    #[inline(always)]
    pub fn input_vault(&mut self, input_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.input_vault = Some(input_vault);
        self
    }

    /// The vault token account for output token
    #[inline(always)]
    pub fn output_vault(&mut self, output_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.output_vault = Some(output_vault);
        self
    }

    /// SPL program for input token transfers
    #[inline(always)]
    pub fn input_token_program(&mut self, input_token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.input_token_program = Some(input_token_program);
        self
    }

    /// SPL program for output token transfers
    #[inline(always)]
    pub fn output_token_program(
        &mut self,
        output_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_program = Some(output_token_program);
        self
    }

    /// The mint of input token
    #[inline(always)]
    pub fn input_token_mint(&mut self, input_token_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.input_token_mint = Some(input_token_mint);
        self
    }

    /// The mint of output token
    #[inline(always)]
    pub fn output_token_mint(&mut self, output_token_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.output_token_mint = Some(output_token_mint);
        self
    }

    /// The program account for the most recent oracle observation
    #[inline(always)]
    pub fn observation_state(&mut self, observation_state: solana_pubkey::Pubkey) -> &mut Self {
        self.observation_state = Some(observation_state);
        self
    }

    #[inline(always)]
    pub fn max_amount_in(&mut self, max_amount_in: u64) -> &mut Self {
        self.max_amount_in = Some(max_amount_in);
        self
    }

    #[inline(always)]
    pub fn amount_out(&mut self, amount_out: u64) -> &mut Self {
        self.amount_out = Some(amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = SwapBaseOutput {
            payer: self.payer.expect("payer is not set"),
            authority: self.authority.expect("authority is not set"),
            amm_config: self.amm_config.expect("amm_config is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            input_token_account: self
                .input_token_account
                .expect("input_token_account is not set"),
            output_token_account: self
                .output_token_account
                .expect("output_token_account is not set"),
            input_vault: self.input_vault.expect("input_vault is not set"),
            output_vault: self.output_vault.expect("output_vault is not set"),
            input_token_program: self
                .input_token_program
                .expect("input_token_program is not set"),
            output_token_program: self
                .output_token_program
                .expect("output_token_program is not set"),
            input_token_mint: self.input_token_mint.expect("input_token_mint is not set"),
            output_token_mint: self
                .output_token_mint
                .expect("output_token_mint is not set"),
            observation_state: self
                .observation_state
                .expect("observation_state is not set"),
        };
        let args = SwapBaseOutputInstructionArgs {
            max_amount_in: self
                .max_amount_in
                .clone()
                .expect("max_amount_in is not set"),
            amount_out: self.amount_out.clone().expect("amount_out is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `swap_base_output` CPI accounts.
pub struct SwapBaseOutputCpiAccounts<'a, 'b> {
    /// The user performing the swap
    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// The factory state to read protocol fees
    pub amm_config: &'b solana_account_info::AccountInfo<'a>,
    /// The program account of the pool in which the swap will be performed
    pub pool_state: &'b solana_account_info::AccountInfo<'a>,
    /// The user token account for input token
    pub input_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// The user token account for output token
    pub output_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// The vault token account for input token
    pub input_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The vault token account for output token
    pub output_vault: &'b solana_account_info::AccountInfo<'a>,
    /// SPL program for input token transfers
    pub input_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// SPL program for output token transfers
    pub output_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of input token
    pub input_token_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of output token
    pub output_token_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The program account for the most recent oracle observation
    pub observation_state: &'b solana_account_info::AccountInfo<'a>,
}

/// `swap_base_output` CPI instruction.
pub struct SwapBaseOutputCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// The user performing the swap
    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// The factory state to read protocol fees
    pub amm_config: &'b solana_account_info::AccountInfo<'a>,
    /// The program account of the pool in which the swap will be performed
    pub pool_state: &'b solana_account_info::AccountInfo<'a>,
    /// The user token account for input token
    pub input_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// The user token account for output token
    pub output_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// The vault token account for input token
    pub input_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The vault token account for output token
    pub output_vault: &'b solana_account_info::AccountInfo<'a>,
    /// SPL program for input token transfers
    pub input_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// SPL program for output token transfers
    pub output_token_program: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of input token
    pub input_token_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of output token
    pub output_token_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The program account for the most recent oracle observation
    pub observation_state: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SwapBaseOutputInstructionArgs,
}

impl<'a, 'b> SwapBaseOutputCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: SwapBaseOutputCpiAccounts<'a, 'b>,
        args: SwapBaseOutputInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            authority: accounts.authority,
            amm_config: accounts.amm_config,
            pool_state: accounts.pool_state,
            input_token_account: accounts.input_token_account,
            output_token_account: accounts.output_token_account,
            input_vault: accounts.input_vault,
            output_vault: accounts.output_vault,
            input_token_program: accounts.input_token_program,
            output_token_program: accounts.output_token_program,
            input_token_mint: accounts.input_token_mint,
            output_token_mint: accounts.output_token_mint,
            observation_state: accounts.observation_state,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(13 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.amm_config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.input_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.output_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.input_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.output_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.input_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.output_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.input_token_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.output_token_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.observation_state.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SwapBaseOutputInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::RAYDIUM_CP_SWAP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(14 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.amm_config.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.input_token_account.clone());
        account_infos.push(self.output_token_account.clone());
        account_infos.push(self.input_vault.clone());
        account_infos.push(self.output_vault.clone());
        account_infos.push(self.input_token_program.clone());
        account_infos.push(self.output_token_program.clone());
        account_infos.push(self.input_token_mint.clone());
        account_infos.push(self.output_token_mint.clone());
        account_infos.push(self.observation_state.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SwapBaseOutput` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` payer
///   1. `[]` authority
///   2. `[]` amm_config
///   3. `[writable]` pool_state
///   4. `[writable]` input_token_account
///   5. `[writable]` output_token_account
///   6. `[writable]` input_vault
///   7. `[writable]` output_vault
///   8. `[]` input_token_program
///   9. `[]` output_token_program
///   10. `[]` input_token_mint
///   11. `[]` output_token_mint
///   12. `[writable]` observation_state
#[derive(Clone, Debug)]
pub struct SwapBaseOutputCpiBuilder<'a, 'b> {
    instruction: Box<SwapBaseOutputCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SwapBaseOutputCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SwapBaseOutputCpiBuilderInstruction {
            __program: program,
            payer: None,
            authority: None,
            amm_config: None,
            pool_state: None,
            input_token_account: None,
            output_token_account: None,
            input_vault: None,
            output_vault: None,
            input_token_program: None,
            output_token_program: None,
            input_token_mint: None,
            output_token_mint: None,
            observation_state: None,
            max_amount_in: None,
            amount_out: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// The user performing the swap
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// The factory state to read protocol fees
    #[inline(always)]
    pub fn amm_config(
        &mut self,
        amm_config: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_config = Some(amm_config);
        self
    }

    /// The program account of the pool in which the swap will be performed
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// The user token account for input token
    #[inline(always)]
    pub fn input_token_account(
        &mut self,
        input_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_account = Some(input_token_account);
        self
    }

    /// The user token account for output token
    #[inline(always)]
    pub fn output_token_account(
        &mut self,
        output_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_account = Some(output_token_account);
        self
    }

    /// The vault token account for input token
    #[inline(always)]
    pub fn input_vault(
        &mut self,
        input_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_vault = Some(input_vault);
        self
    }

    /// The vault token account for output token
    #[inline(always)]
    pub fn output_vault(
        &mut self,
        output_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_vault = Some(output_vault);
        self
    }

    /// SPL program for input token transfers
    #[inline(always)]
    pub fn input_token_program(
        &mut self,
        input_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_program = Some(input_token_program);
        self
    }

    /// SPL program for output token transfers
    #[inline(always)]
    pub fn output_token_program(
        &mut self,
        output_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_program = Some(output_token_program);
        self
    }

    /// The mint of input token
    #[inline(always)]
    pub fn input_token_mint(
        &mut self,
        input_token_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_mint = Some(input_token_mint);
        self
    }

    /// The mint of output token
    #[inline(always)]
    pub fn output_token_mint(
        &mut self,
        output_token_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_mint = Some(output_token_mint);
        self
    }

    /// The program account for the most recent oracle observation
    #[inline(always)]
    pub fn observation_state(
        &mut self,
        observation_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.observation_state = Some(observation_state);
        self
    }

    #[inline(always)]
    pub fn max_amount_in(&mut self, max_amount_in: u64) -> &mut Self {
        self.instruction.max_amount_in = Some(max_amount_in);
        self
    }

    #[inline(always)]
    pub fn amount_out(&mut self, amount_out: u64) -> &mut Self {
        self.instruction.amount_out = Some(amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = SwapBaseOutputInstructionArgs {
            max_amount_in: self
                .instruction
                .max_amount_in
                .clone()
                .expect("max_amount_in is not set"),
            amount_out: self
                .instruction
                .amount_out
                .clone()
                .expect("amount_out is not set"),
        };
        let instruction = SwapBaseOutputCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            amm_config: self.instruction.amm_config.expect("amm_config is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            input_token_account: self
                .instruction
                .input_token_account
                .expect("input_token_account is not set"),

            output_token_account: self
                .instruction
                .output_token_account
                .expect("output_token_account is not set"),

            input_vault: self
                .instruction
                .input_vault
                .expect("input_vault is not set"),

            output_vault: self
                .instruction
                .output_vault
                .expect("output_vault is not set"),

            input_token_program: self
                .instruction
                .input_token_program
                .expect("input_token_program is not set"),

            output_token_program: self
                .instruction
                .output_token_program
                .expect("output_token_program is not set"),

            input_token_mint: self
                .instruction
                .input_token_mint
                .expect("input_token_mint is not set"),

            output_token_mint: self
                .instruction
                .output_token_mint
                .expect("output_token_mint is not set"),

            observation_state: self
                .instruction
                .observation_state
                .expect("observation_state is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SwapBaseOutputCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    amm_config: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    output_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    output_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    output_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    input_token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    output_token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    observation_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    max_amount_in: Option<u64>,
    amount_out: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
