//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CollectProtocolFee {
    /// Only admin or owner can collect fee now
    pub owner: solana_pubkey::Pubkey,

    pub authority: solana_pubkey::Pubkey,
    /// Pool state stores accumulated protocol fee amount
    pub pool_state: solana_pubkey::Pubkey,
    /// Amm config account stores owner
    pub amm_config: solana_pubkey::Pubkey,
    /// The address that holds pool tokens for token_0
    pub token0_vault: solana_pubkey::Pubkey,
    /// The address that holds pool tokens for token_1
    pub token1_vault: solana_pubkey::Pubkey,
    /// The mint of token_0 vault
    pub vault0_mint: solana_pubkey::Pubkey,
    /// The mint of token_1 vault
    pub vault1_mint: solana_pubkey::Pubkey,
    /// The address that receives the collected token_0 protocol fees
    pub recipient_token0_account: solana_pubkey::Pubkey,
    /// The address that receives the collected token_1 protocol fees
    pub recipient_token1_account: solana_pubkey::Pubkey,
    /// The SPL program to perform token transfers
    pub token_program: solana_pubkey::Pubkey,
    /// The SPL program 2022 to perform token transfers
    pub token_program2022: solana_pubkey::Pubkey,
}

impl CollectProtocolFee {
    pub fn instruction(
        &self,
        args: CollectProtocolFeeInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CollectProtocolFeeInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.pool_state, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.amm_config,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token0_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token1_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault0_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.vault1_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.recipient_token0_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.recipient_token1_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program2022,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CollectProtocolFeeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::RAYDIUM_CP_SWAP_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectProtocolFeeInstructionData {
    discriminator: [u8; 8],
}

impl CollectProtocolFeeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [136, 136, 252, 221, 194, 66, 126, 89],
        }
    }
}

impl Default for CollectProtocolFeeInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectProtocolFeeInstructionArgs {
    pub amount0_requested: u64,
    pub amount1_requested: u64,
}

/// Instruction builder for `CollectProtocolFee`.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[]` authority
///   2. `[writable]` pool_state
///   3. `[]` amm_config
///   4. `[writable]` token0_vault
///   5. `[writable]` token1_vault
///   6. `[]` vault0_mint
///   7. `[]` vault1_mint
///   8. `[writable]` recipient_token0_account
///   9. `[writable]` recipient_token1_account
///   10. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   11. `[]` token_program2022
#[derive(Clone, Debug, Default)]
pub struct CollectProtocolFeeBuilder {
    owner: Option<solana_pubkey::Pubkey>,
    authority: Option<solana_pubkey::Pubkey>,
    pool_state: Option<solana_pubkey::Pubkey>,
    amm_config: Option<solana_pubkey::Pubkey>,
    token0_vault: Option<solana_pubkey::Pubkey>,
    token1_vault: Option<solana_pubkey::Pubkey>,
    vault0_mint: Option<solana_pubkey::Pubkey>,
    vault1_mint: Option<solana_pubkey::Pubkey>,
    recipient_token0_account: Option<solana_pubkey::Pubkey>,
    recipient_token1_account: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    token_program2022: Option<solana_pubkey::Pubkey>,
    amount0_requested: Option<u64>,
    amount1_requested: Option<u64>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CollectProtocolFeeBuilder {
    pub fn new() -> Self { Self::default() }

    /// Only admin or owner can collect fee now
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Pool state stores accumulated protocol fee amount
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// Amm config account stores owner
    #[inline(always)]
    pub fn amm_config(&mut self, amm_config: solana_pubkey::Pubkey) -> &mut Self {
        self.amm_config = Some(amm_config);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(&mut self, token0_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(&mut self, token1_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.token1_vault = Some(token1_vault);
        self
    }

    /// The mint of token_0 vault
    #[inline(always)]
    pub fn vault0_mint(&mut self, vault0_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.vault0_mint = Some(vault0_mint);
        self
    }

    /// The mint of token_1 vault
    #[inline(always)]
    pub fn vault1_mint(&mut self, vault1_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.vault1_mint = Some(vault1_mint);
        self
    }

    /// The address that receives the collected token_0 protocol fees
    #[inline(always)]
    pub fn recipient_token0_account(
        &mut self,
        recipient_token0_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token0_account = Some(recipient_token0_account);
        self
    }

    /// The address that receives the collected token_1 protocol fees
    #[inline(always)]
    pub fn recipient_token1_account(
        &mut self,
        recipient_token1_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token1_account = Some(recipient_token1_account);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// The SPL program to perform token transfers
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// The SPL program 2022 to perform token transfers
    #[inline(always)]
    pub fn token_program2022(&mut self, token_program2022: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program2022 = Some(token_program2022);
        self
    }

    #[inline(always)]
    pub fn amount0_requested(&mut self, amount0_requested: u64) -> &mut Self {
        self.amount0_requested = Some(amount0_requested);
        self
    }

    #[inline(always)]
    pub fn amount1_requested(&mut self, amount1_requested: u64) -> &mut Self {
        self.amount1_requested = Some(amount1_requested);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = CollectProtocolFee {
            owner: self.owner.expect("owner is not set"),
            authority: self.authority.expect("authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            amm_config: self.amm_config.expect("amm_config is not set"),
            token0_vault: self.token0_vault.expect("token0_vault is not set"),
            token1_vault: self.token1_vault.expect("token1_vault is not set"),
            vault0_mint: self.vault0_mint.expect("vault0_mint is not set"),
            vault1_mint: self.vault1_mint.expect("vault1_mint is not set"),
            recipient_token0_account: self
                .recipient_token0_account
                .expect("recipient_token0_account is not set"),
            recipient_token1_account: self
                .recipient_token1_account
                .expect("recipient_token1_account is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            token_program2022: self
                .token_program2022
                .expect("token_program2022 is not set"),
        };
        let args = CollectProtocolFeeInstructionArgs {
            amount0_requested: self
                .amount0_requested
                .clone()
                .expect("amount0_requested is not set"),
            amount1_requested: self
                .amount1_requested
                .clone()
                .expect("amount1_requested is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `collect_protocol_fee` CPI accounts.
pub struct CollectProtocolFeeCpiAccounts<'a, 'b> {
    /// Only admin or owner can collect fee now
    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Pool state stores accumulated protocol fee amount
    pub pool_state: &'b solana_account_info::AccountInfo<'a>,
    /// Amm config account stores owner
    pub amm_config: &'b solana_account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of token_0 vault
    pub vault0_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of token_1 vault
    pub vault1_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected token_0 protocol fees
    pub recipient_token0_account: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected token_1 protocol fees
    pub recipient_token1_account: &'b solana_account_info::AccountInfo<'a>,
    /// The SPL program to perform token transfers
    pub token_program: &'b solana_account_info::AccountInfo<'a>,
    /// The SPL program 2022 to perform token transfers
    pub token_program2022: &'b solana_account_info::AccountInfo<'a>,
}

/// `collect_protocol_fee` CPI instruction.
pub struct CollectProtocolFeeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// Only admin or owner can collect fee now
    pub owner: &'b solana_account_info::AccountInfo<'a>,

    pub authority: &'b solana_account_info::AccountInfo<'a>,
    /// Pool state stores accumulated protocol fee amount
    pub pool_state: &'b solana_account_info::AccountInfo<'a>,
    /// Amm config account stores owner
    pub amm_config: &'b solana_account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_0
    pub token0_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for token_1
    pub token1_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of token_0 vault
    pub vault0_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of token_1 vault
    pub vault1_mint: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected token_0 protocol fees
    pub recipient_token0_account: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected token_1 protocol fees
    pub recipient_token1_account: &'b solana_account_info::AccountInfo<'a>,
    /// The SPL program to perform token transfers
    pub token_program: &'b solana_account_info::AccountInfo<'a>,
    /// The SPL program 2022 to perform token transfers
    pub token_program2022: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CollectProtocolFeeInstructionArgs,
}

impl<'a, 'b> CollectProtocolFeeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: CollectProtocolFeeCpiAccounts<'a, 'b>,
        args: CollectProtocolFeeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            authority: accounts.authority,
            pool_state: accounts.pool_state,
            amm_config: accounts.amm_config,
            token0_vault: accounts.token0_vault,
            token1_vault: accounts.token1_vault,
            vault0_mint: accounts.vault0_mint,
            vault1_mint: accounts.vault1_mint,
            recipient_token0_account: accounts.recipient_token0_account,
            recipient_token1_account: accounts.recipient_token1_account,
            token_program: accounts.token_program,
            token_program2022: accounts.token_program2022,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(12 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.amm_config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token0_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token1_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault0_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.vault1_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.recipient_token0_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.recipient_token1_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program2022.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CollectProtocolFeeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::RAYDIUM_CP_SWAP_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(13 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.amm_config.clone());
        account_infos.push(self.token0_vault.clone());
        account_infos.push(self.token1_vault.clone());
        account_infos.push(self.vault0_mint.clone());
        account_infos.push(self.vault1_mint.clone());
        account_infos.push(self.recipient_token0_account.clone());
        account_infos.push(self.recipient_token1_account.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.token_program2022.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CollectProtocolFee` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[]` authority
///   2. `[writable]` pool_state
///   3. `[]` amm_config
///   4. `[writable]` token0_vault
///   5. `[writable]` token1_vault
///   6. `[]` vault0_mint
///   7. `[]` vault1_mint
///   8. `[writable]` recipient_token0_account
///   9. `[writable]` recipient_token1_account
///   10. `[]` token_program
///   11. `[]` token_program2022
#[derive(Clone, Debug)]
pub struct CollectProtocolFeeCpiBuilder<'a, 'b> {
    instruction: Box<CollectProtocolFeeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CollectProtocolFeeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CollectProtocolFeeCpiBuilderInstruction {
            __program: program,
            owner: None,
            authority: None,
            pool_state: None,
            amm_config: None,
            token0_vault: None,
            token1_vault: None,
            vault0_mint: None,
            vault1_mint: None,
            recipient_token0_account: None,
            recipient_token1_account: None,
            token_program: None,
            token_program2022: None,
            amount0_requested: None,
            amount1_requested: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Only admin or owner can collect fee now
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Pool state stores accumulated protocol fee amount
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// Amm config account stores owner
    #[inline(always)]
    pub fn amm_config(
        &mut self,
        amm_config: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_config = Some(amm_config);
        self
    }

    /// The address that holds pool tokens for token_0
    #[inline(always)]
    pub fn token0_vault(
        &mut self,
        token0_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token0_vault = Some(token0_vault);
        self
    }

    /// The address that holds pool tokens for token_1
    #[inline(always)]
    pub fn token1_vault(
        &mut self,
        token1_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token1_vault = Some(token1_vault);
        self
    }

    /// The mint of token_0 vault
    #[inline(always)]
    pub fn vault0_mint(
        &mut self,
        vault0_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault0_mint = Some(vault0_mint);
        self
    }

    /// The mint of token_1 vault
    #[inline(always)]
    pub fn vault1_mint(
        &mut self,
        vault1_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault1_mint = Some(vault1_mint);
        self
    }

    /// The address that receives the collected token_0 protocol fees
    #[inline(always)]
    pub fn recipient_token0_account(
        &mut self,
        recipient_token0_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token0_account = Some(recipient_token0_account);
        self
    }

    /// The address that receives the collected token_1 protocol fees
    #[inline(always)]
    pub fn recipient_token1_account(
        &mut self,
        recipient_token1_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token1_account = Some(recipient_token1_account);
        self
    }

    /// The SPL program to perform token transfers
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// The SPL program 2022 to perform token transfers
    #[inline(always)]
    pub fn token_program2022(
        &mut self,
        token_program2022: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program2022 = Some(token_program2022);
        self
    }

    #[inline(always)]
    pub fn amount0_requested(&mut self, amount0_requested: u64) -> &mut Self {
        self.instruction.amount0_requested = Some(amount0_requested);
        self
    }

    #[inline(always)]
    pub fn amount1_requested(&mut self, amount1_requested: u64) -> &mut Self {
        self.instruction.amount1_requested = Some(amount1_requested);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = CollectProtocolFeeInstructionArgs {
            amount0_requested: self
                .instruction
                .amount0_requested
                .clone()
                .expect("amount0_requested is not set"),
            amount1_requested: self
                .instruction
                .amount1_requested
                .clone()
                .expect("amount1_requested is not set"),
        };
        let instruction = CollectProtocolFeeCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            amm_config: self.instruction.amm_config.expect("amm_config is not set"),

            token0_vault: self
                .instruction
                .token0_vault
                .expect("token0_vault is not set"),

            token1_vault: self
                .instruction
                .token1_vault
                .expect("token1_vault is not set"),

            vault0_mint: self
                .instruction
                .vault0_mint
                .expect("vault0_mint is not set"),

            vault1_mint: self
                .instruction
                .vault1_mint
                .expect("vault1_mint is not set"),

            recipient_token0_account: self
                .instruction
                .recipient_token0_account
                .expect("recipient_token0_account is not set"),

            recipient_token1_account: self
                .instruction
                .recipient_token1_account
                .expect("recipient_token1_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            token_program2022: self
                .instruction
                .token_program2022
                .expect("token_program2022 is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CollectProtocolFeeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_account_info::AccountInfo<'a>>,
    amm_config: Option<&'b solana_account_info::AccountInfo<'a>>,
    token0_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    token1_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault0_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    vault1_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    recipient_token0_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    recipient_token1_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program2022: Option<&'b solana_account_info::AccountInfo<'a>>,
    amount0_requested: Option<u64>,
    amount1_requested: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
