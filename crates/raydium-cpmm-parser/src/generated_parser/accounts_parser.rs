//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{AmmConfig, ObservationState, PoolState},
    ID,
};

/// RaydiumCpSwap Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum RaydiumCpSwapProgramState {
    AmmConfig(AmmConfig),
    ObservationState(ObservationState),
    PoolState(PoolState),
}

impl RaydiumCpSwapProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [218, 244, 33, 104, 203, 203, 43, 111] => Ok(RaydiumCpSwapProgramState::AmmConfig(
                AmmConfig::from_bytes(data_bytes)?,
            )),
            [122, 174, 197, 53, 129, 9, 165, 132] => {
                Ok(RaydiumCpSwapProgramState::ObservationState(
                    ObservationState::from_bytes(data_bytes)?,
                ))
            },
            [247, 237, 227, 245, 215, 195, 222, 70] => Ok(RaydiumCpSwapProgramState::PoolState(
                PoolState::from_bytes(data_bytes)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = RaydiumCpSwapProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "raydium_cp_swap::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        RaydiumCpSwapProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, AmmConfig, RaydiumCpSwapProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::AmmConfig> for AmmConfig {
        fn into_proto(self) -> proto_def::AmmConfig {
            proto_def::AmmConfig {
                bump: self.bump.into(),
                disable_create_pool: self.disable_create_pool,
                index: self.index.into(),
                trade_fee_rate: self.trade_fee_rate,
                protocol_fee_rate: self.protocol_fee_rate,
                fund_fee_rate: self.fund_fee_rate,
                create_pool_fee: self.create_pool_fee,
                protocol_owner: self.protocol_owner.to_string(),
                fund_owner: self.fund_owner.to_string(),
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::ObservationState;
    impl IntoProto<proto_def::ObservationState> for ObservationState {
        fn into_proto(self) -> proto_def::ObservationState {
            proto_def::ObservationState {
                initialized: self.initialized,
                observation_index: self.observation_index.into(),
                pool_id: self.pool_id.to_string(),
                observations: self
                    .observations
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::PoolState;
    impl IntoProto<proto_def::PoolState> for PoolState {
        fn into_proto(self) -> proto_def::PoolState {
            proto_def::PoolState {
                amm_config: self.amm_config.to_string(),
                pool_creator: self.pool_creator.to_string(),
                token0_vault: self.token0_vault.to_string(),
                token1_vault: self.token1_vault.to_string(),
                lp_mint: self.lp_mint.to_string(),
                token0_mint: self.token0_mint.to_string(),
                token1_mint: self.token1_mint.to_string(),
                token0_program: self.token0_program.to_string(),
                token1_program: self.token1_program.to_string(),
                observation_key: self.observation_key.to_string(),
                auth_bump: self.auth_bump.into(),
                status: self.status.into(),
                lp_mint_decimals: self.lp_mint_decimals.into(),
                mint0_decimals: self.mint0_decimals.into(),
                mint1_decimals: self.mint1_decimals.into(),
                lp_supply: self.lp_supply,
                protocol_fees_token0: self.protocol_fees_token0,
                protocol_fees_token1: self.protocol_fees_token1,
                fund_fees_token0: self.fund_fees_token0,
                fund_fees_token1: self.fund_fees_token1,
                open_time: self.open_time,
                padding: self.padding.to_vec(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for RaydiumCpSwapProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                RaydiumCpSwapProgramState::AmmConfig(data) => {
                    proto_def::program_state::StateOneof::AmmConfig(data.into_proto())
                },
                RaydiumCpSwapProgramState::ObservationState(data) => {
                    proto_def::program_state::StateOneof::ObservationState(data.into_proto())
                },
                RaydiumCpSwapProgramState::PoolState(data) => {
                    proto_def::program_state::StateOneof::PoolState(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
