//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{GlobalConfig, PlatformConfig, PoolState, VestingRecord},
    ID,
};

/// RaydiumLaunchpad Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum RaydiumLaunchpadProgramState {
    GlobalConfig(GlobalConfig),
    PlatformConfig(PlatformConfig),
    PoolState(PoolState),
    VestingRecord(VestingRecord),
}

impl RaydiumLaunchpadProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [149, 8, 156, 202, 160, 252, 176, 217] => Ok(
                RaydiumLaunchpadProgramState::GlobalConfig(GlobalConfig::from_bytes(data_bytes)?),
            ),
            [160, 78, 128, 0, 248, 83, 230, 160] => {
                Ok(RaydiumLaunchpadProgramState::PlatformConfig(
                    PlatformConfig::from_bytes(data_bytes)?,
                ))
            },
            [247, 237, 227, 245, 215, 195, 222, 70] => Ok(RaydiumLaunchpadProgramState::PoolState(
                PoolState::from_bytes(data_bytes)?,
            )),
            [106, 243, 221, 205, 230, 126, 85, 83] => Ok(
                RaydiumLaunchpadProgramState::VestingRecord(VestingRecord::from_bytes(data_bytes)?),
            ),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = RaydiumLaunchpadProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "raydium_launchpad::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program::program_error::ProgramError::InvalidArgument)?;
        RaydiumLaunchpadProgramState::try_unpack(&inner.data)
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, GlobalConfig, RaydiumLaunchpadProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::GlobalConfig> for GlobalConfig {
        fn into_proto(self) -> proto_def::GlobalConfig {
            proto_def::GlobalConfig {
                epoch: self.epoch,
                curve_type: self.curve_type.into(),
                index: self.index.into(),
                migrate_fee: self.migrate_fee,
                trade_fee_rate: self.trade_fee_rate,
                max_share_fee_rate: self.max_share_fee_rate,
                min_base_supply: self.min_base_supply,
                max_lock_rate: self.max_lock_rate,
                min_base_sell_rate: self.min_base_sell_rate,
                min_base_migrate_rate: self.min_base_migrate_rate,
                min_quote_fund_raising: self.min_quote_fund_raising,
                quote_mint: self.quote_mint.to_string(),
                protocol_fee_owner: self.protocol_fee_owner.to_string(),
                migrate_fee_owner: self.migrate_fee_owner.to_string(),
                migrate_to_amm_wallet: self.migrate_to_amm_wallet.to_string(),
                migrate_to_cpswap_wallet: self.migrate_to_cpswap_wallet.to_string(),
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::PlatformConfig;
    impl IntoProto<proto_def::PlatformConfig> for PlatformConfig {
        fn into_proto(self) -> proto_def::PlatformConfig {
            proto_def::PlatformConfig {
                epoch: self.epoch,
                platform_fee_wallet: self.platform_fee_wallet.to_string(),
                platform_nft_wallet: self.platform_nft_wallet.to_string(),
                platform_scale: self.platform_scale,
                creator_scale: self.creator_scale,
                burn_scale: self.burn_scale,
                fee_rate: self.fee_rate,
                name: self.name.into_iter().map(|x| x.into()).collect(),
                web: self.web.into_iter().map(|x| x.into()).collect(),
                img: self.img.into_iter().map(|x| x.into()).collect(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::PoolState;
    impl IntoProto<proto_def::PoolState> for PoolState {
        fn into_proto(self) -> proto_def::PoolState {
            proto_def::PoolState {
                epoch: self.epoch,
                auth_bump: self.auth_bump.into(),
                status: self.status.into(),
                base_decimals: self.base_decimals.into(),
                quote_decimals: self.quote_decimals.into(),
                migrate_type: self.migrate_type.into(),
                supply: self.supply,
                total_base_sell: self.total_base_sell,
                virtual_base: self.virtual_base,
                virtual_quote: self.virtual_quote,
                real_base: self.real_base,
                real_quote: self.real_quote,
                total_quote_fund_raising: self.total_quote_fund_raising,
                quote_protocol_fee: self.quote_protocol_fee,
                platform_fee: self.platform_fee,
                migrate_fee: self.migrate_fee,
                vesting_schedule: Some(self.vesting_schedule.into_proto()),
                global_config: self.global_config.to_string(),
                platform_config: self.platform_config.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                base_vault: self.base_vault.to_string(),
                quote_vault: self.quote_vault.to_string(),
                creator: self.creator.to_string(),
                padding: self.padding.to_vec(),
            }
        }
    }
    use super::VestingRecord;
    impl IntoProto<proto_def::VestingRecord> for VestingRecord {
        fn into_proto(self) -> proto_def::VestingRecord {
            proto_def::VestingRecord {
                epoch: self.epoch,
                pool: self.pool.to_string(),
                beneficiary: self.beneficiary.to_string(),
                claimed_amount: self.claimed_amount,
                token_share_amount: self.token_share_amount,
                padding: self.padding.to_vec(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for RaydiumLaunchpadProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                RaydiumLaunchpadProgramState::GlobalConfig(data) => {
                    proto_def::program_state::StateOneof::GlobalConfig(data.into_proto())
                },
                RaydiumLaunchpadProgramState::PlatformConfig(data) => {
                    proto_def::program_state::StateOneof::PlatformConfig(data.into_proto())
                },
                RaydiumLaunchpadProgramState::PoolState(data) => {
                    proto_def::program_state::StateOneof::PoolState(data.into_proto())
                },
                RaydiumLaunchpadProgramState::VestingRecord(data) => {
                    proto_def::program_state::StateOneof::VestingRecord(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
