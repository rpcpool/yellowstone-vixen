//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::ClaimVestedEvent};
    impl IntoProto<proto_def::ClaimVestedEvent> for ClaimVestedEvent {
        fn into_proto(self) -> proto_def::ClaimVestedEvent {
            proto_def::ClaimVestedEvent {
                pool_state: self.pool_state.to_string(),
                beneficiary: self.beneficiary.to_string(),
                claim_amount: self.claim_amount,
            }
        }
    }
    use crate::types::ConstantCurve;
    impl IntoProto<proto_def::ConstantCurve> for ConstantCurve {
        fn into_proto(self) -> proto_def::ConstantCurve {
            proto_def::ConstantCurve {
                supply: self.supply,
                total_base_sell: self.total_base_sell,
                total_quote_fund_raising: self.total_quote_fund_raising,
                migrate_type: self.migrate_type.into(),
            }
        }
    }
    use crate::types::CreateVestingEvent;
    impl IntoProto<proto_def::CreateVestingEvent> for CreateVestingEvent {
        fn into_proto(self) -> proto_def::CreateVestingEvent {
            proto_def::CreateVestingEvent {
                pool_state: self.pool_state.to_string(),
                beneficiary: self.beneficiary.to_string(),
                share_amount: self.share_amount,
            }
        }
    }
    use crate::types::FixedCurve;
    impl IntoProto<proto_def::FixedCurve> for FixedCurve {
        fn into_proto(self) -> proto_def::FixedCurve {
            proto_def::FixedCurve {
                supply: self.supply,
                total_quote_fund_raising: self.total_quote_fund_raising,
                migrate_type: self.migrate_type.into(),
            }
        }
    }
    use crate::types::LinearCurve;
    impl IntoProto<proto_def::LinearCurve> for LinearCurve {
        fn into_proto(self) -> proto_def::LinearCurve {
            proto_def::LinearCurve {
                supply: self.supply,
                total_quote_fund_raising: self.total_quote_fund_raising,
                migrate_type: self.migrate_type.into(),
            }
        }
    }
    use crate::types::MigrateNftInfo;
    impl IntoProto<proto_def::MigrateNftInfo> for MigrateNftInfo {
        fn into_proto(self) -> proto_def::MigrateNftInfo {
            proto_def::MigrateNftInfo {
                platform_scale: self.platform_scale,
                creator_scale: self.creator_scale,
                burn_scale: self.burn_scale,
            }
        }
    }
    use crate::types::MintParams;
    impl IntoProto<proto_def::MintParams> for MintParams {
        fn into_proto(self) -> proto_def::MintParams {
            proto_def::MintParams {
                decimals: self.decimals.into(),
                name: self.name,
                symbol: self.symbol,
                uri: self.uri,
            }
        }
    }
    use crate::types::PoolCreateEvent;
    impl IntoProto<proto_def::PoolCreateEvent> for PoolCreateEvent {
        fn into_proto(self) -> proto_def::PoolCreateEvent {
            proto_def::PoolCreateEvent {
                pool_state: self.pool_state.to_string(),
                creator: self.creator.to_string(),
                config: self.config.to_string(),
                base_mint_param: Some(self.base_mint_param.into_proto()),
                curve_param: Some(self.curve_param.into_proto()),
                vesting_param: Some(self.vesting_param.into_proto()),
            }
        }
    }
    use crate::types::TradeEvent;
    impl IntoProto<proto_def::TradeEvent> for TradeEvent {
        fn into_proto(self) -> proto_def::TradeEvent {
            proto_def::TradeEvent {
                pool_state: self.pool_state.to_string(),
                total_base_sell: self.total_base_sell,
                virtual_base: self.virtual_base,
                virtual_quote: self.virtual_quote,
                real_base_before: self.real_base_before,
                real_quote_before: self.real_quote_before,
                real_base_after: self.real_base_after,
                real_quote_after: self.real_quote_after,
                amount_in: self.amount_in,
                amount_out: self.amount_out,
                protocol_fee: self.protocol_fee,
                platform_fee: self.platform_fee,
                share_fee: self.share_fee,
                trade_direction: self.trade_direction as i32,
                pool_status: self.pool_status as i32,
            }
        }
    }
    use crate::types::VestingParams;
    impl IntoProto<proto_def::VestingParams> for VestingParams {
        fn into_proto(self) -> proto_def::VestingParams {
            proto_def::VestingParams {
                total_locked_amount: self.total_locked_amount,
                cliff_period: self.cliff_period,
                unlock_period: self.unlock_period,
            }
        }
    }
    use crate::types::VestingSchedule;
    impl IntoProto<proto_def::VestingSchedule> for VestingSchedule {
        fn into_proto(self) -> proto_def::VestingSchedule {
            proto_def::VestingSchedule {
                total_locked_amount: self.total_locked_amount,
                cliff_period: self.cliff_period,
                unlock_period: self.unlock_period,
                start_time: self.start_time,
                allocated_share_amount: self.allocated_share_amount,
            }
        }
    }

    use proto_def::curve_params::Variant as CurveParamsVariant;

    use crate::types::CurveParams;
    impl IntoProto<proto_def::CurveParams> for CurveParams {
        fn into_proto(self) -> proto_def::CurveParams {
            let variant = match self {
                CurveParams::Constant { data } => {
                    CurveParamsVariant::Constant(proto_def::CurveParamsConstant {
                        data: Some(data.into_proto()),
                    })
                },
                CurveParams::Fixed { data } => {
                    CurveParamsVariant::Fixed(proto_def::CurveParamsFixed {
                        data: Some(data.into_proto()),
                    })
                },
                CurveParams::Linear { data } => {
                    CurveParamsVariant::Linear(proto_def::CurveParamsLinear {
                        data: Some(data.into_proto()),
                    })
                },
            };

            proto_def::CurveParams {
                variant: Some(variant),
            }
        }
    }
    use proto_def::platform_config_param::Variant;

    use crate::types::PlatformConfigParam;
    impl IntoProto<proto_def::PlatformConfigParam> for PlatformConfigParam {
        fn into_proto(self) -> proto_def::PlatformConfigParam {
            let variant = match self {
                PlatformConfigParam::FeeWallet(field_0) => {
                    Variant::FeeWallet(proto_def::PlatformConfigParamFeeWallet {
                        field_0: field_0.to_string(),
                    })
                },
                PlatformConfigParam::NFTWallet(field_0) => {
                    Variant::NFTWallet(proto_def::PlatformConfigParamNftWallet {
                        field_0: field_0.to_string(),
                    })
                },
                PlatformConfigParam::MigrateNftInfo(field_0) => {
                    Variant::MigrateNftInfo(proto_def::PlatformConfigParamMigrateNftInfo {
                        field_0: Some(field_0.into_proto()),
                    })
                },
                PlatformConfigParam::FeeRate(field_0) => {
                    Variant::FeeRate(proto_def::PlatformConfigParamFeeRate { field_0 })
                },
                PlatformConfigParam::Name(field_0) => {
                    Variant::Name(proto_def::PlatformConfigParamName { field_0 })
                },
                PlatformConfigParam::Web(field_0) => {
                    Variant::Web(proto_def::PlatformConfigParamWeb { field_0 })
                },
                PlatformConfigParam::Img(field_0) => {
                    Variant::Img(proto_def::PlatformConfigParamImg { field_0 })
                },
            };

            proto_def::PlatformConfigParam {
                variant: Some(variant),
            }
        }
    }
}
