//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        BuyExactIn as BuyExactInIxAccounts, BuyExactInInstructionArgs as BuyExactInIxData,
        BuyExactOut as BuyExactOutIxAccounts, BuyExactOutInstructionArgs as BuyExactOutIxData,
        ClaimPlatformFee as ClaimPlatformFeeIxAccounts,
        ClaimVestedToken as ClaimVestedTokenIxAccounts, CollectFee as CollectFeeIxAccounts,
        CollectMigrateFee as CollectMigrateFeeIxAccounts, CreateConfig as CreateConfigIxAccounts,
        CreateConfigInstructionArgs as CreateConfigIxData,
        CreatePlatformConfig as CreatePlatformConfigIxAccounts,
        CreatePlatformConfigInstructionArgs as CreatePlatformConfigIxData,
        CreateVestingAccount as CreateVestingAccountIxAccounts,
        CreateVestingAccountInstructionArgs as CreateVestingAccountIxData,
        Initialize as InitializeIxAccounts, InitializeInstructionArgs as InitializeIxData,
        MigrateToAmm as MigrateToAmmIxAccounts, MigrateToAmmInstructionArgs as MigrateToAmmIxData,
        MigrateToCpswap as MigrateToCpswapIxAccounts, SellExactIn as SellExactInIxAccounts,
        SellExactInInstructionArgs as SellExactInIxData, SellExactOut as SellExactOutIxAccounts,
        SellExactOutInstructionArgs as SellExactOutIxData, UpdateConfig as UpdateConfigIxAccounts,
        UpdateConfigInstructionArgs as UpdateConfigIxData,
        UpdatePlatformConfig as UpdatePlatformConfigIxAccounts,
        UpdatePlatformConfigInstructionArgs as UpdatePlatformConfigIxData,
    },
    ID,
};

/// RaydiumLaunchpad Instructions
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum RaydiumLaunchpadProgramIx {
    BuyExactIn(BuyExactInIxAccounts, BuyExactInIxData),
    BuyExactOut(BuyExactOutIxAccounts, BuyExactOutIxData),
    ClaimPlatformFee(ClaimPlatformFeeIxAccounts),
    ClaimVestedToken(ClaimVestedTokenIxAccounts),
    CollectFee(CollectFeeIxAccounts),
    CollectMigrateFee(CollectMigrateFeeIxAccounts),
    CreateConfig(CreateConfigIxAccounts, CreateConfigIxData),
    CreatePlatformConfig(CreatePlatformConfigIxAccounts, CreatePlatformConfigIxData),
    CreateVestingAccount(CreateVestingAccountIxAccounts, CreateVestingAccountIxData),
    Initialize(InitializeIxAccounts, InitializeIxData),
    MigrateToAmm(MigrateToAmmIxAccounts, MigrateToAmmIxData),
    MigrateToCpswap(MigrateToCpswapIxAccounts),
    SellExactIn(SellExactInIxAccounts, SellExactInIxData),
    SellExactOut(SellExactOutIxAccounts, SellExactOutIxData),
    UpdateConfig(UpdateConfigIxAccounts, UpdateConfigIxData),
    UpdatePlatformConfig(UpdatePlatformConfigIxAccounts, UpdatePlatformConfigIxData),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = RaydiumLaunchpadProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "RaydiumLaunchpad::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<RaydiumLaunchpadProgramIx> {
        let accounts_len = ix.accounts.len();

        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        let ix = match ix_discriminator {
            [250, 234, 13, 123, 213, 156, 19, 236] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = BuyExactInIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                    platform_config: ix.accounts[3].0.into(),
                    pool_state: ix.accounts[4].0.into(),
                    user_base_token: ix.accounts[5].0.into(),
                    user_quote_token: ix.accounts[6].0.into(),
                    base_vault: ix.accounts[7].0.into(),
                    quote_vault: ix.accounts[8].0.into(),
                    base_token_mint: ix.accounts[9].0.into(),
                    quote_token_mint: ix.accounts[10].0.into(),
                    base_token_program: ix.accounts[11].0.into(),
                    quote_token_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: BuyExactInIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::BuyExactIn(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [24, 211, 116, 40, 105, 3, 153, 56] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = BuyExactOutIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                    platform_config: ix.accounts[3].0.into(),
                    pool_state: ix.accounts[4].0.into(),
                    user_base_token: ix.accounts[5].0.into(),
                    user_quote_token: ix.accounts[6].0.into(),
                    base_vault: ix.accounts[7].0.into(),
                    quote_vault: ix.accounts[8].0.into(),
                    base_token_mint: ix.accounts[9].0.into(),
                    quote_token_mint: ix.accounts[10].0.into(),
                    base_token_program: ix.accounts[11].0.into(),
                    quote_token_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: BuyExactOutIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::BuyExactOut(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [156, 39, 208, 135, 76, 237, 61, 72] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = ClaimPlatformFeeIxAccounts {
                    platform_fee_wallet: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    pool_state: ix.accounts[2].0.into(),
                    platform_config: ix.accounts[3].0.into(),
                    quote_vault: ix.accounts[4].0.into(),
                    recipient_token_account: ix.accounts[5].0.into(),
                    quote_mint: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                    associated_token_program: ix.accounts[9].0.into(),
                };
                Ok(RaydiumLaunchpadProgramIx::ClaimPlatformFee(ix_accounts))
            },
            [49, 33, 104, 30, 189, 157, 79, 35] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = ClaimVestedTokenIxAccounts {
                    beneficiary: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    pool_state: ix.accounts[2].0.into(),
                    vesting_record: ix.accounts[3].0.into(),
                    base_vault: ix.accounts[4].0.into(),
                    user_base_token: ix.accounts[5].0.into(),
                    base_token_mint: ix.accounts[6].0.into(),
                    base_token_program: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                    associated_token_program: ix.accounts[9].0.into(),
                };
                Ok(RaydiumLaunchpadProgramIx::ClaimVestedToken(ix_accounts))
            },
            [60, 173, 247, 103, 4, 93, 130, 48] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = CollectFeeIxAccounts {
                    owner: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    pool_state: ix.accounts[2].0.into(),
                    global_config: ix.accounts[3].0.into(),
                    quote_vault: ix.accounts[4].0.into(),
                    quote_mint: ix.accounts[5].0.into(),
                    recipient_token_account: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                };
                Ok(RaydiumLaunchpadProgramIx::CollectFee(ix_accounts))
            },
            [255, 186, 150, 223, 235, 118, 201, 186] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = CollectMigrateFeeIxAccounts {
                    owner: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    pool_state: ix.accounts[2].0.into(),
                    global_config: ix.accounts[3].0.into(),
                    quote_vault: ix.accounts[4].0.into(),
                    quote_mint: ix.accounts[5].0.into(),
                    recipient_token_account: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                };
                Ok(RaydiumLaunchpadProgramIx::CollectMigrateFee(ix_accounts))
            },
            [201, 207, 243, 114, 75, 111, 47, 189] => {
                check_min_accounts_req(accounts_len, 8)?;
                let ix_accounts = CreateConfigIxAccounts {
                    owner: ix.accounts[0].0.into(),
                    global_config: ix.accounts[1].0.into(),
                    quote_token_mint: ix.accounts[2].0.into(),
                    protocol_fee_owner: ix.accounts[3].0.into(),
                    migrate_fee_owner: ix.accounts[4].0.into(),
                    migrate_to_amm_wallet: ix.accounts[5].0.into(),
                    migrate_to_cpswap_wallet: ix.accounts[6].0.into(),
                    system_program: ix.accounts[7].0.into(),
                };
                let de_ix_data: CreateConfigIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::CreateConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [176, 90, 196, 175, 253, 113, 220, 20] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = CreatePlatformConfigIxAccounts {
                    platform_admin: ix.accounts[0].0.into(),
                    platform_fee_wallet: ix.accounts[1].0.into(),
                    platform_nft_wallet: ix.accounts[2].0.into(),
                    platform_config: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                let de_ix_data: CreatePlatformConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::CreatePlatformConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [129, 178, 2, 13, 217, 172, 230, 218] => {
                check_min_accounts_req(accounts_len, 5)?;
                let ix_accounts = CreateVestingAccountIxAccounts {
                    creator: ix.accounts[0].0.into(),
                    beneficiary: ix.accounts[1].0.into(),
                    pool_state: ix.accounts[2].0.into(),
                    vesting_record: ix.accounts[3].0.into(),
                    system_program: ix.accounts[4].0.into(),
                };
                let de_ix_data: CreateVestingAccountIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::CreateVestingAccount(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [175, 175, 109, 31, 13, 152, 155, 237] => {
                check_min_accounts_req(accounts_len, 18)?;
                let ix_accounts = InitializeIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    creator: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                    platform_config: ix.accounts[3].0.into(),
                    authority: ix.accounts[4].0.into(),
                    pool_state: ix.accounts[5].0.into(),
                    base_mint: ix.accounts[6].0.into(),
                    quote_mint: ix.accounts[7].0.into(),
                    base_vault: ix.accounts[8].0.into(),
                    quote_vault: ix.accounts[9].0.into(),
                    metadata_account: ix.accounts[10].0.into(),
                    base_token_program: ix.accounts[11].0.into(),
                    quote_token_program: ix.accounts[12].0.into(),
                    metadata_program: ix.accounts[13].0.into(),
                    system_program: ix.accounts[14].0.into(),
                    rent_program: ix.accounts[15].0.into(),
                    event_authority: ix.accounts[16].0.into(),
                    program: ix.accounts[17].0.into(),
                };
                let de_ix_data: InitializeIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::Initialize(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [207, 82, 192, 145, 254, 207, 145, 223] => {
                check_min_accounts_req(accounts_len, 32)?;
                let ix_accounts = MigrateToAmmIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    base_mint: ix.accounts[1].0.into(),
                    quote_mint: ix.accounts[2].0.into(),
                    openbook_program: ix.accounts[3].0.into(),
                    market: ix.accounts[4].0.into(),
                    request_queue: ix.accounts[5].0.into(),
                    event_queue: ix.accounts[6].0.into(),
                    bids: ix.accounts[7].0.into(),
                    asks: ix.accounts[8].0.into(),
                    market_vault_signer: ix.accounts[9].0.into(),
                    market_base_vault: ix.accounts[10].0.into(),
                    market_quote_vault: ix.accounts[11].0.into(),
                    amm_program: ix.accounts[12].0.into(),
                    amm_pool: ix.accounts[13].0.into(),
                    amm_authority: ix.accounts[14].0.into(),
                    amm_open_orders: ix.accounts[15].0.into(),
                    amm_lp_mint: ix.accounts[16].0.into(),
                    amm_base_vault: ix.accounts[17].0.into(),
                    amm_quote_vault: ix.accounts[18].0.into(),
                    amm_target_orders: ix.accounts[19].0.into(),
                    amm_config: ix.accounts[20].0.into(),
                    amm_create_fee_destination: ix.accounts[21].0.into(),
                    authority: ix.accounts[22].0.into(),
                    pool_state: ix.accounts[23].0.into(),
                    global_config: ix.accounts[24].0.into(),
                    base_vault: ix.accounts[25].0.into(),
                    quote_vault: ix.accounts[26].0.into(),
                    pool_lp_token: ix.accounts[27].0.into(),
                    spl_token_program: ix.accounts[28].0.into(),
                    associated_token_program: ix.accounts[29].0.into(),
                    system_program: ix.accounts[30].0.into(),
                    rent_program: ix.accounts[31].0.into(),
                };
                let de_ix_data: MigrateToAmmIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::MigrateToAmm(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [136, 92, 200, 103, 28, 218, 144, 140] => {
                check_min_accounts_req(accounts_len, 28)?;
                let ix_accounts = MigrateToCpswapIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    base_mint: ix.accounts[1].0.into(),
                    quote_mint: ix.accounts[2].0.into(),
                    platform_config: ix.accounts[3].0.into(),
                    cpswap_program: ix.accounts[4].0.into(),
                    cpswap_pool: ix.accounts[5].0.into(),
                    cpswap_authority: ix.accounts[6].0.into(),
                    cpswap_lp_mint: ix.accounts[7].0.into(),
                    cpswap_base_vault: ix.accounts[8].0.into(),
                    cpswap_quote_vault: ix.accounts[9].0.into(),
                    cpswap_config: ix.accounts[10].0.into(),
                    cpswap_create_pool_fee: ix.accounts[11].0.into(),
                    cpswap_observation: ix.accounts[12].0.into(),
                    lock_program: ix.accounts[13].0.into(),
                    lock_authority: ix.accounts[14].0.into(),
                    lock_lp_vault: ix.accounts[15].0.into(),
                    authority: ix.accounts[16].0.into(),
                    pool_state: ix.accounts[17].0.into(),
                    global_config: ix.accounts[18].0.into(),
                    base_vault: ix.accounts[19].0.into(),
                    quote_vault: ix.accounts[20].0.into(),
                    pool_lp_token: ix.accounts[21].0.into(),
                    base_token_program: ix.accounts[22].0.into(),
                    quote_token_program: ix.accounts[23].0.into(),
                    associated_token_program: ix.accounts[24].0.into(),
                    system_program: ix.accounts[25].0.into(),
                    rent_program: ix.accounts[26].0.into(),
                    metadata_program: ix.accounts[27].0.into(),
                };
                Ok(RaydiumLaunchpadProgramIx::MigrateToCpswap(ix_accounts))
            },
            [149, 39, 222, 155, 211, 124, 152, 26] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = SellExactInIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                    platform_config: ix.accounts[3].0.into(),
                    pool_state: ix.accounts[4].0.into(),
                    user_base_token: ix.accounts[5].0.into(),
                    user_quote_token: ix.accounts[6].0.into(),
                    base_vault: ix.accounts[7].0.into(),
                    quote_vault: ix.accounts[8].0.into(),
                    base_token_mint: ix.accounts[9].0.into(),
                    quote_token_mint: ix.accounts[10].0.into(),
                    base_token_program: ix.accounts[11].0.into(),
                    quote_token_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: SellExactInIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::SellExactIn(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [95, 200, 71, 34, 8, 9, 11, 166] => {
                check_min_accounts_req(accounts_len, 15)?;
                let ix_accounts = SellExactOutIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    authority: ix.accounts[1].0.into(),
                    global_config: ix.accounts[2].0.into(),
                    platform_config: ix.accounts[3].0.into(),
                    pool_state: ix.accounts[4].0.into(),
                    user_base_token: ix.accounts[5].0.into(),
                    user_quote_token: ix.accounts[6].0.into(),
                    base_vault: ix.accounts[7].0.into(),
                    quote_vault: ix.accounts[8].0.into(),
                    base_token_mint: ix.accounts[9].0.into(),
                    quote_token_mint: ix.accounts[10].0.into(),
                    base_token_program: ix.accounts[11].0.into(),
                    quote_token_program: ix.accounts[12].0.into(),
                    event_authority: ix.accounts[13].0.into(),
                    program: ix.accounts[14].0.into(),
                };
                let de_ix_data: SellExactOutIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::SellExactOut(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [29, 158, 252, 191, 10, 83, 219, 99] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdateConfigIxAccounts {
                    owner: ix.accounts[0].0.into(),
                    global_config: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdateConfigIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::UpdateConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            [195, 60, 76, 129, 146, 45, 67, 143] => {
                check_min_accounts_req(accounts_len, 2)?;
                let ix_accounts = UpdatePlatformConfigIxAccounts {
                    platform_admin: ix.accounts[0].0.into(),
                    platform_config: ix.accounts[1].0.into(),
                };
                let de_ix_data: UpdatePlatformConfigIxData =
                    BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(RaydiumLaunchpadProgramIx::UpdatePlatformConfig(
                    ix_accounts,
                    de_ix_data,
                ))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &ix {
            Ok(ix) => {
                tracing::info!(
                    name: "correctly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = ix.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            },
        }

        ix
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{BuyExactInIxAccounts, InstructionParser, RaydiumLaunchpadProgramIx};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::BuyExactInIxAccounts> for BuyExactInIxAccounts {
        fn into_proto(self) -> proto_def::BuyExactInIxAccounts {
            proto_def::BuyExactInIxAccounts {
                payer: self.payer.to_string(),
                authority: self.authority.to_string(),
                global_config: self.global_config.to_string(),
                platform_config: self.platform_config.to_string(),
                pool_state: self.pool_state.to_string(),
                user_base_token: self.user_base_token.to_string(),
                user_quote_token: self.user_quote_token.to_string(),
                base_vault: self.base_vault.to_string(),
                quote_vault: self.quote_vault.to_string(),
                base_token_mint: self.base_token_mint.to_string(),
                quote_token_mint: self.quote_token_mint.to_string(),
                base_token_program: self.base_token_program.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::BuyExactInIxData;
    impl IntoProto<proto_def::BuyExactInIxData> for BuyExactInIxData {
        fn into_proto(self) -> proto_def::BuyExactInIxData {
            proto_def::BuyExactInIxData {
                amount_in: self.amount_in,
                minimum_amount_out: self.minimum_amount_out,
                share_fee_rate: self.share_fee_rate,
            }
        }
    }
    use super::BuyExactOutIxAccounts;
    impl IntoProto<proto_def::BuyExactOutIxAccounts> for BuyExactOutIxAccounts {
        fn into_proto(self) -> proto_def::BuyExactOutIxAccounts {
            proto_def::BuyExactOutIxAccounts {
                payer: self.payer.to_string(),
                authority: self.authority.to_string(),
                global_config: self.global_config.to_string(),
                platform_config: self.platform_config.to_string(),
                pool_state: self.pool_state.to_string(),
                user_base_token: self.user_base_token.to_string(),
                user_quote_token: self.user_quote_token.to_string(),
                base_vault: self.base_vault.to_string(),
                quote_vault: self.quote_vault.to_string(),
                base_token_mint: self.base_token_mint.to_string(),
                quote_token_mint: self.quote_token_mint.to_string(),
                base_token_program: self.base_token_program.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::BuyExactOutIxData;
    impl IntoProto<proto_def::BuyExactOutIxData> for BuyExactOutIxData {
        fn into_proto(self) -> proto_def::BuyExactOutIxData {
            proto_def::BuyExactOutIxData {
                amount_out: self.amount_out,
                maximum_amount_in: self.maximum_amount_in,
                share_fee_rate: self.share_fee_rate,
            }
        }
    }
    use super::ClaimPlatformFeeIxAccounts;
    impl IntoProto<proto_def::ClaimPlatformFeeIxAccounts> for ClaimPlatformFeeIxAccounts {
        fn into_proto(self) -> proto_def::ClaimPlatformFeeIxAccounts {
            proto_def::ClaimPlatformFeeIxAccounts {
                platform_fee_wallet: self.platform_fee_wallet.to_string(),
                authority: self.authority.to_string(),
                pool_state: self.pool_state.to_string(),
                platform_config: self.platform_config.to_string(),
                quote_vault: self.quote_vault.to_string(),
                recipient_token_account: self.recipient_token_account.to_string(),
                quote_mint: self.quote_mint.to_string(),
                token_program: self.token_program.to_string(),
                system_program: self.system_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
            }
        }
    }
    use super::ClaimVestedTokenIxAccounts;
    impl IntoProto<proto_def::ClaimVestedTokenIxAccounts> for ClaimVestedTokenIxAccounts {
        fn into_proto(self) -> proto_def::ClaimVestedTokenIxAccounts {
            proto_def::ClaimVestedTokenIxAccounts {
                beneficiary: self.beneficiary.to_string(),
                authority: self.authority.to_string(),
                pool_state: self.pool_state.to_string(),
                vesting_record: self.vesting_record.to_string(),
                base_vault: self.base_vault.to_string(),
                user_base_token: self.user_base_token.to_string(),
                base_token_mint: self.base_token_mint.to_string(),
                base_token_program: self.base_token_program.to_string(),
                system_program: self.system_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
            }
        }
    }
    use super::CollectFeeIxAccounts;
    impl IntoProto<proto_def::CollectFeeIxAccounts> for CollectFeeIxAccounts {
        fn into_proto(self) -> proto_def::CollectFeeIxAccounts {
            proto_def::CollectFeeIxAccounts {
                owner: self.owner.to_string(),
                authority: self.authority.to_string(),
                pool_state: self.pool_state.to_string(),
                global_config: self.global_config.to_string(),
                quote_vault: self.quote_vault.to_string(),
                quote_mint: self.quote_mint.to_string(),
                recipient_token_account: self.recipient_token_account.to_string(),
                token_program: self.token_program.to_string(),
            }
        }
    }
    use super::CollectMigrateFeeIxAccounts;
    impl IntoProto<proto_def::CollectMigrateFeeIxAccounts> for CollectMigrateFeeIxAccounts {
        fn into_proto(self) -> proto_def::CollectMigrateFeeIxAccounts {
            proto_def::CollectMigrateFeeIxAccounts {
                owner: self.owner.to_string(),
                authority: self.authority.to_string(),
                pool_state: self.pool_state.to_string(),
                global_config: self.global_config.to_string(),
                quote_vault: self.quote_vault.to_string(),
                quote_mint: self.quote_mint.to_string(),
                recipient_token_account: self.recipient_token_account.to_string(),
                token_program: self.token_program.to_string(),
            }
        }
    }
    use super::CreateConfigIxAccounts;
    impl IntoProto<proto_def::CreateConfigIxAccounts> for CreateConfigIxAccounts {
        fn into_proto(self) -> proto_def::CreateConfigIxAccounts {
            proto_def::CreateConfigIxAccounts {
                owner: self.owner.to_string(),
                global_config: self.global_config.to_string(),
                quote_token_mint: self.quote_token_mint.to_string(),
                protocol_fee_owner: self.protocol_fee_owner.to_string(),
                migrate_fee_owner: self.migrate_fee_owner.to_string(),
                migrate_to_amm_wallet: self.migrate_to_amm_wallet.to_string(),
                migrate_to_cpswap_wallet: self.migrate_to_cpswap_wallet.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::CreateConfigIxData;
    impl IntoProto<proto_def::CreateConfigIxData> for CreateConfigIxData {
        fn into_proto(self) -> proto_def::CreateConfigIxData {
            proto_def::CreateConfigIxData {
                curve_type: self.curve_type.into(),
                index: self.index.into(),
                migrate_fee: self.migrate_fee,
                trade_fee_rate: self.trade_fee_rate,
            }
        }
    }
    use super::CreatePlatformConfigIxAccounts;
    impl IntoProto<proto_def::CreatePlatformConfigIxAccounts> for CreatePlatformConfigIxAccounts {
        fn into_proto(self) -> proto_def::CreatePlatformConfigIxAccounts {
            proto_def::CreatePlatformConfigIxAccounts {
                platform_admin: self.platform_admin.to_string(),
                platform_fee_wallet: self.platform_fee_wallet.to_string(),
                platform_nft_wallet: self.platform_nft_wallet.to_string(),
                platform_config: self.platform_config.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::CreatePlatformConfigIxData;
    impl IntoProto<proto_def::CreatePlatformConfigIxData> for CreatePlatformConfigIxData {
        fn into_proto(self) -> proto_def::CreatePlatformConfigIxData {
            proto_def::CreatePlatformConfigIxData {
                migrate_nft_info: Some(self.migrate_nft_info.into_proto()),
                fee_rate: self.fee_rate,
                name: self.name,
                web: self.web,
                img: self.img,
            }
        }
    }
    use super::CreateVestingAccountIxAccounts;
    impl IntoProto<proto_def::CreateVestingAccountIxAccounts> for CreateVestingAccountIxAccounts {
        fn into_proto(self) -> proto_def::CreateVestingAccountIxAccounts {
            proto_def::CreateVestingAccountIxAccounts {
                creator: self.creator.to_string(),
                beneficiary: self.beneficiary.to_string(),
                pool_state: self.pool_state.to_string(),
                vesting_record: self.vesting_record.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::CreateVestingAccountIxData;
    impl IntoProto<proto_def::CreateVestingAccountIxData> for CreateVestingAccountIxData {
        fn into_proto(self) -> proto_def::CreateVestingAccountIxData {
            proto_def::CreateVestingAccountIxData {
                share_amount: self.share_amount,
            }
        }
    }
    use super::InitializeIxAccounts;
    impl IntoProto<proto_def::InitializeIxAccounts> for InitializeIxAccounts {
        fn into_proto(self) -> proto_def::InitializeIxAccounts {
            proto_def::InitializeIxAccounts {
                payer: self.payer.to_string(),
                creator: self.creator.to_string(),
                global_config: self.global_config.to_string(),
                platform_config: self.platform_config.to_string(),
                authority: self.authority.to_string(),
                pool_state: self.pool_state.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                base_vault: self.base_vault.to_string(),
                quote_vault: self.quote_vault.to_string(),
                metadata_account: self.metadata_account.to_string(),
                base_token_program: self.base_token_program.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                metadata_program: self.metadata_program.to_string(),
                system_program: self.system_program.to_string(),
                rent_program: self.rent_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::InitializeIxData;
    impl IntoProto<proto_def::InitializeIxData> for InitializeIxData {
        fn into_proto(self) -> proto_def::InitializeIxData {
            proto_def::InitializeIxData {
                base_mint_param: Some(self.base_mint_param.into_proto()),
                curve_param: Some(self.curve_param.into_proto()),
                vesting_param: Some(self.vesting_param.into_proto()),
            }
        }
    }
    use super::MigrateToAmmIxAccounts;
    impl IntoProto<proto_def::MigrateToAmmIxAccounts> for MigrateToAmmIxAccounts {
        fn into_proto(self) -> proto_def::MigrateToAmmIxAccounts {
            proto_def::MigrateToAmmIxAccounts {
                payer: self.payer.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                openbook_program: self.openbook_program.to_string(),
                market: self.market.to_string(),
                request_queue: self.request_queue.to_string(),
                event_queue: self.event_queue.to_string(),
                bids: self.bids.to_string(),
                asks: self.asks.to_string(),
                market_vault_signer: self.market_vault_signer.to_string(),
                market_base_vault: self.market_base_vault.to_string(),
                market_quote_vault: self.market_quote_vault.to_string(),
                amm_program: self.amm_program.to_string(),
                amm_pool: self.amm_pool.to_string(),
                amm_authority: self.amm_authority.to_string(),
                amm_open_orders: self.amm_open_orders.to_string(),
                amm_lp_mint: self.amm_lp_mint.to_string(),
                amm_base_vault: self.amm_base_vault.to_string(),
                amm_quote_vault: self.amm_quote_vault.to_string(),
                amm_target_orders: self.amm_target_orders.to_string(),
                amm_config: self.amm_config.to_string(),
                amm_create_fee_destination: self.amm_create_fee_destination.to_string(),
                authority: self.authority.to_string(),
                pool_state: self.pool_state.to_string(),
                global_config: self.global_config.to_string(),
                base_vault: self.base_vault.to_string(),
                quote_vault: self.quote_vault.to_string(),
                pool_lp_token: self.pool_lp_token.to_string(),
                spl_token_program: self.spl_token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent_program: self.rent_program.to_string(),
            }
        }
    }
    use super::MigrateToAmmIxData;
    impl IntoProto<proto_def::MigrateToAmmIxData> for MigrateToAmmIxData {
        fn into_proto(self) -> proto_def::MigrateToAmmIxData {
            proto_def::MigrateToAmmIxData {
                base_lot_size: self.base_lot_size,
                quote_lot_size: self.quote_lot_size,
                market_vault_signer_nonce: self.market_vault_signer_nonce.into(),
            }
        }
    }
    use super::MigrateToCpswapIxAccounts;
    impl IntoProto<proto_def::MigrateToCpswapIxAccounts> for MigrateToCpswapIxAccounts {
        fn into_proto(self) -> proto_def::MigrateToCpswapIxAccounts {
            proto_def::MigrateToCpswapIxAccounts {
                payer: self.payer.to_string(),
                base_mint: self.base_mint.to_string(),
                quote_mint: self.quote_mint.to_string(),
                platform_config: self.platform_config.to_string(),
                cpswap_program: self.cpswap_program.to_string(),
                cpswap_pool: self.cpswap_pool.to_string(),
                cpswap_authority: self.cpswap_authority.to_string(),
                cpswap_lp_mint: self.cpswap_lp_mint.to_string(),
                cpswap_base_vault: self.cpswap_base_vault.to_string(),
                cpswap_quote_vault: self.cpswap_quote_vault.to_string(),
                cpswap_config: self.cpswap_config.to_string(),
                cpswap_create_pool_fee: self.cpswap_create_pool_fee.to_string(),
                cpswap_observation: self.cpswap_observation.to_string(),
                lock_program: self.lock_program.to_string(),
                lock_authority: self.lock_authority.to_string(),
                lock_lp_vault: self.lock_lp_vault.to_string(),
                authority: self.authority.to_string(),
                pool_state: self.pool_state.to_string(),
                global_config: self.global_config.to_string(),
                base_vault: self.base_vault.to_string(),
                quote_vault: self.quote_vault.to_string(),
                pool_lp_token: self.pool_lp_token.to_string(),
                base_token_program: self.base_token_program.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent_program: self.rent_program.to_string(),
                metadata_program: self.metadata_program.to_string(),
            }
        }
    }
    use super::SellExactInIxAccounts;
    impl IntoProto<proto_def::SellExactInIxAccounts> for SellExactInIxAccounts {
        fn into_proto(self) -> proto_def::SellExactInIxAccounts {
            proto_def::SellExactInIxAccounts {
                payer: self.payer.to_string(),
                authority: self.authority.to_string(),
                global_config: self.global_config.to_string(),
                platform_config: self.platform_config.to_string(),
                pool_state: self.pool_state.to_string(),
                user_base_token: self.user_base_token.to_string(),
                user_quote_token: self.user_quote_token.to_string(),
                base_vault: self.base_vault.to_string(),
                quote_vault: self.quote_vault.to_string(),
                base_token_mint: self.base_token_mint.to_string(),
                quote_token_mint: self.quote_token_mint.to_string(),
                base_token_program: self.base_token_program.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SellExactInIxData;
    impl IntoProto<proto_def::SellExactInIxData> for SellExactInIxData {
        fn into_proto(self) -> proto_def::SellExactInIxData {
            proto_def::SellExactInIxData {
                amount_in: self.amount_in,
                minimum_amount_out: self.minimum_amount_out,
                share_fee_rate: self.share_fee_rate,
            }
        }
    }
    use super::SellExactOutIxAccounts;
    impl IntoProto<proto_def::SellExactOutIxAccounts> for SellExactOutIxAccounts {
        fn into_proto(self) -> proto_def::SellExactOutIxAccounts {
            proto_def::SellExactOutIxAccounts {
                payer: self.payer.to_string(),
                authority: self.authority.to_string(),
                global_config: self.global_config.to_string(),
                platform_config: self.platform_config.to_string(),
                pool_state: self.pool_state.to_string(),
                user_base_token: self.user_base_token.to_string(),
                user_quote_token: self.user_quote_token.to_string(),
                base_vault: self.base_vault.to_string(),
                quote_vault: self.quote_vault.to_string(),
                base_token_mint: self.base_token_mint.to_string(),
                quote_token_mint: self.quote_token_mint.to_string(),
                base_token_program: self.base_token_program.to_string(),
                quote_token_program: self.quote_token_program.to_string(),
                event_authority: self.event_authority.to_string(),
                program: self.program.to_string(),
            }
        }
    }
    use super::SellExactOutIxData;
    impl IntoProto<proto_def::SellExactOutIxData> for SellExactOutIxData {
        fn into_proto(self) -> proto_def::SellExactOutIxData {
            proto_def::SellExactOutIxData {
                amount_out: self.amount_out,
                maximum_amount_in: self.maximum_amount_in,
                share_fee_rate: self.share_fee_rate,
            }
        }
    }
    use super::UpdateConfigIxAccounts;
    impl IntoProto<proto_def::UpdateConfigIxAccounts> for UpdateConfigIxAccounts {
        fn into_proto(self) -> proto_def::UpdateConfigIxAccounts {
            proto_def::UpdateConfigIxAccounts {
                owner: self.owner.to_string(),
                global_config: self.global_config.to_string(),
            }
        }
    }
    use super::UpdateConfigIxData;
    impl IntoProto<proto_def::UpdateConfigIxData> for UpdateConfigIxData {
        fn into_proto(self) -> proto_def::UpdateConfigIxData {
            proto_def::UpdateConfigIxData {
                param: self.param.into(),
                value: self.value,
            }
        }
    }
    use super::UpdatePlatformConfigIxAccounts;
    impl IntoProto<proto_def::UpdatePlatformConfigIxAccounts> for UpdatePlatformConfigIxAccounts {
        fn into_proto(self) -> proto_def::UpdatePlatformConfigIxAccounts {
            proto_def::UpdatePlatformConfigIxAccounts {
                platform_admin: self.platform_admin.to_string(),
                platform_config: self.platform_config.to_string(),
            }
        }
    }
    use super::UpdatePlatformConfigIxData;
    impl IntoProto<proto_def::UpdatePlatformConfigIxData> for UpdatePlatformConfigIxData {
        fn into_proto(self) -> proto_def::UpdatePlatformConfigIxData {
            proto_def::UpdatePlatformConfigIxData {
                param: Some(self.param.into_proto()),
            }
        }
    }

    impl IntoProto<proto_def::ProgramIxs> for RaydiumLaunchpadProgramIx {
        fn into_proto(self) -> proto_def::ProgramIxs {
            match self {
                RaydiumLaunchpadProgramIx::BuyExactIn(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::BuyExactIn(
                        proto_def::BuyExactInIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::BuyExactOut(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::BuyExactOut(
                        proto_def::BuyExactOutIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::ClaimPlatformFee(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClaimPlatformFee(
                        proto_def::ClaimPlatformFeeIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::ClaimVestedToken(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClaimVestedToken(
                        proto_def::ClaimVestedTokenIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::CollectFee(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CollectFee(
                        proto_def::CollectFeeIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::CollectMigrateFee(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CollectMigrateFee(
                        proto_def::CollectMigrateFeeIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::CreateConfig(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CreateConfig(
                        proto_def::CreateConfigIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::CreatePlatformConfig(acc, data) => {
                    proto_def::ProgramIxs {
                        ix_oneof: Some(proto_def::program_ixs::IxOneof::CreatePlatformConfig(
                            proto_def::CreatePlatformConfigIx {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        )),
                    }
                },
                RaydiumLaunchpadProgramIx::CreateVestingAccount(acc, data) => {
                    proto_def::ProgramIxs {
                        ix_oneof: Some(proto_def::program_ixs::IxOneof::CreateVestingAccount(
                            proto_def::CreateVestingAccountIx {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        )),
                    }
                },
                RaydiumLaunchpadProgramIx::Initialize(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Initialize(
                        proto_def::InitializeIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::MigrateToAmm(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::MigrateToAmm(
                        proto_def::MigrateToAmmIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::MigrateToCpswap(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::MigrateToCpswap(
                        proto_def::MigrateToCpswapIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::SellExactIn(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SellExactIn(
                        proto_def::SellExactInIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::SellExactOut(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::SellExactOut(
                        proto_def::SellExactOutIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::UpdateConfig(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdateConfig(
                        proto_def::UpdateConfigIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                RaydiumLaunchpadProgramIx::UpdatePlatformConfig(acc, data) => {
                    proto_def::ProgramIxs {
                        ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdatePlatformConfig(
                            proto_def::UpdatePlatformConfigIx {
                                accounts: Some(acc.into_proto()),
                                data: Some(data.into_proto()),
                            },
                        )),
                    }
                },
            }
        }
    }

    impl ParseProto for InstructionParser {
        type Message = proto_def::ProgramIxs;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
