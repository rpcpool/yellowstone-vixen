//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct MigrateToAmm {
    /// Only migrate_to_amm_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_amm_wallet saved in global_config
    pub payer: solana_program::pubkey::Pubkey,
    /// The mint for the base token (token being sold)
    pub base_mint: solana_program::pubkey::Pubkey,
    /// The mint for the quote token (token used to buy)
    pub quote_mint: solana_program::pubkey::Pubkey,

    pub openbook_program: solana_program::pubkey::Pubkey,
    /// Account created and asigned to openbook_program but not been initialized
    pub market: solana_program::pubkey::Pubkey,
    /// Account created and asigned to openbook_program but not been initialized
    pub request_queue: solana_program::pubkey::Pubkey,
    /// Account created and asigned to openbook_program but not been initialized
    pub event_queue: solana_program::pubkey::Pubkey,
    /// Account created and asigned to openbook_program but not been initialized
    pub bids: solana_program::pubkey::Pubkey,
    /// Account created and asigned to openbook_program but not been initialized
    pub asks: solana_program::pubkey::Pubkey,

    pub market_vault_signer: solana_program::pubkey::Pubkey,
    /// Token account that holds the market's base tokens
    pub market_base_vault: solana_program::pubkey::Pubkey,
    /// Token account that holds the market's quote tokens
    pub market_quote_vault: solana_program::pubkey::Pubkey,

    pub amm_program: solana_program::pubkey::Pubkey,

    pub amm_pool: solana_program::pubkey::Pubkey,

    pub amm_authority: solana_program::pubkey::Pubkey,

    pub amm_open_orders: solana_program::pubkey::Pubkey,

    pub amm_lp_mint: solana_program::pubkey::Pubkey,

    pub amm_base_vault: solana_program::pubkey::Pubkey,

    pub amm_quote_vault: solana_program::pubkey::Pubkey,

    pub amm_target_orders: solana_program::pubkey::Pubkey,

    pub amm_config: solana_program::pubkey::Pubkey,

    pub amm_create_fee_destination: solana_program::pubkey::Pubkey,
    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    pub authority: solana_program::pubkey::Pubkey,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: solana_program::pubkey::Pubkey,
    /// Global config account stores owner
    pub global_config: solana_program::pubkey::Pubkey,
    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    pub base_vault: solana_program::pubkey::Pubkey,
    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    pub quote_vault: solana_program::pubkey::Pubkey,

    pub pool_lp_token: solana_program::pubkey::Pubkey,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub spl_token_program: solana_program::pubkey::Pubkey,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: solana_program::pubkey::Pubkey,
    /// Required for account creation
    pub system_program: solana_program::pubkey::Pubkey,
    /// Required for rent exempt calculations
    pub rent_program: solana_program::pubkey::Pubkey,
}

impl MigrateToAmm {
    pub fn instruction(
        &self,
        args: MigrateToAmmInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: MigrateToAmmInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(32 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.openbook_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.request_queue,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.event_queue,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.bids, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.asks, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.market_vault_signer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.market_quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.amm_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.amm_open_orders,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.amm_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.amm_base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.amm_quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.amm_target_orders,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.amm_create_fee_destination,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_lp_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.spl_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&MigrateToAmmInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateToAmmInstructionData {
    discriminator: [u8; 8],
}

impl MigrateToAmmInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [207, 82, 192, 145, 254, 207, 145, 223],
        }
    }
}

impl Default for MigrateToAmmInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateToAmmInstructionArgs {
    pub base_lot_size: u64,
    pub quote_lot_size: u64,
    pub market_vault_signer_nonce: u8,
}

/// Instruction builder for `MigrateToAmm`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[]` base_mint
///   2. `[]` quote_mint
///   3. `[optional]` openbook_program (default to `srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX`)
///   4. `[writable]` market
///   5. `[writable]` request_queue
///   6. `[writable]` event_queue
///   7. `[writable]` bids
///   8. `[writable]` asks
///   9. `[]` market_vault_signer
///   10. `[writable]` market_base_vault
///   11. `[writable]` market_quote_vault
///   12. `[optional]` amm_program (default to `675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8`)
///   13. `[writable]` amm_pool
///   14. `[]` amm_authority
///   15. `[writable]` amm_open_orders
///   16. `[writable]` amm_lp_mint
///   17. `[writable]` amm_base_vault
///   18. `[writable]` amm_quote_vault
///   19. `[writable]` amm_target_orders
///   20. `[]` amm_config
///   21. `[writable]` amm_create_fee_destination
///   22. `[writable]` authority
///   23. `[writable]` pool_state
///   24. `[]` global_config
///   25. `[writable]` base_vault
///   26. `[writable]` quote_vault
///   27. `[writable]` pool_lp_token
///   28. `[optional]` spl_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   29. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   30. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   31. `[optional]` rent_program (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct MigrateToAmmBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    base_mint: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    openbook_program: Option<solana_program::pubkey::Pubkey>,
    market: Option<solana_program::pubkey::Pubkey>,
    request_queue: Option<solana_program::pubkey::Pubkey>,
    event_queue: Option<solana_program::pubkey::Pubkey>,
    bids: Option<solana_program::pubkey::Pubkey>,
    asks: Option<solana_program::pubkey::Pubkey>,
    market_vault_signer: Option<solana_program::pubkey::Pubkey>,
    market_base_vault: Option<solana_program::pubkey::Pubkey>,
    market_quote_vault: Option<solana_program::pubkey::Pubkey>,
    amm_program: Option<solana_program::pubkey::Pubkey>,
    amm_pool: Option<solana_program::pubkey::Pubkey>,
    amm_authority: Option<solana_program::pubkey::Pubkey>,
    amm_open_orders: Option<solana_program::pubkey::Pubkey>,
    amm_lp_mint: Option<solana_program::pubkey::Pubkey>,
    amm_base_vault: Option<solana_program::pubkey::Pubkey>,
    amm_quote_vault: Option<solana_program::pubkey::Pubkey>,
    amm_target_orders: Option<solana_program::pubkey::Pubkey>,
    amm_config: Option<solana_program::pubkey::Pubkey>,
    amm_create_fee_destination: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    base_vault: Option<solana_program::pubkey::Pubkey>,
    quote_vault: Option<solana_program::pubkey::Pubkey>,
    pool_lp_token: Option<solana_program::pubkey::Pubkey>,
    spl_token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    rent_program: Option<solana_program::pubkey::Pubkey>,
    base_lot_size: Option<u64>,
    quote_lot_size: Option<u64>,
    market_vault_signer_nonce: Option<u8>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MigrateToAmmBuilder {
    pub fn new() -> Self { Self::default() }

    /// Only migrate_to_amm_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_amm_wallet saved in global_config
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// The mint for the base token (token being sold)
    #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_mint = Some(base_mint);
        self
    }

    /// The mint for the quote token (token used to buy)
    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    /// `[optional account, default to 'srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX']`
    #[inline(always)]
    pub fn openbook_program(
        &mut self,
        openbook_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.openbook_program = Some(openbook_program);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn market(&mut self, market: solana_program::pubkey::Pubkey) -> &mut Self {
        self.market = Some(market);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn request_queue(&mut self, request_queue: solana_program::pubkey::Pubkey) -> &mut Self {
        self.request_queue = Some(request_queue);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn event_queue(&mut self, event_queue: solana_program::pubkey::Pubkey) -> &mut Self {
        self.event_queue = Some(event_queue);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn bids(&mut self, bids: solana_program::pubkey::Pubkey) -> &mut Self {
        self.bids = Some(bids);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn asks(&mut self, asks: solana_program::pubkey::Pubkey) -> &mut Self {
        self.asks = Some(asks);
        self
    }

    #[inline(always)]
    pub fn market_vault_signer(
        &mut self,
        market_vault_signer: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_vault_signer = Some(market_vault_signer);
        self
    }

    /// Token account that holds the market's base tokens
    #[inline(always)]
    pub fn market_base_vault(
        &mut self,
        market_base_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_base_vault = Some(market_base_vault);
        self
    }

    /// Token account that holds the market's quote tokens
    #[inline(always)]
    pub fn market_quote_vault(
        &mut self,
        market_quote_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.market_quote_vault = Some(market_quote_vault);
        self
    }

    /// `[optional account, default to '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8']`
    #[inline(always)]
    pub fn amm_program(&mut self, amm_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_program = Some(amm_program);
        self
    }

    #[inline(always)]
    pub fn amm_pool(&mut self, amm_pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_pool = Some(amm_pool);
        self
    }

    #[inline(always)]
    pub fn amm_authority(&mut self, amm_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_authority = Some(amm_authority);
        self
    }

    #[inline(always)]
    pub fn amm_open_orders(
        &mut self,
        amm_open_orders: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.amm_open_orders = Some(amm_open_orders);
        self
    }

    #[inline(always)]
    pub fn amm_lp_mint(&mut self, amm_lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_lp_mint = Some(amm_lp_mint);
        self
    }

    #[inline(always)]
    pub fn amm_base_vault(&mut self, amm_base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_base_vault = Some(amm_base_vault);
        self
    }

    #[inline(always)]
    pub fn amm_quote_vault(
        &mut self,
        amm_quote_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.amm_quote_vault = Some(amm_quote_vault);
        self
    }

    #[inline(always)]
    pub fn amm_target_orders(
        &mut self,
        amm_target_orders: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.amm_target_orders = Some(amm_target_orders);
        self
    }

    #[inline(always)]
    pub fn amm_config(&mut self, amm_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_config = Some(amm_config);
        self
    }

    #[inline(always)]
    pub fn amm_create_fee_destination(
        &mut self,
        amm_create_fee_destination: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.amm_create_fee_destination = Some(amm_create_fee_destination);
        self
    }

    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// Global config account stores owner
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    #[inline(always)]
    pub fn base_vault(&mut self, base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_vault = Some(base_vault);
        self
    }

    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    #[inline(always)]
    pub fn quote_vault(&mut self, quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_vault = Some(quote_vault);
        self
    }

    #[inline(always)]
    pub fn pool_lp_token(&mut self, pool_lp_token: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_lp_token = Some(pool_lp_token);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL Token program for the base token
    /// Must be the standard Token program
    #[inline(always)]
    pub fn spl_token_program(
        &mut self,
        spl_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.spl_token_program = Some(spl_token_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// Program to create an ATA for receiving fee NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Required for account creation
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    /// Required for rent exempt calculations
    #[inline(always)]
    pub fn rent_program(&mut self, rent_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent_program = Some(rent_program);
        self
    }

    #[inline(always)]
    pub fn base_lot_size(&mut self, base_lot_size: u64) -> &mut Self {
        self.base_lot_size = Some(base_lot_size);
        self
    }

    #[inline(always)]
    pub fn quote_lot_size(&mut self, quote_lot_size: u64) -> &mut Self {
        self.quote_lot_size = Some(quote_lot_size);
        self
    }

    #[inline(always)]
    pub fn market_vault_signer_nonce(&mut self, market_vault_signer_nonce: u8) -> &mut Self {
        self.market_vault_signer_nonce = Some(market_vault_signer_nonce);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MigrateToAmm {
            payer: self.payer.expect("payer is not set"),
            base_mint: self.base_mint.expect("base_mint is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            openbook_program: self.openbook_program.unwrap_or(solana_program::pubkey!(
                "srmqPvymJeFKQ4zGQed1GFppgkRHL9kaELCbyksJtPX"
            )),
            market: self.market.expect("market is not set"),
            request_queue: self.request_queue.expect("request_queue is not set"),
            event_queue: self.event_queue.expect("event_queue is not set"),
            bids: self.bids.expect("bids is not set"),
            asks: self.asks.expect("asks is not set"),
            market_vault_signer: self
                .market_vault_signer
                .expect("market_vault_signer is not set"),
            market_base_vault: self
                .market_base_vault
                .expect("market_base_vault is not set"),
            market_quote_vault: self
                .market_quote_vault
                .expect("market_quote_vault is not set"),
            amm_program: self.amm_program.unwrap_or(solana_program::pubkey!(
                "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
            )),
            amm_pool: self.amm_pool.expect("amm_pool is not set"),
            amm_authority: self.amm_authority.expect("amm_authority is not set"),
            amm_open_orders: self.amm_open_orders.expect("amm_open_orders is not set"),
            amm_lp_mint: self.amm_lp_mint.expect("amm_lp_mint is not set"),
            amm_base_vault: self.amm_base_vault.expect("amm_base_vault is not set"),
            amm_quote_vault: self.amm_quote_vault.expect("amm_quote_vault is not set"),
            amm_target_orders: self
                .amm_target_orders
                .expect("amm_target_orders is not set"),
            amm_config: self.amm_config.expect("amm_config is not set"),
            amm_create_fee_destination: self
                .amm_create_fee_destination
                .expect("amm_create_fee_destination is not set"),
            authority: self.authority.expect("authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            base_vault: self.base_vault.expect("base_vault is not set"),
            quote_vault: self.quote_vault.expect("quote_vault is not set"),
            pool_lp_token: self.pool_lp_token.expect("pool_lp_token is not set"),
            spl_token_program: self.spl_token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            rent_program: self.rent_program.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };
        let args = MigrateToAmmInstructionArgs {
            base_lot_size: self
                .base_lot_size
                .clone()
                .expect("base_lot_size is not set"),
            quote_lot_size: self
                .quote_lot_size
                .clone()
                .expect("quote_lot_size is not set"),
            market_vault_signer_nonce: self
                .market_vault_signer_nonce
                .clone()
                .expect("market_vault_signer_nonce is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `migrate_to_amm` CPI accounts.
pub struct MigrateToAmmCpiAccounts<'a, 'b> {
    /// Only migrate_to_amm_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_amm_wallet saved in global_config
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the base token (token being sold)
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the quote token (token used to buy)
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub market: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub request_queue: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub event_queue: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub bids: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_vault_signer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account that holds the market's base tokens
    pub market_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account that holds the market's quote tokens
    pub market_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_open_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_target_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_create_fee_destination: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global config account stores owner
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_lp_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub spl_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for rent exempt calculations
    pub rent_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `migrate_to_amm` CPI instruction.
pub struct MigrateToAmmCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Only migrate_to_amm_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_amm_wallet saved in global_config
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the base token (token being sold)
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the quote token (token used to buy)
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub openbook_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub market: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub request_queue: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub event_queue: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub bids: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account created and asigned to openbook_program but not been initialized
    pub asks: &'b solana_program::account_info::AccountInfo<'a>,

    pub market_vault_signer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account that holds the market's base tokens
    pub market_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account that holds the market's quote tokens
    pub market_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_open_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_target_orders: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_create_fee_destination: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global config account stores owner
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_lp_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub spl_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for rent exempt calculations
    pub rent_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: MigrateToAmmInstructionArgs,
}

impl<'a, 'b> MigrateToAmmCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MigrateToAmmCpiAccounts<'a, 'b>,
        args: MigrateToAmmInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            base_mint: accounts.base_mint,
            quote_mint: accounts.quote_mint,
            openbook_program: accounts.openbook_program,
            market: accounts.market,
            request_queue: accounts.request_queue,
            event_queue: accounts.event_queue,
            bids: accounts.bids,
            asks: accounts.asks,
            market_vault_signer: accounts.market_vault_signer,
            market_base_vault: accounts.market_base_vault,
            market_quote_vault: accounts.market_quote_vault,
            amm_program: accounts.amm_program,
            amm_pool: accounts.amm_pool,
            amm_authority: accounts.amm_authority,
            amm_open_orders: accounts.amm_open_orders,
            amm_lp_mint: accounts.amm_lp_mint,
            amm_base_vault: accounts.amm_base_vault,
            amm_quote_vault: accounts.amm_quote_vault,
            amm_target_orders: accounts.amm_target_orders,
            amm_config: accounts.amm_config,
            amm_create_fee_destination: accounts.amm_create_fee_destination,
            authority: accounts.authority,
            pool_state: accounts.pool_state,
            global_config: accounts.global_config,
            base_vault: accounts.base_vault,
            quote_vault: accounts.quote_vault,
            pool_lp_token: accounts.pool_lp_token,
            spl_token_program: accounts.spl_token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
            rent_program: accounts.rent_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(32 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.openbook_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.request_queue.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.event_queue.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bids.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.asks.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.market_vault_signer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.market_quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.amm_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.amm_open_orders.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.amm_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.amm_base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.amm_quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.amm_target_orders.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.amm_create_fee_destination.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_lp_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.spl_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&MigrateToAmmInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(33 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.base_mint.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.openbook_program.clone());
        account_infos.push(self.market.clone());
        account_infos.push(self.request_queue.clone());
        account_infos.push(self.event_queue.clone());
        account_infos.push(self.bids.clone());
        account_infos.push(self.asks.clone());
        account_infos.push(self.market_vault_signer.clone());
        account_infos.push(self.market_base_vault.clone());
        account_infos.push(self.market_quote_vault.clone());
        account_infos.push(self.amm_program.clone());
        account_infos.push(self.amm_pool.clone());
        account_infos.push(self.amm_authority.clone());
        account_infos.push(self.amm_open_orders.clone());
        account_infos.push(self.amm_lp_mint.clone());
        account_infos.push(self.amm_base_vault.clone());
        account_infos.push(self.amm_quote_vault.clone());
        account_infos.push(self.amm_target_orders.clone());
        account_infos.push(self.amm_config.clone());
        account_infos.push(self.amm_create_fee_destination.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.base_vault.clone());
        account_infos.push(self.quote_vault.clone());
        account_infos.push(self.pool_lp_token.clone());
        account_infos.push(self.spl_token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.rent_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MigrateToAmm` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[]` base_mint
///   2. `[]` quote_mint
///   3. `[]` openbook_program
///   4. `[writable]` market
///   5. `[writable]` request_queue
///   6. `[writable]` event_queue
///   7. `[writable]` bids
///   8. `[writable]` asks
///   9. `[]` market_vault_signer
///   10. `[writable]` market_base_vault
///   11. `[writable]` market_quote_vault
///   12. `[]` amm_program
///   13. `[writable]` amm_pool
///   14. `[]` amm_authority
///   15. `[writable]` amm_open_orders
///   16. `[writable]` amm_lp_mint
///   17. `[writable]` amm_base_vault
///   18. `[writable]` amm_quote_vault
///   19. `[writable]` amm_target_orders
///   20. `[]` amm_config
///   21. `[writable]` amm_create_fee_destination
///   22. `[writable]` authority
///   23. `[writable]` pool_state
///   24. `[]` global_config
///   25. `[writable]` base_vault
///   26. `[writable]` quote_vault
///   27. `[writable]` pool_lp_token
///   28. `[]` spl_token_program
///   29. `[]` associated_token_program
///   30. `[]` system_program
///   31. `[]` rent_program
#[derive(Clone, Debug)]
pub struct MigrateToAmmCpiBuilder<'a, 'b> {
    instruction: Box<MigrateToAmmCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MigrateToAmmCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MigrateToAmmCpiBuilderInstruction {
            __program: program,
            payer: None,
            base_mint: None,
            quote_mint: None,
            openbook_program: None,
            market: None,
            request_queue: None,
            event_queue: None,
            bids: None,
            asks: None,
            market_vault_signer: None,
            market_base_vault: None,
            market_quote_vault: None,
            amm_program: None,
            amm_pool: None,
            amm_authority: None,
            amm_open_orders: None,
            amm_lp_mint: None,
            amm_base_vault: None,
            amm_quote_vault: None,
            amm_target_orders: None,
            amm_config: None,
            amm_create_fee_destination: None,
            authority: None,
            pool_state: None,
            global_config: None,
            base_vault: None,
            quote_vault: None,
            pool_lp_token: None,
            spl_token_program: None,
            associated_token_program: None,
            system_program: None,
            rent_program: None,
            base_lot_size: None,
            quote_lot_size: None,
            market_vault_signer_nonce: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Only migrate_to_amm_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_amm_wallet saved in global_config
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    /// The mint for the base token (token being sold)
    #[inline(always)]
    pub fn base_mint(
        &mut self,
        base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_mint = Some(base_mint);
        self
    }

    /// The mint for the quote token (token used to buy)
    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn openbook_program(
        &mut self,
        openbook_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.openbook_program = Some(openbook_program);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn market(
        &mut self,
        market: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market = Some(market);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn request_queue(
        &mut self,
        request_queue: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.request_queue = Some(request_queue);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn event_queue(
        &mut self,
        event_queue: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_queue = Some(event_queue);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn bids(&mut self, bids: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.bids = Some(bids);
        self
    }

    /// Account created and asigned to openbook_program but not been initialized
    #[inline(always)]
    pub fn asks(&mut self, asks: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asks = Some(asks);
        self
    }

    #[inline(always)]
    pub fn market_vault_signer(
        &mut self,
        market_vault_signer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_vault_signer = Some(market_vault_signer);
        self
    }

    /// Token account that holds the market's base tokens
    #[inline(always)]
    pub fn market_base_vault(
        &mut self,
        market_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_base_vault = Some(market_base_vault);
        self
    }

    /// Token account that holds the market's quote tokens
    #[inline(always)]
    pub fn market_quote_vault(
        &mut self,
        market_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.market_quote_vault = Some(market_quote_vault);
        self
    }

    #[inline(always)]
    pub fn amm_program(
        &mut self,
        amm_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_program = Some(amm_program);
        self
    }

    #[inline(always)]
    pub fn amm_pool(
        &mut self,
        amm_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_pool = Some(amm_pool);
        self
    }

    #[inline(always)]
    pub fn amm_authority(
        &mut self,
        amm_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_authority = Some(amm_authority);
        self
    }

    #[inline(always)]
    pub fn amm_open_orders(
        &mut self,
        amm_open_orders: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_open_orders = Some(amm_open_orders);
        self
    }

    #[inline(always)]
    pub fn amm_lp_mint(
        &mut self,
        amm_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_lp_mint = Some(amm_lp_mint);
        self
    }

    #[inline(always)]
    pub fn amm_base_vault(
        &mut self,
        amm_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_base_vault = Some(amm_base_vault);
        self
    }

    #[inline(always)]
    pub fn amm_quote_vault(
        &mut self,
        amm_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_quote_vault = Some(amm_quote_vault);
        self
    }

    #[inline(always)]
    pub fn amm_target_orders(
        &mut self,
        amm_target_orders: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_target_orders = Some(amm_target_orders);
        self
    }

    #[inline(always)]
    pub fn amm_config(
        &mut self,
        amm_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_config = Some(amm_config);
        self
    }

    #[inline(always)]
    pub fn amm_create_fee_destination(
        &mut self,
        amm_create_fee_destination: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_create_fee_destination = Some(amm_create_fee_destination);
        self
    }

    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// Global config account stores owner
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    #[inline(always)]
    pub fn base_vault(
        &mut self,
        base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault = Some(base_vault);
        self
    }

    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    #[inline(always)]
    pub fn quote_vault(
        &mut self,
        quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_vault = Some(quote_vault);
        self
    }

    #[inline(always)]
    pub fn pool_lp_token(
        &mut self,
        pool_lp_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_lp_token = Some(pool_lp_token);
        self
    }

    /// SPL Token program for the base token
    /// Must be the standard Token program
    #[inline(always)]
    pub fn spl_token_program(
        &mut self,
        spl_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.spl_token_program = Some(spl_token_program);
        self
    }

    /// Program to create an ATA for receiving fee NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// Required for account creation
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Required for rent exempt calculations
    #[inline(always)]
    pub fn rent_program(
        &mut self,
        rent_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_program = Some(rent_program);
        self
    }

    #[inline(always)]
    pub fn base_lot_size(&mut self, base_lot_size: u64) -> &mut Self {
        self.instruction.base_lot_size = Some(base_lot_size);
        self
    }

    #[inline(always)]
    pub fn quote_lot_size(&mut self, quote_lot_size: u64) -> &mut Self {
        self.instruction.quote_lot_size = Some(quote_lot_size);
        self
    }

    #[inline(always)]
    pub fn market_vault_signer_nonce(&mut self, market_vault_signer_nonce: u8) -> &mut Self {
        self.instruction.market_vault_signer_nonce = Some(market_vault_signer_nonce);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = MigrateToAmmInstructionArgs {
            base_lot_size: self
                .instruction
                .base_lot_size
                .clone()
                .expect("base_lot_size is not set"),
            quote_lot_size: self
                .instruction
                .quote_lot_size
                .clone()
                .expect("quote_lot_size is not set"),
            market_vault_signer_nonce: self
                .instruction
                .market_vault_signer_nonce
                .clone()
                .expect("market_vault_signer_nonce is not set"),
        };
        let instruction = MigrateToAmmCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            base_mint: self.instruction.base_mint.expect("base_mint is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            openbook_program: self
                .instruction
                .openbook_program
                .expect("openbook_program is not set"),

            market: self.instruction.market.expect("market is not set"),

            request_queue: self
                .instruction
                .request_queue
                .expect("request_queue is not set"),

            event_queue: self
                .instruction
                .event_queue
                .expect("event_queue is not set"),

            bids: self.instruction.bids.expect("bids is not set"),

            asks: self.instruction.asks.expect("asks is not set"),

            market_vault_signer: self
                .instruction
                .market_vault_signer
                .expect("market_vault_signer is not set"),

            market_base_vault: self
                .instruction
                .market_base_vault
                .expect("market_base_vault is not set"),

            market_quote_vault: self
                .instruction
                .market_quote_vault
                .expect("market_quote_vault is not set"),

            amm_program: self
                .instruction
                .amm_program
                .expect("amm_program is not set"),

            amm_pool: self.instruction.amm_pool.expect("amm_pool is not set"),

            amm_authority: self
                .instruction
                .amm_authority
                .expect("amm_authority is not set"),

            amm_open_orders: self
                .instruction
                .amm_open_orders
                .expect("amm_open_orders is not set"),

            amm_lp_mint: self
                .instruction
                .amm_lp_mint
                .expect("amm_lp_mint is not set"),

            amm_base_vault: self
                .instruction
                .amm_base_vault
                .expect("amm_base_vault is not set"),

            amm_quote_vault: self
                .instruction
                .amm_quote_vault
                .expect("amm_quote_vault is not set"),

            amm_target_orders: self
                .instruction
                .amm_target_orders
                .expect("amm_target_orders is not set"),

            amm_config: self.instruction.amm_config.expect("amm_config is not set"),

            amm_create_fee_destination: self
                .instruction
                .amm_create_fee_destination
                .expect("amm_create_fee_destination is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            base_vault: self.instruction.base_vault.expect("base_vault is not set"),

            quote_vault: self
                .instruction
                .quote_vault
                .expect("quote_vault is not set"),

            pool_lp_token: self
                .instruction
                .pool_lp_token
                .expect("pool_lp_token is not set"),

            spl_token_program: self
                .instruction
                .spl_token_program
                .expect("spl_token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            rent_program: self
                .instruction
                .rent_program
                .expect("rent_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MigrateToAmmCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    openbook_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    request_queue: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_queue: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    bids: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asks: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_vault_signer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    market_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_open_orders: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_target_orders: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_create_fee_destination: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_lp_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    spl_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_lot_size: Option<u64>,
    quote_lot_size: Option<u64>,
    market_vault_signer_nonce: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
