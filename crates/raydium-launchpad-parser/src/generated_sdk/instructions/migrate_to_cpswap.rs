//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct MigrateToCpswap {
    /// Only migrate_to_cpswap_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_cpswap_wallet saved in global_config
    pub payer: solana_program::pubkey::Pubkey,
    /// The mint for the base token (token being sold)
    pub base_mint: solana_program::pubkey::Pubkey,
    /// The mint for the quote token (token used to buy)
    pub quote_mint: solana_program::pubkey::Pubkey,
    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    pub platform_config: solana_program::pubkey::Pubkey,

    pub cpswap_program: solana_program::pubkey::Pubkey,
    /// PDA account:
    /// seeds = [
    /// b"pool",
    /// cpswap_config.key().as_ref(),
    /// token_0_mint.key().as_ref(),
    /// token_1_mint.key().as_ref(),
    /// ],
    /// seeds::program = cpswap_program,
    ///
    /// Or random account: must be signed by cli
    pub cpswap_pool: solana_program::pubkey::Pubkey,

    pub cpswap_authority: solana_program::pubkey::Pubkey,

    pub cpswap_lp_mint: solana_program::pubkey::Pubkey,

    pub cpswap_base_vault: solana_program::pubkey::Pubkey,

    pub cpswap_quote_vault: solana_program::pubkey::Pubkey,

    pub cpswap_config: solana_program::pubkey::Pubkey,

    pub cpswap_create_pool_fee: solana_program::pubkey::Pubkey,

    pub cpswap_observation: solana_program::pubkey::Pubkey,

    pub lock_program: solana_program::pubkey::Pubkey,

    pub lock_authority: solana_program::pubkey::Pubkey,

    pub lock_lp_vault: solana_program::pubkey::Pubkey,
    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    pub authority: solana_program::pubkey::Pubkey,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: solana_program::pubkey::Pubkey,
    /// Global config account stores owner
    pub global_config: solana_program::pubkey::Pubkey,
    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    pub base_vault: solana_program::pubkey::Pubkey,
    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    pub quote_vault: solana_program::pubkey::Pubkey,

    pub pool_lp_token: solana_program::pubkey::Pubkey,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub base_token_program: solana_program::pubkey::Pubkey,
    /// SPL Token program for the quote token
    pub quote_token_program: solana_program::pubkey::Pubkey,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: solana_program::pubkey::Pubkey,
    /// Required for account creation
    pub system_program: solana_program::pubkey::Pubkey,
    /// Required for rent exempt calculations
    pub rent_program: solana_program::pubkey::Pubkey,
    /// Program to create NFT metadata accunt
    pub metadata_program: solana_program::pubkey::Pubkey,
}

impl MigrateToCpswap {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(28 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.platform_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cpswap_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cpswap_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cpswap_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cpswap_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cpswap_base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cpswap_quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.cpswap_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cpswap_create_pool_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.cpswap_observation,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lock_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lock_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lock_lp_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_lp_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&MigrateToCpswapInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateToCpswapInstructionData {
    discriminator: [u8; 8],
}

impl MigrateToCpswapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [136, 92, 200, 103, 28, 218, 144, 140],
        }
    }
}

impl Default for MigrateToCpswapInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `MigrateToCpswap`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[]` base_mint
///   2. `[]` quote_mint
///   3. `[]` platform_config
///   4. `[optional]` cpswap_program (default to `CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C`)
///   5. `[writable]` cpswap_pool
///   6. `[]` cpswap_authority
///   7. `[writable]` cpswap_lp_mint
///   8. `[writable]` cpswap_base_vault
///   9. `[writable]` cpswap_quote_vault
///   10. `[]` cpswap_config
///   11. `[writable]` cpswap_create_pool_fee
///   12. `[writable]` cpswap_observation
///   13. `[optional]` lock_program (default to `LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE`)
///   14. `[]` lock_authority
///   15. `[writable]` lock_lp_vault
///   16. `[writable]` authority
///   17. `[writable]` pool_state
///   18. `[]` global_config
///   19. `[writable]` base_vault
///   20. `[writable]` quote_vault
///   21. `[writable]` pool_lp_token
///   22. `[optional]` base_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   23. `[optional]` quote_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   24. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   25. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   26. `[optional]` rent_program (default to `SysvarRent111111111111111111111111111111111`)
///   27. `[optional]` metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
#[derive(Clone, Debug, Default)]
pub struct MigrateToCpswapBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    base_mint: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    platform_config: Option<solana_program::pubkey::Pubkey>,
    cpswap_program: Option<solana_program::pubkey::Pubkey>,
    cpswap_pool: Option<solana_program::pubkey::Pubkey>,
    cpswap_authority: Option<solana_program::pubkey::Pubkey>,
    cpswap_lp_mint: Option<solana_program::pubkey::Pubkey>,
    cpswap_base_vault: Option<solana_program::pubkey::Pubkey>,
    cpswap_quote_vault: Option<solana_program::pubkey::Pubkey>,
    cpswap_config: Option<solana_program::pubkey::Pubkey>,
    cpswap_create_pool_fee: Option<solana_program::pubkey::Pubkey>,
    cpswap_observation: Option<solana_program::pubkey::Pubkey>,
    lock_program: Option<solana_program::pubkey::Pubkey>,
    lock_authority: Option<solana_program::pubkey::Pubkey>,
    lock_lp_vault: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    base_vault: Option<solana_program::pubkey::Pubkey>,
    quote_vault: Option<solana_program::pubkey::Pubkey>,
    pool_lp_token: Option<solana_program::pubkey::Pubkey>,
    base_token_program: Option<solana_program::pubkey::Pubkey>,
    quote_token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    rent_program: Option<solana_program::pubkey::Pubkey>,
    metadata_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MigrateToCpswapBuilder {
    pub fn new() -> Self { Self::default() }

    /// Only migrate_to_cpswap_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_cpswap_wallet saved in global_config
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// The mint for the base token (token being sold)
    #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_mint = Some(base_mint);
        self
    }

    /// The mint for the quote token (token used to buy)
    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    #[inline(always)]
    pub fn platform_config(
        &mut self,
        platform_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.platform_config = Some(platform_config);
        self
    }

    /// `[optional account, default to 'CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C']`
    #[inline(always)]
    pub fn cpswap_program(&mut self, cpswap_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cpswap_program = Some(cpswap_program);
        self
    }

    /// PDA account:
    /// seeds = [
    /// b"pool",
    /// cpswap_config.key().as_ref(),
    /// token_0_mint.key().as_ref(),
    /// token_1_mint.key().as_ref(),
    /// ],
    /// seeds::program = cpswap_program,
    ///
    /// Or random account: must be signed by cli
    #[inline(always)]
    pub fn cpswap_pool(&mut self, cpswap_pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cpswap_pool = Some(cpswap_pool);
        self
    }

    #[inline(always)]
    pub fn cpswap_authority(
        &mut self,
        cpswap_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cpswap_authority = Some(cpswap_authority);
        self
    }

    #[inline(always)]
    pub fn cpswap_lp_mint(&mut self, cpswap_lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cpswap_lp_mint = Some(cpswap_lp_mint);
        self
    }

    #[inline(always)]
    pub fn cpswap_base_vault(
        &mut self,
        cpswap_base_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cpswap_base_vault = Some(cpswap_base_vault);
        self
    }

    #[inline(always)]
    pub fn cpswap_quote_vault(
        &mut self,
        cpswap_quote_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cpswap_quote_vault = Some(cpswap_quote_vault);
        self
    }

    #[inline(always)]
    pub fn cpswap_config(&mut self, cpswap_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.cpswap_config = Some(cpswap_config);
        self
    }

    #[inline(always)]
    pub fn cpswap_create_pool_fee(
        &mut self,
        cpswap_create_pool_fee: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cpswap_create_pool_fee = Some(cpswap_create_pool_fee);
        self
    }

    #[inline(always)]
    pub fn cpswap_observation(
        &mut self,
        cpswap_observation: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.cpswap_observation = Some(cpswap_observation);
        self
    }

    /// `[optional account, default to 'LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE']`
    #[inline(always)]
    pub fn lock_program(&mut self, lock_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lock_program = Some(lock_program);
        self
    }

    #[inline(always)]
    pub fn lock_authority(&mut self, lock_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lock_authority = Some(lock_authority);
        self
    }

    #[inline(always)]
    pub fn lock_lp_vault(&mut self, lock_lp_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lock_lp_vault = Some(lock_lp_vault);
        self
    }

    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// Global config account stores owner
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    #[inline(always)]
    pub fn base_vault(&mut self, base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_vault = Some(base_vault);
        self
    }

    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    #[inline(always)]
    pub fn quote_vault(&mut self, quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_vault = Some(quote_vault);
        self
    }

    #[inline(always)]
    pub fn pool_lp_token(&mut self, pool_lp_token: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_lp_token = Some(pool_lp_token);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL Token program for the base token
    /// Must be the standard Token program
    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_token_program = Some(base_token_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL Token program for the quote token
    #[inline(always)]
    pub fn quote_token_program(
        &mut self,
        quote_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.quote_token_program = Some(quote_token_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// Program to create an ATA for receiving fee NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Required for account creation
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    /// Required for rent exempt calculations
    #[inline(always)]
    pub fn rent_program(&mut self, rent_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent_program = Some(rent_program);
        self
    }

    /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
    /// Program to create NFT metadata accunt
    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_program = Some(metadata_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MigrateToCpswap {
            payer: self.payer.expect("payer is not set"),
            base_mint: self.base_mint.expect("base_mint is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            platform_config: self.platform_config.expect("platform_config is not set"),
            cpswap_program: self.cpswap_program.unwrap_or(solana_program::pubkey!(
                "CPMMoo8L3F4NbTegBCKVNunggL7H1ZpdTHKxQB5qKP1C"
            )),
            cpswap_pool: self.cpswap_pool.expect("cpswap_pool is not set"),
            cpswap_authority: self.cpswap_authority.expect("cpswap_authority is not set"),
            cpswap_lp_mint: self.cpswap_lp_mint.expect("cpswap_lp_mint is not set"),
            cpswap_base_vault: self
                .cpswap_base_vault
                .expect("cpswap_base_vault is not set"),
            cpswap_quote_vault: self
                .cpswap_quote_vault
                .expect("cpswap_quote_vault is not set"),
            cpswap_config: self.cpswap_config.expect("cpswap_config is not set"),
            cpswap_create_pool_fee: self
                .cpswap_create_pool_fee
                .expect("cpswap_create_pool_fee is not set"),
            cpswap_observation: self
                .cpswap_observation
                .expect("cpswap_observation is not set"),
            lock_program: self.lock_program.unwrap_or(solana_program::pubkey!(
                "LockrWmn6K5twhz3y9w1dQERbmgSaRkfnTeTKbpofwE"
            )),
            lock_authority: self.lock_authority.expect("lock_authority is not set"),
            lock_lp_vault: self.lock_lp_vault.expect("lock_lp_vault is not set"),
            authority: self.authority.expect("authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            base_vault: self.base_vault.expect("base_vault is not set"),
            quote_vault: self.quote_vault.expect("quote_vault is not set"),
            pool_lp_token: self.pool_lp_token.expect("pool_lp_token is not set"),
            base_token_program: self.base_token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            quote_token_program: self.quote_token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            rent_program: self.rent_program.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            metadata_program: self.metadata_program.unwrap_or(solana_program::pubkey!(
                "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `migrate_to_cpswap` CPI accounts.
pub struct MigrateToCpswapCpiAccounts<'a, 'b> {
    /// Only migrate_to_cpswap_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_cpswap_wallet saved in global_config
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the base token (token being sold)
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the quote token (token used to buy)
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    pub platform_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA account:
    /// seeds = [
    /// b"pool",
    /// cpswap_config.key().as_ref(),
    /// token_0_mint.key().as_ref(),
    /// token_1_mint.key().as_ref(),
    /// ],
    /// seeds::program = cpswap_program,
    ///
    /// Or random account: must be signed by cli
    pub cpswap_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_create_pool_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_observation: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_lp_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global config account stores owner
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_lp_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the quote token
    pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for rent exempt calculations
    pub rent_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create NFT metadata accunt
    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `migrate_to_cpswap` CPI instruction.
pub struct MigrateToCpswapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Only migrate_to_cpswap_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_cpswap_wallet saved in global_config
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the base token (token being sold)
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the quote token (token used to buy)
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    pub platform_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA account:
    /// seeds = [
    /// b"pool",
    /// cpswap_config.key().as_ref(),
    /// token_0_mint.key().as_ref(),
    /// token_1_mint.key().as_ref(),
    /// ],
    /// seeds::program = cpswap_program,
    ///
    /// Or random account: must be signed by cli
    pub cpswap_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_create_pool_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub cpswap_observation: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_lp_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global config account stores owner
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_lp_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the quote token
    pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create an ATA for receiving fee NFT
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for rent exempt calculations
    pub rent_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Program to create NFT metadata accunt
    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> MigrateToCpswapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MigrateToCpswapCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            base_mint: accounts.base_mint,
            quote_mint: accounts.quote_mint,
            platform_config: accounts.platform_config,
            cpswap_program: accounts.cpswap_program,
            cpswap_pool: accounts.cpswap_pool,
            cpswap_authority: accounts.cpswap_authority,
            cpswap_lp_mint: accounts.cpswap_lp_mint,
            cpswap_base_vault: accounts.cpswap_base_vault,
            cpswap_quote_vault: accounts.cpswap_quote_vault,
            cpswap_config: accounts.cpswap_config,
            cpswap_create_pool_fee: accounts.cpswap_create_pool_fee,
            cpswap_observation: accounts.cpswap_observation,
            lock_program: accounts.lock_program,
            lock_authority: accounts.lock_authority,
            lock_lp_vault: accounts.lock_lp_vault,
            authority: accounts.authority,
            pool_state: accounts.pool_state,
            global_config: accounts.global_config,
            base_vault: accounts.base_vault,
            quote_vault: accounts.quote_vault,
            pool_lp_token: accounts.pool_lp_token,
            base_token_program: accounts.base_token_program,
            quote_token_program: accounts.quote_token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
            rent_program: accounts.rent_program,
            metadata_program: accounts.metadata_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(28 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.platform_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cpswap_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cpswap_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cpswap_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cpswap_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cpswap_base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cpswap_quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.cpswap_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cpswap_create_pool_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.cpswap_observation.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lock_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lock_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lock_lp_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_lp_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&MigrateToCpswapInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(29 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.base_mint.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.platform_config.clone());
        account_infos.push(self.cpswap_program.clone());
        account_infos.push(self.cpswap_pool.clone());
        account_infos.push(self.cpswap_authority.clone());
        account_infos.push(self.cpswap_lp_mint.clone());
        account_infos.push(self.cpswap_base_vault.clone());
        account_infos.push(self.cpswap_quote_vault.clone());
        account_infos.push(self.cpswap_config.clone());
        account_infos.push(self.cpswap_create_pool_fee.clone());
        account_infos.push(self.cpswap_observation.clone());
        account_infos.push(self.lock_program.clone());
        account_infos.push(self.lock_authority.clone());
        account_infos.push(self.lock_lp_vault.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.base_vault.clone());
        account_infos.push(self.quote_vault.clone());
        account_infos.push(self.pool_lp_token.clone());
        account_infos.push(self.base_token_program.clone());
        account_infos.push(self.quote_token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.rent_program.clone());
        account_infos.push(self.metadata_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MigrateToCpswap` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[]` base_mint
///   2. `[]` quote_mint
///   3. `[]` platform_config
///   4. `[]` cpswap_program
///   5. `[writable]` cpswap_pool
///   6. `[]` cpswap_authority
///   7. `[writable]` cpswap_lp_mint
///   8. `[writable]` cpswap_base_vault
///   9. `[writable]` cpswap_quote_vault
///   10. `[]` cpswap_config
///   11. `[writable]` cpswap_create_pool_fee
///   12. `[writable]` cpswap_observation
///   13. `[]` lock_program
///   14. `[]` lock_authority
///   15. `[writable]` lock_lp_vault
///   16. `[writable]` authority
///   17. `[writable]` pool_state
///   18. `[]` global_config
///   19. `[writable]` base_vault
///   20. `[writable]` quote_vault
///   21. `[writable]` pool_lp_token
///   22. `[]` base_token_program
///   23. `[]` quote_token_program
///   24. `[]` associated_token_program
///   25. `[]` system_program
///   26. `[]` rent_program
///   27. `[]` metadata_program
#[derive(Clone, Debug)]
pub struct MigrateToCpswapCpiBuilder<'a, 'b> {
    instruction: Box<MigrateToCpswapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MigrateToCpswapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MigrateToCpswapCpiBuilderInstruction {
            __program: program,
            payer: None,
            base_mint: None,
            quote_mint: None,
            platform_config: None,
            cpswap_program: None,
            cpswap_pool: None,
            cpswap_authority: None,
            cpswap_lp_mint: None,
            cpswap_base_vault: None,
            cpswap_quote_vault: None,
            cpswap_config: None,
            cpswap_create_pool_fee: None,
            cpswap_observation: None,
            lock_program: None,
            lock_authority: None,
            lock_lp_vault: None,
            authority: None,
            pool_state: None,
            global_config: None,
            base_vault: None,
            quote_vault: None,
            pool_lp_token: None,
            base_token_program: None,
            quote_token_program: None,
            associated_token_program: None,
            system_program: None,
            rent_program: None,
            metadata_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Only migrate_to_cpswap_wallet can migrate to cpswap pool
    /// This signer must match the migrate_to_cpswap_wallet saved in global_config
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    /// The mint for the base token (token being sold)
    #[inline(always)]
    pub fn base_mint(
        &mut self,
        base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_mint = Some(base_mint);
        self
    }

    /// The mint for the quote token (token used to buy)
    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    #[inline(always)]
    pub fn platform_config(
        &mut self,
        platform_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.platform_config = Some(platform_config);
        self
    }

    #[inline(always)]
    pub fn cpswap_program(
        &mut self,
        cpswap_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpswap_program = Some(cpswap_program);
        self
    }

    /// PDA account:
    /// seeds = [
    /// b"pool",
    /// cpswap_config.key().as_ref(),
    /// token_0_mint.key().as_ref(),
    /// token_1_mint.key().as_ref(),
    /// ],
    /// seeds::program = cpswap_program,
    ///
    /// Or random account: must be signed by cli
    #[inline(always)]
    pub fn cpswap_pool(
        &mut self,
        cpswap_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpswap_pool = Some(cpswap_pool);
        self
    }

    #[inline(always)]
    pub fn cpswap_authority(
        &mut self,
        cpswap_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpswap_authority = Some(cpswap_authority);
        self
    }

    #[inline(always)]
    pub fn cpswap_lp_mint(
        &mut self,
        cpswap_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpswap_lp_mint = Some(cpswap_lp_mint);
        self
    }

    #[inline(always)]
    pub fn cpswap_base_vault(
        &mut self,
        cpswap_base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpswap_base_vault = Some(cpswap_base_vault);
        self
    }

    #[inline(always)]
    pub fn cpswap_quote_vault(
        &mut self,
        cpswap_quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpswap_quote_vault = Some(cpswap_quote_vault);
        self
    }

    #[inline(always)]
    pub fn cpswap_config(
        &mut self,
        cpswap_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpswap_config = Some(cpswap_config);
        self
    }

    #[inline(always)]
    pub fn cpswap_create_pool_fee(
        &mut self,
        cpswap_create_pool_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpswap_create_pool_fee = Some(cpswap_create_pool_fee);
        self
    }

    #[inline(always)]
    pub fn cpswap_observation(
        &mut self,
        cpswap_observation: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.cpswap_observation = Some(cpswap_observation);
        self
    }

    #[inline(always)]
    pub fn lock_program(
        &mut self,
        lock_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lock_program = Some(lock_program);
        self
    }

    #[inline(always)]
    pub fn lock_authority(
        &mut self,
        lock_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lock_authority = Some(lock_authority);
        self
    }

    #[inline(always)]
    pub fn lock_lp_vault(
        &mut self,
        lock_lp_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lock_lp_vault = Some(lock_lp_vault);
        self
    }

    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// Global config account stores owner
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    /// The pool's vault for base tokens
    /// Will be fully drained during migration
    #[inline(always)]
    pub fn base_vault(
        &mut self,
        base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault = Some(base_vault);
        self
    }

    /// The pool's vault for quote tokens
    /// Will be fully drained during migration
    #[inline(always)]
    pub fn quote_vault(
        &mut self,
        quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_vault = Some(quote_vault);
        self
    }

    #[inline(always)]
    pub fn pool_lp_token(
        &mut self,
        pool_lp_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_lp_token = Some(pool_lp_token);
        self
    }

    /// SPL Token program for the base token
    /// Must be the standard Token program
    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_token_program = Some(base_token_program);
        self
    }

    /// SPL Token program for the quote token
    #[inline(always)]
    pub fn quote_token_program(
        &mut self,
        quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_token_program = Some(quote_token_program);
        self
    }

    /// Program to create an ATA for receiving fee NFT
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// Required for account creation
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Required for rent exempt calculations
    #[inline(always)]
    pub fn rent_program(
        &mut self,
        rent_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_program = Some(rent_program);
        self
    }

    /// Program to create NFT metadata accunt
    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_program = Some(metadata_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = MigrateToCpswapCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            base_mint: self.instruction.base_mint.expect("base_mint is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            platform_config: self
                .instruction
                .platform_config
                .expect("platform_config is not set"),

            cpswap_program: self
                .instruction
                .cpswap_program
                .expect("cpswap_program is not set"),

            cpswap_pool: self
                .instruction
                .cpswap_pool
                .expect("cpswap_pool is not set"),

            cpswap_authority: self
                .instruction
                .cpswap_authority
                .expect("cpswap_authority is not set"),

            cpswap_lp_mint: self
                .instruction
                .cpswap_lp_mint
                .expect("cpswap_lp_mint is not set"),

            cpswap_base_vault: self
                .instruction
                .cpswap_base_vault
                .expect("cpswap_base_vault is not set"),

            cpswap_quote_vault: self
                .instruction
                .cpswap_quote_vault
                .expect("cpswap_quote_vault is not set"),

            cpswap_config: self
                .instruction
                .cpswap_config
                .expect("cpswap_config is not set"),

            cpswap_create_pool_fee: self
                .instruction
                .cpswap_create_pool_fee
                .expect("cpswap_create_pool_fee is not set"),

            cpswap_observation: self
                .instruction
                .cpswap_observation
                .expect("cpswap_observation is not set"),

            lock_program: self
                .instruction
                .lock_program
                .expect("lock_program is not set"),

            lock_authority: self
                .instruction
                .lock_authority
                .expect("lock_authority is not set"),

            lock_lp_vault: self
                .instruction
                .lock_lp_vault
                .expect("lock_lp_vault is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            base_vault: self.instruction.base_vault.expect("base_vault is not set"),

            quote_vault: self
                .instruction
                .quote_vault
                .expect("quote_vault is not set"),

            pool_lp_token: self
                .instruction
                .pool_lp_token
                .expect("pool_lp_token is not set"),

            base_token_program: self
                .instruction
                .base_token_program
                .expect("base_token_program is not set"),

            quote_token_program: self
                .instruction
                .quote_token_program
                .expect("quote_token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            rent_program: self
                .instruction
                .rent_program
                .expect("rent_program is not set"),

            metadata_program: self
                .instruction
                .metadata_program
                .expect("metadata_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MigrateToCpswapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    platform_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpswap_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpswap_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpswap_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpswap_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpswap_base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpswap_quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpswap_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpswap_create_pool_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    cpswap_observation: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lock_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lock_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lock_lp_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_lp_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
