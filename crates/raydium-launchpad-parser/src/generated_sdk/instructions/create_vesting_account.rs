//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CreateVestingAccount {
    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    pub creator: solana_program::pubkey::Pubkey,

    pub beneficiary: solana_program::pubkey::Pubkey,
    /// The pool state account
    pub pool_state: solana_program::pubkey::Pubkey,
    /// The vesting record account
    pub vesting_record: solana_program::pubkey::Pubkey,
    /// Required for account creation
    pub system_program: solana_program::pubkey::Pubkey,
}

impl CreateVestingAccount {
    pub fn instruction(
        &self,
        args: CreateVestingAccountInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateVestingAccountInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.creator,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.beneficiary,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vesting_record,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateVestingAccountInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateVestingAccountInstructionData {
    discriminator: [u8; 8],
}

impl CreateVestingAccountInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [129, 178, 2, 13, 217, 172, 230, 218],
        }
    }
}

impl Default for CreateVestingAccountInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateVestingAccountInstructionArgs {
    pub share_amount: u64,
}

/// Instruction builder for `CreateVestingAccount`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` creator
///   1. `[writable]` beneficiary
///   2. `[writable]` pool_state
///   3. `[writable]` vesting_record
///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateVestingAccountBuilder {
    creator: Option<solana_program::pubkey::Pubkey>,
    beneficiary: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    vesting_record: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    share_amount: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateVestingAccountBuilder {
    pub fn new() -> Self { Self::default() }

    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    #[inline(always)]
    pub fn creator(&mut self, creator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.creator = Some(creator);
        self
    }

    #[inline(always)]
    pub fn beneficiary(&mut self, beneficiary: solana_program::pubkey::Pubkey) -> &mut Self {
        self.beneficiary = Some(beneficiary);
        self
    }

    /// The pool state account
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// The vesting record account
    #[inline(always)]
    pub fn vesting_record(&mut self, vesting_record: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vesting_record = Some(vesting_record);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Required for account creation
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn share_amount(&mut self, share_amount: u64) -> &mut Self {
        self.share_amount = Some(share_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateVestingAccount {
            creator: self.creator.expect("creator is not set"),
            beneficiary: self.beneficiary.expect("beneficiary is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            vesting_record: self.vesting_record.expect("vesting_record is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = CreateVestingAccountInstructionArgs {
            share_amount: self.share_amount.clone().expect("share_amount is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_vesting_account` CPI accounts.
pub struct CreateVestingAccountCpiAccounts<'a, 'b> {
    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    pub creator: &'b solana_program::account_info::AccountInfo<'a>,

    pub beneficiary: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool state account
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vesting record account
    pub vesting_record: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_vesting_account` CPI instruction.
pub struct CreateVestingAccountCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    pub creator: &'b solana_program::account_info::AccountInfo<'a>,

    pub beneficiary: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool state account
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vesting record account
    pub vesting_record: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateVestingAccountInstructionArgs,
}

impl<'a, 'b> CreateVestingAccountCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateVestingAccountCpiAccounts<'a, 'b>,
        args: CreateVestingAccountInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            creator: accounts.creator,
            beneficiary: accounts.beneficiary,
            pool_state: accounts.pool_state,
            vesting_record: accounts.vesting_record,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(5 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.creator.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.beneficiary.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vesting_record.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateVestingAccountInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.creator.clone());
        account_infos.push(self.beneficiary.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.vesting_record.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateVestingAccount` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` creator
///   1. `[writable]` beneficiary
///   2. `[writable]` pool_state
///   3. `[writable]` vesting_record
///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateVestingAccountCpiBuilder<'a, 'b> {
    instruction: Box<CreateVestingAccountCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateVestingAccountCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateVestingAccountCpiBuilderInstruction {
            __program: program,
            creator: None,
            beneficiary: None,
            pool_state: None,
            vesting_record: None,
            system_program: None,
            share_amount: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    #[inline(always)]
    pub fn creator(
        &mut self,
        creator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.creator = Some(creator);
        self
    }

    #[inline(always)]
    pub fn beneficiary(
        &mut self,
        beneficiary: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.beneficiary = Some(beneficiary);
        self
    }

    /// The pool state account
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// The vesting record account
    #[inline(always)]
    pub fn vesting_record(
        &mut self,
        vesting_record: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vesting_record = Some(vesting_record);
        self
    }

    /// Required for account creation
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn share_amount(&mut self, share_amount: u64) -> &mut Self {
        self.instruction.share_amount = Some(share_amount);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateVestingAccountInstructionArgs {
            share_amount: self
                .instruction
                .share_amount
                .clone()
                .expect("share_amount is not set"),
        };
        let instruction = CreateVestingAccountCpi {
            __program: self.instruction.__program,

            creator: self.instruction.creator.expect("creator is not set"),

            beneficiary: self
                .instruction
                .beneficiary
                .expect("beneficiary is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            vesting_record: self
                .instruction
                .vesting_record
                .expect("vesting_record is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateVestingAccountCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    creator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    beneficiary: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vesting_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    share_amount: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
