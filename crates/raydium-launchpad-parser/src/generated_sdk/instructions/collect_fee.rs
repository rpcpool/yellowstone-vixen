//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CollectFee {
    /// Only protocol_fee_owner saved in global_config can collect protocol fee now
    pub owner: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,
    /// Pool state stores accumulated protocol fee amount
    pub pool_state: solana_program::pubkey::Pubkey,
    /// Global config account stores owner
    pub global_config: solana_program::pubkey::Pubkey,
    /// The address that holds pool tokens for quote token
    pub quote_vault: solana_program::pubkey::Pubkey,
    /// The mint of quote token vault
    pub quote_mint: solana_program::pubkey::Pubkey,
    /// The address that receives the collected quote token fees
    pub recipient_token_account: solana_program::pubkey::Pubkey,
    /// SPL program for input token transfers
    pub token_program: solana_program::pubkey::Pubkey,
}

impl CollectFee {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.recipient_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&CollectFeeInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CollectFeeInstructionData {
    discriminator: [u8; 8],
}

impl CollectFeeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [60, 173, 247, 103, 4, 93, 130, 48],
        }
    }
}

impl Default for CollectFeeInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `CollectFee`.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[]` authority
///   2. `[writable]` pool_state
///   3. `[]` global_config
///   4. `[writable]` quote_vault
///   5. `[]` quote_mint
///   6. `[writable]` recipient_token_account
///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct CollectFeeBuilder {
    owner: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    quote_vault: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    recipient_token_account: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CollectFeeBuilder {
    pub fn new() -> Self { Self::default() }

    /// Only protocol_fee_owner saved in global_config can collect protocol fee now
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Pool state stores accumulated protocol fee amount
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// Global config account stores owner
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    /// The address that holds pool tokens for quote token
    #[inline(always)]
    pub fn quote_vault(&mut self, quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_vault = Some(quote_vault);
        self
    }

    /// The mint of quote token vault
    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    /// The address that receives the collected quote token fees
    #[inline(always)]
    pub fn recipient_token_account(
        &mut self,
        recipient_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token_account = Some(recipient_token_account);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL program for input token transfers
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CollectFee {
            owner: self.owner.expect("owner is not set"),
            authority: self.authority.expect("authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            quote_vault: self.quote_vault.expect("quote_vault is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            recipient_token_account: self
                .recipient_token_account
                .expect("recipient_token_account is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `collect_fee` CPI accounts.
pub struct CollectFeeCpiAccounts<'a, 'b> {
    /// Only protocol_fee_owner saved in global_config can collect protocol fee now
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pool state stores accumulated protocol fee amount
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global config account stores owner
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for quote token
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of quote token vault
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that receives the collected quote token fees
    pub recipient_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL program for input token transfers
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `collect_fee` CPI instruction.
pub struct CollectFeeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Only protocol_fee_owner saved in global_config can collect protocol fee now
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pool state stores accumulated protocol fee amount
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global config account stores owner
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that holds pool tokens for quote token
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of quote token vault
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The address that receives the collected quote token fees
    pub recipient_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL program for input token transfers
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> CollectFeeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CollectFeeCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            authority: accounts.authority,
            pool_state: accounts.pool_state,
            global_config: accounts.global_config,
            quote_vault: accounts.quote_vault,
            quote_mint: accounts.quote_mint,
            recipient_token_account: accounts.recipient_token_account,
            token_program: accounts.token_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.recipient_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&CollectFeeInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.quote_vault.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.recipient_token_account.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CollectFee` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` owner
///   1. `[]` authority
///   2. `[writable]` pool_state
///   3. `[]` global_config
///   4. `[writable]` quote_vault
///   5. `[]` quote_mint
///   6. `[writable]` recipient_token_account
///   7. `[]` token_program
#[derive(Clone, Debug)]
pub struct CollectFeeCpiBuilder<'a, 'b> {
    instruction: Box<CollectFeeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CollectFeeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CollectFeeCpiBuilderInstruction {
            __program: program,
            owner: None,
            authority: None,
            pool_state: None,
            global_config: None,
            quote_vault: None,
            quote_mint: None,
            recipient_token_account: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Only protocol_fee_owner saved in global_config can collect protocol fee now
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Pool state stores accumulated protocol fee amount
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// Global config account stores owner
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    /// The address that holds pool tokens for quote token
    #[inline(always)]
    pub fn quote_vault(
        &mut self,
        quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_vault = Some(quote_vault);
        self
    }

    /// The mint of quote token vault
    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    /// The address that receives the collected quote token fees
    #[inline(always)]
    pub fn recipient_token_account(
        &mut self,
        recipient_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token_account = Some(recipient_token_account);
        self
    }

    /// SPL program for input token transfers
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = CollectFeeCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            quote_vault: self
                .instruction
                .quote_vault
                .expect("quote_vault is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            recipient_token_account: self
                .instruction
                .recipient_token_account
                .expect("recipient_token_account is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CollectFeeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    recipient_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
