//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct BuyExactIn {
    /// The user performing the swap operation
    /// Must sign the transaction and pay for fees
    pub payer: solana_program::pubkey::Pubkey,
    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    pub authority: solana_program::pubkey::Pubkey,
    /// Global configuration account containing protocol-wide settings
    /// Used to read protocol fee rates and curve type
    pub global_config: solana_program::pubkey::Pubkey,
    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    pub platform_config: solana_program::pubkey::Pubkey,
    /// The pool state account where the swap will be performed
    /// Contains current pool parameters and balances
    pub pool_state: solana_program::pubkey::Pubkey,
    /// The user's token account for base tokens (tokens being bought)
    /// Will receive the output tokens after the swap
    pub user_base_token: solana_program::pubkey::Pubkey,
    /// The user's token account for quote tokens (tokens being sold)
    /// Will be debited for the input amount
    pub user_quote_token: solana_program::pubkey::Pubkey,
    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    pub base_vault: solana_program::pubkey::Pubkey,
    /// The pool's vault for quote tokens
    /// Will receive the input tokens from the user
    pub quote_vault: solana_program::pubkey::Pubkey,
    /// The mint of the base token
    /// Used for transfer fee calculations if applicable
    pub base_token_mint: solana_program::pubkey::Pubkey,
    /// The mint of the quote token
    pub quote_token_mint: solana_program::pubkey::Pubkey,
    /// SPL Token program for base token transfers
    pub base_token_program: solana_program::pubkey::Pubkey,
    /// SPL Token program for quote token transfers
    pub quote_token_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl BuyExactIn {
    pub fn instruction(
        &self,
        args: BuyExactInInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: BuyExactInInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.platform_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_base_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_quote_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&BuyExactInInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuyExactInInstructionData {
    discriminator: [u8; 8],
}

impl BuyExactInInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [250, 234, 13, 123, 213, 156, 19, 236],
        }
    }
}

impl Default for BuyExactInInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct BuyExactInInstructionArgs {
    pub amount_in: u64,
    pub minimum_amount_out: u64,
    pub share_fee_rate: u64,
}

/// Instruction builder for `BuyExactIn`.
///
/// ### Accounts:
///
///   0. `[signer]` payer
///   1. `[]` authority
///   2. `[]` global_config
///   3. `[]` platform_config
///   4. `[writable]` pool_state
///   5. `[writable]` user_base_token
///   6. `[writable]` user_quote_token
///   7. `[writable]` base_vault
///   8. `[writable]` quote_vault
///   9. `[]` base_token_mint
///   10. `[]` quote_token_mint
///   11. `[]` base_token_program
///   12. `[optional]` quote_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   13. `[]` event_authority
///   14. `[]` program
#[derive(Clone, Debug, Default)]
pub struct BuyExactInBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    platform_config: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    user_base_token: Option<solana_program::pubkey::Pubkey>,
    user_quote_token: Option<solana_program::pubkey::Pubkey>,
    base_vault: Option<solana_program::pubkey::Pubkey>,
    quote_vault: Option<solana_program::pubkey::Pubkey>,
    base_token_mint: Option<solana_program::pubkey::Pubkey>,
    quote_token_mint: Option<solana_program::pubkey::Pubkey>,
    base_token_program: Option<solana_program::pubkey::Pubkey>,
    quote_token_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    amount_in: Option<u64>,
    minimum_amount_out: Option<u64>,
    share_fee_rate: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl BuyExactInBuilder {
    pub fn new() -> Self { Self::default() }

    /// The user performing the swap operation
    /// Must sign the transaction and pay for fees
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Global configuration account containing protocol-wide settings
    /// Used to read protocol fee rates and curve type
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    #[inline(always)]
    pub fn platform_config(
        &mut self,
        platform_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.platform_config = Some(platform_config);
        self
    }

    /// The pool state account where the swap will be performed
    /// Contains current pool parameters and balances
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// The user's token account for base tokens (tokens being bought)
    /// Will receive the output tokens after the swap
    #[inline(always)]
    pub fn user_base_token(
        &mut self,
        user_base_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_base_token = Some(user_base_token);
        self
    }

    /// The user's token account for quote tokens (tokens being sold)
    /// Will be debited for the input amount
    #[inline(always)]
    pub fn user_quote_token(
        &mut self,
        user_quote_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_quote_token = Some(user_quote_token);
        self
    }

    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    #[inline(always)]
    pub fn base_vault(&mut self, base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_vault = Some(base_vault);
        self
    }

    /// The pool's vault for quote tokens
    /// Will receive the input tokens from the user
    #[inline(always)]
    pub fn quote_vault(&mut self, quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_vault = Some(quote_vault);
        self
    }

    /// The mint of the base token
    /// Used for transfer fee calculations if applicable
    #[inline(always)]
    pub fn base_token_mint(
        &mut self,
        base_token_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_token_mint = Some(base_token_mint);
        self
    }

    /// The mint of the quote token
    #[inline(always)]
    pub fn quote_token_mint(
        &mut self,
        quote_token_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.quote_token_mint = Some(quote_token_mint);
        self
    }

    /// SPL Token program for base token transfers
    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_token_program = Some(base_token_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL Token program for quote token transfers
    #[inline(always)]
    pub fn quote_token_program(
        &mut self,
        quote_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.quote_token_program = Some(quote_token_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.amount_in = Some(amount_in);
        self
    }

    #[inline(always)]
    pub fn minimum_amount_out(&mut self, minimum_amount_out: u64) -> &mut Self {
        self.minimum_amount_out = Some(minimum_amount_out);
        self
    }

    #[inline(always)]
    pub fn share_fee_rate(&mut self, share_fee_rate: u64) -> &mut Self {
        self.share_fee_rate = Some(share_fee_rate);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = BuyExactIn {
            payer: self.payer.expect("payer is not set"),
            authority: self.authority.expect("authority is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            platform_config: self.platform_config.expect("platform_config is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            user_base_token: self.user_base_token.expect("user_base_token is not set"),
            user_quote_token: self.user_quote_token.expect("user_quote_token is not set"),
            base_vault: self.base_vault.expect("base_vault is not set"),
            quote_vault: self.quote_vault.expect("quote_vault is not set"),
            base_token_mint: self.base_token_mint.expect("base_token_mint is not set"),
            quote_token_mint: self.quote_token_mint.expect("quote_token_mint is not set"),
            base_token_program: self
                .base_token_program
                .expect("base_token_program is not set"),
            quote_token_program: self.quote_token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = BuyExactInInstructionArgs {
            amount_in: self.amount_in.clone().expect("amount_in is not set"),
            minimum_amount_out: self
                .minimum_amount_out
                .clone()
                .expect("minimum_amount_out is not set"),
            share_fee_rate: self
                .share_fee_rate
                .clone()
                .expect("share_fee_rate is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `buy_exact_in` CPI accounts.
pub struct BuyExactInCpiAccounts<'a, 'b> {
    /// The user performing the swap operation
    /// Must sign the transaction and pay for fees
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global configuration account containing protocol-wide settings
    /// Used to read protocol fee rates and curve type
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    pub platform_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool state account where the swap will be performed
    /// Contains current pool parameters and balances
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user's token account for base tokens (tokens being bought)
    /// Will receive the output tokens after the swap
    pub user_base_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user's token account for quote tokens (tokens being sold)
    /// Will be debited for the input amount
    pub user_quote_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for quote tokens
    /// Will receive the input tokens from the user
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of the base token
    /// Used for transfer fee calculations if applicable
    pub base_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of the quote token
    pub quote_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for base token transfers
    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for quote token transfers
    pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `buy_exact_in` CPI instruction.
pub struct BuyExactInCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user performing the swap operation
    /// Must sign the transaction and pay for fees
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global configuration account containing protocol-wide settings
    /// Used to read protocol fee rates and curve type
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    pub platform_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool state account where the swap will be performed
    /// Contains current pool parameters and balances
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user's token account for base tokens (tokens being bought)
    /// Will receive the output tokens after the swap
    pub user_base_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user's token account for quote tokens (tokens being sold)
    /// Will be debited for the input amount
    pub user_quote_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for quote tokens
    /// Will receive the input tokens from the user
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of the base token
    /// Used for transfer fee calculations if applicable
    pub base_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of the quote token
    pub quote_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for base token transfers
    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for quote token transfers
    pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: BuyExactInInstructionArgs,
}

impl<'a, 'b> BuyExactInCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: BuyExactInCpiAccounts<'a, 'b>,
        args: BuyExactInInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            authority: accounts.authority,
            global_config: accounts.global_config,
            platform_config: accounts.platform_config,
            pool_state: accounts.pool_state,
            user_base_token: accounts.user_base_token,
            user_quote_token: accounts.user_quote_token,
            base_vault: accounts.base_vault,
            quote_vault: accounts.quote_vault,
            base_token_mint: accounts.base_token_mint,
            quote_token_mint: accounts.quote_token_mint,
            base_token_program: accounts.base_token_program,
            quote_token_program: accounts.quote_token_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.platform_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_base_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_quote_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&BuyExactInInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.platform_config.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.user_base_token.clone());
        account_infos.push(self.user_quote_token.clone());
        account_infos.push(self.base_vault.clone());
        account_infos.push(self.quote_vault.clone());
        account_infos.push(self.base_token_mint.clone());
        account_infos.push(self.quote_token_mint.clone());
        account_infos.push(self.base_token_program.clone());
        account_infos.push(self.quote_token_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `BuyExactIn` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` payer
///   1. `[]` authority
///   2. `[]` global_config
///   3. `[]` platform_config
///   4. `[writable]` pool_state
///   5. `[writable]` user_base_token
///   6. `[writable]` user_quote_token
///   7. `[writable]` base_vault
///   8. `[writable]` quote_vault
///   9. `[]` base_token_mint
///   10. `[]` quote_token_mint
///   11. `[]` base_token_program
///   12. `[]` quote_token_program
///   13. `[]` event_authority
///   14. `[]` program
#[derive(Clone, Debug)]
pub struct BuyExactInCpiBuilder<'a, 'b> {
    instruction: Box<BuyExactInCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> BuyExactInCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(BuyExactInCpiBuilderInstruction {
            __program: program,
            payer: None,
            authority: None,
            global_config: None,
            platform_config: None,
            pool_state: None,
            user_base_token: None,
            user_quote_token: None,
            base_vault: None,
            quote_vault: None,
            base_token_mint: None,
            quote_token_mint: None,
            base_token_program: None,
            quote_token_program: None,
            event_authority: None,
            program: None,
            amount_in: None,
            minimum_amount_out: None,
            share_fee_rate: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// The user performing the swap operation
    /// Must sign the transaction and pay for fees
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    /// PDA that acts as the authority for pool vault operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Global configuration account containing protocol-wide settings
    /// Used to read protocol fee rates and curve type
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    /// Platform configuration account containing platform-wide settings
    /// Used to read platform fee rate
    #[inline(always)]
    pub fn platform_config(
        &mut self,
        platform_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.platform_config = Some(platform_config);
        self
    }

    /// The pool state account where the swap will be performed
    /// Contains current pool parameters and balances
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// The user's token account for base tokens (tokens being bought)
    /// Will receive the output tokens after the swap
    #[inline(always)]
    pub fn user_base_token(
        &mut self,
        user_base_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_base_token = Some(user_base_token);
        self
    }

    /// The user's token account for quote tokens (tokens being sold)
    /// Will be debited for the input amount
    #[inline(always)]
    pub fn user_quote_token(
        &mut self,
        user_quote_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_quote_token = Some(user_quote_token);
        self
    }

    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    #[inline(always)]
    pub fn base_vault(
        &mut self,
        base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault = Some(base_vault);
        self
    }

    /// The pool's vault for quote tokens
    /// Will receive the input tokens from the user
    #[inline(always)]
    pub fn quote_vault(
        &mut self,
        quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_vault = Some(quote_vault);
        self
    }

    /// The mint of the base token
    /// Used for transfer fee calculations if applicable
    #[inline(always)]
    pub fn base_token_mint(
        &mut self,
        base_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_token_mint = Some(base_token_mint);
        self
    }

    /// The mint of the quote token
    #[inline(always)]
    pub fn quote_token_mint(
        &mut self,
        quote_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_token_mint = Some(quote_token_mint);
        self
    }

    /// SPL Token program for base token transfers
    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_token_program = Some(base_token_program);
        self
    }

    /// SPL Token program for quote token transfers
    #[inline(always)]
    pub fn quote_token_program(
        &mut self,
        quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_token_program = Some(quote_token_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn amount_in(&mut self, amount_in: u64) -> &mut Self {
        self.instruction.amount_in = Some(amount_in);
        self
    }

    #[inline(always)]
    pub fn minimum_amount_out(&mut self, minimum_amount_out: u64) -> &mut Self {
        self.instruction.minimum_amount_out = Some(minimum_amount_out);
        self
    }

    #[inline(always)]
    pub fn share_fee_rate(&mut self, share_fee_rate: u64) -> &mut Self {
        self.instruction.share_fee_rate = Some(share_fee_rate);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = BuyExactInInstructionArgs {
            amount_in: self
                .instruction
                .amount_in
                .clone()
                .expect("amount_in is not set"),
            minimum_amount_out: self
                .instruction
                .minimum_amount_out
                .clone()
                .expect("minimum_amount_out is not set"),
            share_fee_rate: self
                .instruction
                .share_fee_rate
                .clone()
                .expect("share_fee_rate is not set"),
        };
        let instruction = BuyExactInCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            platform_config: self
                .instruction
                .platform_config
                .expect("platform_config is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            user_base_token: self
                .instruction
                .user_base_token
                .expect("user_base_token is not set"),

            user_quote_token: self
                .instruction
                .user_quote_token
                .expect("user_quote_token is not set"),

            base_vault: self.instruction.base_vault.expect("base_vault is not set"),

            quote_vault: self
                .instruction
                .quote_vault
                .expect("quote_vault is not set"),

            base_token_mint: self
                .instruction
                .base_token_mint
                .expect("base_token_mint is not set"),

            quote_token_mint: self
                .instruction
                .quote_token_mint
                .expect("quote_token_mint is not set"),

            base_token_program: self
                .instruction
                .base_token_program
                .expect("base_token_program is not set"),

            quote_token_program: self
                .instruction
                .quote_token_program
                .expect("quote_token_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct BuyExactInCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    platform_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_base_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_quote_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amount_in: Option<u64>,
    minimum_amount_out: Option<u64>,
    share_fee_rate: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
