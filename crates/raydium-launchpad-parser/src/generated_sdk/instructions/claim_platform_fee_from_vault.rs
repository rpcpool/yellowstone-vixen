//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

pub const CLAIM_PLATFORM_FEE_FROM_VAULT_DISCRIMINATOR: [u8; 8] =
    [117, 241, 198, 168, 248, 218, 80, 29];

/// Accounts.
#[derive(Debug)]
pub struct ClaimPlatformFeeFromVault {
    /// Only the wallet stored in platform_config can collect platform fees
    pub platform_fee_wallet: solana_pubkey::Pubkey,

    pub fee_vault_authority: solana_pubkey::Pubkey,
    /// The platform config account
    pub platform_config: solana_pubkey::Pubkey,
    /// The platform fee vault
    pub platform_fee_vault: solana_pubkey::Pubkey,
    /// The address that receives the collected quote token fees
    pub recipient_token_account: solana_pubkey::Pubkey,
    /// The mint of quote token vault
    pub quote_mint: solana_pubkey::Pubkey,
    /// SPL program for input token transfers
    pub token_program: solana_pubkey::Pubkey,
    /// Required for account creation
    pub system_program: solana_pubkey::Pubkey,
    /// Required for associated token program
    pub associated_token_program: solana_pubkey::Pubkey,
}

impl ClaimPlatformFeeFromVault {
    pub fn instruction(&self) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            self.platform_fee_wallet,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.fee_vault_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.platform_config,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.platform_fee_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.recipient_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ClaimPlatformFeeFromVaultInstructionData::new()).unwrap();

        solana_instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimPlatformFeeFromVaultInstructionData {
    discriminator: [u8; 8],
}

impl ClaimPlatformFeeFromVaultInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [117, 241, 198, 168, 248, 218, 80, 29],
        }
    }
}

impl Default for ClaimPlatformFeeFromVaultInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `ClaimPlatformFeeFromVault`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` platform_fee_wallet
///   1. `[]` fee_vault_authority
///   2. `[]` platform_config
///   3. `[writable]` platform_fee_vault
///   4. `[writable]` recipient_token_account
///   5. `[]` quote_mint
///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   8. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
#[derive(Clone, Debug, Default)]
pub struct ClaimPlatformFeeFromVaultBuilder {
    platform_fee_wallet: Option<solana_pubkey::Pubkey>,
    fee_vault_authority: Option<solana_pubkey::Pubkey>,
    platform_config: Option<solana_pubkey::Pubkey>,
    platform_fee_vault: Option<solana_pubkey::Pubkey>,
    recipient_token_account: Option<solana_pubkey::Pubkey>,
    quote_mint: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    associated_token_program: Option<solana_pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ClaimPlatformFeeFromVaultBuilder {
    pub fn new() -> Self { Self::default() }

    /// Only the wallet stored in platform_config can collect platform fees
    #[inline(always)]
    pub fn platform_fee_wallet(&mut self, platform_fee_wallet: solana_pubkey::Pubkey) -> &mut Self {
        self.platform_fee_wallet = Some(platform_fee_wallet);
        self
    }

    #[inline(always)]
    pub fn fee_vault_authority(&mut self, fee_vault_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.fee_vault_authority = Some(fee_vault_authority);
        self
    }

    /// The platform config account
    #[inline(always)]
    pub fn platform_config(&mut self, platform_config: solana_pubkey::Pubkey) -> &mut Self {
        self.platform_config = Some(platform_config);
        self
    }

    /// The platform fee vault
    #[inline(always)]
    pub fn platform_fee_vault(&mut self, platform_fee_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.platform_fee_vault = Some(platform_fee_vault);
        self
    }

    /// The address that receives the collected quote token fees
    #[inline(always)]
    pub fn recipient_token_account(
        &mut self,
        recipient_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.recipient_token_account = Some(recipient_token_account);
        self
    }

    /// The mint of quote token vault
    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL program for input token transfers
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Required for account creation
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// Required for associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = ClaimPlatformFeeFromVault {
            platform_fee_wallet: self
                .platform_fee_wallet
                .expect("platform_fee_wallet is not set"),
            fee_vault_authority: self
                .fee_vault_authority
                .expect("fee_vault_authority is not set"),
            platform_config: self.platform_config.expect("platform_config is not set"),
            platform_fee_vault: self
                .platform_fee_vault
                .expect("platform_fee_vault is not set"),
            recipient_token_account: self
                .recipient_token_account
                .expect("recipient_token_account is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `claim_platform_fee_from_vault` CPI accounts.
pub struct ClaimPlatformFeeFromVaultCpiAccounts<'a, 'b> {
    /// Only the wallet stored in platform_config can collect platform fees
    pub platform_fee_wallet: &'b solana_account_info::AccountInfo<'a>,

    pub fee_vault_authority: &'b solana_account_info::AccountInfo<'a>,
    /// The platform config account
    pub platform_config: &'b solana_account_info::AccountInfo<'a>,
    /// The platform fee vault
    pub platform_fee_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected quote token fees
    pub recipient_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of quote token vault
    pub quote_mint: &'b solana_account_info::AccountInfo<'a>,
    /// SPL program for input token transfers
    pub token_program: &'b solana_account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// Required for associated token program
    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `claim_platform_fee_from_vault` CPI instruction.
pub struct ClaimPlatformFeeFromVaultCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,
    /// Only the wallet stored in platform_config can collect platform fees
    pub platform_fee_wallet: &'b solana_account_info::AccountInfo<'a>,

    pub fee_vault_authority: &'b solana_account_info::AccountInfo<'a>,
    /// The platform config account
    pub platform_config: &'b solana_account_info::AccountInfo<'a>,
    /// The platform fee vault
    pub platform_fee_vault: &'b solana_account_info::AccountInfo<'a>,
    /// The address that receives the collected quote token fees
    pub recipient_token_account: &'b solana_account_info::AccountInfo<'a>,
    /// The mint of quote token vault
    pub quote_mint: &'b solana_account_info::AccountInfo<'a>,
    /// SPL program for input token transfers
    pub token_program: &'b solana_account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// Required for associated token program
    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,
}

impl<'a, 'b> ClaimPlatformFeeFromVaultCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: ClaimPlatformFeeFromVaultCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            platform_fee_wallet: accounts.platform_fee_wallet,
            fee_vault_authority: accounts.fee_vault_authority,
            platform_config: accounts.platform_config,
            platform_fee_vault: accounts.platform_fee_vault,
            recipient_token_account: accounts.recipient_token_account,
            quote_mint: accounts.quote_mint,
            token_program: accounts.token_program,
            system_program: accounts.system_program,
            associated_token_program: accounts.associated_token_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(
            *self.platform_fee_wallet.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.fee_vault_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.platform_config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.platform_fee_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.recipient_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ClaimPlatformFeeFromVaultInstructionData::new()).unwrap();

        let instruction = solana_instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.platform_fee_wallet.clone());
        account_infos.push(self.fee_vault_authority.clone());
        account_infos.push(self.platform_config.clone());
        account_infos.push(self.platform_fee_vault.clone());
        account_infos.push(self.recipient_token_account.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.associated_token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ClaimPlatformFeeFromVault` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` platform_fee_wallet
///   1. `[]` fee_vault_authority
///   2. `[]` platform_config
///   3. `[writable]` platform_fee_vault
///   4. `[writable]` recipient_token_account
///   5. `[]` quote_mint
///   6. `[]` token_program
///   7. `[]` system_program
///   8. `[]` associated_token_program
#[derive(Clone, Debug)]
pub struct ClaimPlatformFeeFromVaultCpiBuilder<'a, 'b> {
    instruction: Box<ClaimPlatformFeeFromVaultCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimPlatformFeeFromVaultCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ClaimPlatformFeeFromVaultCpiBuilderInstruction {
            __program: program,
            platform_fee_wallet: None,
            fee_vault_authority: None,
            platform_config: None,
            platform_fee_vault: None,
            recipient_token_account: None,
            quote_mint: None,
            token_program: None,
            system_program: None,
            associated_token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Only the wallet stored in platform_config can collect platform fees
    #[inline(always)]
    pub fn platform_fee_wallet(
        &mut self,
        platform_fee_wallet: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.platform_fee_wallet = Some(platform_fee_wallet);
        self
    }

    #[inline(always)]
    pub fn fee_vault_authority(
        &mut self,
        fee_vault_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_vault_authority = Some(fee_vault_authority);
        self
    }

    /// The platform config account
    #[inline(always)]
    pub fn platform_config(
        &mut self,
        platform_config: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.platform_config = Some(platform_config);
        self
    }

    /// The platform fee vault
    #[inline(always)]
    pub fn platform_fee_vault(
        &mut self,
        platform_fee_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.platform_fee_vault = Some(platform_fee_vault);
        self
    }

    /// The address that receives the collected quote token fees
    #[inline(always)]
    pub fn recipient_token_account(
        &mut self,
        recipient_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recipient_token_account = Some(recipient_token_account);
        self
    }

    /// The mint of quote token vault
    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    /// SPL program for input token transfers
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Required for account creation
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Required for associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let instruction = ClaimPlatformFeeFromVaultCpi {
            __program: self.instruction.__program,

            platform_fee_wallet: self
                .instruction
                .platform_fee_wallet
                .expect("platform_fee_wallet is not set"),

            fee_vault_authority: self
                .instruction
                .fee_vault_authority
                .expect("fee_vault_authority is not set"),

            platform_config: self
                .instruction
                .platform_config
                .expect("platform_config is not set"),

            platform_fee_vault: self
                .instruction
                .platform_fee_vault
                .expect("platform_fee_vault is not set"),

            recipient_token_account: self
                .instruction
                .recipient_token_account
                .expect("recipient_token_account is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ClaimPlatformFeeFromVaultCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    platform_fee_wallet: Option<&'b solana_account_info::AccountInfo<'a>>,
    fee_vault_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    platform_config: Option<&'b solana_account_info::AccountInfo<'a>>,
    platform_fee_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    recipient_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
