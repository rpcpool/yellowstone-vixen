//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::{CurveParams, MintParams, VestingParams};

/// Accounts.
#[derive(Debug)]
pub struct Initialize {
    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    pub payer: solana_program::pubkey::Pubkey,

    pub creator: solana_program::pubkey::Pubkey,
    /// Global configuration account containing protocol-wide settings
    /// Includes settings like quote token mint and fee parameters
    pub global_config: solana_program::pubkey::Pubkey,
    /// Platform configuration account containing platform info
    /// Includes settings like the fee_rate, name, web, img of the platform
    pub platform_config: solana_program::pubkey::Pubkey,
    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    pub authority: solana_program::pubkey::Pubkey,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: solana_program::pubkey::Pubkey,
    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    pub base_mint: solana_program::pubkey::Pubkey,
    /// The mint for the quote token (token used to buy)
    /// Must match the quote_mint specified in global config
    pub quote_mint: solana_program::pubkey::Pubkey,
    /// Token account that holds the pool's base tokens
    /// PDA generated using POOL_VAULT_SEED
    pub base_vault: solana_program::pubkey::Pubkey,
    /// Token account that holds the pool's quote tokens
    /// PDA generated using POOL_VAULT_SEED
    pub quote_vault: solana_program::pubkey::Pubkey,
    /// Account to store the base token's metadata
    /// Created using Metaplex metadata program
    pub metadata_account: solana_program::pubkey::Pubkey,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub base_token_program: solana_program::pubkey::Pubkey,
    /// SPL Token program for the quote token
    pub quote_token_program: solana_program::pubkey::Pubkey,
    /// Metaplex Token Metadata program
    /// Used to create metadata for the base token
    pub metadata_program: solana_program::pubkey::Pubkey,
    /// Required for account creation
    pub system_program: solana_program::pubkey::Pubkey,
    /// Required for rent exempt calculations
    pub rent_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl Initialize {
    pub fn instruction(
        &self,
        args: InitializeInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.creator,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.platform_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_mint,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.metadata_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&InitializeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeInstructionData {
    discriminator: [u8; 8],
}

impl InitializeInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
        }
    }
}

impl Default for InitializeInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeInstructionArgs {
    pub base_mint_param: MintParams,
    pub curve_param: CurveParams,
    pub vesting_param: VestingParams,
}

/// Instruction builder for `Initialize`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[]` creator
///   2. `[]` global_config
///   3. `[]` platform_config
///   4. `[]` authority
///   5. `[writable]` pool_state
///   6. `[writable, signer]` base_mint
///   7. `[]` quote_mint
///   8. `[writable]` base_vault
///   9. `[writable]` quote_vault
///   10. `[writable]` metadata_account
///   11. `[optional]` base_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   12. `[optional]` quote_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   13. `[optional]` metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
///   14. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   15. `[optional]` rent_program (default to `SysvarRent111111111111111111111111111111111`)
///   16. `[]` event_authority
///   17. `[]` program
#[derive(Clone, Debug, Default)]
pub struct InitializeBuilder {
    payer: Option<solana_program::pubkey::Pubkey>,
    creator: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    platform_config: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    base_mint: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    base_vault: Option<solana_program::pubkey::Pubkey>,
    quote_vault: Option<solana_program::pubkey::Pubkey>,
    metadata_account: Option<solana_program::pubkey::Pubkey>,
    base_token_program: Option<solana_program::pubkey::Pubkey>,
    quote_token_program: Option<solana_program::pubkey::Pubkey>,
    metadata_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    rent_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    base_mint_param: Option<MintParams>,
    curve_param: Option<CurveParams>,
    vesting_param: Option<VestingParams>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeBuilder {
    pub fn new() -> Self { Self::default() }

    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn creator(&mut self, creator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.creator = Some(creator);
        self
    }

    /// Global configuration account containing protocol-wide settings
    /// Includes settings like quote token mint and fee parameters
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    /// Platform configuration account containing platform info
    /// Includes settings like the fee_rate, name, web, img of the platform
    #[inline(always)]
    pub fn platform_config(
        &mut self,
        platform_config: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.platform_config = Some(platform_config);
        self
    }

    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_mint = Some(base_mint);
        self
    }

    /// The mint for the quote token (token used to buy)
    /// Must match the quote_mint specified in global config
    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    /// Token account that holds the pool's base tokens
    /// PDA generated using POOL_VAULT_SEED
    #[inline(always)]
    pub fn base_vault(&mut self, base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_vault = Some(base_vault);
        self
    }

    /// Token account that holds the pool's quote tokens
    /// PDA generated using POOL_VAULT_SEED
    #[inline(always)]
    pub fn quote_vault(&mut self, quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_vault = Some(quote_vault);
        self
    }

    /// Account to store the base token's metadata
    /// Created using Metaplex metadata program
    #[inline(always)]
    pub fn metadata_account(
        &mut self,
        metadata_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_account = Some(metadata_account);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL Token program for the base token
    /// Must be the standard Token program
    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_token_program = Some(base_token_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL Token program for the quote token
    #[inline(always)]
    pub fn quote_token_program(
        &mut self,
        quote_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.quote_token_program = Some(quote_token_program);
        self
    }

    /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
    /// Metaplex Token Metadata program
    /// Used to create metadata for the base token
    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_program = Some(metadata_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Required for account creation
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    /// Required for rent exempt calculations
    #[inline(always)]
    pub fn rent_program(&mut self, rent_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent_program = Some(rent_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn base_mint_param(&mut self, base_mint_param: MintParams) -> &mut Self {
        self.base_mint_param = Some(base_mint_param);
        self
    }

    #[inline(always)]
    pub fn curve_param(&mut self, curve_param: CurveParams) -> &mut Self {
        self.curve_param = Some(curve_param);
        self
    }

    #[inline(always)]
    pub fn vesting_param(&mut self, vesting_param: VestingParams) -> &mut Self {
        self.vesting_param = Some(vesting_param);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Initialize {
            payer: self.payer.expect("payer is not set"),
            creator: self.creator.expect("creator is not set"),
            global_config: self.global_config.expect("global_config is not set"),
            platform_config: self.platform_config.expect("platform_config is not set"),
            authority: self.authority.expect("authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            base_mint: self.base_mint.expect("base_mint is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            base_vault: self.base_vault.expect("base_vault is not set"),
            quote_vault: self.quote_vault.expect("quote_vault is not set"),
            metadata_account: self.metadata_account.expect("metadata_account is not set"),
            base_token_program: self.base_token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            quote_token_program: self.quote_token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            metadata_program: self.metadata_program.unwrap_or(solana_program::pubkey!(
                "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            rent_program: self.rent_program.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = InitializeInstructionArgs {
            base_mint_param: self
                .base_mint_param
                .clone()
                .expect("base_mint_param is not set"),
            curve_param: self.curve_param.clone().expect("curve_param is not set"),
            vesting_param: self
                .vesting_param
                .clone()
                .expect("vesting_param is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize` CPI accounts.
pub struct InitializeCpiAccounts<'a, 'b> {
    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub creator: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global configuration account containing protocol-wide settings
    /// Includes settings like quote token mint and fee parameters
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Platform configuration account containing platform info
    /// Includes settings like the fee_rate, name, web, img of the platform
    pub platform_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the quote token (token used to buy)
    /// Must match the quote_mint specified in global config
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account that holds the pool's base tokens
    /// PDA generated using POOL_VAULT_SEED
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account that holds the pool's quote tokens
    /// PDA generated using POOL_VAULT_SEED
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account to store the base token's metadata
    /// Created using Metaplex metadata program
    pub metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the quote token
    pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Metaplex Token Metadata program
    /// Used to create metadata for the base token
    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for rent exempt calculations
    pub rent_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize` CPI instruction.
pub struct InitializeCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub creator: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global configuration account containing protocol-wide settings
    /// Includes settings like quote token mint and fee parameters
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Platform configuration account containing platform info
    /// Includes settings like the fee_rate, name, web, img of the platform
    pub platform_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the quote token (token used to buy)
    /// Must match the quote_mint specified in global config
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account that holds the pool's base tokens
    /// PDA generated using POOL_VAULT_SEED
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token account that holds the pool's quote tokens
    /// PDA generated using POOL_VAULT_SEED
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account to store the base token's metadata
    /// Created using Metaplex metadata program
    pub metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the quote token
    pub quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Metaplex Token Metadata program
    /// Used to create metadata for the base token
    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for rent exempt calculations
    pub rent_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeInstructionArgs,
}

impl<'a, 'b> InitializeCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeCpiAccounts<'a, 'b>,
        args: InitializeInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            creator: accounts.creator,
            global_config: accounts.global_config,
            platform_config: accounts.platform_config,
            authority: accounts.authority,
            pool_state: accounts.pool_state,
            base_mint: accounts.base_mint,
            quote_mint: accounts.quote_mint,
            base_vault: accounts.base_vault,
            quote_vault: accounts.quote_vault,
            metadata_account: accounts.metadata_account,
            base_token_program: accounts.base_token_program,
            quote_token_program: accounts.quote_token_program,
            metadata_program: accounts.metadata_program,
            system_program: accounts.system_program,
            rent_program: accounts.rent_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(18 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.creator.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.platform_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_mint.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.metadata_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&InitializeInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(19 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.creator.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.platform_config.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.base_mint.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.base_vault.clone());
        account_infos.push(self.quote_vault.clone());
        account_infos.push(self.metadata_account.clone());
        account_infos.push(self.base_token_program.clone());
        account_infos.push(self.quote_token_program.clone());
        account_infos.push(self.metadata_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.rent_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Initialize` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[]` creator
///   2. `[]` global_config
///   3. `[]` platform_config
///   4. `[]` authority
///   5. `[writable]` pool_state
///   6. `[writable, signer]` base_mint
///   7. `[]` quote_mint
///   8. `[writable]` base_vault
///   9. `[writable]` quote_vault
///   10. `[writable]` metadata_account
///   11. `[]` base_token_program
///   12. `[]` quote_token_program
///   13. `[]` metadata_program
///   14. `[]` system_program
///   15. `[]` rent_program
///   16. `[]` event_authority
///   17. `[]` program
#[derive(Clone, Debug)]
pub struct InitializeCpiBuilder<'a, 'b> {
    instruction: Box<InitializeCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeCpiBuilderInstruction {
            __program: program,
            payer: None,
            creator: None,
            global_config: None,
            platform_config: None,
            authority: None,
            pool_state: None,
            base_mint: None,
            quote_mint: None,
            base_vault: None,
            quote_vault: None,
            metadata_account: None,
            base_token_program: None,
            quote_token_program: None,
            metadata_program: None,
            system_program: None,
            rent_program: None,
            event_authority: None,
            program: None,
            base_mint_param: None,
            curve_param: None,
            vesting_param: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// The account paying for the initialization costs
    /// This can be any account with sufficient SOL to cover the transaction
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn creator(
        &mut self,
        creator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.creator = Some(creator);
        self
    }

    /// Global configuration account containing protocol-wide settings
    /// Includes settings like quote token mint and fee parameters
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    /// Platform configuration account containing platform info
    /// Includes settings like the fee_rate, name, web, img of the platform
    #[inline(always)]
    pub fn platform_config(
        &mut self,
        platform_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.platform_config = Some(platform_config);
        self
    }

    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    #[inline(always)]
    pub fn base_mint(
        &mut self,
        base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_mint = Some(base_mint);
        self
    }

    /// The mint for the quote token (token used to buy)
    /// Must match the quote_mint specified in global config
    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    /// Token account that holds the pool's base tokens
    /// PDA generated using POOL_VAULT_SEED
    #[inline(always)]
    pub fn base_vault(
        &mut self,
        base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault = Some(base_vault);
        self
    }

    /// Token account that holds the pool's quote tokens
    /// PDA generated using POOL_VAULT_SEED
    #[inline(always)]
    pub fn quote_vault(
        &mut self,
        quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_vault = Some(quote_vault);
        self
    }

    /// Account to store the base token's metadata
    /// Created using Metaplex metadata program
    #[inline(always)]
    pub fn metadata_account(
        &mut self,
        metadata_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_account = Some(metadata_account);
        self
    }

    /// SPL Token program for the base token
    /// Must be the standard Token program
    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_token_program = Some(base_token_program);
        self
    }

    /// SPL Token program for the quote token
    #[inline(always)]
    pub fn quote_token_program(
        &mut self,
        quote_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_token_program = Some(quote_token_program);
        self
    }

    /// Metaplex Token Metadata program
    /// Used to create metadata for the base token
    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_program = Some(metadata_program);
        self
    }

    /// Required for account creation
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Required for rent exempt calculations
    #[inline(always)]
    pub fn rent_program(
        &mut self,
        rent_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.rent_program = Some(rent_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn base_mint_param(&mut self, base_mint_param: MintParams) -> &mut Self {
        self.instruction.base_mint_param = Some(base_mint_param);
        self
    }

    #[inline(always)]
    pub fn curve_param(&mut self, curve_param: CurveParams) -> &mut Self {
        self.instruction.curve_param = Some(curve_param);
        self
    }

    #[inline(always)]
    pub fn vesting_param(&mut self, vesting_param: VestingParams) -> &mut Self {
        self.instruction.vesting_param = Some(vesting_param);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeInstructionArgs {
            base_mint_param: self
                .instruction
                .base_mint_param
                .clone()
                .expect("base_mint_param is not set"),
            curve_param: self
                .instruction
                .curve_param
                .clone()
                .expect("curve_param is not set"),
            vesting_param: self
                .instruction
                .vesting_param
                .clone()
                .expect("vesting_param is not set"),
        };
        let instruction = InitializeCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            creator: self.instruction.creator.expect("creator is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            platform_config: self
                .instruction
                .platform_config
                .expect("platform_config is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            base_mint: self.instruction.base_mint.expect("base_mint is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            base_vault: self.instruction.base_vault.expect("base_vault is not set"),

            quote_vault: self
                .instruction
                .quote_vault
                .expect("quote_vault is not set"),

            metadata_account: self
                .instruction
                .metadata_account
                .expect("metadata_account is not set"),

            base_token_program: self
                .instruction
                .base_token_program
                .expect("base_token_program is not set"),

            quote_token_program: self
                .instruction
                .quote_token_program
                .expect("quote_token_program is not set"),

            metadata_program: self
                .instruction
                .metadata_program
                .expect("metadata_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            rent_program: self
                .instruction
                .rent_program
                .expect("rent_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    creator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    platform_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_mint_param: Option<MintParams>,
    curve_param: Option<CurveParams>,
    vesting_param: Option<VestingParams>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
