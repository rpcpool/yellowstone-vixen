//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct ClaimVestedToken {
    /// The beneficiary of the vesting account
    pub beneficiary: solana_program::pubkey::Pubkey,
    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    pub authority: solana_program::pubkey::Pubkey,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: solana_program::pubkey::Pubkey,
    /// The vesting record account
    pub vesting_record: solana_program::pubkey::Pubkey,
    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    pub base_vault: solana_program::pubkey::Pubkey,

    pub user_base_token: solana_program::pubkey::Pubkey,
    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    pub base_token_mint: solana_program::pubkey::Pubkey,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub base_token_program: solana_program::pubkey::Pubkey,
    /// Required for account creation
    pub system_program: solana_program::pubkey::Pubkey,
    /// Required for associated token program
    pub associated_token_program: solana_program::pubkey::Pubkey,
}

impl ClaimVestedToken {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.beneficiary,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_state,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vesting_record,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_base_token,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ClaimVestedTokenInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimVestedTokenInstructionData {
    discriminator: [u8; 8],
}

impl ClaimVestedTokenInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [49, 33, 104, 30, 189, 157, 79, 35],
        }
    }
}

impl Default for ClaimVestedTokenInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `ClaimVestedToken`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` beneficiary
///   1. `[]` authority
///   2. `[writable]` pool_state
///   3. `[writable]` vesting_record
///   4. `[writable]` base_vault
///   5. `[writable, signer]` user_base_token
///   6. `[]` base_token_mint
///   7. `[optional]` base_token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   9. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
#[derive(Clone, Debug, Default)]
pub struct ClaimVestedTokenBuilder {
    beneficiary: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    pool_state: Option<solana_program::pubkey::Pubkey>,
    vesting_record: Option<solana_program::pubkey::Pubkey>,
    base_vault: Option<solana_program::pubkey::Pubkey>,
    user_base_token: Option<solana_program::pubkey::Pubkey>,
    base_token_mint: Option<solana_program::pubkey::Pubkey>,
    base_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ClaimVestedTokenBuilder {
    pub fn new() -> Self { Self::default() }

    /// The beneficiary of the vesting account
    #[inline(always)]
    pub fn beneficiary(&mut self, beneficiary: solana_program::pubkey::Pubkey) -> &mut Self {
        self.beneficiary = Some(beneficiary);
        self
    }

    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }

    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    #[inline(always)]
    pub fn pool_state(&mut self, pool_state: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_state = Some(pool_state);
        self
    }

    /// The vesting record account
    #[inline(always)]
    pub fn vesting_record(&mut self, vesting_record: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vesting_record = Some(vesting_record);
        self
    }

    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    #[inline(always)]
    pub fn base_vault(&mut self, base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_vault = Some(base_vault);
        self
    }

    #[inline(always)]
    pub fn user_base_token(
        &mut self,
        user_base_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_base_token = Some(user_base_token);
        self
    }

    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    #[inline(always)]
    pub fn base_token_mint(
        &mut self,
        base_token_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_token_mint = Some(base_token_mint);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// SPL Token program for the base token
    /// Must be the standard Token program
    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.base_token_program = Some(base_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Required for account creation
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// Required for associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ClaimVestedToken {
            beneficiary: self.beneficiary.expect("beneficiary is not set"),
            authority: self.authority.expect("authority is not set"),
            pool_state: self.pool_state.expect("pool_state is not set"),
            vesting_record: self.vesting_record.expect("vesting_record is not set"),
            base_vault: self.base_vault.expect("base_vault is not set"),
            user_base_token: self.user_base_token.expect("user_base_token is not set"),
            base_token_mint: self.base_token_mint.expect("base_token_mint is not set"),
            base_token_program: self.base_token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `claim_vested_token` CPI accounts.
pub struct ClaimVestedTokenCpiAccounts<'a, 'b> {
    /// The beneficiary of the vesting account
    pub beneficiary: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vesting record account
    pub vesting_record: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_base_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    pub base_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for associated token program
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `claim_vested_token` CPI instruction.
pub struct ClaimVestedTokenCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The beneficiary of the vesting account
    pub beneficiary: &'b solana_program::account_info::AccountInfo<'a>,
    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    pub authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    pub pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vesting record account
    pub vesting_record: &'b solana_program::account_info::AccountInfo<'a>,
    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_base_token: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    pub base_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// SPL Token program for the base token
    /// Must be the standard Token program
    pub base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for associated token program
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> ClaimVestedTokenCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ClaimVestedTokenCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            beneficiary: accounts.beneficiary,
            authority: accounts.authority,
            pool_state: accounts.pool_state,
            vesting_record: accounts.vesting_record,
            base_vault: accounts.base_vault,
            user_base_token: accounts.user_base_token,
            base_token_mint: accounts.base_token_mint,
            base_token_program: accounts.base_token_program,
            system_program: accounts.system_program,
            associated_token_program: accounts.associated_token_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.beneficiary.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_state.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vesting_record.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_base_token.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ClaimVestedTokenInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.beneficiary.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.pool_state.clone());
        account_infos.push(self.vesting_record.clone());
        account_infos.push(self.base_vault.clone());
        account_infos.push(self.user_base_token.clone());
        account_infos.push(self.base_token_mint.clone());
        account_infos.push(self.base_token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.associated_token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ClaimVestedToken` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` beneficiary
///   1. `[]` authority
///   2. `[writable]` pool_state
///   3. `[writable]` vesting_record
///   4. `[writable]` base_vault
///   5. `[writable, signer]` user_base_token
///   6. `[]` base_token_mint
///   7. `[]` base_token_program
///   8. `[]` system_program
///   9. `[]` associated_token_program
#[derive(Clone, Debug)]
pub struct ClaimVestedTokenCpiBuilder<'a, 'b> {
    instruction: Box<ClaimVestedTokenCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimVestedTokenCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ClaimVestedTokenCpiBuilderInstruction {
            __program: program,
            beneficiary: None,
            authority: None,
            pool_state: None,
            vesting_record: None,
            base_vault: None,
            user_base_token: None,
            base_token_mint: None,
            base_token_program: None,
            system_program: None,
            associated_token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// The beneficiary of the vesting account
    #[inline(always)]
    pub fn beneficiary(
        &mut self,
        beneficiary: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.beneficiary = Some(beneficiary);
        self
    }

    /// PDA that acts as the authority for pool vault and mint operations
    /// Generated using AUTH_SEED
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }

    /// Account that stores the pool's state and parameters
    /// PDA generated using POOL_SEED and both token mints
    #[inline(always)]
    pub fn pool_state(
        &mut self,
        pool_state: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_state = Some(pool_state);
        self
    }

    /// The vesting record account
    #[inline(always)]
    pub fn vesting_record(
        &mut self,
        vesting_record: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vesting_record = Some(vesting_record);
        self
    }

    /// The pool's vault for base tokens
    /// Will be debited to send tokens to the user
    #[inline(always)]
    pub fn base_vault(
        &mut self,
        base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault = Some(base_vault);
        self
    }

    #[inline(always)]
    pub fn user_base_token(
        &mut self,
        user_base_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_base_token = Some(user_base_token);
        self
    }

    /// The mint for the base token (token being sold)
    /// Created in this instruction with specified decimals
    #[inline(always)]
    pub fn base_token_mint(
        &mut self,
        base_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_token_mint = Some(base_token_mint);
        self
    }

    /// SPL Token program for the base token
    /// Must be the standard Token program
    #[inline(always)]
    pub fn base_token_program(
        &mut self,
        base_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_token_program = Some(base_token_program);
        self
    }

    /// Required for account creation
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Required for associated token program
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = ClaimVestedTokenCpi {
            __program: self.instruction.__program,

            beneficiary: self
                .instruction
                .beneficiary
                .expect("beneficiary is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            pool_state: self.instruction.pool_state.expect("pool_state is not set"),

            vesting_record: self
                .instruction
                .vesting_record
                .expect("vesting_record is not set"),

            base_vault: self.instruction.base_vault.expect("base_vault is not set"),

            user_base_token: self
                .instruction
                .user_base_token
                .expect("user_base_token is not set"),

            base_token_mint: self
                .instruction
                .base_token_mint
                .expect("base_token_mint is not set"),

            base_token_program: self
                .instruction
                .base_token_program
                .expect("base_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ClaimVestedTokenCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    beneficiary: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_state: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vesting_record: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_base_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
