//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CreateConfig {
    /// The protocol owner/admin account
    /// Must match the predefined admin address
    /// Has authority to create and modify protocol configurations
    pub owner: solana_program::pubkey::Pubkey,
    /// Global configuration account that stores protocol-wide settings
    /// PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
    /// Stores fee rates and protocol parameters
    pub global_config: solana_program::pubkey::Pubkey,
    /// The mint address of the quote token (token used for buying)
    /// This will be the standard token used for all pools with this config
    pub quote_token_mint: solana_program::pubkey::Pubkey,
    /// Account that will receive protocol fees
    pub protocol_fee_owner: solana_program::pubkey::Pubkey,
    /// Account that will receive migrate fees
    pub migrate_fee_owner: solana_program::pubkey::Pubkey,
    /// The control wallet address for migrating to amm
    pub migrate_to_amm_wallet: solana_program::pubkey::Pubkey,
    /// The control wallet address for migrating to cpswap
    pub migrate_to_cpswap_wallet: solana_program::pubkey::Pubkey,
    /// Required for account creation
    pub system_program: solana_program::pubkey::Pubkey,
}

impl CreateConfig {
    pub fn instruction(
        &self,
        args: CreateConfigInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateConfigInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.owner, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.global_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.protocol_fee_owner,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.migrate_fee_owner,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.migrate_to_amm_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.migrate_to_cpswap_wallet,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigInstructionData {
    discriminator: [u8; 8],
}

impl CreateConfigInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [201, 207, 243, 114, 75, 111, 47, 189],
        }
    }
}

impl Default for CreateConfigInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigInstructionArgs {
    pub curve_type: u8,
    pub index: u16,
    pub migrate_fee: u64,
    pub trade_fee_rate: u64,
}

/// Instruction builder for `CreateConfig`.
///
/// ### Accounts:
///
///   0. `[writable, signer, optional]` owner (default to `GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ`)
///   1. `[writable]` global_config
///   2. `[]` quote_token_mint
///   3. `[]` protocol_fee_owner
///   4. `[]` migrate_fee_owner
///   5. `[]` migrate_to_amm_wallet
///   6. `[]` migrate_to_cpswap_wallet
///   7. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateConfigBuilder {
    owner: Option<solana_program::pubkey::Pubkey>,
    global_config: Option<solana_program::pubkey::Pubkey>,
    quote_token_mint: Option<solana_program::pubkey::Pubkey>,
    protocol_fee_owner: Option<solana_program::pubkey::Pubkey>,
    migrate_fee_owner: Option<solana_program::pubkey::Pubkey>,
    migrate_to_amm_wallet: Option<solana_program::pubkey::Pubkey>,
    migrate_to_cpswap_wallet: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    curve_type: Option<u8>,
    index: Option<u16>,
    migrate_fee: Option<u64>,
    trade_fee_rate: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateConfigBuilder {
    pub fn new() -> Self { Self::default() }

    /// `[optional account, default to 'GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ']`
    /// The protocol owner/admin account
    /// Must match the predefined admin address
    /// Has authority to create and modify protocol configurations
    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    /// Global configuration account that stores protocol-wide settings
    /// PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
    /// Stores fee rates and protocol parameters
    #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.global_config = Some(global_config);
        self
    }

    /// The mint address of the quote token (token used for buying)
    /// This will be the standard token used for all pools with this config
    #[inline(always)]
    pub fn quote_token_mint(
        &mut self,
        quote_token_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.quote_token_mint = Some(quote_token_mint);
        self
    }

    /// Account that will receive protocol fees
    #[inline(always)]
    pub fn protocol_fee_owner(
        &mut self,
        protocol_fee_owner: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_fee_owner = Some(protocol_fee_owner);
        self
    }

    /// Account that will receive migrate fees
    #[inline(always)]
    pub fn migrate_fee_owner(
        &mut self,
        migrate_fee_owner: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.migrate_fee_owner = Some(migrate_fee_owner);
        self
    }

    /// The control wallet address for migrating to amm
    #[inline(always)]
    pub fn migrate_to_amm_wallet(
        &mut self,
        migrate_to_amm_wallet: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.migrate_to_amm_wallet = Some(migrate_to_amm_wallet);
        self
    }

    /// The control wallet address for migrating to cpswap
    #[inline(always)]
    pub fn migrate_to_cpswap_wallet(
        &mut self,
        migrate_to_cpswap_wallet: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.migrate_to_cpswap_wallet = Some(migrate_to_cpswap_wallet);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// Required for account creation
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn curve_type(&mut self, curve_type: u8) -> &mut Self {
        self.curve_type = Some(curve_type);
        self
    }

    #[inline(always)]
    pub fn index(&mut self, index: u16) -> &mut Self {
        self.index = Some(index);
        self
    }

    #[inline(always)]
    pub fn migrate_fee(&mut self, migrate_fee: u64) -> &mut Self {
        self.migrate_fee = Some(migrate_fee);
        self
    }

    #[inline(always)]
    pub fn trade_fee_rate(&mut self, trade_fee_rate: u64) -> &mut Self {
        self.trade_fee_rate = Some(trade_fee_rate);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateConfig {
            owner: self.owner.unwrap_or(solana_program::pubkey!(
                "GThUX1Atko4tqhN2NaiTazWSeFWMuiUvfFnyJyUghFMJ"
            )),
            global_config: self.global_config.expect("global_config is not set"),
            quote_token_mint: self.quote_token_mint.expect("quote_token_mint is not set"),
            protocol_fee_owner: self
                .protocol_fee_owner
                .expect("protocol_fee_owner is not set"),
            migrate_fee_owner: self
                .migrate_fee_owner
                .expect("migrate_fee_owner is not set"),
            migrate_to_amm_wallet: self
                .migrate_to_amm_wallet
                .expect("migrate_to_amm_wallet is not set"),
            migrate_to_cpswap_wallet: self
                .migrate_to_cpswap_wallet
                .expect("migrate_to_cpswap_wallet is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = CreateConfigInstructionArgs {
            curve_type: self.curve_type.clone().expect("curve_type is not set"),
            index: self.index.clone().expect("index is not set"),
            migrate_fee: self.migrate_fee.clone().expect("migrate_fee is not set"),
            trade_fee_rate: self
                .trade_fee_rate
                .clone()
                .expect("trade_fee_rate is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_config` CPI accounts.
pub struct CreateConfigCpiAccounts<'a, 'b> {
    /// The protocol owner/admin account
    /// Must match the predefined admin address
    /// Has authority to create and modify protocol configurations
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global configuration account that stores protocol-wide settings
    /// PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
    /// Stores fee rates and protocol parameters
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint address of the quote token (token used for buying)
    /// This will be the standard token used for all pools with this config
    pub quote_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that will receive protocol fees
    pub protocol_fee_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that will receive migrate fees
    pub migrate_fee_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The control wallet address for migrating to amm
    pub migrate_to_amm_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// The control wallet address for migrating to cpswap
    pub migrate_to_cpswap_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_config` CPI instruction.
pub struct CreateConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The protocol owner/admin account
    /// Must match the predefined admin address
    /// Has authority to create and modify protocol configurations
    pub owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Global configuration account that stores protocol-wide settings
    /// PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
    /// Stores fee rates and protocol parameters
    pub global_config: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint address of the quote token (token used for buying)
    /// This will be the standard token used for all pools with this config
    pub quote_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that will receive protocol fees
    pub protocol_fee_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// Account that will receive migrate fees
    pub migrate_fee_owner: &'b solana_program::account_info::AccountInfo<'a>,
    /// The control wallet address for migrating to amm
    pub migrate_to_amm_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// The control wallet address for migrating to cpswap
    pub migrate_to_cpswap_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    /// Required for account creation
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateConfigInstructionArgs,
}

impl<'a, 'b> CreateConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateConfigCpiAccounts<'a, 'b>,
        args: CreateConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            owner: accounts.owner,
            global_config: accounts.global_config,
            quote_token_mint: accounts.quote_token_mint,
            protocol_fee_owner: accounts.protocol_fee_owner,
            migrate_fee_owner: accounts.migrate_fee_owner,
            migrate_to_amm_wallet: accounts.migrate_to_amm_wallet,
            migrate_to_cpswap_wallet: accounts.migrate_to_cpswap_wallet,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.owner.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.global_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.protocol_fee_owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.migrate_fee_owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.migrate_to_amm_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.migrate_to_cpswap_wallet.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::RAYDIUM_LAUNCHPAD_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.global_config.clone());
        account_infos.push(self.quote_token_mint.clone());
        account_infos.push(self.protocol_fee_owner.clone());
        account_infos.push(self.migrate_fee_owner.clone());
        account_infos.push(self.migrate_to_amm_wallet.clone());
        account_infos.push(self.migrate_to_cpswap_wallet.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` owner
///   1. `[writable]` global_config
///   2. `[]` quote_token_mint
///   3. `[]` protocol_fee_owner
///   4. `[]` migrate_fee_owner
///   5. `[]` migrate_to_amm_wallet
///   6. `[]` migrate_to_cpswap_wallet
///   7. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateConfigCpiBuilder<'a, 'b> {
    instruction: Box<CreateConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateConfigCpiBuilderInstruction {
            __program: program,
            owner: None,
            global_config: None,
            quote_token_mint: None,
            protocol_fee_owner: None,
            migrate_fee_owner: None,
            migrate_to_amm_wallet: None,
            migrate_to_cpswap_wallet: None,
            system_program: None,
            curve_type: None,
            index: None,
            migrate_fee: None,
            trade_fee_rate: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// The protocol owner/admin account
    /// Must match the predefined admin address
    /// Has authority to create and modify protocol configurations
    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    /// Global configuration account that stores protocol-wide settings
    /// PDA generated using GLOBAL_CONFIG_SEED, quote token mint, and curve type
    /// Stores fee rates and protocol parameters
    #[inline(always)]
    pub fn global_config(
        &mut self,
        global_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.global_config = Some(global_config);
        self
    }

    /// The mint address of the quote token (token used for buying)
    /// This will be the standard token used for all pools with this config
    #[inline(always)]
    pub fn quote_token_mint(
        &mut self,
        quote_token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_token_mint = Some(quote_token_mint);
        self
    }

    /// Account that will receive protocol fees
    #[inline(always)]
    pub fn protocol_fee_owner(
        &mut self,
        protocol_fee_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_fee_owner = Some(protocol_fee_owner);
        self
    }

    /// Account that will receive migrate fees
    #[inline(always)]
    pub fn migrate_fee_owner(
        &mut self,
        migrate_fee_owner: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.migrate_fee_owner = Some(migrate_fee_owner);
        self
    }

    /// The control wallet address for migrating to amm
    #[inline(always)]
    pub fn migrate_to_amm_wallet(
        &mut self,
        migrate_to_amm_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.migrate_to_amm_wallet = Some(migrate_to_amm_wallet);
        self
    }

    /// The control wallet address for migrating to cpswap
    #[inline(always)]
    pub fn migrate_to_cpswap_wallet(
        &mut self,
        migrate_to_cpswap_wallet: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.migrate_to_cpswap_wallet = Some(migrate_to_cpswap_wallet);
        self
    }

    /// Required for account creation
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn curve_type(&mut self, curve_type: u8) -> &mut Self {
        self.instruction.curve_type = Some(curve_type);
        self
    }

    #[inline(always)]
    pub fn index(&mut self, index: u16) -> &mut Self {
        self.instruction.index = Some(index);
        self
    }

    #[inline(always)]
    pub fn migrate_fee(&mut self, migrate_fee: u64) -> &mut Self {
        self.instruction.migrate_fee = Some(migrate_fee);
        self
    }

    #[inline(always)]
    pub fn trade_fee_rate(&mut self, trade_fee_rate: u64) -> &mut Self {
        self.instruction.trade_fee_rate = Some(trade_fee_rate);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateConfigInstructionArgs {
            curve_type: self
                .instruction
                .curve_type
                .clone()
                .expect("curve_type is not set"),
            index: self.instruction.index.clone().expect("index is not set"),
            migrate_fee: self
                .instruction
                .migrate_fee
                .clone()
                .expect("migrate_fee is not set"),
            trade_fee_rate: self
                .instruction
                .trade_fee_rate
                .clone()
                .expect("trade_fee_rate is not set"),
        };
        let instruction = CreateConfigCpi {
            __program: self.instruction.__program,

            owner: self.instruction.owner.expect("owner is not set"),

            global_config: self
                .instruction
                .global_config
                .expect("global_config is not set"),

            quote_token_mint: self
                .instruction
                .quote_token_mint
                .expect("quote_token_mint is not set"),

            protocol_fee_owner: self
                .instruction
                .protocol_fee_owner
                .expect("protocol_fee_owner is not set"),

            migrate_fee_owner: self
                .instruction
                .migrate_fee_owner
                .expect("migrate_fee_owner is not set"),

            migrate_to_amm_wallet: self
                .instruction
                .migrate_to_amm_wallet
                .expect("migrate_to_amm_wallet is not set"),

            migrate_to_cpswap_wallet: self
                .instruction
                .migrate_to_cpswap_wallet
                .expect("migrate_to_cpswap_wallet is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    global_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_fee_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    migrate_fee_owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    migrate_to_amm_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    migrate_to_cpswap_wallet: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    curve_type: Option<u8>,
    index: Option<u16>,
    migrate_fee: Option<u64>,
    trade_fee_rate: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
