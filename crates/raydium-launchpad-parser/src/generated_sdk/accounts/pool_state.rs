//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::pubkey::Pubkey;

use crate::generated::types::VestingSchedule;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct PoolState {
    pub discriminator: [u8; 8],
    /// Account update epoch
    pub epoch: u64,
    /// Bump seed used for PDA address derivation
    pub auth_bump: u8,
    /// Current status of the pool
    /// * 0: Pool is funding
    /// * 1: Pool funding is end, waiting for migration
    /// * 2: Pool migration is done
    pub status: u8,
    /// Decimals of the pool base token
    pub base_decimals: u8,
    /// Decimals of the pool quote token
    pub quote_decimals: u8,
    /// Migrate to AMM or CpSwap
    pub migrate_type: u8,
    /// Supply of the pool base token
    pub supply: u64,
    /// Total sell amount of the base token
    pub total_base_sell: u64,
    /// For different curves, virtual_base and virtual_quote have different meanings
    /// For constant product curve, virtual_base and virtual_quote are virtual liquidity, virtual_quote/virtual_base is the initial price
    /// For linear price curve, virtual_base is the price slope parameter a, virtual_quote has no effect
    /// For fixed price curve, virtual_quote/virtual_base is the initial price
    pub virtual_base: u64,
    pub virtual_quote: u64,
    /// Actual base token amount in the pool
    /// Represents the real tokens available for trading
    pub real_base: u64,
    /// Actual quote token amount in the pool
    /// Represents the real tokens available for trading
    pub real_quote: u64,
    /// The total quote fund raising of the pool
    pub total_quote_fund_raising: u64,
    /// Accumulated trading fees in quote tokens
    /// Can be collected by the protocol fee owner
    pub quote_protocol_fee: u64,
    /// Accumulated platform fees in quote tokens
    /// Can be collected by the platform wallet stored in platform config
    pub platform_fee: u64,
    /// The fee of migrate to amm
    pub migrate_fee: u64,
    /// Vesting schedule for the base token
    pub vesting_schedule: VestingSchedule,
    /// Public key of the global configuration account
    /// Contains protocol-wide settings this pool adheres to
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub global_config: Pubkey,
    /// Public key of the platform configuration account
    /// Contains platform-wide settings this pool adheres to
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub platform_config: Pubkey,
    /// Public key of the base mint address
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub base_mint: Pubkey,
    /// Public key of the quote mint address
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub quote_mint: Pubkey,
    /// Public key of the base token vault
    /// Holds the actual base tokens owned by the pool
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub base_vault: Pubkey,
    /// Public key of the quote token vault
    /// Holds the actual quote tokens owned by the pool
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub quote_vault: Pubkey,
    /// The creator of base token
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub creator: Pubkey,
    /// padding for future updates
    pub padding: [u64; 8],
}

impl PoolState {
    pub const LEN: usize = 429;

    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for PoolState {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}

#[cfg(feature = "fetch")]
pub fn fetch_pool_state(
    rpc: &solana_client::rpc_client::RpcClient,
    address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<PoolState>, std::io::Error> {
    let accounts = fetch_all_pool_state(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_pool_state(
    rpc: &solana_client::rpc_client::RpcClient,
    addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<PoolState>>, std::io::Error> {
    let accounts = rpc
        .get_multiple_accounts(addresses)
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<PoolState>> = Vec::new();
    for i in 0..addresses.len() {
        let address = addresses[i];
        let account = accounts[i].as_ref().ok_or(std::io::Error::new(
            std::io::ErrorKind::Other,
            format!("Account not found: {}", address),
        ))?;
        let data = PoolState::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::DecodedAccount {
            address,
            account: account.clone(),
            data,
        });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_pool_state(
    rpc: &solana_client::rpc_client::RpcClient,
    address: &solana_program::pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<PoolState>, std::io::Error> {
    let accounts = fetch_all_maybe_pool_state(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_pool_state(
    rpc: &solana_client::rpc_client::RpcClient,
    addresses: &[solana_program::pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<PoolState>>, std::io::Error> {
    let accounts = rpc
        .get_multiple_accounts(addresses)
        .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<PoolState>> = Vec::new();
    for i in 0..addresses.len() {
        let address = addresses[i];
        if let Some(account) = accounts[i].as_ref() {
            let data = PoolState::from_bytes(&account.data)?;
            decoded_accounts.push(crate::shared::MaybeAccount::Exists(
                crate::shared::DecodedAccount {
                    address,
                    account: account.clone(),
                    data,
                },
            ));
        } else {
            decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
        }
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountDeserialize for PoolState {
    fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
    }
}

#[cfg(feature = "anchor")]
impl anchor_lang::AccountSerialize for PoolState {}

#[cfg(feature = "anchor")]
impl anchor_lang::Owner for PoolState {
    fn owner() -> Pubkey { crate::RAYDIUM_LAUNCHPAD_ID }
}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::IdlBuild for PoolState {}

#[cfg(feature = "anchor-idl-build")]
impl anchor_lang::Discriminator for PoolState {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
}
