//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::proto_def;

    use crate::types::AdminUpdated;
    impl IntoProto<proto_def::AdminUpdated> for AdminUpdated {
        fn into_proto(self) -> proto_def::AdminUpdated {
            proto_def::AdminUpdated {
                old_admin: self.old_admin.to_string(),
                new_admin: self.new_admin.to_string(),
                updated_at: self.updated_at,
            }
        }
    }
    use crate::types::AuthorizedProgramsInitialized;
    impl IntoProto<proto_def::AuthorizedProgramsInitialized> for AuthorizedProgramsInitialized {
        fn into_proto(self) -> proto_def::AuthorizedProgramsInitialized {
            proto_def::AuthorizedProgramsInitialized {
                admin: self.admin.to_string(),
                initial_programs: self
                    .initial_programs
                    .into_iter()
                    .map(|x| x.to_string())
                    .collect(),
                liquidity_pool_program_id: self.liquidity_pool_program_id.to_string(),
                initialized_at: self.initialized_at,
            }
        }
    }
    use crate::types::BetCancelled;
    impl IntoProto<proto_def::BetCancelled> for BetCancelled {
        fn into_proto(self) -> proto_def::BetCancelled {
            proto_def::BetCancelled {
                game_id: self.game_id,
                bet_id: self.bet_id,
                player: self.player.to_string(),
                refund_amount: self.refund_amount,
                expected_value_removed: self.expected_value_removed,
                bet_odds: Some(self.bet_odds.into_proto()),
                game_program: self.game_program.to_string(),
                escrow_vault: self.escrow_vault.to_string(),
                cancelled_at: self.cancelled_at,
            }
        }
    }
    use crate::types::BetOdds;
    impl IntoProto<proto_def::BetOdds> for BetOdds {
        fn into_proto(self) -> proto_def::BetOdds {
            proto_def::BetOdds {
                odds_factor: self.odds_factor,
                bet_type: self.bet_type,
            }
        }
    }
    use crate::types::BetPlaced;
    impl IntoProto<proto_def::BetPlaced> for BetPlaced {
        fn into_proto(self) -> proto_def::BetPlaced {
            proto_def::BetPlaced {
                game_id: self.game_id,
                bet_id: self.bet_id,
                player: self.player.to_string(),
                bet_amount: self.bet_amount,
                expected_value: self.expected_value,
                ev_fee_breakdown: Some(self.ev_fee_breakdown.into_proto()),
                game_program: self.game_program.to_string(),
                escrow_vault: self.escrow_vault.to_string(),
                timestamp: self.timestamp,
            }
        }
    }
    use crate::types::BettingClosed;
    impl IntoProto<proto_def::BettingClosed> for BettingClosed {
        fn into_proto(self) -> proto_def::BettingClosed {
            proto_def::BettingClosed {
                game_id: self.game_id,
                total_exposure: self.total_exposure,
                closed_at: self.closed_at,
                settlement_program: self.settlement_program.to_string(),
            }
        }
    }
    use crate::types::EvFeeBreakdownEvent;
    impl IntoProto<proto_def::EvFeeBreakdownEvent> for EvFeeBreakdownEvent {
        fn into_proto(self) -> proto_def::EvFeeBreakdownEvent {
            proto_def::EvFeeBreakdownEvent {
                expected_value: self.expected_value,
                protocol_fee: self.protocol_fee,
                operator_fee: self.operator_fee,
                affiliate_fee: self.affiliate_fee,
            }
        }
    }
    use crate::types::EvFeeConfig;
    impl IntoProto<proto_def::EvFeeConfig> for EvFeeConfig {
        fn into_proto(self) -> proto_def::EvFeeConfig {
            proto_def::EvFeeConfig {
                ev_fee_bps: self.ev_fee_bps.into(),
                protocol_fee_ev_bps: self.protocol_fee_ev_bps.into(),
                operator_fee_ev_bps: self.operator_fee_ev_bps.into(),
                affiliate_fee_ev_bps: self.affiliate_fee_ev_bps.into(),
            }
        }
    }
    use crate::types::FeeConfigUpdated;
    impl IntoProto<proto_def::FeeConfigUpdated> for FeeConfigUpdated {
        fn into_proto(self) -> proto_def::FeeConfigUpdated {
            proto_def::FeeConfigUpdated {
                admin: self.admin.to_string(),
                old_config: Some(self.old_config.into_proto()),
                new_config: Some(self.new_config.into_proto()),
                updated_at: self.updated_at,
            }
        }
    }
    use crate::types::GameActivated;
    impl IntoProto<proto_def::GameActivated> for GameActivated {
        fn into_proto(self) -> proto_def::GameActivated {
            proto_def::GameActivated {
                game_id: self.game_id,
                operator: self.operator.to_string(),
                activated_at: self.activated_at,
                settlement_program: self.settlement_program.to_string(),
            }
        }
    }
    use crate::types::GameCancelled;
    impl IntoProto<proto_def::GameCancelled> for GameCancelled {
        fn into_proto(self) -> proto_def::GameCancelled {
            proto_def::GameCancelled {
                game_id: self.game_id,
                cancelled_at: self.cancelled_at,
                settlement_program: self.settlement_program.to_string(),
            }
        }
    }
    use crate::types::GameCancelledDueToExposure;
    impl IntoProto<proto_def::GameCancelledDueToExposure> for GameCancelledDueToExposure {
        fn into_proto(self) -> proto_def::GameCancelledDueToExposure {
            proto_def::GameCancelledDueToExposure {
                game_id: self.game_id,
                total_exposure: self.total_exposure,
                cancelled_at: self.cancelled_at,
                settlement_program: self.settlement_program.to_string(),
            }
        }
    }
    use crate::types::GameCreated;
    impl IntoProto<proto_def::GameCreated> for GameCreated {
        fn into_proto(self) -> proto_def::GameCreated {
            proto_def::GameCreated {
                game_id: self.game_id,
                global_count: self.global_count,
                game_program: self.game_program.to_string(),
                creator: self.creator.to_string(),
                operator: self.operator.to_string(),
                affiliate: self.affiliate.map(|x| x.to_string()),
                config_data_len: self.config_data_len,
                created_at: self.created_at,
                registry_reused: self.registry_reused,
            }
        }
    }
    use crate::types::GameSettled;
    impl IntoProto<proto_def::GameSettled> for GameSettled {
        fn into_proto(self) -> proto_def::GameSettled {
            proto_def::GameSettled {
                game_id: self.game_id,
                house_amount: self.house_amount,
                total_claimable: self.total_claimable,
                total_exposure: self.total_exposure,
                total_ev: self.total_ev,
                fees: Some(self.fees.into_proto()),
                final_randomness: self
                    .final_randomness
                    .into_iter()
                    .map(|x| x.into())
                    .collect(),
                settled_at: self.settled_at,
                game_program: self.game_program.to_string(),
                escrow_vault: self.escrow_vault.to_string(),
                game_settlement: self.game_settlement.to_string(),
            }
        }
    }
    use crate::types::LiquidityPoolProgramUpdated;
    impl IntoProto<proto_def::LiquidityPoolProgramUpdated> for LiquidityPoolProgramUpdated {
        fn into_proto(self) -> proto_def::LiquidityPoolProgramUpdated {
            proto_def::LiquidityPoolProgramUpdated {
                admin: self.admin.to_string(),
                old_program_id: self.old_program_id.to_string(),
                new_program_id: self.new_program_id.to_string(),
                updated_at: self.updated_at,
            }
        }
    }
    use crate::types::OperatorAdded;
    impl IntoProto<proto_def::OperatorAdded> for OperatorAdded {
        fn into_proto(self) -> proto_def::OperatorAdded {
            proto_def::OperatorAdded {
                operator: self.operator.to_string(),
                admin: self.admin.to_string(),
                added_at: self.added_at,
            }
        }
    }
    use crate::types::OperatorRemoved;
    impl IntoProto<proto_def::OperatorRemoved> for OperatorRemoved {
        fn into_proto(self) -> proto_def::OperatorRemoved {
            proto_def::OperatorRemoved {
                operator: self.operator.to_string(),
                admin: self.admin.to_string(),
                removed_at: self.removed_at,
            }
        }
    }
    use crate::types::PayoutClaimed;
    impl IntoProto<proto_def::PayoutClaimed> for PayoutClaimed {
        fn into_proto(self) -> proto_def::PayoutClaimed {
            proto_def::PayoutClaimed {
                game_id: self.game_id,
                payout_index: self.payout_index,
                recipient: self.recipient.to_string(),
                amount: self.amount,
                claimer: self.claimer.to_string(),
                claimed_at: self.claimed_at,
            }
        }
    }
    use crate::types::PayoutEntry;
    impl IntoProto<proto_def::PayoutEntry> for PayoutEntry {
        fn into_proto(self) -> proto_def::PayoutEntry {
            proto_def::PayoutEntry {
                recipient: self.recipient.to_string(),
                amount: self.amount,
            }
        }
    }
    use crate::types::PayoutInfo;
    impl IntoProto<proto_def::PayoutInfo> for PayoutInfo {
        fn into_proto(self) -> proto_def::PayoutInfo {
            proto_def::PayoutInfo {
                recipient: self.recipient.to_string(),
                amount_bps: self.amount_bps,
                is_claimed: self.is_claimed,
                payout_index: self.payout_index,
            }
        }
    }
    use crate::types::PayoutResponse;
    impl IntoProto<proto_def::PayoutResponse> for PayoutResponse {
        fn into_proto(self) -> proto_def::PayoutResponse {
            proto_def::PayoutResponse {
                game_id: self.game_id,
                game_state: self.game_state as i32,
                payouts: self
                    .payouts
                    .unwrap_or_default()
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                total_claimable: self.total_claimable,
                total_claimed: self.total_claimed,
                settled_at: self.settled_at,
            }
        }
    }
    use crate::types::ProgramAuthorized;
    impl IntoProto<proto_def::ProgramAuthorized> for ProgramAuthorized {
        fn into_proto(self) -> proto_def::ProgramAuthorized {
            proto_def::ProgramAuthorized {
                program_id: self.program_id.to_string(),
                admin: self.admin.to_string(),
                authorized_at: self.authorized_at,
            }
        }
    }
    use crate::types::ProgramDeauthorized;
    impl IntoProto<proto_def::ProgramDeauthorized> for ProgramDeauthorized {
        fn into_proto(self) -> proto_def::ProgramDeauthorized {
            proto_def::ProgramDeauthorized {
                program_id: self.program_id.to_string(),
                admin: self.admin.to_string(),
                deauthorized_at: self.deauthorized_at,
            }
        }
    }
    use crate::types::SettlementFees;
    impl IntoProto<proto_def::SettlementFees> for SettlementFees {
        fn into_proto(self) -> proto_def::SettlementFees {
            proto_def::SettlementFees {
                protocol_fee: self.protocol_fee,
                operator_fee: self.operator_fee,
                affiliate_fee: self.affiliate_fee,
                total_fees_removed: self.total_fees_removed,
                fees_retained: self.fees_retained,
            }
        }
    }
}
