//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const CREATE_GAME_DISCRIMINATOR: [u8; 8] = [124, 69, 75, 66, 184, 220, 72, 206];

/// Accounts.
#[derive(Debug)]
pub struct CreateGame {
      
              
          pub game_registry: solana_pubkey::Pubkey,
                /// Authorized programs account for validation

    
              
          pub authorized_programs: solana_pubkey::Pubkey,
                /// Game program to create the game in

    
              
          pub game_program_account: solana_pubkey::Pubkey,
                /// Game account to be created by the game program
/// The address is derived from creator and game counter seeds and validated by the game program.

    
              
          pub game_account: solana_pubkey::Pubkey,
                /// Global config for the game program
/// The address is derived from standard seeds and validated by the game program during the create_game_internal CPI call.

    
              
          pub global_config: solana_pubkey::Pubkey,
                /// Token mint that will be used for this game

    
              
          pub token_mint: solana_pubkey::Pubkey,
                /// Escrow vault for the game

    
              
          pub escrow_vault: solana_pubkey::Pubkey,
                /// Settlement authority PDA

    
              
          pub settlement_authority: solana_pubkey::Pubkey,
                /// Rando program for entropy

    
              
          pub rando_program: solana_pubkey::Pubkey,
                /// RandomnessState account from rando program

    
              
          pub randomness_state: solana_pubkey::Pubkey,
                /// SlotHashes sysvar for rando tick

    
              
          pub slot_hashes: solana_pubkey::Pubkey,
                /// Game settlement account (must be resetable for reuse if it exists)

    
              
          pub game_settlement: solana_pubkey::Pubkey,
          
              
          pub creator: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
      }

impl CreateGame {
  pub fn instruction(&self, args: CreateGameInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: CreateGameInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(15+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.game_registry,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.authorized_programs,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_program_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.game_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.global_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.escrow_vault,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.settlement_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rando_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.randomness_state,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.slot_hashes,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.game_settlement,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.creator,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&CreateGameInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateGameInstructionData {
            discriminator: [u8; 8],
                              }

impl CreateGameInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [124, 69, 75, 66, 184, 220, 72, 206],
                                                                          }
  }
}

impl Default for CreateGameInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateGameInstructionArgs {
                  pub operator: Pubkey,
                pub game_config_data: Vec<u8>,
                pub game_id: u64,
                pub affiliate: Option<Pubkey>,
      }


/// Instruction builder for `CreateGame`.
///
/// ### Accounts:
///
                ///   0. `[writable]` game_registry
                ///   1. `[writable]` authorized_programs
          ///   2. `[]` game_program_account
                ///   3. `[writable]` game_account
          ///   4. `[]` global_config
          ///   5. `[]` token_mint
                ///   6. `[writable]` escrow_vault
                ///   7. `[writable]` settlement_authority
                ///   8. `[optional]` rando_program (default to `HN8Zj6wcvhJ27ML2b1Wq3eukRAacjpVXB9vTERetj5PT`)
                ///   9. `[writable]` randomness_state
                ///   10. `[optional]` slot_hashes (default to `SysvarS1otHashes111111111111111111111111111`)
                ///   11. `[writable]` game_settlement
                      ///   12. `[writable, signer]` creator
                ///   13. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   14. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct CreateGameBuilder {
            game_registry: Option<solana_pubkey::Pubkey>,
                authorized_programs: Option<solana_pubkey::Pubkey>,
                game_program_account: Option<solana_pubkey::Pubkey>,
                game_account: Option<solana_pubkey::Pubkey>,
                global_config: Option<solana_pubkey::Pubkey>,
                token_mint: Option<solana_pubkey::Pubkey>,
                escrow_vault: Option<solana_pubkey::Pubkey>,
                settlement_authority: Option<solana_pubkey::Pubkey>,
                rando_program: Option<solana_pubkey::Pubkey>,
                randomness_state: Option<solana_pubkey::Pubkey>,
                slot_hashes: Option<solana_pubkey::Pubkey>,
                game_settlement: Option<solana_pubkey::Pubkey>,
                creator: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                        operator: Option<Pubkey>,
                game_config_data: Option<Vec<u8>>,
                game_id: Option<u64>,
                affiliate: Option<Pubkey>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateGameBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn game_registry(&mut self, game_registry: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_registry = Some(game_registry);
                    self
    }
            /// Authorized programs account for validation
#[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: solana_pubkey::Pubkey) -> &mut Self {
                        self.authorized_programs = Some(authorized_programs);
                    self
    }
            /// Game program to create the game in
#[inline(always)]
    pub fn game_program_account(&mut self, game_program_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_program_account = Some(game_program_account);
                    self
    }
            /// Game account to be created by the game program
/// The address is derived from creator and game counter seeds and validated by the game program.
#[inline(always)]
    pub fn game_account(&mut self, game_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_account = Some(game_account);
                    self
    }
            /// Global config for the game program
/// The address is derived from standard seeds and validated by the game program during the create_game_internal CPI call.
#[inline(always)]
    pub fn global_config(&mut self, global_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.global_config = Some(global_config);
                    self
    }
            /// Token mint that will be used for this game
#[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_mint = Some(token_mint);
                    self
    }
            /// Escrow vault for the game
#[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: solana_pubkey::Pubkey) -> &mut Self {
                        self.escrow_vault = Some(escrow_vault);
                    self
    }
            /// Settlement authority PDA
#[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.settlement_authority = Some(settlement_authority);
                    self
    }
            /// `[optional account, default to 'HN8Zj6wcvhJ27ML2b1Wq3eukRAacjpVXB9vTERetj5PT']`
/// Rando program for entropy
#[inline(always)]
    pub fn rando_program(&mut self, rando_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.rando_program = Some(rando_program);
                    self
    }
            /// RandomnessState account from rando program
#[inline(always)]
    pub fn randomness_state(&mut self, randomness_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.randomness_state = Some(randomness_state);
                    self
    }
            /// `[optional account, default to 'SysvarS1otHashes111111111111111111111111111']`
/// SlotHashes sysvar for rando tick
#[inline(always)]
    pub fn slot_hashes(&mut self, slot_hashes: solana_pubkey::Pubkey) -> &mut Self {
                        self.slot_hashes = Some(slot_hashes);
                    self
    }
            /// Game settlement account (must be resetable for reuse if it exists)
#[inline(always)]
    pub fn game_settlement(&mut self, game_settlement: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_settlement = Some(game_settlement);
                    self
    }
            #[inline(always)]
    pub fn creator(&mut self, creator: solana_pubkey::Pubkey) -> &mut Self {
                        self.creator = Some(creator);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn operator(&mut self, operator: Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
      }
                #[inline(always)]
      pub fn game_config_data(&mut self, game_config_data: Vec<u8>) -> &mut Self {
        self.game_config_data = Some(game_config_data);
        self
      }
                #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.game_id = Some(game_id);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn affiliate(&mut self, affiliate: Pubkey) -> &mut Self {
        self.affiliate = Some(affiliate);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = CreateGame {
                              game_registry: self.game_registry.expect("game_registry is not set"),
                                        authorized_programs: self.authorized_programs.expect("authorized_programs is not set"),
                                        game_program_account: self.game_program_account.expect("game_program_account is not set"),
                                        game_account: self.game_account.expect("game_account is not set"),
                                        global_config: self.global_config.expect("global_config is not set"),
                                        token_mint: self.token_mint.expect("token_mint is not set"),
                                        escrow_vault: self.escrow_vault.expect("escrow_vault is not set"),
                                        settlement_authority: self.settlement_authority.expect("settlement_authority is not set"),
                                        rando_program: self.rando_program.unwrap_or(solana_pubkey::pubkey!("HN8Zj6wcvhJ27ML2b1Wq3eukRAacjpVXB9vTERetj5PT")),
                                        randomness_state: self.randomness_state.expect("randomness_state is not set"),
                                        slot_hashes: self.slot_hashes.unwrap_or(solana_pubkey::pubkey!("SysvarS1otHashes111111111111111111111111111")),
                                        game_settlement: self.game_settlement.expect("game_settlement is not set"),
                                        creator: self.creator.expect("creator is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                      };
          let args = CreateGameInstructionArgs {
                                                              operator: self.operator.clone().expect("operator is not set"),
                                                                  game_config_data: self.game_config_data.clone().expect("game_config_data is not set"),
                                                                  game_id: self.game_id.clone().expect("game_id is not set"),
                                                                  affiliate: self.affiliate.clone(),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `create_game` CPI accounts.
  pub struct CreateGameCpiAccounts<'a, 'b> {
          
                    
              pub game_registry: &'b solana_account_info::AccountInfo<'a>,
                        /// Authorized programs account for validation

      
                    
              pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
                        /// Game program to create the game in

      
                    
              pub game_program_account: &'b solana_account_info::AccountInfo<'a>,
                        /// Game account to be created by the game program
/// The address is derived from creator and game counter seeds and validated by the game program.

      
                    
              pub game_account: &'b solana_account_info::AccountInfo<'a>,
                        /// Global config for the game program
/// The address is derived from standard seeds and validated by the game program during the create_game_internal CPI call.

      
                    
              pub global_config: &'b solana_account_info::AccountInfo<'a>,
                        /// Token mint that will be used for this game

      
                    
              pub token_mint: &'b solana_account_info::AccountInfo<'a>,
                        /// Escrow vault for the game

      
                    
              pub escrow_vault: &'b solana_account_info::AccountInfo<'a>,
                        /// Settlement authority PDA

      
                    
              pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
                        /// Rando program for entropy

      
                    
              pub rando_program: &'b solana_account_info::AccountInfo<'a>,
                        /// RandomnessState account from rando program

      
                    
              pub randomness_state: &'b solana_account_info::AccountInfo<'a>,
                        /// SlotHashes sysvar for rando tick

      
                    
              pub slot_hashes: &'b solana_account_info::AccountInfo<'a>,
                        /// Game settlement account (must be resetable for reuse if it exists)

      
                    
              pub game_settlement: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub creator: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `create_game` CPI instruction.
pub struct CreateGameCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub game_registry: &'b solana_account_info::AccountInfo<'a>,
                /// Authorized programs account for validation

    
              
          pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
                /// Game program to create the game in

    
              
          pub game_program_account: &'b solana_account_info::AccountInfo<'a>,
                /// Game account to be created by the game program
/// The address is derived from creator and game counter seeds and validated by the game program.

    
              
          pub game_account: &'b solana_account_info::AccountInfo<'a>,
                /// Global config for the game program
/// The address is derived from standard seeds and validated by the game program during the create_game_internal CPI call.

    
              
          pub global_config: &'b solana_account_info::AccountInfo<'a>,
                /// Token mint that will be used for this game

    
              
          pub token_mint: &'b solana_account_info::AccountInfo<'a>,
                /// Escrow vault for the game

    
              
          pub escrow_vault: &'b solana_account_info::AccountInfo<'a>,
                /// Settlement authority PDA

    
              
          pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
                /// Rando program for entropy

    
              
          pub rando_program: &'b solana_account_info::AccountInfo<'a>,
                /// RandomnessState account from rando program

    
              
          pub randomness_state: &'b solana_account_info::AccountInfo<'a>,
                /// SlotHashes sysvar for rando tick

    
              
          pub slot_hashes: &'b solana_account_info::AccountInfo<'a>,
                /// Game settlement account (must be resetable for reuse if it exists)

    
              
          pub game_settlement: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub creator: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: CreateGameInstructionArgs,
  }

impl<'a, 'b> CreateGameCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: CreateGameCpiAccounts<'a, 'b>,
              args: CreateGameInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              game_registry: accounts.game_registry,
              authorized_programs: accounts.authorized_programs,
              game_program_account: accounts.game_program_account,
              game_account: accounts.game_account,
              global_config: accounts.global_config,
              token_mint: accounts.token_mint,
              escrow_vault: accounts.escrow_vault,
              settlement_authority: accounts.settlement_authority,
              rando_program: accounts.rando_program,
              randomness_state: accounts.randomness_state,
              slot_hashes: accounts.slot_hashes,
              game_settlement: accounts.game_settlement,
              creator: accounts.creator,
              system_program: accounts.system_program,
              token_program: accounts.token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(15+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.game_registry.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.authorized_programs.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_program_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.game_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.escrow_vault.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.settlement_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rando_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.randomness_state.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.slot_hashes.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.game_settlement.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.creator.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&CreateGameInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(16 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.game_registry.clone());
                        account_infos.push(self.authorized_programs.clone());
                        account_infos.push(self.game_program_account.clone());
                        account_infos.push(self.game_account.clone());
                        account_infos.push(self.global_config.clone());
                        account_infos.push(self.token_mint.clone());
                        account_infos.push(self.escrow_vault.clone());
                        account_infos.push(self.settlement_authority.clone());
                        account_infos.push(self.rando_program.clone());
                        account_infos.push(self.randomness_state.clone());
                        account_infos.push(self.slot_hashes.clone());
                        account_infos.push(self.game_settlement.clone());
                        account_infos.push(self.creator.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CreateGame` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` game_registry
                ///   1. `[writable]` authorized_programs
          ///   2. `[]` game_program_account
                ///   3. `[writable]` game_account
          ///   4. `[]` global_config
          ///   5. `[]` token_mint
                ///   6. `[writable]` escrow_vault
                ///   7. `[writable]` settlement_authority
          ///   8. `[]` rando_program
                ///   9. `[writable]` randomness_state
          ///   10. `[]` slot_hashes
                ///   11. `[writable]` game_settlement
                      ///   12. `[writable, signer]` creator
          ///   13. `[]` system_program
          ///   14. `[]` token_program
#[derive(Clone, Debug)]
pub struct CreateGameCpiBuilder<'a, 'b> {
  instruction: Box<CreateGameCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateGameCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CreateGameCpiBuilderInstruction {
      __program: program,
              game_registry: None,
              authorized_programs: None,
              game_program_account: None,
              game_account: None,
              global_config: None,
              token_mint: None,
              escrow_vault: None,
              settlement_authority: None,
              rando_program: None,
              randomness_state: None,
              slot_hashes: None,
              game_settlement: None,
              creator: None,
              system_program: None,
              token_program: None,
                                            operator: None,
                                game_config_data: None,
                                game_id: None,
                                affiliate: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn game_registry(&mut self, game_registry: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_registry = Some(game_registry);
                    self
    }
      /// Authorized programs account for validation
#[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authorized_programs = Some(authorized_programs);
                    self
    }
      /// Game program to create the game in
#[inline(always)]
    pub fn game_program_account(&mut self, game_program_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_program_account = Some(game_program_account);
                    self
    }
      /// Game account to be created by the game program
/// The address is derived from creator and game counter seeds and validated by the game program.
#[inline(always)]
    pub fn game_account(&mut self, game_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_account = Some(game_account);
                    self
    }
      /// Global config for the game program
/// The address is derived from standard seeds and validated by the game program during the create_game_internal CPI call.
#[inline(always)]
    pub fn global_config(&mut self, global_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_config = Some(global_config);
                    self
    }
      /// Token mint that will be used for this game
#[inline(always)]
    pub fn token_mint(&mut self, token_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint = Some(token_mint);
                    self
    }
      /// Escrow vault for the game
#[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.escrow_vault = Some(escrow_vault);
                    self
    }
      /// Settlement authority PDA
#[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settlement_authority = Some(settlement_authority);
                    self
    }
      /// Rando program for entropy
#[inline(always)]
    pub fn rando_program(&mut self, rando_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rando_program = Some(rando_program);
                    self
    }
      /// RandomnessState account from rando program
#[inline(always)]
    pub fn randomness_state(&mut self, randomness_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.randomness_state = Some(randomness_state);
                    self
    }
      /// SlotHashes sysvar for rando tick
#[inline(always)]
    pub fn slot_hashes(&mut self, slot_hashes: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.slot_hashes = Some(slot_hashes);
                    self
    }
      /// Game settlement account (must be resetable for reuse if it exists)
#[inline(always)]
    pub fn game_settlement(&mut self, game_settlement: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_settlement = Some(game_settlement);
                    self
    }
      #[inline(always)]
    pub fn creator(&mut self, creator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.creator = Some(creator);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn operator(&mut self, operator: Pubkey) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
      }
                #[inline(always)]
      pub fn game_config_data(&mut self, game_config_data: Vec<u8>) -> &mut Self {
        self.instruction.game_config_data = Some(game_config_data);
        self
      }
                #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn affiliate(&mut self, affiliate: Pubkey) -> &mut Self {
        self.instruction.affiliate = Some(affiliate);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = CreateGameInstructionArgs {
                                                              operator: self.instruction.operator.clone().expect("operator is not set"),
                                                                  game_config_data: self.instruction.game_config_data.clone().expect("game_config_data is not set"),
                                                                  game_id: self.instruction.game_id.clone().expect("game_id is not set"),
                                                                  affiliate: self.instruction.affiliate.clone(),
                                    };
        let instruction = CreateGameCpi {
        __program: self.instruction.__program,
                  
          game_registry: self.instruction.game_registry.expect("game_registry is not set"),
                  
          authorized_programs: self.instruction.authorized_programs.expect("authorized_programs is not set"),
                  
          game_program_account: self.instruction.game_program_account.expect("game_program_account is not set"),
                  
          game_account: self.instruction.game_account.expect("game_account is not set"),
                  
          global_config: self.instruction.global_config.expect("global_config is not set"),
                  
          token_mint: self.instruction.token_mint.expect("token_mint is not set"),
                  
          escrow_vault: self.instruction.escrow_vault.expect("escrow_vault is not set"),
                  
          settlement_authority: self.instruction.settlement_authority.expect("settlement_authority is not set"),
                  
          rando_program: self.instruction.rando_program.expect("rando_program is not set"),
                  
          randomness_state: self.instruction.randomness_state.expect("randomness_state is not set"),
                  
          slot_hashes: self.instruction.slot_hashes.expect("slot_hashes is not set"),
                  
          game_settlement: self.instruction.game_settlement.expect("game_settlement is not set"),
                  
          creator: self.instruction.creator.expect("creator is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CreateGameCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            game_registry: Option<&'b solana_account_info::AccountInfo<'a>>,
                authorized_programs: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_program_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                global_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                escrow_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
                settlement_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                rando_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                randomness_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                slot_hashes: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_settlement: Option<&'b solana_account_info::AccountInfo<'a>>,
                creator: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        operator: Option<Pubkey>,
                game_config_data: Option<Vec<u8>>,
                game_id: Option<u64>,
                affiliate: Option<Pubkey>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

