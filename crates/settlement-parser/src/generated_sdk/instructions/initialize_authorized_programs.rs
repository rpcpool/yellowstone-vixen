//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const INITIALIZE_AUTHORIZED_PROGRAMS_DISCRIMINATOR: [u8; 8] = [169, 252, 192, 189, 35, 61, 191, 45];

/// Accounts.
#[derive(Debug)]
pub struct InitializeAuthorizedPrograms {
      
              
          pub authorized_programs: solana_pubkey::Pubkey,
          
              
          pub admin: solana_pubkey::Pubkey,
                /// Rando program for entropy

    
              
          pub rando_program: solana_pubkey::Pubkey,
                /// RandomnessState account from rando program

    
              
          pub randomness_state: solana_pubkey::Pubkey,
                /// Instructions sysvar

    
              
          pub instruction_sysvar: solana_pubkey::Pubkey,
                /// SlotHashes sysvar for rando tick

    
              
          pub slot_hashes: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl InitializeAuthorizedPrograms {
  pub fn instruction(&self, args: InitializeAuthorizedProgramsInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitializeAuthorizedProgramsInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.authorized_programs,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.admin,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rando_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.randomness_state,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.instruction_sysvar,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.slot_hashes,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&InitializeAuthorizedProgramsInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeAuthorizedProgramsInstructionData {
            discriminator: [u8; 8],
                                    }

impl InitializeAuthorizedProgramsInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [169, 252, 192, 189, 35, 61, 191, 45],
                                                                                        }
  }
}

impl Default for InitializeAuthorizedProgramsInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeAuthorizedProgramsInstructionArgs {
                  pub initial_programs: Vec<Pubkey>,
                pub liquidity_pool_program_id: Pubkey,
                pub game_keeper_program_id: Pubkey,
                pub protocol_fee_account: Pubkey,
                pub max_operators: Option<u32>,
      }


/// Instruction builder for `InitializeAuthorizedPrograms`.
///
/// ### Accounts:
///
                ///   0. `[writable]` authorized_programs
                      ///   1. `[writable, signer]` admin
                ///   2. `[optional]` rando_program (default to `HN8Zj6wcvhJ27ML2b1Wq3eukRAacjpVXB9vTERetj5PT`)
          ///   3. `[]` randomness_state
                ///   4. `[optional]` instruction_sysvar (default to `Sysvar1nstructions1111111111111111111111111`)
                ///   5. `[optional]` slot_hashes (default to `SysvarS1otHashes111111111111111111111111111`)
                ///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeAuthorizedProgramsBuilder {
            authorized_programs: Option<solana_pubkey::Pubkey>,
                admin: Option<solana_pubkey::Pubkey>,
                rando_program: Option<solana_pubkey::Pubkey>,
                randomness_state: Option<solana_pubkey::Pubkey>,
                instruction_sysvar: Option<solana_pubkey::Pubkey>,
                slot_hashes: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        initial_programs: Option<Vec<Pubkey>>,
                liquidity_pool_program_id: Option<Pubkey>,
                game_keeper_program_id: Option<Pubkey>,
                protocol_fee_account: Option<Pubkey>,
                max_operators: Option<u32>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializeAuthorizedProgramsBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: solana_pubkey::Pubkey) -> &mut Self {
                        self.authorized_programs = Some(authorized_programs);
                    self
    }
            #[inline(always)]
    pub fn admin(&mut self, admin: solana_pubkey::Pubkey) -> &mut Self {
                        self.admin = Some(admin);
                    self
    }
            /// `[optional account, default to 'HN8Zj6wcvhJ27ML2b1Wq3eukRAacjpVXB9vTERetj5PT']`
/// Rando program for entropy
#[inline(always)]
    pub fn rando_program(&mut self, rando_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.rando_program = Some(rando_program);
                    self
    }
            /// RandomnessState account from rando program
#[inline(always)]
    pub fn randomness_state(&mut self, randomness_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.randomness_state = Some(randomness_state);
                    self
    }
            /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
/// Instructions sysvar
#[inline(always)]
    pub fn instruction_sysvar(&mut self, instruction_sysvar: solana_pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar = Some(instruction_sysvar);
                    self
    }
            /// `[optional account, default to 'SysvarS1otHashes111111111111111111111111111']`
/// SlotHashes sysvar for rando tick
#[inline(always)]
    pub fn slot_hashes(&mut self, slot_hashes: solana_pubkey::Pubkey) -> &mut Self {
                        self.slot_hashes = Some(slot_hashes);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn initial_programs(&mut self, initial_programs: Vec<Pubkey>) -> &mut Self {
        self.initial_programs = Some(initial_programs);
        self
      }
                #[inline(always)]
      pub fn liquidity_pool_program_id(&mut self, liquidity_pool_program_id: Pubkey) -> &mut Self {
        self.liquidity_pool_program_id = Some(liquidity_pool_program_id);
        self
      }
                #[inline(always)]
      pub fn game_keeper_program_id(&mut self, game_keeper_program_id: Pubkey) -> &mut Self {
        self.game_keeper_program_id = Some(game_keeper_program_id);
        self
      }
                #[inline(always)]
      pub fn protocol_fee_account(&mut self, protocol_fee_account: Pubkey) -> &mut Self {
        self.protocol_fee_account = Some(protocol_fee_account);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn max_operators(&mut self, max_operators: u32) -> &mut Self {
        self.max_operators = Some(max_operators);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = InitializeAuthorizedPrograms {
                              authorized_programs: self.authorized_programs.expect("authorized_programs is not set"),
                                        admin: self.admin.expect("admin is not set"),
                                        rando_program: self.rando_program.unwrap_or(solana_pubkey::pubkey!("HN8Zj6wcvhJ27ML2b1Wq3eukRAacjpVXB9vTERetj5PT")),
                                        randomness_state: self.randomness_state.expect("randomness_state is not set"),
                                        instruction_sysvar: self.instruction_sysvar.unwrap_or(solana_pubkey::pubkey!("Sysvar1nstructions1111111111111111111111111")),
                                        slot_hashes: self.slot_hashes.unwrap_or(solana_pubkey::pubkey!("SysvarS1otHashes111111111111111111111111111")),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
          let args = InitializeAuthorizedProgramsInstructionArgs {
                                                              initial_programs: self.initial_programs.clone().expect("initial_programs is not set"),
                                                                  liquidity_pool_program_id: self.liquidity_pool_program_id.clone().expect("liquidity_pool_program_id is not set"),
                                                                  game_keeper_program_id: self.game_keeper_program_id.clone().expect("game_keeper_program_id is not set"),
                                                                  protocol_fee_account: self.protocol_fee_account.clone().expect("protocol_fee_account is not set"),
                                                                  max_operators: self.max_operators.clone(),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `initialize_authorized_programs` CPI accounts.
  pub struct InitializeAuthorizedProgramsCpiAccounts<'a, 'b> {
          
                    
              pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub admin: &'b solana_account_info::AccountInfo<'a>,
                        /// Rando program for entropy

      
                    
              pub rando_program: &'b solana_account_info::AccountInfo<'a>,
                        /// RandomnessState account from rando program

      
                    
              pub randomness_state: &'b solana_account_info::AccountInfo<'a>,
                        /// Instructions sysvar

      
                    
              pub instruction_sysvar: &'b solana_account_info::AccountInfo<'a>,
                        /// SlotHashes sysvar for rando tick

      
                    
              pub slot_hashes: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `initialize_authorized_programs` CPI instruction.
pub struct InitializeAuthorizedProgramsCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub admin: &'b solana_account_info::AccountInfo<'a>,
                /// Rando program for entropy

    
              
          pub rando_program: &'b solana_account_info::AccountInfo<'a>,
                /// RandomnessState account from rando program

    
              
          pub randomness_state: &'b solana_account_info::AccountInfo<'a>,
                /// Instructions sysvar

    
              
          pub instruction_sysvar: &'b solana_account_info::AccountInfo<'a>,
                /// SlotHashes sysvar for rando tick

    
              
          pub slot_hashes: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitializeAuthorizedProgramsInstructionArgs,
  }

impl<'a, 'b> InitializeAuthorizedProgramsCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: InitializeAuthorizedProgramsCpiAccounts<'a, 'b>,
              args: InitializeAuthorizedProgramsInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              authorized_programs: accounts.authorized_programs,
              admin: accounts.admin,
              rando_program: accounts.rando_program,
              randomness_state: accounts.randomness_state,
              instruction_sysvar: accounts.instruction_sysvar,
              slot_hashes: accounts.slot_hashes,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(7+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.authorized_programs.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.admin.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rando_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.randomness_state.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.slot_hashes.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&InitializeAuthorizedProgramsInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(8 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authorized_programs.clone());
                        account_infos.push(self.admin.clone());
                        account_infos.push(self.rando_program.clone());
                        account_infos.push(self.randomness_state.clone());
                        account_infos.push(self.instruction_sysvar.clone());
                        account_infos.push(self.slot_hashes.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitializeAuthorizedPrograms` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` authorized_programs
                      ///   1. `[writable, signer]` admin
          ///   2. `[]` rando_program
          ///   3. `[]` randomness_state
          ///   4. `[]` instruction_sysvar
          ///   5. `[]` slot_hashes
          ///   6. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializeAuthorizedProgramsCpiBuilder<'a, 'b> {
  instruction: Box<InitializeAuthorizedProgramsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeAuthorizedProgramsCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitializeAuthorizedProgramsCpiBuilderInstruction {
      __program: program,
              authorized_programs: None,
              admin: None,
              rando_program: None,
              randomness_state: None,
              instruction_sysvar: None,
              slot_hashes: None,
              system_program: None,
                                            initial_programs: None,
                                liquidity_pool_program_id: None,
                                game_keeper_program_id: None,
                                protocol_fee_account: None,
                                max_operators: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authorized_programs = Some(authorized_programs);
                    self
    }
      #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.admin = Some(admin);
                    self
    }
      /// Rando program for entropy
#[inline(always)]
    pub fn rando_program(&mut self, rando_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rando_program = Some(rando_program);
                    self
    }
      /// RandomnessState account from rando program
#[inline(always)]
    pub fn randomness_state(&mut self, randomness_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.randomness_state = Some(randomness_state);
                    self
    }
      /// Instructions sysvar
#[inline(always)]
    pub fn instruction_sysvar(&mut self, instruction_sysvar: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar = Some(instruction_sysvar);
                    self
    }
      /// SlotHashes sysvar for rando tick
#[inline(always)]
    pub fn slot_hashes(&mut self, slot_hashes: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.slot_hashes = Some(slot_hashes);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn initial_programs(&mut self, initial_programs: Vec<Pubkey>) -> &mut Self {
        self.instruction.initial_programs = Some(initial_programs);
        self
      }
                #[inline(always)]
      pub fn liquidity_pool_program_id(&mut self, liquidity_pool_program_id: Pubkey) -> &mut Self {
        self.instruction.liquidity_pool_program_id = Some(liquidity_pool_program_id);
        self
      }
                #[inline(always)]
      pub fn game_keeper_program_id(&mut self, game_keeper_program_id: Pubkey) -> &mut Self {
        self.instruction.game_keeper_program_id = Some(game_keeper_program_id);
        self
      }
                #[inline(always)]
      pub fn protocol_fee_account(&mut self, protocol_fee_account: Pubkey) -> &mut Self {
        self.instruction.protocol_fee_account = Some(protocol_fee_account);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn max_operators(&mut self, max_operators: u32) -> &mut Self {
        self.instruction.max_operators = Some(max_operators);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = InitializeAuthorizedProgramsInstructionArgs {
                                                              initial_programs: self.instruction.initial_programs.clone().expect("initial_programs is not set"),
                                                                  liquidity_pool_program_id: self.instruction.liquidity_pool_program_id.clone().expect("liquidity_pool_program_id is not set"),
                                                                  game_keeper_program_id: self.instruction.game_keeper_program_id.clone().expect("game_keeper_program_id is not set"),
                                                                  protocol_fee_account: self.instruction.protocol_fee_account.clone().expect("protocol_fee_account is not set"),
                                                                  max_operators: self.instruction.max_operators.clone(),
                                    };
        let instruction = InitializeAuthorizedProgramsCpi {
        __program: self.instruction.__program,
                  
          authorized_programs: self.instruction.authorized_programs.expect("authorized_programs is not set"),
                  
          admin: self.instruction.admin.expect("admin is not set"),
                  
          rando_program: self.instruction.rando_program.expect("rando_program is not set"),
                  
          randomness_state: self.instruction.randomness_state.expect("randomness_state is not set"),
                  
          instruction_sysvar: self.instruction.instruction_sysvar.expect("instruction_sysvar is not set"),
                  
          slot_hashes: self.instruction.slot_hashes.expect("slot_hashes is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitializeAuthorizedProgramsCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            authorized_programs: Option<&'b solana_account_info::AccountInfo<'a>>,
                admin: Option<&'b solana_account_info::AccountInfo<'a>>,
                rando_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                randomness_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                instruction_sysvar: Option<&'b solana_account_info::AccountInfo<'a>>,
                slot_hashes: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        initial_programs: Option<Vec<Pubkey>>,
                liquidity_pool_program_id: Option<Pubkey>,
                game_keeper_program_id: Option<Pubkey>,
                protocol_fee_account: Option<Pubkey>,
                max_operators: Option<u32>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

