//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const CLAIM_PAYOUT_DISCRIMINATOR: [u8; 8] = [127, 240, 132, 62, 227, 198, 146, 133];

/// Accounts.
#[derive(Debug)]
pub struct ClaimPayout {
            /// Game settlement account containing payout data

    
              
          pub game_settlement: solana_pubkey::Pubkey,
                /// Escrow vault holding the funds to be claimed

    
              
          pub escrow_vault: solana_pubkey::Pubkey,
                /// Settlement authority PDA

    
              
          pub settlement_authority: solana_pubkey::Pubkey,
                /// Winner's token account to receive the payout

    
              
          pub winner_token_account: solana_pubkey::Pubkey,
                /// Authorized programs account for validation

    
              
          pub authorized_programs: solana_pubkey::Pubkey,
                /// Rando program for entropy

    
              
          pub rando_program: solana_pubkey::Pubkey,
                /// Global entropy account

    
              
          pub global_entropy: solana_pubkey::Pubkey,
                /// Instructions sysvar

    
              
          pub instruction_sysvar: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
                /// Anyone can trigger claims (no authority check needed)

    
              
          pub claimer: solana_pubkey::Pubkey,
      }

impl ClaimPayout {
  pub fn instruction(&self, args: ClaimPayoutInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: ClaimPayoutInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.game_settlement,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.escrow_vault,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.settlement_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.winner_token_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authorized_programs,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rando_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.global_entropy,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.instruction_sysvar,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.claimer,
            true
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&ClaimPayoutInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ClaimPayoutInstructionData {
            discriminator: [u8; 8],
                  }

impl ClaimPayoutInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [127, 240, 132, 62, 227, 198, 146, 133],
                                              }
  }
}

impl Default for ClaimPayoutInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ClaimPayoutInstructionArgs {
                  pub game_id: u64,
                pub payout_index: u64,
      }


/// Instruction builder for `ClaimPayout`.
///
/// ### Accounts:
///
                ///   0. `[writable]` game_settlement
                ///   1. `[writable]` escrow_vault
          ///   2. `[]` settlement_authority
                ///   3. `[writable]` winner_token_account
          ///   4. `[]` authorized_programs
          ///   5. `[]` rando_program
          ///   6. `[]` global_entropy
                ///   7. `[optional]` instruction_sysvar (default to `Sysvar1nstructions1111111111111111111111111`)
                ///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   9. `[signer]` claimer
#[derive(Clone, Debug, Default)]
pub struct ClaimPayoutBuilder {
            game_settlement: Option<solana_pubkey::Pubkey>,
                escrow_vault: Option<solana_pubkey::Pubkey>,
                settlement_authority: Option<solana_pubkey::Pubkey>,
                winner_token_account: Option<solana_pubkey::Pubkey>,
                authorized_programs: Option<solana_pubkey::Pubkey>,
                rando_program: Option<solana_pubkey::Pubkey>,
                global_entropy: Option<solana_pubkey::Pubkey>,
                instruction_sysvar: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                claimer: Option<solana_pubkey::Pubkey>,
                        game_id: Option<u64>,
                payout_index: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ClaimPayoutBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// Game settlement account containing payout data
#[inline(always)]
    pub fn game_settlement(&mut self, game_settlement: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_settlement = Some(game_settlement);
                    self
    }
            /// Escrow vault holding the funds to be claimed
#[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: solana_pubkey::Pubkey) -> &mut Self {
                        self.escrow_vault = Some(escrow_vault);
                    self
    }
            /// Settlement authority PDA
#[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.settlement_authority = Some(settlement_authority);
                    self
    }
            /// Winner's token account to receive the payout
#[inline(always)]
    pub fn winner_token_account(&mut self, winner_token_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.winner_token_account = Some(winner_token_account);
                    self
    }
            /// Authorized programs account for validation
#[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: solana_pubkey::Pubkey) -> &mut Self {
                        self.authorized_programs = Some(authorized_programs);
                    self
    }
            /// Rando program for entropy
#[inline(always)]
    pub fn rando_program(&mut self, rando_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.rando_program = Some(rando_program);
                    self
    }
            /// Global entropy account
#[inline(always)]
    pub fn global_entropy(&mut self, global_entropy: solana_pubkey::Pubkey) -> &mut Self {
                        self.global_entropy = Some(global_entropy);
                    self
    }
            /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
/// Instructions sysvar
#[inline(always)]
    pub fn instruction_sysvar(&mut self, instruction_sysvar: solana_pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar = Some(instruction_sysvar);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// Anyone can trigger claims (no authority check needed)
#[inline(always)]
    pub fn claimer(&mut self, claimer: solana_pubkey::Pubkey) -> &mut Self {
                        self.claimer = Some(claimer);
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.game_id = Some(game_id);
        self
      }
                #[inline(always)]
      pub fn payout_index(&mut self, payout_index: u64) -> &mut Self {
        self.payout_index = Some(payout_index);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = ClaimPayout {
                              game_settlement: self.game_settlement.expect("game_settlement is not set"),
                                        escrow_vault: self.escrow_vault.expect("escrow_vault is not set"),
                                        settlement_authority: self.settlement_authority.expect("settlement_authority is not set"),
                                        winner_token_account: self.winner_token_account.expect("winner_token_account is not set"),
                                        authorized_programs: self.authorized_programs.expect("authorized_programs is not set"),
                                        rando_program: self.rando_program.expect("rando_program is not set"),
                                        global_entropy: self.global_entropy.expect("global_entropy is not set"),
                                        instruction_sysvar: self.instruction_sysvar.unwrap_or(solana_pubkey::pubkey!("Sysvar1nstructions1111111111111111111111111")),
                                        token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        claimer: self.claimer.expect("claimer is not set"),
                      };
          let args = ClaimPayoutInstructionArgs {
                                                              game_id: self.game_id.clone().expect("game_id is not set"),
                                                                  payout_index: self.payout_index.clone().expect("payout_index is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `claim_payout` CPI accounts.
  pub struct ClaimPayoutCpiAccounts<'a, 'b> {
                  /// Game settlement account containing payout data

      
                    
              pub game_settlement: &'b solana_account_info::AccountInfo<'a>,
                        /// Escrow vault holding the funds to be claimed

      
                    
              pub escrow_vault: &'b solana_account_info::AccountInfo<'a>,
                        /// Settlement authority PDA

      
                    
              pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
                        /// Winner's token account to receive the payout

      
                    
              pub winner_token_account: &'b solana_account_info::AccountInfo<'a>,
                        /// Authorized programs account for validation

      
                    
              pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
                        /// Rando program for entropy

      
                    
              pub rando_program: &'b solana_account_info::AccountInfo<'a>,
                        /// Global entropy account

      
                    
              pub global_entropy: &'b solana_account_info::AccountInfo<'a>,
                        /// Instructions sysvar

      
                    
              pub instruction_sysvar: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
                        /// Anyone can trigger claims (no authority check needed)

      
                    
              pub claimer: &'b solana_account_info::AccountInfo<'a>,
            }

/// `claim_payout` CPI instruction.
pub struct ClaimPayoutCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
            /// Game settlement account containing payout data

    
              
          pub game_settlement: &'b solana_account_info::AccountInfo<'a>,
                /// Escrow vault holding the funds to be claimed

    
              
          pub escrow_vault: &'b solana_account_info::AccountInfo<'a>,
                /// Settlement authority PDA

    
              
          pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
                /// Winner's token account to receive the payout

    
              
          pub winner_token_account: &'b solana_account_info::AccountInfo<'a>,
                /// Authorized programs account for validation

    
              
          pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
                /// Rando program for entropy

    
              
          pub rando_program: &'b solana_account_info::AccountInfo<'a>,
                /// Global entropy account

    
              
          pub global_entropy: &'b solana_account_info::AccountInfo<'a>,
                /// Instructions sysvar

    
              
          pub instruction_sysvar: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
                /// Anyone can trigger claims (no authority check needed)

    
              
          pub claimer: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: ClaimPayoutInstructionArgs,
  }

impl<'a, 'b> ClaimPayoutCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: ClaimPayoutCpiAccounts<'a, 'b>,
              args: ClaimPayoutInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              game_settlement: accounts.game_settlement,
              escrow_vault: accounts.escrow_vault,
              settlement_authority: accounts.settlement_authority,
              winner_token_account: accounts.winner_token_account,
              authorized_programs: accounts.authorized_programs,
              rando_program: accounts.rando_program,
              global_entropy: accounts.global_entropy,
              instruction_sysvar: accounts.instruction_sysvar,
              token_program: accounts.token_program,
              claimer: accounts.claimer,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(10+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.game_settlement.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.escrow_vault.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.settlement_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.winner_token_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authorized_programs.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rando_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.global_entropy.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.claimer.key,
            true
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&ClaimPayoutInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.game_settlement.clone());
                        account_infos.push(self.escrow_vault.clone());
                        account_infos.push(self.settlement_authority.clone());
                        account_infos.push(self.winner_token_account.clone());
                        account_infos.push(self.authorized_programs.clone());
                        account_infos.push(self.rando_program.clone());
                        account_infos.push(self.global_entropy.clone());
                        account_infos.push(self.instruction_sysvar.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.claimer.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ClaimPayout` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` game_settlement
                ///   1. `[writable]` escrow_vault
          ///   2. `[]` settlement_authority
                ///   3. `[writable]` winner_token_account
          ///   4. `[]` authorized_programs
          ///   5. `[]` rando_program
          ///   6. `[]` global_entropy
          ///   7. `[]` instruction_sysvar
          ///   8. `[]` token_program
                ///   9. `[signer]` claimer
#[derive(Clone, Debug)]
pub struct ClaimPayoutCpiBuilder<'a, 'b> {
  instruction: Box<ClaimPayoutCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimPayoutCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ClaimPayoutCpiBuilderInstruction {
      __program: program,
              game_settlement: None,
              escrow_vault: None,
              settlement_authority: None,
              winner_token_account: None,
              authorized_programs: None,
              rando_program: None,
              global_entropy: None,
              instruction_sysvar: None,
              token_program: None,
              claimer: None,
                                            game_id: None,
                                payout_index: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// Game settlement account containing payout data
#[inline(always)]
    pub fn game_settlement(&mut self, game_settlement: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_settlement = Some(game_settlement);
                    self
    }
      /// Escrow vault holding the funds to be claimed
#[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.escrow_vault = Some(escrow_vault);
                    self
    }
      /// Settlement authority PDA
#[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settlement_authority = Some(settlement_authority);
                    self
    }
      /// Winner's token account to receive the payout
#[inline(always)]
    pub fn winner_token_account(&mut self, winner_token_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.winner_token_account = Some(winner_token_account);
                    self
    }
      /// Authorized programs account for validation
#[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authorized_programs = Some(authorized_programs);
                    self
    }
      /// Rando program for entropy
#[inline(always)]
    pub fn rando_program(&mut self, rando_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rando_program = Some(rando_program);
                    self
    }
      /// Global entropy account
#[inline(always)]
    pub fn global_entropy(&mut self, global_entropy: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_entropy = Some(global_entropy);
                    self
    }
      /// Instructions sysvar
#[inline(always)]
    pub fn instruction_sysvar(&mut self, instruction_sysvar: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar = Some(instruction_sysvar);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      /// Anyone can trigger claims (no authority check needed)
#[inline(always)]
    pub fn claimer(&mut self, claimer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.claimer = Some(claimer);
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
      }
                #[inline(always)]
      pub fn payout_index(&mut self, payout_index: u64) -> &mut Self {
        self.instruction.payout_index = Some(payout_index);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = ClaimPayoutInstructionArgs {
                                                              game_id: self.instruction.game_id.clone().expect("game_id is not set"),
                                                                  payout_index: self.instruction.payout_index.clone().expect("payout_index is not set"),
                                    };
        let instruction = ClaimPayoutCpi {
        __program: self.instruction.__program,
                  
          game_settlement: self.instruction.game_settlement.expect("game_settlement is not set"),
                  
          escrow_vault: self.instruction.escrow_vault.expect("escrow_vault is not set"),
                  
          settlement_authority: self.instruction.settlement_authority.expect("settlement_authority is not set"),
                  
          winner_token_account: self.instruction.winner_token_account.expect("winner_token_account is not set"),
                  
          authorized_programs: self.instruction.authorized_programs.expect("authorized_programs is not set"),
                  
          rando_program: self.instruction.rando_program.expect("rando_program is not set"),
                  
          global_entropy: self.instruction.global_entropy.expect("global_entropy is not set"),
                  
          instruction_sysvar: self.instruction.instruction_sysvar.expect("instruction_sysvar is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          claimer: self.instruction.claimer.expect("claimer is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ClaimPayoutCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            game_settlement: Option<&'b solana_account_info::AccountInfo<'a>>,
                escrow_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
                settlement_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                winner_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                authorized_programs: Option<&'b solana_account_info::AccountInfo<'a>>,
                rando_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                global_entropy: Option<&'b solana_account_info::AccountInfo<'a>>,
                instruction_sysvar: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                claimer: Option<&'b solana_account_info::AccountInfo<'a>>,
                        game_id: Option<u64>,
                payout_index: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

