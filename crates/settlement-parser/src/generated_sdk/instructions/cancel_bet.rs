//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const CANCEL_BET_DISCRIMINATOR: [u8; 8] = [17, 248, 130, 128, 153, 227, 231, 9];

/// Accounts.
#[derive(Debug)]
pub struct CancelBet {
      
              
          pub game_registry: solana_pubkey::Pubkey,
          
              
          pub escrow_vault: solana_pubkey::Pubkey,
          
              
          pub token_mint: solana_pubkey::Pubkey,
          
              
          pub player_token_account: solana_pubkey::Pubkey,
                /// Generic game program for validation

    
              
          pub game_program: solana_pubkey::Pubkey,
                /// Generic game account for validation

    
              
          pub game_account: solana_pubkey::Pubkey,
                /// Generic global config account

    
              
          pub global_config: solana_pubkey::Pubkey,
                /// Liquidity pool account (optional, for exposure updates)

    
              
          pub token_pool: Option<solana_pubkey::Pubkey>,
                /// Pool exposure account (optional, for exposure updates)

    
              
          pub pool_exposure: Option<solana_pubkey::Pubkey>,
                /// Liquidity pool program (optional, for exposure updates)

    
              
          pub liquidity_pool_program: solana_pubkey::Pubkey,
                /// Settlement authority PDA

    
              
          pub settlement_authority: solana_pubkey::Pubkey,
          
              
          pub player: solana_pubkey::Pubkey,
                /// Authorized programs account for accessing liquidity pool program

    
              
          pub authorized_programs: solana_pubkey::Pubkey,
                /// Game bet tracker for updating volume and EV tracking

    
              
          pub bet_tracker: solana_pubkey::Pubkey,
                /// Rando program for entropy

    
              
          pub rando_program: solana_pubkey::Pubkey,
                /// RandomnessState account from rando program

    
              
          pub randomness_state: solana_pubkey::Pubkey,
                /// Instructions sysvar

    
              
          pub instruction_sysvar: solana_pubkey::Pubkey,
                /// SlotHashes sysvar for rando tick

    
              
          pub slot_hashes: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
      }

impl CancelBet {
  pub fn instruction(&self, args: CancelBetInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: CancelBetInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(20+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_registry,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.escrow_vault,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_mint,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.player_token_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.game_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.global_config,
            false
          ));
                                                      if let Some(token_pool) = self.token_pool {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                token_pool,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::SETTLEMENT_ID,
                false,
              ));
            }
                                                                if let Some(pool_exposure) = self.pool_exposure {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                pool_exposure,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::SETTLEMENT_ID,
                false,
              ));
            }
                                                    accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.liquidity_pool_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.settlement_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.player,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authorized_programs,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.bet_tracker,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rando_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.randomness_state,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.instruction_sysvar,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.slot_hashes,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&CancelBetInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CancelBetInstructionData {
            discriminator: [u8; 8],
                  }

impl CancelBetInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [17, 248, 130, 128, 153, 227, 231, 9],
                                              }
  }
}

impl Default for CancelBetInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CancelBetInstructionArgs {
                  pub game_id: u64,
                pub bet_id: u64,
      }


/// Instruction builder for `CancelBet`.
///
/// ### Accounts:
///
          ///   0. `[]` game_registry
                ///   1. `[writable]` escrow_vault
          ///   2. `[]` token_mint
                ///   3. `[writable]` player_token_account
          ///   4. `[]` game_program
                ///   5. `[writable]` game_account
          ///   6. `[]` global_config
                ///   7. `[optional]` token_pool
                ///   8. `[optional]` pool_exposure
          ///   9. `[]` liquidity_pool_program
                ///   10. `[writable]` settlement_authority
                      ///   11. `[writable, signer]` player
          ///   12. `[]` authorized_programs
                ///   13. `[writable]` bet_tracker
          ///   14. `[]` rando_program
                ///   15. `[writable]` randomness_state
                ///   16. `[optional]` instruction_sysvar (default to `Sysvar1nstructions1111111111111111111111111`)
                ///   17. `[optional]` slot_hashes (default to `SysvarS1otHashes111111111111111111111111111`)
                ///   18. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   19. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct CancelBetBuilder {
            game_registry: Option<solana_pubkey::Pubkey>,
                escrow_vault: Option<solana_pubkey::Pubkey>,
                token_mint: Option<solana_pubkey::Pubkey>,
                player_token_account: Option<solana_pubkey::Pubkey>,
                game_program: Option<solana_pubkey::Pubkey>,
                game_account: Option<solana_pubkey::Pubkey>,
                global_config: Option<solana_pubkey::Pubkey>,
                token_pool: Option<solana_pubkey::Pubkey>,
                pool_exposure: Option<solana_pubkey::Pubkey>,
                liquidity_pool_program: Option<solana_pubkey::Pubkey>,
                settlement_authority: Option<solana_pubkey::Pubkey>,
                player: Option<solana_pubkey::Pubkey>,
                authorized_programs: Option<solana_pubkey::Pubkey>,
                bet_tracker: Option<solana_pubkey::Pubkey>,
                rando_program: Option<solana_pubkey::Pubkey>,
                randomness_state: Option<solana_pubkey::Pubkey>,
                instruction_sysvar: Option<solana_pubkey::Pubkey>,
                slot_hashes: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                        game_id: Option<u64>,
                bet_id: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CancelBetBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn game_registry(&mut self, game_registry: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_registry = Some(game_registry);
                    self
    }
            #[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: solana_pubkey::Pubkey) -> &mut Self {
                        self.escrow_vault = Some(escrow_vault);
                    self
    }
            #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_mint = Some(token_mint);
                    self
    }
            #[inline(always)]
    pub fn player_token_account(&mut self, player_token_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.player_token_account = Some(player_token_account);
                    self
    }
            /// Generic game program for validation
#[inline(always)]
    pub fn game_program(&mut self, game_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_program = Some(game_program);
                    self
    }
            /// Generic game account for validation
#[inline(always)]
    pub fn game_account(&mut self, game_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_account = Some(game_account);
                    self
    }
            /// Generic global config account
#[inline(always)]
    pub fn global_config(&mut self, global_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.global_config = Some(global_config);
                    self
    }
            /// `[optional account]`
/// Liquidity pool account (optional, for exposure updates)
#[inline(always)]
    pub fn token_pool(&mut self, token_pool: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.token_pool = token_pool;
                    self
    }
            /// `[optional account]`
/// Pool exposure account (optional, for exposure updates)
#[inline(always)]
    pub fn pool_exposure(&mut self, pool_exposure: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.pool_exposure = pool_exposure;
                    self
    }
            /// Liquidity pool program (optional, for exposure updates)
#[inline(always)]
    pub fn liquidity_pool_program(&mut self, liquidity_pool_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.liquidity_pool_program = Some(liquidity_pool_program);
                    self
    }
            /// Settlement authority PDA
#[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.settlement_authority = Some(settlement_authority);
                    self
    }
            #[inline(always)]
    pub fn player(&mut self, player: solana_pubkey::Pubkey) -> &mut Self {
                        self.player = Some(player);
                    self
    }
            /// Authorized programs account for accessing liquidity pool program
#[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: solana_pubkey::Pubkey) -> &mut Self {
                        self.authorized_programs = Some(authorized_programs);
                    self
    }
            /// Game bet tracker for updating volume and EV tracking
#[inline(always)]
    pub fn bet_tracker(&mut self, bet_tracker: solana_pubkey::Pubkey) -> &mut Self {
                        self.bet_tracker = Some(bet_tracker);
                    self
    }
            /// Rando program for entropy
#[inline(always)]
    pub fn rando_program(&mut self, rando_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.rando_program = Some(rando_program);
                    self
    }
            /// RandomnessState account from rando program
#[inline(always)]
    pub fn randomness_state(&mut self, randomness_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.randomness_state = Some(randomness_state);
                    self
    }
            /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
/// Instructions sysvar
#[inline(always)]
    pub fn instruction_sysvar(&mut self, instruction_sysvar: solana_pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar = Some(instruction_sysvar);
                    self
    }
            /// `[optional account, default to 'SysvarS1otHashes111111111111111111111111111']`
/// SlotHashes sysvar for rando tick
#[inline(always)]
    pub fn slot_hashes(&mut self, slot_hashes: solana_pubkey::Pubkey) -> &mut Self {
                        self.slot_hashes = Some(slot_hashes);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.game_id = Some(game_id);
        self
      }
                #[inline(always)]
      pub fn bet_id(&mut self, bet_id: u64) -> &mut Self {
        self.bet_id = Some(bet_id);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = CancelBet {
                              game_registry: self.game_registry.expect("game_registry is not set"),
                                        escrow_vault: self.escrow_vault.expect("escrow_vault is not set"),
                                        token_mint: self.token_mint.expect("token_mint is not set"),
                                        player_token_account: self.player_token_account.expect("player_token_account is not set"),
                                        game_program: self.game_program.expect("game_program is not set"),
                                        game_account: self.game_account.expect("game_account is not set"),
                                        global_config: self.global_config.expect("global_config is not set"),
                                        token_pool: self.token_pool,
                                        pool_exposure: self.pool_exposure,
                                        liquidity_pool_program: self.liquidity_pool_program.expect("liquidity_pool_program is not set"),
                                        settlement_authority: self.settlement_authority.expect("settlement_authority is not set"),
                                        player: self.player.expect("player is not set"),
                                        authorized_programs: self.authorized_programs.expect("authorized_programs is not set"),
                                        bet_tracker: self.bet_tracker.expect("bet_tracker is not set"),
                                        rando_program: self.rando_program.expect("rando_program is not set"),
                                        randomness_state: self.randomness_state.expect("randomness_state is not set"),
                                        instruction_sysvar: self.instruction_sysvar.unwrap_or(solana_pubkey::pubkey!("Sysvar1nstructions1111111111111111111111111")),
                                        slot_hashes: self.slot_hashes.unwrap_or(solana_pubkey::pubkey!("SysvarS1otHashes111111111111111111111111111")),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                      };
          let args = CancelBetInstructionArgs {
                                                              game_id: self.game_id.clone().expect("game_id is not set"),
                                                                  bet_id: self.bet_id.clone().expect("bet_id is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `cancel_bet` CPI accounts.
  pub struct CancelBetCpiAccounts<'a, 'b> {
          
                    
              pub game_registry: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub escrow_vault: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_mint: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub player_token_account: &'b solana_account_info::AccountInfo<'a>,
                        /// Generic game program for validation

      
                    
              pub game_program: &'b solana_account_info::AccountInfo<'a>,
                        /// Generic game account for validation

      
                    
              pub game_account: &'b solana_account_info::AccountInfo<'a>,
                        /// Generic global config account

      
                    
              pub global_config: &'b solana_account_info::AccountInfo<'a>,
                        /// Liquidity pool account (optional, for exposure updates)

      
                    
              pub token_pool: Option<&'b solana_account_info::AccountInfo<'a>>,
                        /// Pool exposure account (optional, for exposure updates)

      
                    
              pub pool_exposure: Option<&'b solana_account_info::AccountInfo<'a>>,
                        /// Liquidity pool program (optional, for exposure updates)

      
                    
              pub liquidity_pool_program: &'b solana_account_info::AccountInfo<'a>,
                        /// Settlement authority PDA

      
                    
              pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub player: &'b solana_account_info::AccountInfo<'a>,
                        /// Authorized programs account for accessing liquidity pool program

      
                    
              pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
                        /// Game bet tracker for updating volume and EV tracking

      
                    
              pub bet_tracker: &'b solana_account_info::AccountInfo<'a>,
                        /// Rando program for entropy

      
                    
              pub rando_program: &'b solana_account_info::AccountInfo<'a>,
                        /// RandomnessState account from rando program

      
                    
              pub randomness_state: &'b solana_account_info::AccountInfo<'a>,
                        /// Instructions sysvar

      
                    
              pub instruction_sysvar: &'b solana_account_info::AccountInfo<'a>,
                        /// SlotHashes sysvar for rando tick

      
                    
              pub slot_hashes: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `cancel_bet` CPI instruction.
pub struct CancelBetCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub game_registry: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub escrow_vault: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_mint: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub player_token_account: &'b solana_account_info::AccountInfo<'a>,
                /// Generic game program for validation

    
              
          pub game_program: &'b solana_account_info::AccountInfo<'a>,
                /// Generic game account for validation

    
              
          pub game_account: &'b solana_account_info::AccountInfo<'a>,
                /// Generic global config account

    
              
          pub global_config: &'b solana_account_info::AccountInfo<'a>,
                /// Liquidity pool account (optional, for exposure updates)

    
              
          pub token_pool: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Pool exposure account (optional, for exposure updates)

    
              
          pub pool_exposure: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Liquidity pool program (optional, for exposure updates)

    
              
          pub liquidity_pool_program: &'b solana_account_info::AccountInfo<'a>,
                /// Settlement authority PDA

    
              
          pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub player: &'b solana_account_info::AccountInfo<'a>,
                /// Authorized programs account for accessing liquidity pool program

    
              
          pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
                /// Game bet tracker for updating volume and EV tracking

    
              
          pub bet_tracker: &'b solana_account_info::AccountInfo<'a>,
                /// Rando program for entropy

    
              
          pub rando_program: &'b solana_account_info::AccountInfo<'a>,
                /// RandomnessState account from rando program

    
              
          pub randomness_state: &'b solana_account_info::AccountInfo<'a>,
                /// Instructions sysvar

    
              
          pub instruction_sysvar: &'b solana_account_info::AccountInfo<'a>,
                /// SlotHashes sysvar for rando tick

    
              
          pub slot_hashes: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: CancelBetInstructionArgs,
  }

impl<'a, 'b> CancelBetCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: CancelBetCpiAccounts<'a, 'b>,
              args: CancelBetInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              game_registry: accounts.game_registry,
              escrow_vault: accounts.escrow_vault,
              token_mint: accounts.token_mint,
              player_token_account: accounts.player_token_account,
              game_program: accounts.game_program,
              game_account: accounts.game_account,
              global_config: accounts.global_config,
              token_pool: accounts.token_pool,
              pool_exposure: accounts.pool_exposure,
              liquidity_pool_program: accounts.liquidity_pool_program,
              settlement_authority: accounts.settlement_authority,
              player: accounts.player,
              authorized_programs: accounts.authorized_programs,
              bet_tracker: accounts.bet_tracker,
              rando_program: accounts.rando_program,
              randomness_state: accounts.randomness_state,
              instruction_sysvar: accounts.instruction_sysvar,
              slot_hashes: accounts.slot_hashes,
              system_program: accounts.system_program,
              token_program: accounts.token_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(20+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_registry.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.escrow_vault.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.player_token_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.game_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false
          ));
                                          if let Some(token_pool) = self.token_pool {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *token_pool.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::SETTLEMENT_ID,
              false,
            ));
          }
                                          if let Some(pool_exposure) = self.pool_exposure {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *pool_exposure.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::SETTLEMENT_ID,
              false,
            ));
          }
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.liquidity_pool_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.settlement_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.player.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authorized_programs.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.bet_tracker.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rando_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.randomness_state.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.slot_hashes.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&CancelBetInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(21 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.game_registry.clone());
                        account_infos.push(self.escrow_vault.clone());
                        account_infos.push(self.token_mint.clone());
                        account_infos.push(self.player_token_account.clone());
                        account_infos.push(self.game_program.clone());
                        account_infos.push(self.game_account.clone());
                        account_infos.push(self.global_config.clone());
                        if let Some(token_pool) = self.token_pool {
          account_infos.push(token_pool.clone());
        }
                        if let Some(pool_exposure) = self.pool_exposure {
          account_infos.push(pool_exposure.clone());
        }
                        account_infos.push(self.liquidity_pool_program.clone());
                        account_infos.push(self.settlement_authority.clone());
                        account_infos.push(self.player.clone());
                        account_infos.push(self.authorized_programs.clone());
                        account_infos.push(self.bet_tracker.clone());
                        account_infos.push(self.rando_program.clone());
                        account_infos.push(self.randomness_state.clone());
                        account_infos.push(self.instruction_sysvar.clone());
                        account_infos.push(self.slot_hashes.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.token_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CancelBet` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` game_registry
                ///   1. `[writable]` escrow_vault
          ///   2. `[]` token_mint
                ///   3. `[writable]` player_token_account
          ///   4. `[]` game_program
                ///   5. `[writable]` game_account
          ///   6. `[]` global_config
                ///   7. `[optional]` token_pool
                ///   8. `[optional]` pool_exposure
          ///   9. `[]` liquidity_pool_program
                ///   10. `[writable]` settlement_authority
                      ///   11. `[writable, signer]` player
          ///   12. `[]` authorized_programs
                ///   13. `[writable]` bet_tracker
          ///   14. `[]` rando_program
                ///   15. `[writable]` randomness_state
          ///   16. `[]` instruction_sysvar
          ///   17. `[]` slot_hashes
          ///   18. `[]` system_program
          ///   19. `[]` token_program
#[derive(Clone, Debug)]
pub struct CancelBetCpiBuilder<'a, 'b> {
  instruction: Box<CancelBetCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CancelBetCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CancelBetCpiBuilderInstruction {
      __program: program,
              game_registry: None,
              escrow_vault: None,
              token_mint: None,
              player_token_account: None,
              game_program: None,
              game_account: None,
              global_config: None,
              token_pool: None,
              pool_exposure: None,
              liquidity_pool_program: None,
              settlement_authority: None,
              player: None,
              authorized_programs: None,
              bet_tracker: None,
              rando_program: None,
              randomness_state: None,
              instruction_sysvar: None,
              slot_hashes: None,
              system_program: None,
              token_program: None,
                                            game_id: None,
                                bet_id: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn game_registry(&mut self, game_registry: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_registry = Some(game_registry);
                    self
    }
      #[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.escrow_vault = Some(escrow_vault);
                    self
    }
      #[inline(always)]
    pub fn token_mint(&mut self, token_mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_mint = Some(token_mint);
                    self
    }
      #[inline(always)]
    pub fn player_token_account(&mut self, player_token_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.player_token_account = Some(player_token_account);
                    self
    }
      /// Generic game program for validation
#[inline(always)]
    pub fn game_program(&mut self, game_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_program = Some(game_program);
                    self
    }
      /// Generic game account for validation
#[inline(always)]
    pub fn game_account(&mut self, game_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_account = Some(game_account);
                    self
    }
      /// Generic global config account
#[inline(always)]
    pub fn global_config(&mut self, global_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_config = Some(global_config);
                    self
    }
      /// `[optional account]`
/// Liquidity pool account (optional, for exposure updates)
#[inline(always)]
    pub fn token_pool(&mut self, token_pool: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.token_pool = token_pool;
                    self
    }
      /// `[optional account]`
/// Pool exposure account (optional, for exposure updates)
#[inline(always)]
    pub fn pool_exposure(&mut self, pool_exposure: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.pool_exposure = pool_exposure;
                    self
    }
      /// Liquidity pool program (optional, for exposure updates)
#[inline(always)]
    pub fn liquidity_pool_program(&mut self, liquidity_pool_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.liquidity_pool_program = Some(liquidity_pool_program);
                    self
    }
      /// Settlement authority PDA
#[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settlement_authority = Some(settlement_authority);
                    self
    }
      #[inline(always)]
    pub fn player(&mut self, player: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.player = Some(player);
                    self
    }
      /// Authorized programs account for accessing liquidity pool program
#[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authorized_programs = Some(authorized_programs);
                    self
    }
      /// Game bet tracker for updating volume and EV tracking
#[inline(always)]
    pub fn bet_tracker(&mut self, bet_tracker: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.bet_tracker = Some(bet_tracker);
                    self
    }
      /// Rando program for entropy
#[inline(always)]
    pub fn rando_program(&mut self, rando_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rando_program = Some(rando_program);
                    self
    }
      /// RandomnessState account from rando program
#[inline(always)]
    pub fn randomness_state(&mut self, randomness_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.randomness_state = Some(randomness_state);
                    self
    }
      /// Instructions sysvar
#[inline(always)]
    pub fn instruction_sysvar(&mut self, instruction_sysvar: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar = Some(instruction_sysvar);
                    self
    }
      /// SlotHashes sysvar for rando tick
#[inline(always)]
    pub fn slot_hashes(&mut self, slot_hashes: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.slot_hashes = Some(slot_hashes);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
      }
                #[inline(always)]
      pub fn bet_id(&mut self, bet_id: u64) -> &mut Self {
        self.instruction.bet_id = Some(bet_id);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = CancelBetInstructionArgs {
                                                              game_id: self.instruction.game_id.clone().expect("game_id is not set"),
                                                                  bet_id: self.instruction.bet_id.clone().expect("bet_id is not set"),
                                    };
        let instruction = CancelBetCpi {
        __program: self.instruction.__program,
                  
          game_registry: self.instruction.game_registry.expect("game_registry is not set"),
                  
          escrow_vault: self.instruction.escrow_vault.expect("escrow_vault is not set"),
                  
          token_mint: self.instruction.token_mint.expect("token_mint is not set"),
                  
          player_token_account: self.instruction.player_token_account.expect("player_token_account is not set"),
                  
          game_program: self.instruction.game_program.expect("game_program is not set"),
                  
          game_account: self.instruction.game_account.expect("game_account is not set"),
                  
          global_config: self.instruction.global_config.expect("global_config is not set"),
                  
          token_pool: self.instruction.token_pool,
                  
          pool_exposure: self.instruction.pool_exposure,
                  
          liquidity_pool_program: self.instruction.liquidity_pool_program.expect("liquidity_pool_program is not set"),
                  
          settlement_authority: self.instruction.settlement_authority.expect("settlement_authority is not set"),
                  
          player: self.instruction.player.expect("player is not set"),
                  
          authorized_programs: self.instruction.authorized_programs.expect("authorized_programs is not set"),
                  
          bet_tracker: self.instruction.bet_tracker.expect("bet_tracker is not set"),
                  
          rando_program: self.instruction.rando_program.expect("rando_program is not set"),
                  
          randomness_state: self.instruction.randomness_state.expect("randomness_state is not set"),
                  
          instruction_sysvar: self.instruction.instruction_sysvar.expect("instruction_sysvar is not set"),
                  
          slot_hashes: self.instruction.slot_hashes.expect("slot_hashes is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CancelBetCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            game_registry: Option<&'b solana_account_info::AccountInfo<'a>>,
                escrow_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                player_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                global_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_pool: Option<&'b solana_account_info::AccountInfo<'a>>,
                pool_exposure: Option<&'b solana_account_info::AccountInfo<'a>>,
                liquidity_pool_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                settlement_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                player: Option<&'b solana_account_info::AccountInfo<'a>>,
                authorized_programs: Option<&'b solana_account_info::AccountInfo<'a>>,
                bet_tracker: Option<&'b solana_account_info::AccountInfo<'a>>,
                rando_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                randomness_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                instruction_sysvar: Option<&'b solana_account_info::AccountInfo<'a>>,
                slot_hashes: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        game_id: Option<u64>,
                bet_id: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

