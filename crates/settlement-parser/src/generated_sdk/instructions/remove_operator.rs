//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const REMOVE_OPERATOR_DISCRIMINATOR: [u8; 8] = [84, 183, 126, 251, 137, 150, 214, 134];

/// Accounts.
#[derive(Debug)]
pub struct RemoveOperator {
      
              
          pub authorized_programs: solana_pubkey::Pubkey,
          
              
          pub admin: solana_pubkey::Pubkey,
      }

impl RemoveOperator {
  pub fn instruction(&self, args: RemoveOperatorInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: RemoveOperatorInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(2+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.authorized_programs,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.admin,
            true
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&RemoveOperatorInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct RemoveOperatorInstructionData {
            discriminator: [u8; 8],
            }

impl RemoveOperatorInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [84, 183, 126, 251, 137, 150, 214, 134],
                                }
  }
}

impl Default for RemoveOperatorInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct RemoveOperatorInstructionArgs {
                  pub operator: Pubkey,
      }


/// Instruction builder for `RemoveOperator`.
///
/// ### Accounts:
///
                ///   0. `[writable]` authorized_programs
                ///   1. `[signer]` admin
#[derive(Clone, Debug, Default)]
pub struct RemoveOperatorBuilder {
            authorized_programs: Option<solana_pubkey::Pubkey>,
                admin: Option<solana_pubkey::Pubkey>,
                        operator: Option<Pubkey>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl RemoveOperatorBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: solana_pubkey::Pubkey) -> &mut Self {
                        self.authorized_programs = Some(authorized_programs);
                    self
    }
            #[inline(always)]
    pub fn admin(&mut self, admin: solana_pubkey::Pubkey) -> &mut Self {
                        self.admin = Some(admin);
                    self
    }
                    #[inline(always)]
      pub fn operator(&mut self, operator: Pubkey) -> &mut Self {
        self.operator = Some(operator);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = RemoveOperator {
                              authorized_programs: self.authorized_programs.expect("authorized_programs is not set"),
                                        admin: self.admin.expect("admin is not set"),
                      };
          let args = RemoveOperatorInstructionArgs {
                                                              operator: self.operator.clone().expect("operator is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `remove_operator` CPI accounts.
  pub struct RemoveOperatorCpiAccounts<'a, 'b> {
          
                    
              pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub admin: &'b solana_account_info::AccountInfo<'a>,
            }

/// `remove_operator` CPI instruction.
pub struct RemoveOperatorCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub admin: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: RemoveOperatorInstructionArgs,
  }

impl<'a, 'b> RemoveOperatorCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: RemoveOperatorCpiAccounts<'a, 'b>,
              args: RemoveOperatorInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              authorized_programs: accounts.authorized_programs,
              admin: accounts.admin,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(2+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.authorized_programs.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.admin.key,
            true
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&RemoveOperatorInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.authorized_programs.clone());
                        account_infos.push(self.admin.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `RemoveOperator` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` authorized_programs
                ///   1. `[signer]` admin
#[derive(Clone, Debug)]
pub struct RemoveOperatorCpiBuilder<'a, 'b> {
  instruction: Box<RemoveOperatorCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RemoveOperatorCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(RemoveOperatorCpiBuilderInstruction {
      __program: program,
              authorized_programs: None,
              admin: None,
                                            operator: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authorized_programs = Some(authorized_programs);
                    self
    }
      #[inline(always)]
    pub fn admin(&mut self, admin: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.admin = Some(admin);
                    self
    }
                    #[inline(always)]
      pub fn operator(&mut self, operator: Pubkey) -> &mut Self {
        self.instruction.operator = Some(operator);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = RemoveOperatorInstructionArgs {
                                                              operator: self.instruction.operator.clone().expect("operator is not set"),
                                    };
        let instruction = RemoveOperatorCpi {
        __program: self.instruction.__program,
                  
          authorized_programs: self.instruction.authorized_programs.expect("authorized_programs is not set"),
                  
          admin: self.instruction.admin.expect("admin is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct RemoveOperatorCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            authorized_programs: Option<&'b solana_account_info::AccountInfo<'a>>,
                admin: Option<&'b solana_account_info::AccountInfo<'a>>,
                        operator: Option<Pubkey>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

