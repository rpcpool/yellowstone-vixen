//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const GET_PAYOUTS_DISCRIMINATOR: [u8; 8] = [19, 115, 125, 97, 44, 130, 166, 164];

/// Accounts.
#[derive(Debug)]
pub struct GetPayouts {
            /// Game registry to check game state

    
              
          pub game_registry: solana_pubkey::Pubkey,
                /// Game settlement account (optional - only exists if game is settled)

    
              
          pub game_settlement: Option<solana_pubkey::Pubkey>,
      }

impl GetPayouts {
  pub fn instruction(&self, args: GetPayoutsInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: GetPayoutsInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(2+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_registry,
            false
          ));
                                                      if let Some(game_settlement) = self.game_settlement {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                game_settlement,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::SETTLEMENT_ID,
                false,
              ));
            }
                                accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&GetPayoutsInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct GetPayoutsInstructionData {
            discriminator: [u8; 8],
            }

impl GetPayoutsInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [19, 115, 125, 97, 44, 130, 166, 164],
                                }
  }
}

impl Default for GetPayoutsInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct GetPayoutsInstructionArgs {
                  pub game_id: u64,
      }


/// Instruction builder for `GetPayouts`.
///
/// ### Accounts:
///
          ///   0. `[]` game_registry
                ///   1. `[optional]` game_settlement
#[derive(Clone, Debug, Default)]
pub struct GetPayoutsBuilder {
            game_registry: Option<solana_pubkey::Pubkey>,
                game_settlement: Option<solana_pubkey::Pubkey>,
                        game_id: Option<u64>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl GetPayoutsBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// Game registry to check game state
#[inline(always)]
    pub fn game_registry(&mut self, game_registry: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_registry = Some(game_registry);
                    self
    }
            /// `[optional account]`
/// Game settlement account (optional - only exists if game is settled)
#[inline(always)]
    pub fn game_settlement(&mut self, game_settlement: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.game_settlement = game_settlement;
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.game_id = Some(game_id);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = GetPayouts {
                              game_registry: self.game_registry.expect("game_registry is not set"),
                                        game_settlement: self.game_settlement,
                      };
          let args = GetPayoutsInstructionArgs {
                                                              game_id: self.game_id.clone().expect("game_id is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `get_payouts` CPI accounts.
  pub struct GetPayoutsCpiAccounts<'a, 'b> {
                  /// Game registry to check game state

      
                    
              pub game_registry: &'b solana_account_info::AccountInfo<'a>,
                        /// Game settlement account (optional - only exists if game is settled)

      
                    
              pub game_settlement: Option<&'b solana_account_info::AccountInfo<'a>>,
            }

/// `get_payouts` CPI instruction.
pub struct GetPayoutsCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
            /// Game registry to check game state

    
              
          pub game_registry: &'b solana_account_info::AccountInfo<'a>,
                /// Game settlement account (optional - only exists if game is settled)

    
              
          pub game_settlement: Option<&'b solana_account_info::AccountInfo<'a>>,
            /// The arguments for the instruction.
    pub __args: GetPayoutsInstructionArgs,
  }

impl<'a, 'b> GetPayoutsCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: GetPayoutsCpiAccounts<'a, 'b>,
              args: GetPayoutsInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              game_registry: accounts.game_registry,
              game_settlement: accounts.game_settlement,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(2+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_registry.key,
            false
          ));
                                          if let Some(game_settlement) = self.game_settlement {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *game_settlement.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::SETTLEMENT_ID,
              false,
            ));
          }
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&GetPayoutsInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.game_registry.clone());
                        if let Some(game_settlement) = self.game_settlement {
          account_infos.push(game_settlement.clone());
        }
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `GetPayouts` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` game_registry
                ///   1. `[optional]` game_settlement
#[derive(Clone, Debug)]
pub struct GetPayoutsCpiBuilder<'a, 'b> {
  instruction: Box<GetPayoutsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> GetPayoutsCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(GetPayoutsCpiBuilderInstruction {
      __program: program,
              game_registry: None,
              game_settlement: None,
                                            game_id: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// Game registry to check game state
#[inline(always)]
    pub fn game_registry(&mut self, game_registry: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_registry = Some(game_registry);
                    self
    }
      /// `[optional account]`
/// Game settlement account (optional - only exists if game is settled)
#[inline(always)]
    pub fn game_settlement(&mut self, game_settlement: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.game_settlement = game_settlement;
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = GetPayoutsInstructionArgs {
                                                              game_id: self.instruction.game_id.clone().expect("game_id is not set"),
                                    };
        let instruction = GetPayoutsCpi {
        __program: self.instruction.__program,
                  
          game_registry: self.instruction.game_registry.expect("game_registry is not set"),
                  
          game_settlement: self.instruction.game_settlement,
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct GetPayoutsCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            game_registry: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_settlement: Option<&'b solana_account_info::AccountInfo<'a>>,
                        game_id: Option<u64>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

