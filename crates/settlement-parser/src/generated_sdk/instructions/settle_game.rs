//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const SETTLE_GAME_DISCRIMINATOR: [u8; 8] = [96, 54, 24, 189, 239, 198, 86, 29];

/// Accounts.
#[derive(Debug)]
pub struct SettleGame {
      
              
          pub operator: solana_pubkey::Pubkey,
          
              
          pub game_registry: solana_pubkey::Pubkey,
          
              
          pub escrow_vault: solana_pubkey::Pubkey,
          
              
          pub game_settlement: solana_pubkey::Pubkey,
          
              
          pub bet_tracker: solana_pubkey::Pubkey,
          
              
          pub game_randomness: solana_pubkey::Pubkey,
                /// Game keeper's signing PDA for CPI calls to rando program

    
              
          pub game_keeper_signer: solana_pubkey::Pubkey,
          
              
          pub authorized_programs: solana_pubkey::Pubkey,
          
              
          pub game_program: solana_pubkey::Pubkey,
          
              
          pub game_account: solana_pubkey::Pubkey,
          
              
          pub global_config: solana_pubkey::Pubkey,
          
              
          pub game_keeper_program: solana_pubkey::Pubkey,
          
              
          pub rando_program: solana_pubkey::Pubkey,
          
              
          pub randomness_state: solana_pubkey::Pubkey,
          
              
          pub slot_hashes: solana_pubkey::Pubkey,
          
              
          pub settlement_authority: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
          
              
          pub instruction_sysvar: solana_pubkey::Pubkey,
      }

impl SettleGame {
  pub fn instruction(&self, args: SettleGameInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: SettleGameInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(19+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.operator,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.game_registry,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.escrow_vault,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.game_settlement,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.bet_tracker,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.game_randomness,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.game_keeper_signer,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.authorized_programs,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.game_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.global_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game_keeper_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.rando_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.randomness_state,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.slot_hashes,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.settlement_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.instruction_sysvar,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&SettleGameInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SettleGameInstructionData {
            discriminator: [u8; 8],
                        }

impl SettleGameInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [96, 54, 24, 189, 239, 198, 86, 29],
                                                            }
  }
}

impl Default for SettleGameInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct SettleGameInstructionArgs {
                  pub game_id: u64,
                pub num_payouts: u64,
                pub house_nonce: [u8; 32],
      }


/// Instruction builder for `SettleGame`.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` operator
                ///   1. `[writable]` game_registry
                ///   2. `[writable]` escrow_vault
                ///   3. `[writable]` game_settlement
                ///   4. `[writable]` bet_tracker
                ///   5. `[writable]` game_randomness
                ///   6. `[writable]` game_keeper_signer
          ///   7. `[]` authorized_programs
          ///   8. `[]` game_program
                ///   9. `[writable]` game_account
          ///   10. `[]` global_config
                ///   11. `[optional]` game_keeper_program (default to `GmV2MM9nwV1tPLLGQD53YLSPvt1BtkbVLy3svWU1WUMw`)
          ///   12. `[]` rando_program
                ///   13. `[writable]` randomness_state
          ///   14. `[]` slot_hashes
                ///   15. `[writable]` settlement_authority
                ///   16. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
                ///   17. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   18. `[optional]` instruction_sysvar (default to `Sysvar1nstructions1111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct SettleGameBuilder {
            operator: Option<solana_pubkey::Pubkey>,
                game_registry: Option<solana_pubkey::Pubkey>,
                escrow_vault: Option<solana_pubkey::Pubkey>,
                game_settlement: Option<solana_pubkey::Pubkey>,
                bet_tracker: Option<solana_pubkey::Pubkey>,
                game_randomness: Option<solana_pubkey::Pubkey>,
                game_keeper_signer: Option<solana_pubkey::Pubkey>,
                authorized_programs: Option<solana_pubkey::Pubkey>,
                game_program: Option<solana_pubkey::Pubkey>,
                game_account: Option<solana_pubkey::Pubkey>,
                global_config: Option<solana_pubkey::Pubkey>,
                game_keeper_program: Option<solana_pubkey::Pubkey>,
                rando_program: Option<solana_pubkey::Pubkey>,
                randomness_state: Option<solana_pubkey::Pubkey>,
                slot_hashes: Option<solana_pubkey::Pubkey>,
                settlement_authority: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                instruction_sysvar: Option<solana_pubkey::Pubkey>,
                        game_id: Option<u64>,
                num_payouts: Option<u64>,
                house_nonce: Option<[u8; 32]>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl SettleGameBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn operator(&mut self, operator: solana_pubkey::Pubkey) -> &mut Self {
                        self.operator = Some(operator);
                    self
    }
            #[inline(always)]
    pub fn game_registry(&mut self, game_registry: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_registry = Some(game_registry);
                    self
    }
            #[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: solana_pubkey::Pubkey) -> &mut Self {
                        self.escrow_vault = Some(escrow_vault);
                    self
    }
            #[inline(always)]
    pub fn game_settlement(&mut self, game_settlement: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_settlement = Some(game_settlement);
                    self
    }
            #[inline(always)]
    pub fn bet_tracker(&mut self, bet_tracker: solana_pubkey::Pubkey) -> &mut Self {
                        self.bet_tracker = Some(bet_tracker);
                    self
    }
            #[inline(always)]
    pub fn game_randomness(&mut self, game_randomness: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_randomness = Some(game_randomness);
                    self
    }
            /// Game keeper's signing PDA for CPI calls to rando program
#[inline(always)]
    pub fn game_keeper_signer(&mut self, game_keeper_signer: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_keeper_signer = Some(game_keeper_signer);
                    self
    }
            #[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: solana_pubkey::Pubkey) -> &mut Self {
                        self.authorized_programs = Some(authorized_programs);
                    self
    }
            #[inline(always)]
    pub fn game_program(&mut self, game_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_program = Some(game_program);
                    self
    }
            #[inline(always)]
    pub fn game_account(&mut self, game_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_account = Some(game_account);
                    self
    }
            #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.global_config = Some(global_config);
                    self
    }
            /// `[optional account, default to 'GmV2MM9nwV1tPLLGQD53YLSPvt1BtkbVLy3svWU1WUMw']`
#[inline(always)]
    pub fn game_keeper_program(&mut self, game_keeper_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.game_keeper_program = Some(game_keeper_program);
                    self
    }
            #[inline(always)]
    pub fn rando_program(&mut self, rando_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.rando_program = Some(rando_program);
                    self
    }
            #[inline(always)]
    pub fn randomness_state(&mut self, randomness_state: solana_pubkey::Pubkey) -> &mut Self {
                        self.randomness_state = Some(randomness_state);
                    self
    }
            #[inline(always)]
    pub fn slot_hashes(&mut self, slot_hashes: solana_pubkey::Pubkey) -> &mut Self {
                        self.slot_hashes = Some(slot_hashes);
                    self
    }
            #[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.settlement_authority = Some(settlement_authority);
                    self
    }
            /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
#[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'Sysvar1nstructions1111111111111111111111111']`
#[inline(always)]
    pub fn instruction_sysvar(&mut self, instruction_sysvar: solana_pubkey::Pubkey) -> &mut Self {
                        self.instruction_sysvar = Some(instruction_sysvar);
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.game_id = Some(game_id);
        self
      }
                #[inline(always)]
      pub fn num_payouts(&mut self, num_payouts: u64) -> &mut Self {
        self.num_payouts = Some(num_payouts);
        self
      }
                #[inline(always)]
      pub fn house_nonce(&mut self, house_nonce: [u8; 32]) -> &mut Self {
        self.house_nonce = Some(house_nonce);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = SettleGame {
                              operator: self.operator.expect("operator is not set"),
                                        game_registry: self.game_registry.expect("game_registry is not set"),
                                        escrow_vault: self.escrow_vault.expect("escrow_vault is not set"),
                                        game_settlement: self.game_settlement.expect("game_settlement is not set"),
                                        bet_tracker: self.bet_tracker.expect("bet_tracker is not set"),
                                        game_randomness: self.game_randomness.expect("game_randomness is not set"),
                                        game_keeper_signer: self.game_keeper_signer.expect("game_keeper_signer is not set"),
                                        authorized_programs: self.authorized_programs.expect("authorized_programs is not set"),
                                        game_program: self.game_program.expect("game_program is not set"),
                                        game_account: self.game_account.expect("game_account is not set"),
                                        global_config: self.global_config.expect("global_config is not set"),
                                        game_keeper_program: self.game_keeper_program.unwrap_or(solana_pubkey::pubkey!("GmV2MM9nwV1tPLLGQD53YLSPvt1BtkbVLy3svWU1WUMw")),
                                        rando_program: self.rando_program.expect("rando_program is not set"),
                                        randomness_state: self.randomness_state.expect("randomness_state is not set"),
                                        slot_hashes: self.slot_hashes.expect("slot_hashes is not set"),
                                        settlement_authority: self.settlement_authority.expect("settlement_authority is not set"),
                                        token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!("TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA")),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        instruction_sysvar: self.instruction_sysvar.unwrap_or(solana_pubkey::pubkey!("Sysvar1nstructions1111111111111111111111111")),
                      };
          let args = SettleGameInstructionArgs {
                                                              game_id: self.game_id.clone().expect("game_id is not set"),
                                                                  num_payouts: self.num_payouts.clone().expect("num_payouts is not set"),
                                                                  house_nonce: self.house_nonce.clone().expect("house_nonce is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `settle_game` CPI accounts.
  pub struct SettleGameCpiAccounts<'a, 'b> {
          
                    
              pub operator: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub game_registry: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub escrow_vault: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub game_settlement: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub bet_tracker: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub game_randomness: &'b solana_account_info::AccountInfo<'a>,
                        /// Game keeper's signing PDA for CPI calls to rando program

      
                    
              pub game_keeper_signer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub game_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub game_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub global_config: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub game_keeper_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub rando_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub randomness_state: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub slot_hashes: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub instruction_sysvar: &'b solana_account_info::AccountInfo<'a>,
            }

/// `settle_game` CPI instruction.
pub struct SettleGameCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub operator: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub game_registry: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub escrow_vault: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub game_settlement: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub bet_tracker: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub game_randomness: &'b solana_account_info::AccountInfo<'a>,
                /// Game keeper's signing PDA for CPI calls to rando program

    
              
          pub game_keeper_signer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub authorized_programs: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub game_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub game_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub global_config: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub game_keeper_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub rando_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub randomness_state: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub slot_hashes: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub instruction_sysvar: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: SettleGameInstructionArgs,
  }

impl<'a, 'b> SettleGameCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: SettleGameCpiAccounts<'a, 'b>,
              args: SettleGameInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              operator: accounts.operator,
              game_registry: accounts.game_registry,
              escrow_vault: accounts.escrow_vault,
              game_settlement: accounts.game_settlement,
              bet_tracker: accounts.bet_tracker,
              game_randomness: accounts.game_randomness,
              game_keeper_signer: accounts.game_keeper_signer,
              authorized_programs: accounts.authorized_programs,
              game_program: accounts.game_program,
              game_account: accounts.game_account,
              global_config: accounts.global_config,
              game_keeper_program: accounts.game_keeper_program,
              rando_program: accounts.rando_program,
              randomness_state: accounts.randomness_state,
              slot_hashes: accounts.slot_hashes,
              settlement_authority: accounts.settlement_authority,
              token_program: accounts.token_program,
              system_program: accounts.system_program,
              instruction_sysvar: accounts.instruction_sysvar,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(19+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.operator.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.game_registry.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.escrow_vault.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.game_settlement.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.bet_tracker.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.game_randomness.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.game_keeper_signer.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.authorized_programs.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.game_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game_keeper_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.rando_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.randomness_state.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.slot_hashes.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.settlement_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.instruction_sysvar.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&SettleGameInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::SETTLEMENT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(20 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.operator.clone());
                        account_infos.push(self.game_registry.clone());
                        account_infos.push(self.escrow_vault.clone());
                        account_infos.push(self.game_settlement.clone());
                        account_infos.push(self.bet_tracker.clone());
                        account_infos.push(self.game_randomness.clone());
                        account_infos.push(self.game_keeper_signer.clone());
                        account_infos.push(self.authorized_programs.clone());
                        account_infos.push(self.game_program.clone());
                        account_infos.push(self.game_account.clone());
                        account_infos.push(self.global_config.clone());
                        account_infos.push(self.game_keeper_program.clone());
                        account_infos.push(self.rando_program.clone());
                        account_infos.push(self.randomness_state.clone());
                        account_infos.push(self.slot_hashes.clone());
                        account_infos.push(self.settlement_authority.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.instruction_sysvar.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `SettleGame` via CPI.
///
/// ### Accounts:
///
                      ///   0. `[writable, signer]` operator
                ///   1. `[writable]` game_registry
                ///   2. `[writable]` escrow_vault
                ///   3. `[writable]` game_settlement
                ///   4. `[writable]` bet_tracker
                ///   5. `[writable]` game_randomness
                ///   6. `[writable]` game_keeper_signer
          ///   7. `[]` authorized_programs
          ///   8. `[]` game_program
                ///   9. `[writable]` game_account
          ///   10. `[]` global_config
          ///   11. `[]` game_keeper_program
          ///   12. `[]` rando_program
                ///   13. `[writable]` randomness_state
          ///   14. `[]` slot_hashes
                ///   15. `[writable]` settlement_authority
          ///   16. `[]` token_program
          ///   17. `[]` system_program
          ///   18. `[]` instruction_sysvar
#[derive(Clone, Debug)]
pub struct SettleGameCpiBuilder<'a, 'b> {
  instruction: Box<SettleGameCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SettleGameCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(SettleGameCpiBuilderInstruction {
      __program: program,
              operator: None,
              game_registry: None,
              escrow_vault: None,
              game_settlement: None,
              bet_tracker: None,
              game_randomness: None,
              game_keeper_signer: None,
              authorized_programs: None,
              game_program: None,
              game_account: None,
              global_config: None,
              game_keeper_program: None,
              rando_program: None,
              randomness_state: None,
              slot_hashes: None,
              settlement_authority: None,
              token_program: None,
              system_program: None,
              instruction_sysvar: None,
                                            game_id: None,
                                num_payouts: None,
                                house_nonce: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn operator(&mut self, operator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.operator = Some(operator);
                    self
    }
      #[inline(always)]
    pub fn game_registry(&mut self, game_registry: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_registry = Some(game_registry);
                    self
    }
      #[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.escrow_vault = Some(escrow_vault);
                    self
    }
      #[inline(always)]
    pub fn game_settlement(&mut self, game_settlement: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_settlement = Some(game_settlement);
                    self
    }
      #[inline(always)]
    pub fn bet_tracker(&mut self, bet_tracker: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.bet_tracker = Some(bet_tracker);
                    self
    }
      #[inline(always)]
    pub fn game_randomness(&mut self, game_randomness: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_randomness = Some(game_randomness);
                    self
    }
      /// Game keeper's signing PDA for CPI calls to rando program
#[inline(always)]
    pub fn game_keeper_signer(&mut self, game_keeper_signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_keeper_signer = Some(game_keeper_signer);
                    self
    }
      #[inline(always)]
    pub fn authorized_programs(&mut self, authorized_programs: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.authorized_programs = Some(authorized_programs);
                    self
    }
      #[inline(always)]
    pub fn game_program(&mut self, game_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_program = Some(game_program);
                    self
    }
      #[inline(always)]
    pub fn game_account(&mut self, game_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_account = Some(game_account);
                    self
    }
      #[inline(always)]
    pub fn global_config(&mut self, global_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_config = Some(global_config);
                    self
    }
      #[inline(always)]
    pub fn game_keeper_program(&mut self, game_keeper_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game_keeper_program = Some(game_keeper_program);
                    self
    }
      #[inline(always)]
    pub fn rando_program(&mut self, rando_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rando_program = Some(rando_program);
                    self
    }
      #[inline(always)]
    pub fn randomness_state(&mut self, randomness_state: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.randomness_state = Some(randomness_state);
                    self
    }
      #[inline(always)]
    pub fn slot_hashes(&mut self, slot_hashes: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.slot_hashes = Some(slot_hashes);
                    self
    }
      #[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settlement_authority = Some(settlement_authority);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn instruction_sysvar(&mut self, instruction_sysvar: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.instruction_sysvar = Some(instruction_sysvar);
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
      }
                #[inline(always)]
      pub fn num_payouts(&mut self, num_payouts: u64) -> &mut Self {
        self.instruction.num_payouts = Some(num_payouts);
        self
      }
                #[inline(always)]
      pub fn house_nonce(&mut self, house_nonce: [u8; 32]) -> &mut Self {
        self.instruction.house_nonce = Some(house_nonce);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = SettleGameInstructionArgs {
                                                              game_id: self.instruction.game_id.clone().expect("game_id is not set"),
                                                                  num_payouts: self.instruction.num_payouts.clone().expect("num_payouts is not set"),
                                                                  house_nonce: self.instruction.house_nonce.clone().expect("house_nonce is not set"),
                                    };
        let instruction = SettleGameCpi {
        __program: self.instruction.__program,
                  
          operator: self.instruction.operator.expect("operator is not set"),
                  
          game_registry: self.instruction.game_registry.expect("game_registry is not set"),
                  
          escrow_vault: self.instruction.escrow_vault.expect("escrow_vault is not set"),
                  
          game_settlement: self.instruction.game_settlement.expect("game_settlement is not set"),
                  
          bet_tracker: self.instruction.bet_tracker.expect("bet_tracker is not set"),
                  
          game_randomness: self.instruction.game_randomness.expect("game_randomness is not set"),
                  
          game_keeper_signer: self.instruction.game_keeper_signer.expect("game_keeper_signer is not set"),
                  
          authorized_programs: self.instruction.authorized_programs.expect("authorized_programs is not set"),
                  
          game_program: self.instruction.game_program.expect("game_program is not set"),
                  
          game_account: self.instruction.game_account.expect("game_account is not set"),
                  
          global_config: self.instruction.global_config.expect("global_config is not set"),
                  
          game_keeper_program: self.instruction.game_keeper_program.expect("game_keeper_program is not set"),
                  
          rando_program: self.instruction.rando_program.expect("rando_program is not set"),
                  
          randomness_state: self.instruction.randomness_state.expect("randomness_state is not set"),
                  
          slot_hashes: self.instruction.slot_hashes.expect("slot_hashes is not set"),
                  
          settlement_authority: self.instruction.settlement_authority.expect("settlement_authority is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          instruction_sysvar: self.instruction.instruction_sysvar.expect("instruction_sysvar is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct SettleGameCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            operator: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_registry: Option<&'b solana_account_info::AccountInfo<'a>>,
                escrow_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_settlement: Option<&'b solana_account_info::AccountInfo<'a>>,
                bet_tracker: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_randomness: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_keeper_signer: Option<&'b solana_account_info::AccountInfo<'a>>,
                authorized_programs: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                global_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                game_keeper_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                rando_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                randomness_state: Option<&'b solana_account_info::AccountInfo<'a>>,
                slot_hashes: Option<&'b solana_account_info::AccountInfo<'a>>,
                settlement_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                instruction_sysvar: Option<&'b solana_account_info::AccountInfo<'a>>,
                        game_id: Option<u64>,
                num_payouts: Option<u64>,
                house_nonce: Option<[u8; 32]>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

