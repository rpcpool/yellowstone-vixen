//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!
syntax = "proto3";

package vixen.parser.flip;

message ActivateGameInternalIx {
	ActivateGameInternalIxAccounts accounts = 1;
}

message CancelBetInternalIx {
	CancelBetInternalIxAccounts accounts = 1;
	CancelBetInternalIxData data = 2;
}

message CancelGameInternalIx {
	CancelGameInternalIxAccounts accounts = 1;
}

message CloseBettingInternalIx {
	CloseBettingInternalIxAccounts accounts = 1;
}

message CreateGameInternalIx {
	CreateGameInternalIxAccounts accounts = 1;
	CreateGameInternalIxData data = 2;
}

message GetBetInfoIx {
	GetBetInfoIxAccounts accounts = 1;
	GetBetInfoIxData data = 2;
}

message GetBetOddsIx {
	GetBetOddsIxAccounts accounts = 1;
	GetBetOddsIxData data = 2;
}

message GetPayoutDistributionIx {
	GetPayoutDistributionIxAccounts accounts = 1;
	GetPayoutDistributionIxData data = 2;
}

message InitializeIx {
	InitializeIxAccounts accounts = 1;
	InitializeIxData data = 2;
}

message PlaceBetInternalIx {
	PlaceBetInternalIxAccounts accounts = 1;
	PlaceBetInternalIxData data = 2;
}

message SettleGameInternalIx {
	SettleGameInternalIxAccounts accounts = 1;
	SettleGameInternalIxData data = 2;
}

message ValidateBetIx {
	ValidateBetIxAccounts accounts = 1;
	ValidateBetIxData data = 2;
}

message ValidateCancellationIx {
	ValidateCancellationIxAccounts accounts = 1;
	ValidateCancellationIxData data = 2;
}


enum AuthorizationType {
	AuthorizationTypeOpen = 0;
	AuthorizationTypeCapped = 1;
	AuthorizationTypeInviteOnly = 2;
}

message BetCancelled {
	uint64 game_id = 1;
	uint64 bet_id = 2;
	string player = 3;
	uint64 refund_amount = 4;
	uint32 remaining_players = 5;
}

message BetPlaced {
	uint64 game_id = 1;
	uint64 bet_id = 2;
	string player = 3;
	optional GameChoice choice = 4;
	uint64 bet_amount = 5;
	uint32 total_players = 6;
}

enum BetStatus {
	BetStatusActive = 0;
	BetStatusCancelled = 1;
	BetStatusSettled = 2;
}

message FlipBetInfo {
	uint64 bet_id = 1;
	string player = 2;
	uint64 amount = 3;
	optional GameChoice choice = 4;
	int64 placed_at = 5;
	BetStatus status = 6;
	FlipBetOdds odds = 7;
	optional bool is_winner = 8;
}

message FlipBetOdds {
	double odds_factor = 1;
	string bet_type = 2;
}

message FlipBetPlacementResult {
	bool success = 1;
	uint64 bet_id = 2;
	FlipBetOdds odds = 3;
}

message FlipBetValidation {
	bool allowed = 1;
	optional string rejection_reason = 2;
	FlipBetOdds odds = 3;
}

message FlipCancellationResult {
	int64 cancelled_at = 1;
}

message FlipCancellationValidation {
	bool allowed = 1;
	optional string reason = 2;
	uint64 refund_amount = 3;
}

message FlipPayoutDistribution {
	repeated FlipPayoutEntry payouts = 1;
	uint64 house_amount = 2;
}

message FlipPayoutEntry {
	string recipient = 1;
	uint64 amount = 2;
}

message GameActivated {
	uint64 game_id = 1;
	int64 activated_at = 2;
	string settlement_program = 3;
}

message GameBettingClosed {
	uint64 game_id = 1;
	int64 settling_started_at = 2;
	uint64 settling_started_slot = 3;
	string settlement_program = 4;
}

message GameCancelled {
	uint64 game_id = 1;
	int64 cancelled_at = 2;
}

enum GameChoice {
	GameChoiceHeads = 0;
	GameChoiceTails = 1;
}

message GameConfig {
	GameType game_type = 1;
	AuthorizationType authorization = 2;
	uint32 min_players = 3;
	uint32 max_players = 4;
	uint64 bet_amount = 5;
	TriggerType trigger_type = 6;
	optional uint64 join_window_seconds = 7;
	repeated string authorized_players = 8;
}

message GameSettled {
	uint64 game_id = 1;
	repeated uint32 final_randomness = 2;
	FlipPayoutDistribution payout_distribution = 3;
	int64 settled_at = 4;
}

enum GameState {
	GameStateCreated = 0;
	GameStateActive = 1;
	GameStateSettling = 2;
	GameStateSettled = 3;
	GameStateCancelled = 4;
}

enum GameType {
	GameTypePvP = 0;
	GameTypePvH = 1;
}

enum TriggerType {
	TriggerTypeManual = 0;
	TriggerTypePlayerCount = 1;
	TriggerTypeTimeWindow = 2;
}

message FlipStateGameBetData {
	uint64 bet_id = 1;
	string player = 2;
	uint64 amount = 3;
	optional GameChoice choice = 4;
	int64 placed_at = 5;
	BetStatus status = 6;
}

message GameInterfaceBetData {
	string player = 1;
	uint64 bet_amount = 2;
	repeated uint32 bet_data = 3;
	uint64 bet_id = 4;
}


message Game {
	uint64 game_id = 1;
	GameState state = 2;
	GameConfig config = 3;
	repeated string players = 4;
	repeated FlipStateGameBetData bets = 5;
	optional GameChoice player_choice = 6;
	uint64 total_bets_placed = 7;
	int64 created_at = 8;
	optional int64 activated_at = 9;
	optional int64 settled_at = 10;
	optional int64 settling_started_at = 11;
	optional uint64 settling_started_slot = 12;
	repeated uint32 final_randomness = 13;
	string creator = 14;
	uint32 bump = 15;
}

message GlobalConfig {
	string settlement_authority = 1;
	string admin = 2;
	uint32 bump = 3;
}


message ActivateGameInternalIxAccounts {
	string game = 1;
	string global_config = 2;
	string settlement_authority = 3;
	string payer = 4;
	string system_program = 5;
}


message CancelBetInternalIxAccounts {
	string game = 1;
	string global_config = 2;
	string settlement_authority = 3;
	string payer = 4;
	string system_program = 5;
}

message CancelBetInternalIxData {
	uint64 bet_id = 1;
	string player = 2;
}

message CancelGameInternalIxAccounts {
	string game = 1;
	string global_config = 2;
	string settlement_authority = 3;
	string payer = 4;
	string system_program = 5;
}


message CloseBettingInternalIxAccounts {
	string game = 1;
	string global_config = 2;
	string settlement_authority = 3;
	string payer = 4;
	string system_program = 5;
}


message CreateGameInternalIxAccounts {
	string game = 1;
	string global_config = 2;
	string settlement_authority = 3;
	string payer = 4;
	string system_program = 5;
}

message CreateGameInternalIxData {
	uint64 game_id = 1;
	string creator = 2;
	repeated uint32 game_config_data = 3;
}

message GetBetInfoIxAccounts {
	string game = 1;
}

message GetBetInfoIxData {
	uint64 bet_id = 1;
}

message GetBetOddsIxAccounts {
	string game = 1;
}

message GetBetOddsIxData {
	string player = 1;
	repeated uint32 bet_data = 2;
	uint64 bet_amount = 3;
}

message GetPayoutDistributionIxAccounts {
	string game = 1;
}

message GetPayoutDistributionIxData {
	repeated uint32 final_randomness = 1;
}

message InitializeIxAccounts {
	string global_config = 1;
	string admin = 2;
	string system_program = 3;
}

message InitializeIxData {
	string settlement_program = 1;
}

message PlaceBetInternalIxAccounts {
	string game = 1;
	string global_config = 2;
	string settlement_authority = 3;
	string payer = 4;
	string system_program = 5;
}

message PlaceBetInternalIxData {
	GameInterfaceBetData data = 1;
}

message SettleGameInternalIxAccounts {
	string game = 1;
	string global_config = 2;
	string settlement_authority = 3;
	string payer = 4;
	string system_program = 5;
}

message SettleGameInternalIxData {
	repeated uint32 final_randomness = 1;
}

message ValidateBetIxAccounts {
	string game = 1;
}

message ValidateBetIxData {
	GameInterfaceBetData data = 1;
}

message ValidateCancellationIxAccounts {
	string game = 1;
}

message ValidateCancellationIxData {
	uint64 bet_id = 1;
	string player = 2;
}


message ProgramState {
    oneof state_oneof {
        	Game game = 1;
        	GlobalConfig global_config = 2;
        }
}

message ProgramIxs {
    oneof ix_oneof {
        	ActivateGameInternalIx activate_game_internal = 1;
        	CancelBetInternalIx cancel_bet_internal = 2;
        	CancelGameInternalIx cancel_game_internal = 3;
        	CloseBettingInternalIx close_betting_internal = 4;
        	CreateGameInternalIx create_game_internal = 5;
        	GetBetInfoIx get_bet_info = 6;
        	GetBetOddsIx get_bet_odds = 7;
        	GetPayoutDistributionIx get_payout_distribution = 8;
        	InitializeIx initialize = 9;
        	PlaceBetInternalIx place_bet_internal = 10;
        	SettleGameInternalIx settle_game_internal = 11;
        	ValidateBetIx validate_bet = 12;
        	ValidateCancellationIx validate_cancellation = 13;
        }
}

