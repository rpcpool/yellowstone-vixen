//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum FlipError {
    /// 6000 - Invalid player count configuration
    #[error("Invalid player count configuration")]
    InvalidPlayerCount = 0x1770,
    /// 6001 - Invalid game configuration
    #[error("Invalid game configuration")]
    InvalidGameConfig = 0x1771,
    /// 6002 - Invalid bet amount
    #[error("Invalid bet amount")]
    InvalidBetAmount = 0x1772,
    /// 6003 - Authorized players list cannot be empty for invite-only games
    #[error("Authorized players list cannot be empty for invite-only games")]
    EmptyAuthorizedList = 0x1773,
    /// 6004 - Too many authorized players for max player limit
    #[error("Too many authorized players for max player limit")]
    TooManyAuthorizedPlayers = 0x1774,
    /// 6005 - Game is not in the correct state for this operation
    #[error("Game is not in the correct state for this operation")]
    InvalidGameState = 0x1775,
    /// 6006 - Player is not authorized to join this game
    #[error("Player is not authorized to join this game")]
    PlayerNotAuthorized = 0x1776,
    /// 6007 - Game is full
    #[error("Game is full")]
    GameFull = 0x1777,
    /// 6008 - Invalid bet data
    #[error("Invalid bet data")]
    InvalidBetData = 0x1778,
    /// 6009 - Game state transition not allowed
    #[error("Game state transition not allowed")]
    InvalidStateTransition = 0x1779,
    /// 6010 - Invalid join window configuration
    #[error("Invalid join window configuration")]
    InvalidJoinWindow = 0x177A,
    /// 6011 - CPI-only instruction cannot be called directly
    #[error("CPI-only instruction cannot be called directly")]
    CpiOnlyInstruction = 0x177B,
    /// 6012 - Invalid settlement authority
    #[error("Invalid settlement authority")]
    InvalidSettlementAuthority = 0x177C,
    /// 6013 - Game cannot be settled
    #[error("Game cannot be settled")]
    CannotSettle = 0x177D,
    /// 6014 - Game cannot be cancelled
    #[error("Game cannot be cancelled")]
    CannotCancel = 0x177E,
    /// 6015 - Player not found in game
    #[error("Player not found in game")]
    PlayerNotFound = 0x177F,
    /// 6016 - Bet index mismatch
    #[error("Bet index mismatch")]
    BetIndexMismatch = 0x1780,
    /// 6017 - Settlement authority must be a signer
    #[error("Settlement authority must be a signer")]
    InvalidSettlementSigner = 0x1781,
    /// 6018 - Must wait at least 1 slot after closing betting before settling
    #[error("Must wait at least 1 slot after closing betting before settling")]
    SettleTooEarly = 0x1782,
    /// 6019 - Bet not found
    #[error("Bet not found")]
    BetNotFound = 0x1783,
    /// 6020 - Invalid bet status
    #[error("Invalid bet status")]
    InvalidBetStatus = 0x1784,
    /// 6021 - Bet ID already exists
    #[error("Bet ID already exists")]
    BetIdAlreadyExists = 0x1785,
    /// 6022 - Game cannot be reset - must be in Settled or Cancelled state
    #[error("Game cannot be reset - must be in Settled or Cancelled state")]
    GameCannotBeReset = 0x1786,
}

#[allow(deprecated)]
impl solana_program_error::PrintProgramError for FlipError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

#[allow(deprecated)]
impl<T> solana_decode_error::DecodeError<T> for FlipError {
    fn type_of() -> &'static str {
        "FlipError"
    }
}
