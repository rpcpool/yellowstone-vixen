//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::GameState;
use crate::generated::types::GameConfig;
use solana_pubkey::Pubkey;
use crate::generated::types::FlipStateGameBetData;
use crate::generated::types::GameChoice;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Game {
pub discriminator: [u8; 8],
/// Unique game identifier
pub game_id: u64,
/// Current game state
pub state: GameState,
/// Game configuration
pub config: GameConfig,
/// List of players who joined (keep for compatibility)
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<Vec<serde_with::DisplayFromStr>>"))]
pub players: Vec<Pubkey>,
/// Map of bet ID to bet data
pub bets: Vec<FlipStateGameBetData>,
/// For PvH games only: the single player's choice
pub player_choice: Option<GameChoice>,
/// Total number of bets placed
pub total_bets_placed: u64,
/// Game creation timestamp
pub created_at: i64,
/// Game activation timestamp (when it becomes active)
pub activated_at: Option<i64>,
/// Settlement timestamp
pub settled_at: Option<i64>,
/// Settling start timestamp (when game moved to Settling state)
pub settling_started_at: Option<i64>,
/// Settling start slot (when game moved to Settling state)
pub settling_started_slot: Option<u64>,
/// Final randomness used for settlement (only available after settlement)
pub final_randomness: Option<[u8; 32]>,
/// The creator of this game (address that called settlement layer)
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub creator: Pubkey,
/// Bump seed for PDA
pub bump: u8,
}


pub const GAME_DISCRIMINATOR: [u8; 8] = [27, 90, 166, 125, 74, 100, 121, 18];

impl Game {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_account_info::AccountInfo<'a>> for Game {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "fetch")]
pub fn fetch_game(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<Game>, std::io::Error> {
  let accounts = fetch_all_game(rpc, &[*address])?;
  Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_game(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<Game>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<Game>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      let account = accounts[i].as_ref()
        .ok_or(std::io::Error::new(std::io::ErrorKind::Other, format!("Account not found: {}", address)))?;
      let data = Game::from_bytes(&account.data)?;
      decoded_accounts.push(crate::shared::DecodedAccount { address, account: account.clone(), data });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_game(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<Game>, std::io::Error> {
    let accounts = fetch_all_maybe_game(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_game(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<Game>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<Game>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      if let Some(account) = accounts[i].as_ref() {
        let data = Game::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::MaybeAccount::Exists(crate::shared::DecodedAccount { address, account: account.clone(), data }));
      } else {
        decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
      }
    }
  Ok(decoded_accounts)
}

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountDeserialize for Game {
      fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
      }
  }

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountSerialize for Game {}

  #[cfg(feature = "anchor")]
  impl anchor_lang::Owner for Game {
      fn owner() -> Pubkey {
        crate::FLIP_ID
      }
  }

  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::IdlBuild for Game {}

  
  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::Discriminator for Game {
    const DISCRIMINATOR: [u8; 8] = [0; 8];
  }

