//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const CREATE_GAME_INTERNAL_DISCRIMINATOR: [u8; 8] = [18, 52, 86, 120, 154, 188, 222, 240];

/// Accounts.
#[derive(Debug)]
pub struct CreateGameInternal {
      
              
          pub game: solana_pubkey::Pubkey,
          
              
          pub global_config: solana_pubkey::Pubkey,
                /// Settlement authority (must be the authorized settlement program)

    
              
          pub settlement_authority: solana_pubkey::Pubkey,
                /// The original transaction signer who will pay for account creation

    
              
          pub payer: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl CreateGameInternal {
  pub fn instruction(&self, args: CreateGameInternalInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: CreateGameInternalInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.game,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.global_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.settlement_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.payer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&CreateGameInternalInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::FLIP_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateGameInternalInstructionData {
            discriminator: [u8; 8],
                        }

impl CreateGameInternalInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [18, 52, 86, 120, 154, 188, 222, 240],
                                                            }
  }
}

impl Default for CreateGameInternalInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateGameInternalInstructionArgs {
                  pub game_id: u64,
                pub creator: Pubkey,
                pub game_config_data: Vec<u8>,
      }


/// Instruction builder for `CreateGameInternal`.
///
/// ### Accounts:
///
                ///   0. `[writable]` game
          ///   1. `[]` global_config
                ///   2. `[writable]` settlement_authority
                      ///   3. `[writable, signer]` payer
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateGameInternalBuilder {
            game: Option<solana_pubkey::Pubkey>,
                global_config: Option<solana_pubkey::Pubkey>,
                settlement_authority: Option<solana_pubkey::Pubkey>,
                payer: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        game_id: Option<u64>,
                creator: Option<Pubkey>,
                game_config_data: Option<Vec<u8>>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateGameInternalBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn game(&mut self, game: solana_pubkey::Pubkey) -> &mut Self {
                        self.game = Some(game);
                    self
    }
            #[inline(always)]
    pub fn global_config(&mut self, global_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.global_config = Some(global_config);
                    self
    }
            /// Settlement authority (must be the authorized settlement program)
#[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.settlement_authority = Some(settlement_authority);
                    self
    }
            /// The original transaction signer who will pay for account creation
#[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
                        self.payer = Some(payer);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.game_id = Some(game_id);
        self
      }
                #[inline(always)]
      pub fn creator(&mut self, creator: Pubkey) -> &mut Self {
        self.creator = Some(creator);
        self
      }
                #[inline(always)]
      pub fn game_config_data(&mut self, game_config_data: Vec<u8>) -> &mut Self {
        self.game_config_data = Some(game_config_data);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = CreateGameInternal {
                              game: self.game.expect("game is not set"),
                                        global_config: self.global_config.expect("global_config is not set"),
                                        settlement_authority: self.settlement_authority.expect("settlement_authority is not set"),
                                        payer: self.payer.expect("payer is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
          let args = CreateGameInternalInstructionArgs {
                                                              game_id: self.game_id.clone().expect("game_id is not set"),
                                                                  creator: self.creator.clone().expect("creator is not set"),
                                                                  game_config_data: self.game_config_data.clone().expect("game_config_data is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `create_game_internal` CPI accounts.
  pub struct CreateGameInternalCpiAccounts<'a, 'b> {
          
                    
              pub game: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub global_config: &'b solana_account_info::AccountInfo<'a>,
                        /// Settlement authority (must be the authorized settlement program)

      
                    
              pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
                        /// The original transaction signer who will pay for account creation

      
                    
              pub payer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `create_game_internal` CPI instruction.
pub struct CreateGameInternalCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub game: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub global_config: &'b solana_account_info::AccountInfo<'a>,
                /// Settlement authority (must be the authorized settlement program)

    
              
          pub settlement_authority: &'b solana_account_info::AccountInfo<'a>,
                /// The original transaction signer who will pay for account creation

    
              
          pub payer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: CreateGameInternalInstructionArgs,
  }

impl<'a, 'b> CreateGameInternalCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: CreateGameInternalCpiAccounts<'a, 'b>,
              args: CreateGameInternalInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              game: accounts.game,
              global_config: accounts.global_config,
              settlement_authority: accounts.settlement_authority,
              payer: accounts.payer,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.game.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.global_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.settlement_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.payer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&CreateGameInternalInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::FLIP_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.game.clone());
                        account_infos.push(self.global_config.clone());
                        account_infos.push(self.settlement_authority.clone());
                        account_infos.push(self.payer.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CreateGameInternal` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` game
          ///   1. `[]` global_config
                ///   2. `[writable]` settlement_authority
                      ///   3. `[writable, signer]` payer
          ///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateGameInternalCpiBuilder<'a, 'b> {
  instruction: Box<CreateGameInternalCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateGameInternalCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CreateGameInternalCpiBuilderInstruction {
      __program: program,
              game: None,
              global_config: None,
              settlement_authority: None,
              payer: None,
              system_program: None,
                                            game_id: None,
                                creator: None,
                                game_config_data: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn game(&mut self, game: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game = Some(game);
                    self
    }
      #[inline(always)]
    pub fn global_config(&mut self, global_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.global_config = Some(global_config);
                    self
    }
      /// Settlement authority (must be the authorized settlement program)
#[inline(always)]
    pub fn settlement_authority(&mut self, settlement_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settlement_authority = Some(settlement_authority);
                    self
    }
      /// The original transaction signer who will pay for account creation
#[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.payer = Some(payer);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn game_id(&mut self, game_id: u64) -> &mut Self {
        self.instruction.game_id = Some(game_id);
        self
      }
                #[inline(always)]
      pub fn creator(&mut self, creator: Pubkey) -> &mut Self {
        self.instruction.creator = Some(creator);
        self
      }
                #[inline(always)]
      pub fn game_config_data(&mut self, game_config_data: Vec<u8>) -> &mut Self {
        self.instruction.game_config_data = Some(game_config_data);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = CreateGameInternalInstructionArgs {
                                                              game_id: self.instruction.game_id.clone().expect("game_id is not set"),
                                                                  creator: self.instruction.creator.clone().expect("creator is not set"),
                                                                  game_config_data: self.instruction.game_config_data.clone().expect("game_config_data is not set"),
                                    };
        let instruction = CreateGameInternalCpi {
        __program: self.instruction.__program,
                  
          game: self.instruction.game.expect("game is not set"),
                  
          global_config: self.instruction.global_config.expect("global_config is not set"),
                  
          settlement_authority: self.instruction.settlement_authority.expect("settlement_authority is not set"),
                  
          payer: self.instruction.payer.expect("payer is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CreateGameInternalCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            game: Option<&'b solana_account_info::AccountInfo<'a>>,
                global_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                settlement_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                payer: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        game_id: Option<u64>,
                creator: Option<Pubkey>,
                game_config_data: Option<Vec<u8>>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

