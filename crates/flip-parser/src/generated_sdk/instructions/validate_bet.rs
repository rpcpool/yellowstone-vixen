//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::GameInterfaceBetData;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const VALIDATE_BET_DISCRIMINATOR: [u8; 8] = [18, 52, 86, 120, 154, 188, 222, 247];

/// Accounts.
#[derive(Debug)]
pub struct ValidateBet {
      
              
          pub game: solana_pubkey::Pubkey,
      }

impl ValidateBet {
  pub fn instruction(&self, args: ValidateBetInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: ValidateBetInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(1+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.game,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&ValidateBetInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::FLIP_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ValidateBetInstructionData {
            discriminator: [u8; 8],
            }

impl ValidateBetInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [18, 52, 86, 120, 154, 188, 222, 247],
                                }
  }
}

impl Default for ValidateBetInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ValidateBetInstructionArgs {
                  pub data: GameInterfaceBetData,
      }


/// Instruction builder for `ValidateBet`.
///
/// ### Accounts:
///
          ///   0. `[]` game
#[derive(Clone, Debug, Default)]
pub struct ValidateBetBuilder {
            game: Option<solana_pubkey::Pubkey>,
                        data: Option<GameInterfaceBetData>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ValidateBetBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn game(&mut self, game: solana_pubkey::Pubkey) -> &mut Self {
                        self.game = Some(game);
                    self
    }
                    #[inline(always)]
      pub fn data(&mut self, data: GameInterfaceBetData) -> &mut Self {
        self.data = Some(data);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = ValidateBet {
                              game: self.game.expect("game is not set"),
                      };
          let args = ValidateBetInstructionArgs {
                                                              data: self.data.clone().expect("data is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `validate_bet` CPI accounts.
  pub struct ValidateBetCpiAccounts<'a, 'b> {
          
                    
              pub game: &'b solana_account_info::AccountInfo<'a>,
            }

/// `validate_bet` CPI instruction.
pub struct ValidateBetCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub game: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: ValidateBetInstructionArgs,
  }

impl<'a, 'b> ValidateBetCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: ValidateBetCpiAccounts<'a, 'b>,
              args: ValidateBetInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              game: accounts.game,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(1+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.game.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&ValidateBetInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::FLIP_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(2 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.game.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ValidateBet` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` game
#[derive(Clone, Debug)]
pub struct ValidateBetCpiBuilder<'a, 'b> {
  instruction: Box<ValidateBetCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ValidateBetCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ValidateBetCpiBuilderInstruction {
      __program: program,
              game: None,
                                            data: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn game(&mut self, game: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.game = Some(game);
                    self
    }
                    #[inline(always)]
      pub fn data(&mut self, data: GameInterfaceBetData) -> &mut Self {
        self.instruction.data = Some(data);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = ValidateBetInstructionArgs {
                                                              data: self.instruction.data.clone().expect("data is not set"),
                                    };
        let instruction = ValidateBetCpi {
        __program: self.instruction.__program,
                  
          game: self.instruction.game.expect("game is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ValidateBetCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            game: Option<&'b solana_account_info::AccountInfo<'a>>,
                        data: Option<GameInterfaceBetData>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

