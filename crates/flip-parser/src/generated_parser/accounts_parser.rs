//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::accounts::Game;
use crate::accounts::GlobalConfig;
use crate::ID;

use crate::deserialize_checked;

/// Flip Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum FlipProgramState {
    Game(Game),
    GlobalConfig(GlobalConfig),
}

impl FlipProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [27, 90, 166, 125, 74, 100, 121, 18] => Ok(FlipProgramState::Game(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [149, 8, 156, 202, 160, 252, 176, 217] => Ok(FlipProgramState::GlobalConfig(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            }
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            }
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = FlipProgramState;

    fn id(&self) -> std::borrow::Cow<'static, str> {
        "flip::AccountParser".into()
    }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program_error::ProgramError::InvalidArgument)?;
        let res = FlipProgramState::try_unpack(&inner.data);

        #[cfg(feature = "tracing")]
        if let Err(e) = &res {
            let acc_discriminator: [u8; 8] = inner.data[0..8].try_into()?;
            tracing::info!(
                name: "incorrectly_parsed_account",
                name = "account_update",
                program = ID.to_string(),
                account = "deserialization_error",
                discriminator = ?acc_discriminator,
                error = ?e
            );
        }

        res
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey {
        ID.to_bytes().into()
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use super::{AccountParser, FlipProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    use yellowstone_vixen_core::proto::ParseProto;

    use super::Game;
    impl IntoProto<proto_def::Game> for Game {
        fn into_proto(self) -> proto_def::Game {
            proto_def::Game {
                game_id: self.game_id,
                state: self.state as i32,
                config: Some(self.config.into_proto()),
                players: self.players.into_iter().map(|x| x.to_string()).collect(),
                bets: self.bets.into_iter().map(|x| x.into_proto()).collect(),
                player_choice: self.player_choice.map(|x| x as i32),
                total_bets_placed: self.total_bets_placed,
                created_at: self.created_at,
                activated_at: self.activated_at,
                settled_at: self.settled_at,
                settling_started_at: self.settling_started_at,
                settling_started_slot: self.settling_started_slot,
                final_randomness: self
                    .final_randomness
                    .unwrap_or_default()
                    .into_iter()
                    .map(|x| x.into())
                    .collect(),
                creator: self.creator.to_string(),
                bump: self.bump.into(),
            }
        }
    }
    use super::GlobalConfig;
    impl IntoProto<proto_def::GlobalConfig> for GlobalConfig {
        fn into_proto(self) -> proto_def::GlobalConfig {
            proto_def::GlobalConfig {
                settlement_authority: self.settlement_authority.to_string(),
                admin: self.admin.to_string(),
                bump: self.bump.into(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for FlipProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                FlipProgramState::Game(data) => {
                    proto_def::program_state::StateOneof::Game(data.into_proto())
                }
                FlipProgramState::GlobalConfig(data) => {
                    proto_def::program_state::StateOneof::GlobalConfig(data.into_proto())
                }
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message {
            value.into_proto()
        }
    }
}
