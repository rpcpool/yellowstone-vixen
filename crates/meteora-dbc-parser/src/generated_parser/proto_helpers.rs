//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::BaseFeeConfig};
    impl IntoProto<proto_def::BaseFeeConfig> for BaseFeeConfig {
        fn into_proto(self) -> proto_def::BaseFeeConfig {
            proto_def::BaseFeeConfig {
                cliff_fee_numerator: self.cliff_fee_numerator,
                period_frequency: self.period_frequency,
                reduction_factor: self.reduction_factor,
                number_of_period: self.number_of_period.into(),
                fee_scheduler_mode: self.fee_scheduler_mode.into(),
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use crate::types::BaseFeeParameters;
    impl IntoProto<proto_def::BaseFeeParameters> for BaseFeeParameters {
        fn into_proto(self) -> proto_def::BaseFeeParameters {
            proto_def::BaseFeeParameters {
                cliff_fee_numerator: self.cliff_fee_numerator,
                number_of_period: self.number_of_period.into(),
                period_frequency: self.period_frequency,
                reduction_factor: self.reduction_factor,
                fee_scheduler_mode: self.fee_scheduler_mode.into(),
            }
        }
    }
    use crate::types::DynamicFeeConfig;
    impl IntoProto<proto_def::DynamicFeeConfig> for DynamicFeeConfig {
        fn into_proto(self) -> proto_def::DynamicFeeConfig {
            proto_def::DynamicFeeConfig {
                initialized: self.initialized.into(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
                max_volatility_accumulator: self.max_volatility_accumulator,
                variable_fee_control: self.variable_fee_control,
                bin_step: self.bin_step.into(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                padding2: self.padding2.into_iter().map(|x| x.into()).collect(),
                bin_step_u128: self.bin_step_u128.to_string(),
            }
        }
    }
    use crate::types::DynamicFeeParameters;
    impl IntoProto<proto_def::DynamicFeeParameters> for DynamicFeeParameters {
        fn into_proto(self) -> proto_def::DynamicFeeParameters {
            proto_def::DynamicFeeParameters {
                bin_step: self.bin_step.into(),
                bin_step_u128: self.bin_step_u128.to_string(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                max_volatility_accumulator: self.max_volatility_accumulator,
                variable_fee_control: self.variable_fee_control,
            }
        }
    }
    use crate::types::EvtClaimCreatorTradingFee;
    impl IntoProto<proto_def::EvtClaimCreatorTradingFee> for EvtClaimCreatorTradingFee {
        fn into_proto(self) -> proto_def::EvtClaimCreatorTradingFee {
            proto_def::EvtClaimCreatorTradingFee {
                pool: self.pool.to_string(),
                token_base_amount: self.token_base_amount,
                token_quote_amount: self.token_quote_amount,
            }
        }
    }
    use crate::types::EvtClaimProtocolFee;
    impl IntoProto<proto_def::EvtClaimProtocolFee> for EvtClaimProtocolFee {
        fn into_proto(self) -> proto_def::EvtClaimProtocolFee {
            proto_def::EvtClaimProtocolFee {
                pool: self.pool.to_string(),
                token_base_amount: self.token_base_amount,
                token_quote_amount: self.token_quote_amount,
            }
        }
    }
    use crate::types::EvtClaimTradingFee;
    impl IntoProto<proto_def::EvtClaimTradingFee> for EvtClaimTradingFee {
        fn into_proto(self) -> proto_def::EvtClaimTradingFee {
            proto_def::EvtClaimTradingFee {
                pool: self.pool.to_string(),
                token_base_amount: self.token_base_amount,
                token_quote_amount: self.token_quote_amount,
            }
        }
    }
    use crate::types::EvtCloseClaimFeeOperator;
    impl IntoProto<proto_def::EvtCloseClaimFeeOperator> for EvtCloseClaimFeeOperator {
        fn into_proto(self) -> proto_def::EvtCloseClaimFeeOperator {
            proto_def::EvtCloseClaimFeeOperator {
                claim_fee_operator: self.claim_fee_operator.to_string(),
                operator: self.operator.to_string(),
            }
        }
    }
    use crate::types::EvtCreateClaimFeeOperator;
    impl IntoProto<proto_def::EvtCreateClaimFeeOperator> for EvtCreateClaimFeeOperator {
        fn into_proto(self) -> proto_def::EvtCreateClaimFeeOperator {
            proto_def::EvtCreateClaimFeeOperator {
                operator: self.operator.to_string(),
            }
        }
    }
    use crate::types::EvtCreateConfig;
    impl IntoProto<proto_def::EvtCreateConfig> for EvtCreateConfig {
        fn into_proto(self) -> proto_def::EvtCreateConfig {
            proto_def::EvtCreateConfig {
                config: self.config.to_string(),
                quote_mint: self.quote_mint.to_string(),
                fee_claimer: self.fee_claimer.to_string(),
                owner: self.owner.to_string(),
                pool_fees: Some(self.pool_fees.into_proto()),
                collect_fee_mode: self.collect_fee_mode.into(),
                migration_option: self.migration_option.into(),
                activation_type: self.activation_type.into(),
                token_decimal: self.token_decimal.into(),
                token_type: self.token_type.into(),
                partner_locked_lp_percentage: self.partner_locked_lp_percentage.into(),
                partner_lp_percentage: self.partner_lp_percentage.into(),
                creator_locked_lp_percentage: self.creator_locked_lp_percentage.into(),
                creator_lp_percentage: self.creator_lp_percentage.into(),
                swap_base_amount: self.swap_base_amount,
                migration_quote_threshold: self.migration_quote_threshold,
                migration_base_amount: self.migration_base_amount,
                sqrt_start_price: self.sqrt_start_price.to_string(),
                locked_vesting: Some(self.locked_vesting.into_proto()),
                migration_fee_option: self.migration_fee_option.into(),
                fixed_token_supply_flag: self.fixed_token_supply_flag.into(),
                pre_migration_token_supply: self.pre_migration_token_supply,
                post_migration_token_supply: self.post_migration_token_supply,
                curve: self.curve.into_iter().map(|x| x.into_proto()).collect(),
            }
        }
    }
    use crate::types::EvtCreateDammV2MigrationMetadata;
    impl IntoProto<proto_def::EvtCreateDammV2MigrationMetadata> for EvtCreateDammV2MigrationMetadata {
        fn into_proto(self) -> proto_def::EvtCreateDammV2MigrationMetadata {
            proto_def::EvtCreateDammV2MigrationMetadata {
                virtual_pool: self.virtual_pool.to_string(),
            }
        }
    }
    use crate::types::EvtCreateMeteoraMigrationMetadata;
    impl IntoProto<proto_def::EvtCreateMeteoraMigrationMetadata> for EvtCreateMeteoraMigrationMetadata {
        fn into_proto(self) -> proto_def::EvtCreateMeteoraMigrationMetadata {
            proto_def::EvtCreateMeteoraMigrationMetadata {
                virtual_pool: self.virtual_pool.to_string(),
            }
        }
    }
    use crate::types::EvtCreatorWithdrawSurplus;
    impl IntoProto<proto_def::EvtCreatorWithdrawSurplus> for EvtCreatorWithdrawSurplus {
        fn into_proto(self) -> proto_def::EvtCreatorWithdrawSurplus {
            proto_def::EvtCreatorWithdrawSurplus {
                pool: self.pool.to_string(),
                surplus_amount: self.surplus_amount,
            }
        }
    }
    use crate::types::EvtCurveComplete;
    impl IntoProto<proto_def::EvtCurveComplete> for EvtCurveComplete {
        fn into_proto(self) -> proto_def::EvtCurveComplete {
            proto_def::EvtCurveComplete {
                pool: self.pool.to_string(),
                config: self.config.to_string(),
                base_reserve: self.base_reserve,
                quote_reserve: self.quote_reserve,
            }
        }
    }
    use crate::types::EvtInitializePool;
    impl IntoProto<proto_def::EvtInitializePool> for EvtInitializePool {
        fn into_proto(self) -> proto_def::EvtInitializePool {
            proto_def::EvtInitializePool {
                pool: self.pool.to_string(),
                config: self.config.to_string(),
                creator: self.creator.to_string(),
                base_mint: self.base_mint.to_string(),
                pool_type: self.pool_type.into(),
                activation_point: self.activation_point,
            }
        }
    }
    use crate::types::EvtPartnerMetadata;
    impl IntoProto<proto_def::EvtPartnerMetadata> for EvtPartnerMetadata {
        fn into_proto(self) -> proto_def::EvtPartnerMetadata {
            proto_def::EvtPartnerMetadata {
                partner_metadata: self.partner_metadata.to_string(),
                fee_claimer: self.fee_claimer.to_string(),
            }
        }
    }
    use crate::types::EvtPartnerWithdrawSurplus;
    impl IntoProto<proto_def::EvtPartnerWithdrawSurplus> for EvtPartnerWithdrawSurplus {
        fn into_proto(self) -> proto_def::EvtPartnerWithdrawSurplus {
            proto_def::EvtPartnerWithdrawSurplus {
                pool: self.pool.to_string(),
                surplus_amount: self.surplus_amount,
            }
        }
    }
    use crate::types::EvtProtocolWithdrawSurplus;
    impl IntoProto<proto_def::EvtProtocolWithdrawSurplus> for EvtProtocolWithdrawSurplus {
        fn into_proto(self) -> proto_def::EvtProtocolWithdrawSurplus {
            proto_def::EvtProtocolWithdrawSurplus {
                pool: self.pool.to_string(),
                surplus_amount: self.surplus_amount,
            }
        }
    }
    use crate::types::EvtSwap;
    impl IntoProto<proto_def::EvtSwap> for EvtSwap {
        fn into_proto(self) -> proto_def::EvtSwap {
            proto_def::EvtSwap {
                pool: self.pool.to_string(),
                config: self.config.to_string(),
                trade_direction: self.trade_direction.into(),
                has_referral: self.has_referral,
                params: Some(self.params.into_proto()),
                swap_result: Some(self.swap_result.into_proto()),
                amount_in: self.amount_in,
                current_timestamp: self.current_timestamp,
            }
        }
    }
    use crate::types::EvtVirtualPoolMetadata;
    impl IntoProto<proto_def::EvtVirtualPoolMetadata> for EvtVirtualPoolMetadata {
        fn into_proto(self) -> proto_def::EvtVirtualPoolMetadata {
            proto_def::EvtVirtualPoolMetadata {
                virtual_pool_metadata: self.virtual_pool_metadata.to_string(),
                virtual_pool: self.virtual_pool.to_string(),
            }
        }
    }
    use crate::types::EvtWithdrawLeftover;
    impl IntoProto<proto_def::EvtWithdrawLeftover> for EvtWithdrawLeftover {
        fn into_proto(self) -> proto_def::EvtWithdrawLeftover {
            proto_def::EvtWithdrawLeftover {
                pool: self.pool.to_string(),
                leftover_receiver: self.leftover_receiver.to_string(),
                leftover_amount: self.leftover_amount,
            }
        }
    }
    use crate::types::InitializePoolParameters;
    impl IntoProto<proto_def::InitializePoolParameters> for InitializePoolParameters {
        fn into_proto(self) -> proto_def::InitializePoolParameters {
            proto_def::InitializePoolParameters {
                name: self.name,
                symbol: self.symbol,
                uri: self.uri,
            }
        }
    }
    use crate::types::LiquidityDistributionConfig;
    impl IntoProto<proto_def::LiquidityDistributionConfig> for LiquidityDistributionConfig {
        fn into_proto(self) -> proto_def::LiquidityDistributionConfig {
            proto_def::LiquidityDistributionConfig {
                sqrt_price: self.sqrt_price.to_string(),
                liquidity: self.liquidity.to_string(),
            }
        }
    }
    use crate::types::LiquidityDistributionParameters;
    impl IntoProto<proto_def::LiquidityDistributionParameters> for LiquidityDistributionParameters {
        fn into_proto(self) -> proto_def::LiquidityDistributionParameters {
            proto_def::LiquidityDistributionParameters {
                sqrt_price: self.sqrt_price.to_string(),
                liquidity: self.liquidity.to_string(),
            }
        }
    }
    use crate::types::LockedVestingConfig;
    impl IntoProto<proto_def::LockedVestingConfig> for LockedVestingConfig {
        fn into_proto(self) -> proto_def::LockedVestingConfig {
            proto_def::LockedVestingConfig {
                amount_per_period: self.amount_per_period,
                cliff_duration_from_migration_time: self.cliff_duration_from_migration_time,
                frequency: self.frequency,
                number_of_period: self.number_of_period,
                cliff_unlock_amount: self.cliff_unlock_amount,
                padding: self.padding,
            }
        }
    }
    use crate::types::LockedVestingParams;
    impl IntoProto<proto_def::LockedVestingParams> for LockedVestingParams {
        fn into_proto(self) -> proto_def::LockedVestingParams {
            proto_def::LockedVestingParams {
                amount_per_period: self.amount_per_period,
                cliff_duration_from_migration_time: self.cliff_duration_from_migration_time,
                frequency: self.frequency,
                number_of_period: self.number_of_period,
                cliff_unlock_amount: self.cliff_unlock_amount,
            }
        }
    }
    use crate::types::PoolFeeParameters;
    impl IntoProto<proto_def::PoolFeeParameters> for PoolFeeParameters {
        fn into_proto(self) -> proto_def::PoolFeeParameters {
            proto_def::PoolFeeParameters {
                base_fee: Some(self.base_fee.into_proto()),
                dynamic_fee: self.dynamic_fee.map(|x| x.into_proto()),
            }
        }
    }
    use crate::types::PoolFees;
    impl IntoProto<proto_def::PoolFees> for PoolFees {
        fn into_proto(self) -> proto_def::PoolFees {
            proto_def::PoolFees {
                trade_fee_numerator: self.trade_fee_numerator,
                trade_fee_denominator: self.trade_fee_denominator,
                protocol_trade_fee_numerator: self.protocol_trade_fee_numerator,
                protocol_trade_fee_denominator: self.protocol_trade_fee_denominator,
            }
        }
    }
    use crate::types::PoolFeesConfig;
    impl IntoProto<proto_def::PoolFeesConfig> for PoolFeesConfig {
        fn into_proto(self) -> proto_def::PoolFeesConfig {
            proto_def::PoolFeesConfig {
                base_fee: Some(self.base_fee.into_proto()),
                dynamic_fee: Some(self.dynamic_fee.into_proto()),
                padding0: self.padding0.to_vec(),
                padding1: self.padding1.into_iter().map(|x| x.into()).collect(),
                protocol_fee_percent: self.protocol_fee_percent.into(),
                referral_fee_percent: self.referral_fee_percent.into(),
            }
        }
    }
    use crate::types::PoolMetrics;
    impl IntoProto<proto_def::PoolMetrics> for PoolMetrics {
        fn into_proto(self) -> proto_def::PoolMetrics {
            proto_def::PoolMetrics {
                total_protocol_base_fee: self.total_protocol_base_fee,
                total_protocol_quote_fee: self.total_protocol_quote_fee,
                total_trading_base_fee: self.total_trading_base_fee,
                total_trading_quote_fee: self.total_trading_quote_fee,
            }
        }
    }
    use crate::types::SwapParameters;
    impl IntoProto<proto_def::SwapParameters> for SwapParameters {
        fn into_proto(self) -> proto_def::SwapParameters {
            proto_def::SwapParameters {
                amount_in: self.amount_in,
                minimum_amount_out: self.minimum_amount_out,
            }
        }
    }
    use crate::types::SwapResult;
    impl IntoProto<proto_def::SwapResult> for SwapResult {
        fn into_proto(self) -> proto_def::SwapResult {
            proto_def::SwapResult {
                actual_input_amount: self.actual_input_amount,
                output_amount: self.output_amount,
                next_sqrt_price: self.next_sqrt_price.to_string(),
                trading_fee: self.trading_fee,
                protocol_fee: self.protocol_fee,
                referral_fee: self.referral_fee,
            }
        }
    }
    use crate::types::TokenSupplyParams;
    impl IntoProto<proto_def::TokenSupplyParams> for TokenSupplyParams {
        fn into_proto(self) -> proto_def::TokenSupplyParams {
            proto_def::TokenSupplyParams {
                pre_migration_token_supply: self.pre_migration_token_supply,
                post_migration_token_supply: self.post_migration_token_supply,
            }
        }
    }
    use crate::types::VolatilityTracker;
    impl IntoProto<proto_def::VolatilityTracker> for VolatilityTracker {
        fn into_proto(self) -> proto_def::VolatilityTracker {
            proto_def::VolatilityTracker {
                last_update_timestamp: self.last_update_timestamp,
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
                sqrt_price_reference: self.sqrt_price_reference.to_string(),
                volatility_accumulator: self.volatility_accumulator.to_string(),
                volatility_reference: self.volatility_reference.to_string(),
            }
        }
    }
}
