//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct CreatePartnerMetadata {
    /// Partner metadata
    pub partner_metadata: solana_program::pubkey::Pubkey,
    /// Payer of the partner metadata.
    pub payer: solana_program::pubkey::Pubkey,
    /// Fee claimer for partner
    pub fee_claimer: solana_program::pubkey::Pubkey,
    /// System program.
    pub system_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl CreatePartnerMetadata {
    pub fn instruction(
        &self,
        args: CreatePartnerMetadataInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreatePartnerMetadataInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.partner_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_claimer,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreatePartnerMetadataInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePartnerMetadataInstructionData {
    discriminator: [u8; 8],
}

impl CreatePartnerMetadataInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [192, 168, 234, 191, 188, 226, 227, 255],
        }
    }
}

impl Default for CreatePartnerMetadataInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreatePartnerMetadataInstructionArgs {
    pub padding: [u8; 96],
    pub name: String,
    pub website: String,
    pub logo: String,
}

/// Instruction builder for `CreatePartnerMetadata`.
///
/// ### Accounts:
///
///   0. `[writable]` partner_metadata
///   1. `[writable, signer]` payer
///   2. `[signer]` fee_claimer
///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   4. `[]` event_authority
///   5. `[]` program
#[derive(Clone, Debug, Default)]
pub struct CreatePartnerMetadataBuilder {
    partner_metadata: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    fee_claimer: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    padding: Option<[u8; 96]>,
    name: Option<String>,
    website: Option<String>,
    logo: Option<String>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreatePartnerMetadataBuilder {
    pub fn new() -> Self { Self::default() }

    /// Partner metadata
    #[inline(always)]
    pub fn partner_metadata(
        &mut self,
        partner_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.partner_metadata = Some(partner_metadata);
        self
    }

    /// Payer of the partner metadata.
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// Fee claimer for partner
    #[inline(always)]
    pub fn fee_claimer(&mut self, fee_claimer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_claimer = Some(fee_claimer);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn padding(&mut self, padding: [u8; 96]) -> &mut Self {
        self.padding = Some(padding);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }

    #[inline(always)]
    pub fn website(&mut self, website: String) -> &mut Self {
        self.website = Some(website);
        self
    }

    #[inline(always)]
    pub fn logo(&mut self, logo: String) -> &mut Self {
        self.logo = Some(logo);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreatePartnerMetadata {
            partner_metadata: self.partner_metadata.expect("partner_metadata is not set"),
            payer: self.payer.expect("payer is not set"),
            fee_claimer: self.fee_claimer.expect("fee_claimer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = CreatePartnerMetadataInstructionArgs {
            padding: self.padding.clone().expect("padding is not set"),
            name: self.name.clone().expect("name is not set"),
            website: self.website.clone().expect("website is not set"),
            logo: self.logo.clone().expect("logo is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_partner_metadata` CPI accounts.
pub struct CreatePartnerMetadataCpiAccounts<'a, 'b> {
    /// Partner metadata
    pub partner_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer of the partner metadata.
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Fee claimer for partner
    pub fee_claimer: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_partner_metadata` CPI instruction.
pub struct CreatePartnerMetadataCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Partner metadata
    pub partner_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Payer of the partner metadata.
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Fee claimer for partner
    pub fee_claimer: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreatePartnerMetadataInstructionArgs,
}

impl<'a, 'b> CreatePartnerMetadataCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreatePartnerMetadataCpiAccounts<'a, 'b>,
        args: CreatePartnerMetadataInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            partner_metadata: accounts.partner_metadata,
            payer: accounts.payer,
            fee_claimer: accounts.fee_claimer,
            system_program: accounts.system_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(6 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.partner_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_claimer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreatePartnerMetadataInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.partner_metadata.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.fee_claimer.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreatePartnerMetadata` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` partner_metadata
///   1. `[writable, signer]` payer
///   2. `[signer]` fee_claimer
///   3. `[]` system_program
///   4. `[]` event_authority
///   5. `[]` program
#[derive(Clone, Debug)]
pub struct CreatePartnerMetadataCpiBuilder<'a, 'b> {
    instruction: Box<CreatePartnerMetadataCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreatePartnerMetadataCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreatePartnerMetadataCpiBuilderInstruction {
            __program: program,
            partner_metadata: None,
            payer: None,
            fee_claimer: None,
            system_program: None,
            event_authority: None,
            program: None,
            padding: None,
            name: None,
            website: None,
            logo: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// Partner metadata
    #[inline(always)]
    pub fn partner_metadata(
        &mut self,
        partner_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.partner_metadata = Some(partner_metadata);
        self
    }

    /// Payer of the partner metadata.
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    /// Fee claimer for partner
    #[inline(always)]
    pub fn fee_claimer(
        &mut self,
        fee_claimer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_claimer = Some(fee_claimer);
        self
    }

    /// System program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn padding(&mut self, padding: [u8; 96]) -> &mut Self {
        self.instruction.padding = Some(padding);
        self
    }

    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }

    #[inline(always)]
    pub fn website(&mut self, website: String) -> &mut Self {
        self.instruction.website = Some(website);
        self
    }

    #[inline(always)]
    pub fn logo(&mut self, logo: String) -> &mut Self {
        self.instruction.logo = Some(logo);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreatePartnerMetadataInstructionArgs {
            padding: self
                .instruction
                .padding
                .clone()
                .expect("padding is not set"),
            name: self.instruction.name.clone().expect("name is not set"),
            website: self
                .instruction
                .website
                .clone()
                .expect("website is not set"),
            logo: self.instruction.logo.clone().expect("logo is not set"),
        };
        let instruction = CreatePartnerMetadataCpi {
            __program: self.instruction.__program,

            partner_metadata: self
                .instruction
                .partner_metadata
                .expect("partner_metadata is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            fee_claimer: self
                .instruction
                .fee_claimer
                .expect("fee_claimer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreatePartnerMetadataCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    partner_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_claimer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    padding: Option<[u8; 96]>,
    name: Option<String>,
    website: Option<String>,
    logo: Option<String>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
