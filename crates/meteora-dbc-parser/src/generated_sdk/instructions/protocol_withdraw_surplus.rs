//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct ProtocolWithdrawSurplus {
    pub pool_authority: solana_program::pubkey::Pubkey,

    pub config: solana_program::pubkey::Pubkey,

    pub virtual_pool: solana_program::pubkey::Pubkey,
    /// The treasury quote token account
    pub token_quote_account: solana_program::pubkey::Pubkey,
    /// The vault token account for quote token
    pub quote_vault: solana_program::pubkey::Pubkey,
    /// The mint of of token
    pub quote_mint: solana_program::pubkey::Pubkey,
    /// Token b program
    pub token_quote_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl ProtocolWithdrawSurplus {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.virtual_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_quote_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_quote_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&ProtocolWithdrawSurplusInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ProtocolWithdrawSurplusInstructionData {
    discriminator: [u8; 8],
}

impl ProtocolWithdrawSurplusInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [54, 136, 225, 138, 172, 182, 214, 167],
        }
    }
}

impl Default for ProtocolWithdrawSurplusInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `ProtocolWithdrawSurplus`.
///
/// ### Accounts:
///
///   0. `[optional]` pool_authority (default to `FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM`)
///   1. `[]` config
///   2. `[writable]` virtual_pool
///   3. `[writable]` token_quote_account
///   4. `[writable]` quote_vault
///   5. `[]` quote_mint
///   6. `[]` token_quote_program
///   7. `[]` event_authority
///   8. `[]` program
#[derive(Clone, Debug, Default)]
pub struct ProtocolWithdrawSurplusBuilder {
    pool_authority: Option<solana_program::pubkey::Pubkey>,
    config: Option<solana_program::pubkey::Pubkey>,
    virtual_pool: Option<solana_program::pubkey::Pubkey>,
    token_quote_account: Option<solana_program::pubkey::Pubkey>,
    quote_vault: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    token_quote_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl ProtocolWithdrawSurplusBuilder {
    pub fn new() -> Self { Self::default() }

    /// `[optional account, default to 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM']`
    #[inline(always)]
    pub fn pool_authority(&mut self, pool_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn virtual_pool(&mut self, virtual_pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.virtual_pool = Some(virtual_pool);
        self
    }

    /// The treasury quote token account
    #[inline(always)]
    pub fn token_quote_account(
        &mut self,
        token_quote_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_quote_account = Some(token_quote_account);
        self
    }

    /// The vault token account for quote token
    #[inline(always)]
    pub fn quote_vault(&mut self, quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_vault = Some(quote_vault);
        self
    }

    /// The mint of of token
    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    /// Token b program
    #[inline(always)]
    pub fn token_quote_program(
        &mut self,
        token_quote_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_quote_program = Some(token_quote_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = ProtocolWithdrawSurplus {
            pool_authority: self.pool_authority.unwrap_or(solana_program::pubkey!(
                "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
            )),
            config: self.config.expect("config is not set"),
            virtual_pool: self.virtual_pool.expect("virtual_pool is not set"),
            token_quote_account: self
                .token_quote_account
                .expect("token_quote_account is not set"),
            quote_vault: self.quote_vault.expect("quote_vault is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            token_quote_program: self
                .token_quote_program
                .expect("token_quote_program is not set"),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `protocol_withdraw_surplus` CPI accounts.
pub struct ProtocolWithdrawSurplusCpiAccounts<'a, 'b> {
    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// The treasury quote token account
    pub token_quote_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vault token account for quote token
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of of token
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token b program
    pub token_quote_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `protocol_withdraw_surplus` CPI instruction.
pub struct ProtocolWithdrawSurplusCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// The treasury quote token account
    pub token_quote_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vault token account for quote token
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of of token
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token b program
    pub token_quote_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> ProtocolWithdrawSurplusCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: ProtocolWithdrawSurplusCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            pool_authority: accounts.pool_authority,
            config: accounts.config,
            virtual_pool: accounts.virtual_pool,
            token_quote_account: accounts.token_quote_account,
            quote_vault: accounts.quote_vault,
            quote_mint: accounts.quote_mint,
            token_quote_program: accounts.token_quote_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.virtual_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_quote_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_quote_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&ProtocolWithdrawSurplusInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pool_authority.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.virtual_pool.clone());
        account_infos.push(self.token_quote_account.clone());
        account_infos.push(self.quote_vault.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.token_quote_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ProtocolWithdrawSurplus` via CPI.
///
/// ### Accounts:
///
///   0. `[]` pool_authority
///   1. `[]` config
///   2. `[writable]` virtual_pool
///   3. `[writable]` token_quote_account
///   4. `[writable]` quote_vault
///   5. `[]` quote_mint
///   6. `[]` token_quote_program
///   7. `[]` event_authority
///   8. `[]` program
#[derive(Clone, Debug)]
pub struct ProtocolWithdrawSurplusCpiBuilder<'a, 'b> {
    instruction: Box<ProtocolWithdrawSurplusCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ProtocolWithdrawSurplusCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ProtocolWithdrawSurplusCpiBuilderInstruction {
            __program: program,
            pool_authority: None,
            config: None,
            virtual_pool: None,
            token_quote_account: None,
            quote_vault: None,
            quote_mint: None,
            token_quote_program: None,
            event_authority: None,
            program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn pool_authority(
        &mut self,
        pool_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn virtual_pool(
        &mut self,
        virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtual_pool = Some(virtual_pool);
        self
    }

    /// The treasury quote token account
    #[inline(always)]
    pub fn token_quote_account(
        &mut self,
        token_quote_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_quote_account = Some(token_quote_account);
        self
    }

    /// The vault token account for quote token
    #[inline(always)]
    pub fn quote_vault(
        &mut self,
        quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_vault = Some(quote_vault);
        self
    }

    /// The mint of of token
    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    /// Token b program
    #[inline(always)]
    pub fn token_quote_program(
        &mut self,
        token_quote_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_quote_program = Some(token_quote_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = ProtocolWithdrawSurplusCpi {
            __program: self.instruction.__program,

            pool_authority: self
                .instruction
                .pool_authority
                .expect("pool_authority is not set"),

            config: self.instruction.config.expect("config is not set"),

            virtual_pool: self
                .instruction
                .virtual_pool
                .expect("virtual_pool is not set"),

            token_quote_account: self
                .instruction
                .token_quote_account
                .expect("token_quote_account is not set"),

            quote_vault: self
                .instruction
                .quote_vault
                .expect("quote_vault is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            token_quote_program: self
                .instruction
                .token_quote_program
                .expect("token_quote_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ProtocolWithdrawSurplusCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    pool_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    virtual_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_quote_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_quote_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
