//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::SwapParameters;

/// Accounts.
#[derive(Debug)]
pub struct Swap {
    pub pool_authority: solana_program::pubkey::Pubkey,
    /// config key
    pub config: solana_program::pubkey::Pubkey,
    /// Pool account
    pub pool: solana_program::pubkey::Pubkey,
    /// The user token account for input token
    pub input_token_account: solana_program::pubkey::Pubkey,
    /// The user token account for output token
    pub output_token_account: solana_program::pubkey::Pubkey,
    /// The vault token account for base token
    pub base_vault: solana_program::pubkey::Pubkey,
    /// The vault token account for quote token
    pub quote_vault: solana_program::pubkey::Pubkey,
    /// The mint of base token
    pub base_mint: solana_program::pubkey::Pubkey,
    /// The mint of quote token
    pub quote_mint: solana_program::pubkey::Pubkey,
    /// The user performing the swap
    pub payer: solana_program::pubkey::Pubkey,
    /// Token base program
    pub token_base_program: solana_program::pubkey::Pubkey,
    /// Token quote program
    pub token_quote_program: solana_program::pubkey::Pubkey,
    /// referral token account
    pub referral_token_account: Option<solana_program::pubkey::Pubkey>,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl Swap {
    pub fn instruction(
        &self,
        args: SwapInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SwapInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.pool_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.input_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.output_token_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.base_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_base_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_quote_program,
            false,
        ));
        if let Some(referral_token_account) = self.referral_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                referral_token_account,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::DYNAMIC_BONDING_CURVE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SwapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapInstructionData {
    discriminator: [u8; 8],
}

impl SwapInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [248, 198, 158, 145, 225, 117, 135, 200],
        }
    }
}

impl Default for SwapInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SwapInstructionArgs {
    pub params: SwapParameters,
}

/// Instruction builder for `Swap`.
///
/// ### Accounts:
///
///   0. `[optional]` pool_authority (default to `FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM`)
///   1. `[]` config
///   2. `[writable]` pool
///   3. `[writable]` input_token_account
///   4. `[writable]` output_token_account
///   5. `[writable]` base_vault
///   6. `[writable]` quote_vault
///   7. `[]` base_mint
///   8. `[]` quote_mint
///   9. `[signer]` payer
///   10. `[]` token_base_program
///   11. `[]` token_quote_program
///   12. `[writable, optional]` referral_token_account
///   13. `[]` event_authority
///   14. `[]` program
#[derive(Clone, Debug, Default)]
pub struct SwapBuilder {
    pool_authority: Option<solana_program::pubkey::Pubkey>,
    config: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    input_token_account: Option<solana_program::pubkey::Pubkey>,
    output_token_account: Option<solana_program::pubkey::Pubkey>,
    base_vault: Option<solana_program::pubkey::Pubkey>,
    quote_vault: Option<solana_program::pubkey::Pubkey>,
    base_mint: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    token_base_program: Option<solana_program::pubkey::Pubkey>,
    token_quote_program: Option<solana_program::pubkey::Pubkey>,
    referral_token_account: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    params: Option<SwapParameters>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SwapBuilder {
    pub fn new() -> Self { Self::default() }

    /// `[optional account, default to 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM']`
    #[inline(always)]
    pub fn pool_authority(&mut self, pool_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_authority = Some(pool_authority);
        self
    }

    /// config key
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    /// Pool account
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    /// The user token account for input token
    #[inline(always)]
    pub fn input_token_account(
        &mut self,
        input_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.input_token_account = Some(input_token_account);
        self
    }

    /// The user token account for output token
    #[inline(always)]
    pub fn output_token_account(
        &mut self,
        output_token_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.output_token_account = Some(output_token_account);
        self
    }

    /// The vault token account for base token
    #[inline(always)]
    pub fn base_vault(&mut self, base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_vault = Some(base_vault);
        self
    }

    /// The vault token account for quote token
    #[inline(always)]
    pub fn quote_vault(&mut self, quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_vault = Some(quote_vault);
        self
    }

    /// The mint of base token
    #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_mint = Some(base_mint);
        self
    }

    /// The mint of quote token
    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    /// The user performing the swap
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// Token base program
    #[inline(always)]
    pub fn token_base_program(
        &mut self,
        token_base_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_base_program = Some(token_base_program);
        self
    }

    /// Token quote program
    #[inline(always)]
    pub fn token_quote_program(
        &mut self,
        token_quote_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_quote_program = Some(token_quote_program);
        self
    }

    /// `[optional account]`
    /// referral token account
    #[inline(always)]
    pub fn referral_token_account(
        &mut self,
        referral_token_account: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.referral_token_account = referral_token_account;
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn params(&mut self, params: SwapParameters) -> &mut Self {
        self.params = Some(params);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Swap {
            pool_authority: self.pool_authority.unwrap_or(solana_program::pubkey!(
                "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
            )),
            config: self.config.expect("config is not set"),
            pool: self.pool.expect("pool is not set"),
            input_token_account: self
                .input_token_account
                .expect("input_token_account is not set"),
            output_token_account: self
                .output_token_account
                .expect("output_token_account is not set"),
            base_vault: self.base_vault.expect("base_vault is not set"),
            quote_vault: self.quote_vault.expect("quote_vault is not set"),
            base_mint: self.base_mint.expect("base_mint is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            payer: self.payer.expect("payer is not set"),
            token_base_program: self
                .token_base_program
                .expect("token_base_program is not set"),
            token_quote_program: self
                .token_quote_program
                .expect("token_quote_program is not set"),
            referral_token_account: self.referral_token_account,
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = SwapInstructionArgs {
            params: self.params.clone().expect("params is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `swap` CPI accounts.
pub struct SwapCpiAccounts<'a, 'b> {
    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// config key
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pool account
    pub pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user token account for input token
    pub input_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user token account for output token
    pub output_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vault token account for base token
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vault token account for quote token
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of base token
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of quote token
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user performing the swap
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token base program
    pub token_base_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token quote program
    pub token_quote_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// referral token account
    pub referral_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `swap` CPI instruction.
pub struct SwapCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// config key
    pub config: &'b solana_program::account_info::AccountInfo<'a>,
    /// Pool account
    pub pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user token account for input token
    pub input_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user token account for output token
    pub output_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vault token account for base token
    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The vault token account for quote token
    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of base token
    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The mint of quote token
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    /// The user performing the swap
    pub payer: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token base program
    pub token_base_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token quote program
    pub token_quote_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// referral token account
    pub referral_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SwapInstructionArgs,
}

impl<'a, 'b> SwapCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SwapCpiAccounts<'a, 'b>,
        args: SwapInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            pool_authority: accounts.pool_authority,
            config: accounts.config,
            pool: accounts.pool,
            input_token_account: accounts.input_token_account,
            output_token_account: accounts.output_token_account,
            base_vault: accounts.base_vault,
            quote_vault: accounts.quote_vault,
            base_mint: accounts.base_mint,
            quote_mint: accounts.quote_mint,
            payer: accounts.payer,
            token_base_program: accounts.token_base_program,
            token_quote_program: accounts.token_quote_program,
            referral_token_account: accounts.referral_token_account,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(15 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.pool_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.input_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.output_token_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.base_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_base_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_quote_program.key,
            false,
        ));
        if let Some(referral_token_account) = self.referral_token_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *referral_token_account.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::DYNAMIC_BONDING_CURVE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SwapInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(16 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pool_authority.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.input_token_account.clone());
        account_infos.push(self.output_token_account.clone());
        account_infos.push(self.base_vault.clone());
        account_infos.push(self.quote_vault.clone());
        account_infos.push(self.base_mint.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.token_base_program.clone());
        account_infos.push(self.token_quote_program.clone());
        if let Some(referral_token_account) = self.referral_token_account {
            account_infos.push(referral_token_account.clone());
        }
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Swap` via CPI.
///
/// ### Accounts:
///
///   0. `[]` pool_authority
///   1. `[]` config
///   2. `[writable]` pool
///   3. `[writable]` input_token_account
///   4. `[writable]` output_token_account
///   5. `[writable]` base_vault
///   6. `[writable]` quote_vault
///   7. `[]` base_mint
///   8. `[]` quote_mint
///   9. `[signer]` payer
///   10. `[]` token_base_program
///   11. `[]` token_quote_program
///   12. `[writable, optional]` referral_token_account
///   13. `[]` event_authority
///   14. `[]` program
#[derive(Clone, Debug)]
pub struct SwapCpiBuilder<'a, 'b> {
    instruction: Box<SwapCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SwapCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SwapCpiBuilderInstruction {
            __program: program,
            pool_authority: None,
            config: None,
            pool: None,
            input_token_account: None,
            output_token_account: None,
            base_vault: None,
            quote_vault: None,
            base_mint: None,
            quote_mint: None,
            payer: None,
            token_base_program: None,
            token_quote_program: None,
            referral_token_account: None,
            event_authority: None,
            program: None,
            params: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn pool_authority(
        &mut self,
        pool_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_authority = Some(pool_authority);
        self
    }

    /// config key
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    /// Pool account
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    /// The user token account for input token
    #[inline(always)]
    pub fn input_token_account(
        &mut self,
        input_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.input_token_account = Some(input_token_account);
        self
    }

    /// The user token account for output token
    #[inline(always)]
    pub fn output_token_account(
        &mut self,
        output_token_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.output_token_account = Some(output_token_account);
        self
    }

    /// The vault token account for base token
    #[inline(always)]
    pub fn base_vault(
        &mut self,
        base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault = Some(base_vault);
        self
    }

    /// The vault token account for quote token
    #[inline(always)]
    pub fn quote_vault(
        &mut self,
        quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_vault = Some(quote_vault);
        self
    }

    /// The mint of base token
    #[inline(always)]
    pub fn base_mint(
        &mut self,
        base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_mint = Some(base_mint);
        self
    }

    /// The mint of quote token
    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    /// The user performing the swap
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    /// Token base program
    #[inline(always)]
    pub fn token_base_program(
        &mut self,
        token_base_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_base_program = Some(token_base_program);
        self
    }

    /// Token quote program
    #[inline(always)]
    pub fn token_quote_program(
        &mut self,
        token_quote_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_quote_program = Some(token_quote_program);
        self
    }

    /// `[optional account]`
    /// referral token account
    #[inline(always)]
    pub fn referral_token_account(
        &mut self,
        referral_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.referral_token_account = referral_token_account;
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn params(&mut self, params: SwapParameters) -> &mut Self {
        self.instruction.params = Some(params);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SwapInstructionArgs {
            params: self.instruction.params.clone().expect("params is not set"),
        };
        let instruction = SwapCpi {
            __program: self.instruction.__program,

            pool_authority: self
                .instruction
                .pool_authority
                .expect("pool_authority is not set"),

            config: self.instruction.config.expect("config is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            input_token_account: self
                .instruction
                .input_token_account
                .expect("input_token_account is not set"),

            output_token_account: self
                .instruction
                .output_token_account
                .expect("output_token_account is not set"),

            base_vault: self.instruction.base_vault.expect("base_vault is not set"),

            quote_vault: self
                .instruction
                .quote_vault
                .expect("quote_vault is not set"),

            base_mint: self.instruction.base_mint.expect("base_mint is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            token_base_program: self
                .instruction
                .token_base_program
                .expect("token_base_program is not set"),

            token_quote_program: self
                .instruction
                .token_quote_program
                .expect("token_quote_program is not set"),

            referral_token_account: self.instruction.referral_token_account,

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SwapCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    pool_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    input_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    output_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_base_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_quote_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    referral_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    params: Option<SwapParameters>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
