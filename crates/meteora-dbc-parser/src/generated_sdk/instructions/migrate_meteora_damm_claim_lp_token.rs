//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct MigrateMeteoraDammClaimLpToken {
    pub virtual_pool: solana_program::pubkey::Pubkey,
    /// migration metadata
    pub migration_metadata: solana_program::pubkey::Pubkey,

    pub pool_authority: solana_program::pubkey::Pubkey,

    pub lp_mint: solana_program::pubkey::Pubkey,

    pub source_token: solana_program::pubkey::Pubkey,

    pub destination_token: solana_program::pubkey::Pubkey,

    pub owner: solana_program::pubkey::Pubkey,

    pub sender: solana_program::pubkey::Pubkey,
    /// token_program
    pub token_program: solana_program::pubkey::Pubkey,
}

impl MigrateMeteoraDammClaimLpToken {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.virtual_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.migration_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.source_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.destination_token,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.owner, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.sender,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&MigrateMeteoraDammClaimLpTokenInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateMeteoraDammClaimLpTokenInstructionData {
    discriminator: [u8; 8],
}

impl MigrateMeteoraDammClaimLpTokenInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [139, 133, 2, 30, 91, 145, 127, 154],
        }
    }
}

impl Default for MigrateMeteoraDammClaimLpTokenInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `MigrateMeteoraDammClaimLpToken`.
///
/// ### Accounts:
///
///   0. `[]` virtual_pool
///   1. `[writable]` migration_metadata
///   2. `[writable, optional]` pool_authority (default to `FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM`)
///   3. `[]` lp_mint
///   4. `[writable]` source_token
///   5. `[writable]` destination_token
///   6. `[]` owner
///   7. `[signer]` sender
///   8. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct MigrateMeteoraDammClaimLpTokenBuilder {
    virtual_pool: Option<solana_program::pubkey::Pubkey>,
    migration_metadata: Option<solana_program::pubkey::Pubkey>,
    pool_authority: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    source_token: Option<solana_program::pubkey::Pubkey>,
    destination_token: Option<solana_program::pubkey::Pubkey>,
    owner: Option<solana_program::pubkey::Pubkey>,
    sender: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MigrateMeteoraDammClaimLpTokenBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn virtual_pool(&mut self, virtual_pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.virtual_pool = Some(virtual_pool);
        self
    }

    /// migration metadata
    #[inline(always)]
    pub fn migration_metadata(
        &mut self,
        migration_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.migration_metadata = Some(migration_metadata);
        self
    }

    /// `[optional account, default to 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM']`
    #[inline(always)]
    pub fn pool_authority(&mut self, pool_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn source_token(&mut self, source_token: solana_program::pubkey::Pubkey) -> &mut Self {
        self.source_token = Some(source_token);
        self
    }

    #[inline(always)]
    pub fn destination_token(
        &mut self,
        destination_token: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_token = Some(destination_token);
        self
    }

    #[inline(always)]
    pub fn owner(&mut self, owner: solana_program::pubkey::Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn sender(&mut self, sender: solana_program::pubkey::Pubkey) -> &mut Self {
        self.sender = Some(sender);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// token_program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MigrateMeteoraDammClaimLpToken {
            virtual_pool: self.virtual_pool.expect("virtual_pool is not set"),
            migration_metadata: self
                .migration_metadata
                .expect("migration_metadata is not set"),
            pool_authority: self.pool_authority.unwrap_or(solana_program::pubkey!(
                "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
            )),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            source_token: self.source_token.expect("source_token is not set"),
            destination_token: self
                .destination_token
                .expect("destination_token is not set"),
            owner: self.owner.expect("owner is not set"),
            sender: self.sender.expect("sender is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `migrate_meteora_damm_claim_lp_token` CPI accounts.
pub struct MigrateMeteoraDammClaimLpTokenCpiAccounts<'a, 'b> {
    pub virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// migration metadata
    pub migration_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub sender: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `migrate_meteora_damm_claim_lp_token` CPI instruction.
pub struct MigrateMeteoraDammClaimLpTokenCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// migration metadata
    pub migration_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub source_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub destination_token: &'b solana_program::account_info::AccountInfo<'a>,

    pub owner: &'b solana_program::account_info::AccountInfo<'a>,

    pub sender: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> MigrateMeteoraDammClaimLpTokenCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MigrateMeteoraDammClaimLpTokenCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            virtual_pool: accounts.virtual_pool,
            migration_metadata: accounts.migration_metadata,
            pool_authority: accounts.pool_authority,
            lp_mint: accounts.lp_mint,
            source_token: accounts.source_token,
            destination_token: accounts.destination_token,
            owner: accounts.owner,
            sender: accounts.sender,
            token_program: accounts.token_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.virtual_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.migration_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.source_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.destination_token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.owner.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.sender.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&MigrateMeteoraDammClaimLpTokenInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.virtual_pool.clone());
        account_infos.push(self.migration_metadata.clone());
        account_infos.push(self.pool_authority.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.source_token.clone());
        account_infos.push(self.destination_token.clone());
        account_infos.push(self.owner.clone());
        account_infos.push(self.sender.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MigrateMeteoraDammClaimLpToken` via CPI.
///
/// ### Accounts:
///
///   0. `[]` virtual_pool
///   1. `[writable]` migration_metadata
///   2. `[writable]` pool_authority
///   3. `[]` lp_mint
///   4. `[writable]` source_token
///   5. `[writable]` destination_token
///   6. `[]` owner
///   7. `[signer]` sender
///   8. `[]` token_program
#[derive(Clone, Debug)]
pub struct MigrateMeteoraDammClaimLpTokenCpiBuilder<'a, 'b> {
    instruction: Box<MigrateMeteoraDammClaimLpTokenCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MigrateMeteoraDammClaimLpTokenCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MigrateMeteoraDammClaimLpTokenCpiBuilderInstruction {
            __program: program,
            virtual_pool: None,
            migration_metadata: None,
            pool_authority: None,
            lp_mint: None,
            source_token: None,
            destination_token: None,
            owner: None,
            sender: None,
            token_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn virtual_pool(
        &mut self,
        virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtual_pool = Some(virtual_pool);
        self
    }

    /// migration metadata
    #[inline(always)]
    pub fn migration_metadata(
        &mut self,
        migration_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.migration_metadata = Some(migration_metadata);
        self
    }

    #[inline(always)]
    pub fn pool_authority(
        &mut self,
        pool_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn source_token(
        &mut self,
        source_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.source_token = Some(source_token);
        self
    }

    #[inline(always)]
    pub fn destination_token(
        &mut self,
        destination_token: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_token = Some(destination_token);
        self
    }

    #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }

    #[inline(always)]
    pub fn sender(
        &mut self,
        sender: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.sender = Some(sender);
        self
    }

    /// token_program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = MigrateMeteoraDammClaimLpTokenCpi {
            __program: self.instruction.__program,

            virtual_pool: self
                .instruction
                .virtual_pool
                .expect("virtual_pool is not set"),

            migration_metadata: self
                .instruction
                .migration_metadata
                .expect("migration_metadata is not set"),

            pool_authority: self
                .instruction
                .pool_authority
                .expect("pool_authority is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            source_token: self
                .instruction
                .source_token
                .expect("source_token is not set"),

            destination_token: self
                .instruction
                .destination_token
                .expect("destination_token is not set"),

            owner: self.instruction.owner.expect("owner is not set"),

            sender: self.instruction.sender.expect("sender is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MigrateMeteoraDammClaimLpTokenCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    virtual_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    migration_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    source_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    destination_token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    owner: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    sender: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
