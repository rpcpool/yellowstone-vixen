//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct MigrateMeteoraDamm {
    /// virtual pool
    pub virtual_pool: solana_program::pubkey::Pubkey,

    pub migration_metadata: solana_program::pubkey::Pubkey,

    pub config: solana_program::pubkey::Pubkey,

    pub pool_authority: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,
    /// pool config
    pub damm_config: solana_program::pubkey::Pubkey,

    pub lp_mint: solana_program::pubkey::Pubkey,

    pub token_a_mint: solana_program::pubkey::Pubkey,

    pub token_b_mint: solana_program::pubkey::Pubkey,

    pub a_vault: solana_program::pubkey::Pubkey,

    pub b_vault: solana_program::pubkey::Pubkey,

    pub a_token_vault: solana_program::pubkey::Pubkey,

    pub b_token_vault: solana_program::pubkey::Pubkey,

    pub a_vault_lp_mint: solana_program::pubkey::Pubkey,

    pub b_vault_lp_mint: solana_program::pubkey::Pubkey,

    pub a_vault_lp: solana_program::pubkey::Pubkey,

    pub b_vault_lp: solana_program::pubkey::Pubkey,

    pub base_vault: solana_program::pubkey::Pubkey,

    pub quote_vault: solana_program::pubkey::Pubkey,

    pub virtual_pool_lp: solana_program::pubkey::Pubkey,

    pub protocol_token_a_fee: solana_program::pubkey::Pubkey,

    pub protocol_token_b_fee: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub rent: solana_program::pubkey::Pubkey,

    pub mint_metadata: solana_program::pubkey::Pubkey,

    pub metadata_program: solana_program::pubkey::Pubkey,

    pub amm_program: solana_program::pubkey::Pubkey,

    pub vault_program: solana_program::pubkey::Pubkey,
    /// token_program
    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,
    /// System program.
    pub system_program: solana_program::pubkey::Pubkey,
}

impl MigrateMeteoraDamm {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(31 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.virtual_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.migration_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.damm_config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_b_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.a_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.b_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.a_token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.b_token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.a_vault_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.b_vault_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.a_vault_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.b_vault_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.virtual_pool_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_token_a_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_token_b_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.mint_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&MigrateMeteoraDammInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrateMeteoraDammInstructionData {
    discriminator: [u8; 8],
}

impl MigrateMeteoraDammInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [27, 1, 48, 22, 180, 63, 118, 217],
        }
    }
}

impl Default for MigrateMeteoraDammInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `MigrateMeteoraDamm`.
///
/// ### Accounts:
///
///   0. `[writable]` virtual_pool
///   1. `[writable]` migration_metadata
///   2. `[]` config
///   3. `[writable, optional]` pool_authority (default to `FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM`)
///   4. `[writable]` pool
///   5. `[]` damm_config
///   6. `[writable]` lp_mint
///   7. `[writable]` token_a_mint
///   8. `[]` token_b_mint
///   9. `[writable]` a_vault
///   10. `[writable]` b_vault
///   11. `[writable]` a_token_vault
///   12. `[writable]` b_token_vault
///   13. `[writable]` a_vault_lp_mint
///   14. `[writable]` b_vault_lp_mint
///   15. `[writable]` a_vault_lp
///   16. `[writable]` b_vault_lp
///   17. `[writable]` base_vault
///   18. `[writable]` quote_vault
///   19. `[writable]` virtual_pool_lp
///   20. `[writable]` protocol_token_a_fee
///   21. `[writable]` protocol_token_b_fee
///   22. `[writable, signer]` payer
///   23. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   24. `[writable]` mint_metadata
///   25. `[]` metadata_program
///   26. `[optional]` amm_program (default to `Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB`)
///   27. `[]` vault_program
///   28. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   29. `[]` associated_token_program
///   30. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct MigrateMeteoraDammBuilder {
    virtual_pool: Option<solana_program::pubkey::Pubkey>,
    migration_metadata: Option<solana_program::pubkey::Pubkey>,
    config: Option<solana_program::pubkey::Pubkey>,
    pool_authority: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    damm_config: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    token_a_mint: Option<solana_program::pubkey::Pubkey>,
    token_b_mint: Option<solana_program::pubkey::Pubkey>,
    a_vault: Option<solana_program::pubkey::Pubkey>,
    b_vault: Option<solana_program::pubkey::Pubkey>,
    a_token_vault: Option<solana_program::pubkey::Pubkey>,
    b_token_vault: Option<solana_program::pubkey::Pubkey>,
    a_vault_lp_mint: Option<solana_program::pubkey::Pubkey>,
    b_vault_lp_mint: Option<solana_program::pubkey::Pubkey>,
    a_vault_lp: Option<solana_program::pubkey::Pubkey>,
    b_vault_lp: Option<solana_program::pubkey::Pubkey>,
    base_vault: Option<solana_program::pubkey::Pubkey>,
    quote_vault: Option<solana_program::pubkey::Pubkey>,
    virtual_pool_lp: Option<solana_program::pubkey::Pubkey>,
    protocol_token_a_fee: Option<solana_program::pubkey::Pubkey>,
    protocol_token_b_fee: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    mint_metadata: Option<solana_program::pubkey::Pubkey>,
    metadata_program: Option<solana_program::pubkey::Pubkey>,
    amm_program: Option<solana_program::pubkey::Pubkey>,
    vault_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MigrateMeteoraDammBuilder {
    pub fn new() -> Self { Self::default() }

    /// virtual pool
    #[inline(always)]
    pub fn virtual_pool(&mut self, virtual_pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.virtual_pool = Some(virtual_pool);
        self
    }

    #[inline(always)]
    pub fn migration_metadata(
        &mut self,
        migration_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.migration_metadata = Some(migration_metadata);
        self
    }

    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    /// `[optional account, default to 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM']`
    #[inline(always)]
    pub fn pool_authority(&mut self, pool_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    /// pool config
    #[inline(always)]
    pub fn damm_config(&mut self, damm_config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.damm_config = Some(damm_config);
        self
    }

    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn token_a_mint(&mut self, token_a_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_mint = Some(token_a_mint);
        self
    }

    #[inline(always)]
    pub fn token_b_mint(&mut self, token_b_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_mint = Some(token_b_mint);
        self
    }

    #[inline(always)]
    pub fn a_vault(&mut self, a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.a_vault = Some(a_vault);
        self
    }

    #[inline(always)]
    pub fn b_vault(&mut self, b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.b_vault = Some(b_vault);
        self
    }

    #[inline(always)]
    pub fn a_token_vault(&mut self, a_token_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.a_token_vault = Some(a_token_vault);
        self
    }

    #[inline(always)]
    pub fn b_token_vault(&mut self, b_token_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.b_token_vault = Some(b_token_vault);
        self
    }

    #[inline(always)]
    pub fn a_vault_lp_mint(
        &mut self,
        a_vault_lp_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.a_vault_lp_mint = Some(a_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn b_vault_lp_mint(
        &mut self,
        b_vault_lp_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.b_vault_lp_mint = Some(b_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn a_vault_lp(&mut self, a_vault_lp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.a_vault_lp = Some(a_vault_lp);
        self
    }

    #[inline(always)]
    pub fn b_vault_lp(&mut self, b_vault_lp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.b_vault_lp = Some(b_vault_lp);
        self
    }

    #[inline(always)]
    pub fn base_vault(&mut self, base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_vault = Some(base_vault);
        self
    }

    #[inline(always)]
    pub fn quote_vault(&mut self, quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_vault = Some(quote_vault);
        self
    }

    #[inline(always)]
    pub fn virtual_pool_lp(
        &mut self,
        virtual_pool_lp: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.virtual_pool_lp = Some(virtual_pool_lp);
        self
    }

    #[inline(always)]
    pub fn protocol_token_a_fee(
        &mut self,
        protocol_token_a_fee: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_token_a_fee = Some(protocol_token_a_fee);
        self
    }

    #[inline(always)]
    pub fn protocol_token_b_fee(
        &mut self,
        protocol_token_b_fee: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_token_b_fee = Some(protocol_token_b_fee);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn mint_metadata(&mut self, mint_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_metadata = Some(mint_metadata);
        self
    }

    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_program = Some(metadata_program);
        self
    }

    /// `[optional account, default to 'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB']`
    #[inline(always)]
    pub fn amm_program(&mut self, amm_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_program = Some(amm_program);
        self
    }

    #[inline(always)]
    pub fn vault_program(&mut self, vault_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault_program = Some(vault_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// token_program
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MigrateMeteoraDamm {
            virtual_pool: self.virtual_pool.expect("virtual_pool is not set"),
            migration_metadata: self
                .migration_metadata
                .expect("migration_metadata is not set"),
            config: self.config.expect("config is not set"),
            pool_authority: self.pool_authority.unwrap_or(solana_program::pubkey!(
                "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
            )),
            pool: self.pool.expect("pool is not set"),
            damm_config: self.damm_config.expect("damm_config is not set"),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            token_a_mint: self.token_a_mint.expect("token_a_mint is not set"),
            token_b_mint: self.token_b_mint.expect("token_b_mint is not set"),
            a_vault: self.a_vault.expect("a_vault is not set"),
            b_vault: self.b_vault.expect("b_vault is not set"),
            a_token_vault: self.a_token_vault.expect("a_token_vault is not set"),
            b_token_vault: self.b_token_vault.expect("b_token_vault is not set"),
            a_vault_lp_mint: self.a_vault_lp_mint.expect("a_vault_lp_mint is not set"),
            b_vault_lp_mint: self.b_vault_lp_mint.expect("b_vault_lp_mint is not set"),
            a_vault_lp: self.a_vault_lp.expect("a_vault_lp is not set"),
            b_vault_lp: self.b_vault_lp.expect("b_vault_lp is not set"),
            base_vault: self.base_vault.expect("base_vault is not set"),
            quote_vault: self.quote_vault.expect("quote_vault is not set"),
            virtual_pool_lp: self.virtual_pool_lp.expect("virtual_pool_lp is not set"),
            protocol_token_a_fee: self
                .protocol_token_a_fee
                .expect("protocol_token_a_fee is not set"),
            protocol_token_b_fee: self
                .protocol_token_b_fee
                .expect("protocol_token_b_fee is not set"),
            payer: self.payer.expect("payer is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            mint_metadata: self.mint_metadata.expect("mint_metadata is not set"),
            metadata_program: self.metadata_program.expect("metadata_program is not set"),
            amm_program: self.amm_program.unwrap_or(solana_program::pubkey!(
                "Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB"
            )),
            vault_program: self.vault_program.expect("vault_program is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self
                .associated_token_program
                .expect("associated_token_program is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `migrate_meteora_damm` CPI accounts.
pub struct MigrateMeteoraDammCpiAccounts<'a, 'b> {
    /// virtual pool
    pub virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub migration_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// pool config
    pub damm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtual_pool_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_a_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_b_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `migrate_meteora_damm` CPI instruction.
pub struct MigrateMeteoraDammCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// virtual pool
    pub virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub migration_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// pool config
    pub damm_config: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub b_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtual_pool_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_a_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_b_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// token_program
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> MigrateMeteoraDammCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MigrateMeteoraDammCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            virtual_pool: accounts.virtual_pool,
            migration_metadata: accounts.migration_metadata,
            config: accounts.config,
            pool_authority: accounts.pool_authority,
            pool: accounts.pool,
            damm_config: accounts.damm_config,
            lp_mint: accounts.lp_mint,
            token_a_mint: accounts.token_a_mint,
            token_b_mint: accounts.token_b_mint,
            a_vault: accounts.a_vault,
            b_vault: accounts.b_vault,
            a_token_vault: accounts.a_token_vault,
            b_token_vault: accounts.b_token_vault,
            a_vault_lp_mint: accounts.a_vault_lp_mint,
            b_vault_lp_mint: accounts.b_vault_lp_mint,
            a_vault_lp: accounts.a_vault_lp,
            b_vault_lp: accounts.b_vault_lp,
            base_vault: accounts.base_vault,
            quote_vault: accounts.quote_vault,
            virtual_pool_lp: accounts.virtual_pool_lp,
            protocol_token_a_fee: accounts.protocol_token_a_fee,
            protocol_token_b_fee: accounts.protocol_token_b_fee,
            payer: accounts.payer,
            rent: accounts.rent,
            mint_metadata: accounts.mint_metadata,
            metadata_program: accounts.metadata_program,
            amm_program: accounts.amm_program,
            vault_program: accounts.vault_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(31 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.virtual_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.migration_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.damm_config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_b_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.a_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.b_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.a_token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.b_token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.a_vault_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.b_vault_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.a_vault_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.b_vault_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.virtual_pool_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_token_a_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_token_b_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.mint_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&MigrateMeteoraDammInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(32 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.virtual_pool.clone());
        account_infos.push(self.migration_metadata.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.pool_authority.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.damm_config.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.token_a_mint.clone());
        account_infos.push(self.token_b_mint.clone());
        account_infos.push(self.a_vault.clone());
        account_infos.push(self.b_vault.clone());
        account_infos.push(self.a_token_vault.clone());
        account_infos.push(self.b_token_vault.clone());
        account_infos.push(self.a_vault_lp_mint.clone());
        account_infos.push(self.b_vault_lp_mint.clone());
        account_infos.push(self.a_vault_lp.clone());
        account_infos.push(self.b_vault_lp.clone());
        account_infos.push(self.base_vault.clone());
        account_infos.push(self.quote_vault.clone());
        account_infos.push(self.virtual_pool_lp.clone());
        account_infos.push(self.protocol_token_a_fee.clone());
        account_infos.push(self.protocol_token_b_fee.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.mint_metadata.clone());
        account_infos.push(self.metadata_program.clone());
        account_infos.push(self.amm_program.clone());
        account_infos.push(self.vault_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MigrateMeteoraDamm` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` virtual_pool
///   1. `[writable]` migration_metadata
///   2. `[]` config
///   3. `[writable]` pool_authority
///   4. `[writable]` pool
///   5. `[]` damm_config
///   6. `[writable]` lp_mint
///   7. `[writable]` token_a_mint
///   8. `[]` token_b_mint
///   9. `[writable]` a_vault
///   10. `[writable]` b_vault
///   11. `[writable]` a_token_vault
///   12. `[writable]` b_token_vault
///   13. `[writable]` a_vault_lp_mint
///   14. `[writable]` b_vault_lp_mint
///   15. `[writable]` a_vault_lp
///   16. `[writable]` b_vault_lp
///   17. `[writable]` base_vault
///   18. `[writable]` quote_vault
///   19. `[writable]` virtual_pool_lp
///   20. `[writable]` protocol_token_a_fee
///   21. `[writable]` protocol_token_b_fee
///   22. `[writable, signer]` payer
///   23. `[]` rent
///   24. `[writable]` mint_metadata
///   25. `[]` metadata_program
///   26. `[]` amm_program
///   27. `[]` vault_program
///   28. `[]` token_program
///   29. `[]` associated_token_program
///   30. `[]` system_program
#[derive(Clone, Debug)]
pub struct MigrateMeteoraDammCpiBuilder<'a, 'b> {
    instruction: Box<MigrateMeteoraDammCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MigrateMeteoraDammCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MigrateMeteoraDammCpiBuilderInstruction {
            __program: program,
            virtual_pool: None,
            migration_metadata: None,
            config: None,
            pool_authority: None,
            pool: None,
            damm_config: None,
            lp_mint: None,
            token_a_mint: None,
            token_b_mint: None,
            a_vault: None,
            b_vault: None,
            a_token_vault: None,
            b_token_vault: None,
            a_vault_lp_mint: None,
            b_vault_lp_mint: None,
            a_vault_lp: None,
            b_vault_lp: None,
            base_vault: None,
            quote_vault: None,
            virtual_pool_lp: None,
            protocol_token_a_fee: None,
            protocol_token_b_fee: None,
            payer: None,
            rent: None,
            mint_metadata: None,
            metadata_program: None,
            amm_program: None,
            vault_program: None,
            token_program: None,
            associated_token_program: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// virtual pool
    #[inline(always)]
    pub fn virtual_pool(
        &mut self,
        virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtual_pool = Some(virtual_pool);
        self
    }

    #[inline(always)]
    pub fn migration_metadata(
        &mut self,
        migration_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.migration_metadata = Some(migration_metadata);
        self
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn pool_authority(
        &mut self,
        pool_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    /// pool config
    #[inline(always)]
    pub fn damm_config(
        &mut self,
        damm_config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.damm_config = Some(damm_config);
        self
    }

    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn token_a_mint(
        &mut self,
        token_a_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_mint = Some(token_a_mint);
        self
    }

    #[inline(always)]
    pub fn token_b_mint(
        &mut self,
        token_b_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_mint = Some(token_b_mint);
        self
    }

    #[inline(always)]
    pub fn a_vault(
        &mut self,
        a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault = Some(a_vault);
        self
    }

    #[inline(always)]
    pub fn b_vault(
        &mut self,
        b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_vault = Some(b_vault);
        self
    }

    #[inline(always)]
    pub fn a_token_vault(
        &mut self,
        a_token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_token_vault = Some(a_token_vault);
        self
    }

    #[inline(always)]
    pub fn b_token_vault(
        &mut self,
        b_token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_token_vault = Some(b_token_vault);
        self
    }

    #[inline(always)]
    pub fn a_vault_lp_mint(
        &mut self,
        a_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault_lp_mint = Some(a_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn b_vault_lp_mint(
        &mut self,
        b_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_vault_lp_mint = Some(b_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn a_vault_lp(
        &mut self,
        a_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.a_vault_lp = Some(a_vault_lp);
        self
    }

    #[inline(always)]
    pub fn b_vault_lp(
        &mut self,
        b_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.b_vault_lp = Some(b_vault_lp);
        self
    }

    #[inline(always)]
    pub fn base_vault(
        &mut self,
        base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault = Some(base_vault);
        self
    }

    #[inline(always)]
    pub fn quote_vault(
        &mut self,
        quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_vault = Some(quote_vault);
        self
    }

    #[inline(always)]
    pub fn virtual_pool_lp(
        &mut self,
        virtual_pool_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtual_pool_lp = Some(virtual_pool_lp);
        self
    }

    #[inline(always)]
    pub fn protocol_token_a_fee(
        &mut self,
        protocol_token_a_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_token_a_fee = Some(protocol_token_a_fee);
        self
    }

    #[inline(always)]
    pub fn protocol_token_b_fee(
        &mut self,
        protocol_token_b_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_token_b_fee = Some(protocol_token_b_fee);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn mint_metadata(
        &mut self,
        mint_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_metadata = Some(mint_metadata);
        self
    }

    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_program = Some(metadata_program);
        self
    }

    #[inline(always)]
    pub fn amm_program(
        &mut self,
        amm_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_program = Some(amm_program);
        self
    }

    #[inline(always)]
    pub fn vault_program(
        &mut self,
        vault_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_program = Some(vault_program);
        self
    }

    /// token_program
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// System program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = MigrateMeteoraDammCpi {
            __program: self.instruction.__program,

            virtual_pool: self
                .instruction
                .virtual_pool
                .expect("virtual_pool is not set"),

            migration_metadata: self
                .instruction
                .migration_metadata
                .expect("migration_metadata is not set"),

            config: self.instruction.config.expect("config is not set"),

            pool_authority: self
                .instruction
                .pool_authority
                .expect("pool_authority is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            damm_config: self
                .instruction
                .damm_config
                .expect("damm_config is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            token_a_mint: self
                .instruction
                .token_a_mint
                .expect("token_a_mint is not set"),

            token_b_mint: self
                .instruction
                .token_b_mint
                .expect("token_b_mint is not set"),

            a_vault: self.instruction.a_vault.expect("a_vault is not set"),

            b_vault: self.instruction.b_vault.expect("b_vault is not set"),

            a_token_vault: self
                .instruction
                .a_token_vault
                .expect("a_token_vault is not set"),

            b_token_vault: self
                .instruction
                .b_token_vault
                .expect("b_token_vault is not set"),

            a_vault_lp_mint: self
                .instruction
                .a_vault_lp_mint
                .expect("a_vault_lp_mint is not set"),

            b_vault_lp_mint: self
                .instruction
                .b_vault_lp_mint
                .expect("b_vault_lp_mint is not set"),

            a_vault_lp: self.instruction.a_vault_lp.expect("a_vault_lp is not set"),

            b_vault_lp: self.instruction.b_vault_lp.expect("b_vault_lp is not set"),

            base_vault: self.instruction.base_vault.expect("base_vault is not set"),

            quote_vault: self
                .instruction
                .quote_vault
                .expect("quote_vault is not set"),

            virtual_pool_lp: self
                .instruction
                .virtual_pool_lp
                .expect("virtual_pool_lp is not set"),

            protocol_token_a_fee: self
                .instruction
                .protocol_token_a_fee
                .expect("protocol_token_a_fee is not set"),

            protocol_token_b_fee: self
                .instruction
                .protocol_token_b_fee
                .expect("protocol_token_b_fee is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            mint_metadata: self
                .instruction
                .mint_metadata
                .expect("mint_metadata is not set"),

            metadata_program: self
                .instruction
                .metadata_program
                .expect("metadata_program is not set"),

            amm_program: self
                .instruction
                .amm_program
                .expect("amm_program is not set"),

            vault_program: self
                .instruction
                .vault_program
                .expect("vault_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MigrateMeteoraDammCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    virtual_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    migration_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    damm_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_vault_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    a_vault_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    b_vault_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    virtual_pool_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_token_a_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_token_b_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
