//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::{
    LiquidityDistributionParameters, LockedVestingParams, PoolFeeParameters, TokenSupplyParams,
};

/// Accounts.
#[derive(Debug)]
pub struct CreateConfig {
    pub config: solana_program::pubkey::Pubkey,

    pub fee_claimer: solana_program::pubkey::Pubkey,

    pub leftover_receiver: solana_program::pubkey::Pubkey,
    /// quote mint
    pub quote_mint: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,

    pub event_authority: solana_program::pubkey::Pubkey,

    pub program: solana_program::pubkey::Pubkey,
}

impl CreateConfig {
    pub fn instruction(
        &self,
        args: CreateConfigInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateConfigInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.config,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_claimer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.leftover_receiver,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&CreateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigInstructionData {
    discriminator: [u8; 8],
}

impl CreateConfigInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [201, 207, 243, 114, 75, 111, 47, 189],
        }
    }
}

impl Default for CreateConfigInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateConfigInstructionArgs {
    pub pool_fees: PoolFeeParameters,
    pub collect_fee_mode: u8,
    pub migration_option: u8,
    pub activation_type: u8,
    pub token_type: u8,
    pub token_decimal: u8,
    pub partner_lp_percentage: u8,
    pub partner_locked_lp_percentage: u8,
    pub creator_lp_percentage: u8,
    pub creator_locked_lp_percentage: u8,
    pub migration_quote_threshold: u64,
    pub sqrt_start_price: u128,
    pub locked_vesting: LockedVestingParams,
    pub migration_fee_option: u8,
    pub token_supply: Option<TokenSupplyParams>,
    pub creator_trading_fee_percentage: u8,
    pub padding0: [u8; 7],
    pub padding1: [u64; 7],
    pub curve: Vec<LiquidityDistributionParameters>,
}

/// Instruction builder for `CreateConfig`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` config
///   1. `[]` fee_claimer
///   2. `[]` leftover_receiver
///   3. `[]` quote_mint
///   4. `[writable, signer]` payer
///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   6. `[]` event_authority
///   7. `[]` program
#[derive(Clone, Debug, Default)]
pub struct CreateConfigBuilder {
    config: Option<solana_program::pubkey::Pubkey>,
    fee_claimer: Option<solana_program::pubkey::Pubkey>,
    leftover_receiver: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    event_authority: Option<solana_program::pubkey::Pubkey>,
    program: Option<solana_program::pubkey::Pubkey>,
    pool_fees: Option<PoolFeeParameters>,
    collect_fee_mode: Option<u8>,
    migration_option: Option<u8>,
    activation_type: Option<u8>,
    token_type: Option<u8>,
    token_decimal: Option<u8>,
    partner_lp_percentage: Option<u8>,
    partner_locked_lp_percentage: Option<u8>,
    creator_lp_percentage: Option<u8>,
    creator_locked_lp_percentage: Option<u8>,
    migration_quote_threshold: Option<u64>,
    sqrt_start_price: Option<u128>,
    locked_vesting: Option<LockedVestingParams>,
    migration_fee_option: Option<u8>,
    token_supply: Option<TokenSupplyParams>,
    creator_trading_fee_percentage: Option<u8>,
    padding0: Option<[u8; 7]>,
    padding1: Option<[u64; 7]>,
    curve: Option<Vec<LiquidityDistributionParameters>>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateConfigBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn fee_claimer(&mut self, fee_claimer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_claimer = Some(fee_claimer);
        self
    }

    #[inline(always)]
    pub fn leftover_receiver(
        &mut self,
        leftover_receiver: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.leftover_receiver = Some(leftover_receiver);
        self
    }

    /// quote mint
    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn pool_fees(&mut self, pool_fees: PoolFeeParameters) -> &mut Self {
        self.pool_fees = Some(pool_fees);
        self
    }

    #[inline(always)]
    pub fn collect_fee_mode(&mut self, collect_fee_mode: u8) -> &mut Self {
        self.collect_fee_mode = Some(collect_fee_mode);
        self
    }

    #[inline(always)]
    pub fn migration_option(&mut self, migration_option: u8) -> &mut Self {
        self.migration_option = Some(migration_option);
        self
    }

    #[inline(always)]
    pub fn activation_type(&mut self, activation_type: u8) -> &mut Self {
        self.activation_type = Some(activation_type);
        self
    }

    #[inline(always)]
    pub fn token_type(&mut self, token_type: u8) -> &mut Self {
        self.token_type = Some(token_type);
        self
    }

    #[inline(always)]
    pub fn token_decimal(&mut self, token_decimal: u8) -> &mut Self {
        self.token_decimal = Some(token_decimal);
        self
    }

    #[inline(always)]
    pub fn partner_lp_percentage(&mut self, partner_lp_percentage: u8) -> &mut Self {
        self.partner_lp_percentage = Some(partner_lp_percentage);
        self
    }

    #[inline(always)]
    pub fn partner_locked_lp_percentage(&mut self, partner_locked_lp_percentage: u8) -> &mut Self {
        self.partner_locked_lp_percentage = Some(partner_locked_lp_percentage);
        self
    }

    #[inline(always)]
    pub fn creator_lp_percentage(&mut self, creator_lp_percentage: u8) -> &mut Self {
        self.creator_lp_percentage = Some(creator_lp_percentage);
        self
    }

    #[inline(always)]
    pub fn creator_locked_lp_percentage(&mut self, creator_locked_lp_percentage: u8) -> &mut Self {
        self.creator_locked_lp_percentage = Some(creator_locked_lp_percentage);
        self
    }

    #[inline(always)]
    pub fn migration_quote_threshold(&mut self, migration_quote_threshold: u64) -> &mut Self {
        self.migration_quote_threshold = Some(migration_quote_threshold);
        self
    }

    #[inline(always)]
    pub fn sqrt_start_price(&mut self, sqrt_start_price: u128) -> &mut Self {
        self.sqrt_start_price = Some(sqrt_start_price);
        self
    }

    #[inline(always)]
    pub fn locked_vesting(&mut self, locked_vesting: LockedVestingParams) -> &mut Self {
        self.locked_vesting = Some(locked_vesting);
        self
    }

    #[inline(always)]
    pub fn migration_fee_option(&mut self, migration_fee_option: u8) -> &mut Self {
        self.migration_fee_option = Some(migration_fee_option);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn token_supply(&mut self, token_supply: TokenSupplyParams) -> &mut Self {
        self.token_supply = Some(token_supply);
        self
    }

    #[inline(always)]
    pub fn creator_trading_fee_percentage(
        &mut self,
        creator_trading_fee_percentage: u8,
    ) -> &mut Self {
        self.creator_trading_fee_percentage = Some(creator_trading_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn padding0(&mut self, padding0: [u8; 7]) -> &mut Self {
        self.padding0 = Some(padding0);
        self
    }

    #[inline(always)]
    pub fn padding1(&mut self, padding1: [u64; 7]) -> &mut Self {
        self.padding1 = Some(padding1);
        self
    }

    #[inline(always)]
    pub fn curve(&mut self, curve: Vec<LiquidityDistributionParameters>) -> &mut Self {
        self.curve = Some(curve);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateConfig {
            config: self.config.expect("config is not set"),
            fee_claimer: self.fee_claimer.expect("fee_claimer is not set"),
            leftover_receiver: self
                .leftover_receiver
                .expect("leftover_receiver is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            payer: self.payer.expect("payer is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = CreateConfigInstructionArgs {
            pool_fees: self.pool_fees.clone().expect("pool_fees is not set"),
            collect_fee_mode: self
                .collect_fee_mode
                .clone()
                .expect("collect_fee_mode is not set"),
            migration_option: self
                .migration_option
                .clone()
                .expect("migration_option is not set"),
            activation_type: self
                .activation_type
                .clone()
                .expect("activation_type is not set"),
            token_type: self.token_type.clone().expect("token_type is not set"),
            token_decimal: self
                .token_decimal
                .clone()
                .expect("token_decimal is not set"),
            partner_lp_percentage: self
                .partner_lp_percentage
                .clone()
                .expect("partner_lp_percentage is not set"),
            partner_locked_lp_percentage: self
                .partner_locked_lp_percentage
                .clone()
                .expect("partner_locked_lp_percentage is not set"),
            creator_lp_percentage: self
                .creator_lp_percentage
                .clone()
                .expect("creator_lp_percentage is not set"),
            creator_locked_lp_percentage: self
                .creator_locked_lp_percentage
                .clone()
                .expect("creator_locked_lp_percentage is not set"),
            migration_quote_threshold: self
                .migration_quote_threshold
                .clone()
                .expect("migration_quote_threshold is not set"),
            sqrt_start_price: self
                .sqrt_start_price
                .clone()
                .expect("sqrt_start_price is not set"),
            locked_vesting: self
                .locked_vesting
                .clone()
                .expect("locked_vesting is not set"),
            migration_fee_option: self
                .migration_fee_option
                .clone()
                .expect("migration_fee_option is not set"),
            token_supply: self.token_supply.clone(),
            creator_trading_fee_percentage: self
                .creator_trading_fee_percentage
                .clone()
                .expect("creator_trading_fee_percentage is not set"),
            padding0: self.padding0.clone().expect("padding0 is not set"),
            padding1: self.padding1.clone().expect("padding1 is not set"),
            curve: self.curve.clone().expect("curve is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_config` CPI accounts.
pub struct CreateConfigCpiAccounts<'a, 'b> {
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_claimer: &'b solana_program::account_info::AccountInfo<'a>,

    pub leftover_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    /// quote mint
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_config` CPI instruction.
pub struct CreateConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_claimer: &'b solana_program::account_info::AccountInfo<'a>,

    pub leftover_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    /// quote mint
    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateConfigInstructionArgs,
}

impl<'a, 'b> CreateConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateConfigCpiAccounts<'a, 'b>,
        args: CreateConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            config: accounts.config,
            fee_claimer: accounts.fee_claimer,
            leftover_receiver: accounts.leftover_receiver,
            quote_mint: accounts.quote_mint,
            payer: accounts.payer,
            system_program: accounts.system_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(8 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.config.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_claimer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.leftover_receiver.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&CreateConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.fee_claimer.clone());
        account_infos.push(self.leftover_receiver.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` config
///   1. `[]` fee_claimer
///   2. `[]` leftover_receiver
///   3. `[]` quote_mint
///   4. `[writable, signer]` payer
///   5. `[]` system_program
///   6. `[]` event_authority
///   7. `[]` program
#[derive(Clone, Debug)]
pub struct CreateConfigCpiBuilder<'a, 'b> {
    instruction: Box<CreateConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateConfigCpiBuilderInstruction {
            __program: program,
            config: None,
            fee_claimer: None,
            leftover_receiver: None,
            quote_mint: None,
            payer: None,
            system_program: None,
            event_authority: None,
            program: None,
            pool_fees: None,
            collect_fee_mode: None,
            migration_option: None,
            activation_type: None,
            token_type: None,
            token_decimal: None,
            partner_lp_percentage: None,
            partner_locked_lp_percentage: None,
            creator_lp_percentage: None,
            creator_locked_lp_percentage: None,
            migration_quote_threshold: None,
            sqrt_start_price: None,
            locked_vesting: None,
            migration_fee_option: None,
            token_supply: None,
            creator_trading_fee_percentage: None,
            padding0: None,
            padding1: None,
            curve: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn fee_claimer(
        &mut self,
        fee_claimer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_claimer = Some(fee_claimer);
        self
    }

    #[inline(always)]
    pub fn leftover_receiver(
        &mut self,
        leftover_receiver: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.leftover_receiver = Some(leftover_receiver);
        self
    }

    /// quote mint
    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(
        &mut self,
        program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn pool_fees(&mut self, pool_fees: PoolFeeParameters) -> &mut Self {
        self.instruction.pool_fees = Some(pool_fees);
        self
    }

    #[inline(always)]
    pub fn collect_fee_mode(&mut self, collect_fee_mode: u8) -> &mut Self {
        self.instruction.collect_fee_mode = Some(collect_fee_mode);
        self
    }

    #[inline(always)]
    pub fn migration_option(&mut self, migration_option: u8) -> &mut Self {
        self.instruction.migration_option = Some(migration_option);
        self
    }

    #[inline(always)]
    pub fn activation_type(&mut self, activation_type: u8) -> &mut Self {
        self.instruction.activation_type = Some(activation_type);
        self
    }

    #[inline(always)]
    pub fn token_type(&mut self, token_type: u8) -> &mut Self {
        self.instruction.token_type = Some(token_type);
        self
    }

    #[inline(always)]
    pub fn token_decimal(&mut self, token_decimal: u8) -> &mut Self {
        self.instruction.token_decimal = Some(token_decimal);
        self
    }

    #[inline(always)]
    pub fn partner_lp_percentage(&mut self, partner_lp_percentage: u8) -> &mut Self {
        self.instruction.partner_lp_percentage = Some(partner_lp_percentage);
        self
    }

    #[inline(always)]
    pub fn partner_locked_lp_percentage(&mut self, partner_locked_lp_percentage: u8) -> &mut Self {
        self.instruction.partner_locked_lp_percentage = Some(partner_locked_lp_percentage);
        self
    }

    #[inline(always)]
    pub fn creator_lp_percentage(&mut self, creator_lp_percentage: u8) -> &mut Self {
        self.instruction.creator_lp_percentage = Some(creator_lp_percentage);
        self
    }

    #[inline(always)]
    pub fn creator_locked_lp_percentage(&mut self, creator_locked_lp_percentage: u8) -> &mut Self {
        self.instruction.creator_locked_lp_percentage = Some(creator_locked_lp_percentage);
        self
    }

    #[inline(always)]
    pub fn migration_quote_threshold(&mut self, migration_quote_threshold: u64) -> &mut Self {
        self.instruction.migration_quote_threshold = Some(migration_quote_threshold);
        self
    }

    #[inline(always)]
    pub fn sqrt_start_price(&mut self, sqrt_start_price: u128) -> &mut Self {
        self.instruction.sqrt_start_price = Some(sqrt_start_price);
        self
    }

    #[inline(always)]
    pub fn locked_vesting(&mut self, locked_vesting: LockedVestingParams) -> &mut Self {
        self.instruction.locked_vesting = Some(locked_vesting);
        self
    }

    #[inline(always)]
    pub fn migration_fee_option(&mut self, migration_fee_option: u8) -> &mut Self {
        self.instruction.migration_fee_option = Some(migration_fee_option);
        self
    }

    /// `[optional argument]`
    #[inline(always)]
    pub fn token_supply(&mut self, token_supply: TokenSupplyParams) -> &mut Self {
        self.instruction.token_supply = Some(token_supply);
        self
    }

    #[inline(always)]
    pub fn creator_trading_fee_percentage(
        &mut self,
        creator_trading_fee_percentage: u8,
    ) -> &mut Self {
        self.instruction.creator_trading_fee_percentage = Some(creator_trading_fee_percentage);
        self
    }

    #[inline(always)]
    pub fn padding0(&mut self, padding0: [u8; 7]) -> &mut Self {
        self.instruction.padding0 = Some(padding0);
        self
    }

    #[inline(always)]
    pub fn padding1(&mut self, padding1: [u64; 7]) -> &mut Self {
        self.instruction.padding1 = Some(padding1);
        self
    }

    #[inline(always)]
    pub fn curve(&mut self, curve: Vec<LiquidityDistributionParameters>) -> &mut Self {
        self.instruction.curve = Some(curve);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateConfigInstructionArgs {
            pool_fees: self
                .instruction
                .pool_fees
                .clone()
                .expect("pool_fees is not set"),
            collect_fee_mode: self
                .instruction
                .collect_fee_mode
                .clone()
                .expect("collect_fee_mode is not set"),
            migration_option: self
                .instruction
                .migration_option
                .clone()
                .expect("migration_option is not set"),
            activation_type: self
                .instruction
                .activation_type
                .clone()
                .expect("activation_type is not set"),
            token_type: self
                .instruction
                .token_type
                .clone()
                .expect("token_type is not set"),
            token_decimal: self
                .instruction
                .token_decimal
                .clone()
                .expect("token_decimal is not set"),
            partner_lp_percentage: self
                .instruction
                .partner_lp_percentage
                .clone()
                .expect("partner_lp_percentage is not set"),
            partner_locked_lp_percentage: self
                .instruction
                .partner_locked_lp_percentage
                .clone()
                .expect("partner_locked_lp_percentage is not set"),
            creator_lp_percentage: self
                .instruction
                .creator_lp_percentage
                .clone()
                .expect("creator_lp_percentage is not set"),
            creator_locked_lp_percentage: self
                .instruction
                .creator_locked_lp_percentage
                .clone()
                .expect("creator_locked_lp_percentage is not set"),
            migration_quote_threshold: self
                .instruction
                .migration_quote_threshold
                .clone()
                .expect("migration_quote_threshold is not set"),
            sqrt_start_price: self
                .instruction
                .sqrt_start_price
                .clone()
                .expect("sqrt_start_price is not set"),
            locked_vesting: self
                .instruction
                .locked_vesting
                .clone()
                .expect("locked_vesting is not set"),
            migration_fee_option: self
                .instruction
                .migration_fee_option
                .clone()
                .expect("migration_fee_option is not set"),
            token_supply: self.instruction.token_supply.clone(),
            creator_trading_fee_percentage: self
                .instruction
                .creator_trading_fee_percentage
                .clone()
                .expect("creator_trading_fee_percentage is not set"),
            padding0: self
                .instruction
                .padding0
                .clone()
                .expect("padding0 is not set"),
            padding1: self
                .instruction
                .padding1
                .clone()
                .expect("padding1 is not set"),
            curve: self.instruction.curve.clone().expect("curve is not set"),
        };
        let instruction = CreateConfigCpi {
            __program: self.instruction.__program,

            config: self.instruction.config.expect("config is not set"),

            fee_claimer: self
                .instruction
                .fee_claimer
                .expect("fee_claimer is not set"),

            leftover_receiver: self
                .instruction
                .leftover_receiver
                .expect("leftover_receiver is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct CreateConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_claimer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    leftover_receiver: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_fees: Option<PoolFeeParameters>,
    collect_fee_mode: Option<u8>,
    migration_option: Option<u8>,
    activation_type: Option<u8>,
    token_type: Option<u8>,
    token_decimal: Option<u8>,
    partner_lp_percentage: Option<u8>,
    partner_locked_lp_percentage: Option<u8>,
    creator_lp_percentage: Option<u8>,
    creator_locked_lp_percentage: Option<u8>,
    migration_quote_threshold: Option<u64>,
    sqrt_start_price: Option<u128>,
    locked_vesting: Option<LockedVestingParams>,
    migration_fee_option: Option<u8>,
    token_supply: Option<TokenSupplyParams>,
    creator_trading_fee_percentage: Option<u8>,
    padding0: Option<[u8; 7]>,
    padding1: Option<[u64; 7]>,
    curve: Option<Vec<LiquidityDistributionParameters>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
