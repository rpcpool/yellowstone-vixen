//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct MigrationDammV2 {
    /// virtual pool
    pub virtual_pool: solana_program::pubkey::Pubkey,
    /// migration metadata
    pub migration_metadata: solana_program::pubkey::Pubkey,
    /// virtual pool config key
    pub config: solana_program::pubkey::Pubkey,

    pub pool_authority: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub first_position_nft_mint: solana_program::pubkey::Pubkey,

    pub first_position_nft_account: solana_program::pubkey::Pubkey,

    pub first_position: solana_program::pubkey::Pubkey,

    pub second_position_nft_mint: Option<solana_program::pubkey::Pubkey>,

    pub second_position_nft_account: Option<solana_program::pubkey::Pubkey>,

    pub second_position: Option<solana_program::pubkey::Pubkey>,

    pub damm_pool_authority: solana_program::pubkey::Pubkey,

    pub amm_program: solana_program::pubkey::Pubkey,

    pub base_mint: solana_program::pubkey::Pubkey,

    pub quote_mint: solana_program::pubkey::Pubkey,

    pub token_a_vault: solana_program::pubkey::Pubkey,

    pub token_b_vault: solana_program::pubkey::Pubkey,

    pub base_vault: solana_program::pubkey::Pubkey,

    pub quote_vault: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub token_base_program: solana_program::pubkey::Pubkey,

    pub token_quote_program: solana_program::pubkey::Pubkey,

    pub token2022_program: solana_program::pubkey::Pubkey,

    pub damm_event_authority: solana_program::pubkey::Pubkey,
    /// System program.
    pub system_program: solana_program::pubkey::Pubkey,
}

impl MigrationDammV2 {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(25 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.virtual_pool,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.migration_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.first_position_nft_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.first_position_nft_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.first_position,
            false,
        ));
        if let Some(second_position_nft_mint) = self.second_position_nft_mint {
            accounts.push(solana_program::instruction::AccountMeta::new(
                second_position_nft_mint,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::DYNAMIC_BONDING_CURVE_ID,
                false,
            ));
        }
        if let Some(second_position_nft_account) = self.second_position_nft_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                second_position_nft_account,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::DYNAMIC_BONDING_CURVE_ID,
                false,
            ));
        }
        if let Some(second_position) = self.second_position {
            accounts.push(solana_program::instruction::AccountMeta::new(
                second_position,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::DYNAMIC_BONDING_CURVE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.damm_pool_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.amm_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_a_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_b_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.base_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.quote_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_base_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_quote_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token2022_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.damm_event_authority,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&MigrationDammV2InstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct MigrationDammV2InstructionData {
    discriminator: [u8; 8],
}

impl MigrationDammV2InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [156, 169, 230, 103, 53, 228, 80, 64],
        }
    }
}

impl Default for MigrationDammV2InstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `MigrationDammV2`.
///
/// ### Accounts:
///
///   0. `[writable]` virtual_pool
///   1. `[]` migration_metadata
///   2. `[]` config
///   3. `[writable, optional]` pool_authority (default to `FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM`)
///   4. `[writable]` pool
///   5. `[writable]` first_position_nft_mint
///   6. `[writable]` first_position_nft_account
///   7. `[writable]` first_position
///   8. `[writable, optional]` second_position_nft_mint
///   9. `[writable, optional]` second_position_nft_account
///   10. `[writable, optional]` second_position
///   11. `[]` damm_pool_authority
///   12. `[optional]` amm_program (default to `cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG`)
///   13. `[writable]` base_mint
///   14. `[writable]` quote_mint
///   15. `[writable]` token_a_vault
///   16. `[writable]` token_b_vault
///   17. `[writable]` base_vault
///   18. `[writable]` quote_vault
///   19. `[writable, signer]` payer
///   20. `[]` token_base_program
///   21. `[]` token_quote_program
///   22. `[]` token2022_program
///   23. `[]` damm_event_authority
///   24. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct MigrationDammV2Builder {
    virtual_pool: Option<solana_program::pubkey::Pubkey>,
    migration_metadata: Option<solana_program::pubkey::Pubkey>,
    config: Option<solana_program::pubkey::Pubkey>,
    pool_authority: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    first_position_nft_mint: Option<solana_program::pubkey::Pubkey>,
    first_position_nft_account: Option<solana_program::pubkey::Pubkey>,
    first_position: Option<solana_program::pubkey::Pubkey>,
    second_position_nft_mint: Option<solana_program::pubkey::Pubkey>,
    second_position_nft_account: Option<solana_program::pubkey::Pubkey>,
    second_position: Option<solana_program::pubkey::Pubkey>,
    damm_pool_authority: Option<solana_program::pubkey::Pubkey>,
    amm_program: Option<solana_program::pubkey::Pubkey>,
    base_mint: Option<solana_program::pubkey::Pubkey>,
    quote_mint: Option<solana_program::pubkey::Pubkey>,
    token_a_vault: Option<solana_program::pubkey::Pubkey>,
    token_b_vault: Option<solana_program::pubkey::Pubkey>,
    base_vault: Option<solana_program::pubkey::Pubkey>,
    quote_vault: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    token_base_program: Option<solana_program::pubkey::Pubkey>,
    token_quote_program: Option<solana_program::pubkey::Pubkey>,
    token2022_program: Option<solana_program::pubkey::Pubkey>,
    damm_event_authority: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl MigrationDammV2Builder {
    pub fn new() -> Self { Self::default() }

    /// virtual pool
    #[inline(always)]
    pub fn virtual_pool(&mut self, virtual_pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.virtual_pool = Some(virtual_pool);
        self
    }

    /// migration metadata
    #[inline(always)]
    pub fn migration_metadata(
        &mut self,
        migration_metadata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.migration_metadata = Some(migration_metadata);
        self
    }

    /// virtual pool config key
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    /// `[optional account, default to 'FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM']`
    #[inline(always)]
    pub fn pool_authority(&mut self, pool_authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn first_position_nft_mint(
        &mut self,
        first_position_nft_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.first_position_nft_mint = Some(first_position_nft_mint);
        self
    }

    #[inline(always)]
    pub fn first_position_nft_account(
        &mut self,
        first_position_nft_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.first_position_nft_account = Some(first_position_nft_account);
        self
    }

    #[inline(always)]
    pub fn first_position(&mut self, first_position: solana_program::pubkey::Pubkey) -> &mut Self {
        self.first_position = Some(first_position);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn second_position_nft_mint(
        &mut self,
        second_position_nft_mint: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.second_position_nft_mint = second_position_nft_mint;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn second_position_nft_account(
        &mut self,
        second_position_nft_account: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.second_position_nft_account = second_position_nft_account;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn second_position(
        &mut self,
        second_position: Option<solana_program::pubkey::Pubkey>,
    ) -> &mut Self {
        self.second_position = second_position;
        self
    }

    #[inline(always)]
    pub fn damm_pool_authority(
        &mut self,
        damm_pool_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.damm_pool_authority = Some(damm_pool_authority);
        self
    }

    /// `[optional account, default to 'cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG']`
    #[inline(always)]
    pub fn amm_program(&mut self, amm_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.amm_program = Some(amm_program);
        self
    }

    #[inline(always)]
    pub fn base_mint(&mut self, base_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_mint = Some(base_mint);
        self
    }

    #[inline(always)]
    pub fn quote_mint(&mut self, quote_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_a_vault = Some(token_a_vault);
        self
    }

    #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_b_vault = Some(token_b_vault);
        self
    }

    #[inline(always)]
    pub fn base_vault(&mut self, base_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.base_vault = Some(base_vault);
        self
    }

    #[inline(always)]
    pub fn quote_vault(&mut self, quote_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.quote_vault = Some(quote_vault);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn token_base_program(
        &mut self,
        token_base_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_base_program = Some(token_base_program);
        self
    }

    #[inline(always)]
    pub fn token_quote_program(
        &mut self,
        token_quote_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_quote_program = Some(token_quote_program);
        self
    }

    #[inline(always)]
    pub fn token2022_program(
        &mut self,
        token2022_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token2022_program = Some(token2022_program);
        self
    }

    #[inline(always)]
    pub fn damm_event_authority(
        &mut self,
        damm_event_authority: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.damm_event_authority = Some(damm_event_authority);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = MigrationDammV2 {
            virtual_pool: self.virtual_pool.expect("virtual_pool is not set"),
            migration_metadata: self
                .migration_metadata
                .expect("migration_metadata is not set"),
            config: self.config.expect("config is not set"),
            pool_authority: self.pool_authority.unwrap_or(solana_program::pubkey!(
                "FhVo3mqL8PW5pH5U2CN4XE33DokiyZnUwuGpH2hmHLuM"
            )),
            pool: self.pool.expect("pool is not set"),
            first_position_nft_mint: self
                .first_position_nft_mint
                .expect("first_position_nft_mint is not set"),
            first_position_nft_account: self
                .first_position_nft_account
                .expect("first_position_nft_account is not set"),
            first_position: self.first_position.expect("first_position is not set"),
            second_position_nft_mint: self.second_position_nft_mint,
            second_position_nft_account: self.second_position_nft_account,
            second_position: self.second_position,
            damm_pool_authority: self
                .damm_pool_authority
                .expect("damm_pool_authority is not set"),
            amm_program: self.amm_program.unwrap_or(solana_program::pubkey!(
                "cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG"
            )),
            base_mint: self.base_mint.expect("base_mint is not set"),
            quote_mint: self.quote_mint.expect("quote_mint is not set"),
            token_a_vault: self.token_a_vault.expect("token_a_vault is not set"),
            token_b_vault: self.token_b_vault.expect("token_b_vault is not set"),
            base_vault: self.base_vault.expect("base_vault is not set"),
            quote_vault: self.quote_vault.expect("quote_vault is not set"),
            payer: self.payer.expect("payer is not set"),
            token_base_program: self
                .token_base_program
                .expect("token_base_program is not set"),
            token_quote_program: self
                .token_quote_program
                .expect("token_quote_program is not set"),
            token2022_program: self
                .token2022_program
                .expect("token2022_program is not set"),
            damm_event_authority: self
                .damm_event_authority
                .expect("damm_event_authority is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `migration_damm_v2` CPI accounts.
pub struct MigrationDammV2CpiAccounts<'a, 'b> {
    /// virtual pool
    pub virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// migration metadata
    pub migration_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// virtual pool config key
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub first_position_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub first_position_nft_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub first_position: &'b solana_program::account_info::AccountInfo<'a>,

    pub second_position_nft_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub second_position_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub second_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub damm_pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_base_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_quote_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub damm_event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `migration_damm_v2` CPI instruction.
pub struct MigrationDammV2Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// virtual pool
    pub virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    /// migration metadata
    pub migration_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// virtual pool config key
    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub first_position_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub first_position_nft_account: &'b solana_program::account_info::AccountInfo<'a>,

    pub first_position: &'b solana_program::account_info::AccountInfo<'a>,

    pub second_position_nft_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub second_position_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub second_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,

    pub damm_pool_authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub amm_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub base_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub quote_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_base_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_quote_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub damm_event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> MigrationDammV2Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: MigrationDammV2CpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            virtual_pool: accounts.virtual_pool,
            migration_metadata: accounts.migration_metadata,
            config: accounts.config,
            pool_authority: accounts.pool_authority,
            pool: accounts.pool,
            first_position_nft_mint: accounts.first_position_nft_mint,
            first_position_nft_account: accounts.first_position_nft_account,
            first_position: accounts.first_position,
            second_position_nft_mint: accounts.second_position_nft_mint,
            second_position_nft_account: accounts.second_position_nft_account,
            second_position: accounts.second_position,
            damm_pool_authority: accounts.damm_pool_authority,
            amm_program: accounts.amm_program,
            base_mint: accounts.base_mint,
            quote_mint: accounts.quote_mint,
            token_a_vault: accounts.token_a_vault,
            token_b_vault: accounts.token_b_vault,
            base_vault: accounts.base_vault,
            quote_vault: accounts.quote_vault,
            payer: accounts.payer,
            token_base_program: accounts.token_base_program,
            token_quote_program: accounts.token_quote_program,
            token2022_program: accounts.token2022_program,
            damm_event_authority: accounts.damm_event_authority,
            system_program: accounts.system_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(25 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.virtual_pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.migration_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.first_position_nft_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.first_position_nft_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.first_position.key,
            false,
        ));
        if let Some(second_position_nft_mint) = self.second_position_nft_mint {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *second_position_nft_mint.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::DYNAMIC_BONDING_CURVE_ID,
                false,
            ));
        }
        if let Some(second_position_nft_account) = self.second_position_nft_account {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *second_position_nft_account.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::DYNAMIC_BONDING_CURVE_ID,
                false,
            ));
        }
        if let Some(second_position) = self.second_position {
            accounts.push(solana_program::instruction::AccountMeta::new(
                *second_position.key,
                false,
            ));
        } else {
            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
                crate::DYNAMIC_BONDING_CURVE_ID,
                false,
            ));
        }
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.damm_pool_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.amm_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_a_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_b_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.base_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.quote_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_base_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_quote_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token2022_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.damm_event_authority.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&MigrationDammV2InstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::DYNAMIC_BONDING_CURVE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(26 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.virtual_pool.clone());
        account_infos.push(self.migration_metadata.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.pool_authority.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.first_position_nft_mint.clone());
        account_infos.push(self.first_position_nft_account.clone());
        account_infos.push(self.first_position.clone());
        if let Some(second_position_nft_mint) = self.second_position_nft_mint {
            account_infos.push(second_position_nft_mint.clone());
        }
        if let Some(second_position_nft_account) = self.second_position_nft_account {
            account_infos.push(second_position_nft_account.clone());
        }
        if let Some(second_position) = self.second_position {
            account_infos.push(second_position.clone());
        }
        account_infos.push(self.damm_pool_authority.clone());
        account_infos.push(self.amm_program.clone());
        account_infos.push(self.base_mint.clone());
        account_infos.push(self.quote_mint.clone());
        account_infos.push(self.token_a_vault.clone());
        account_infos.push(self.token_b_vault.clone());
        account_infos.push(self.base_vault.clone());
        account_infos.push(self.quote_vault.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.token_base_program.clone());
        account_infos.push(self.token_quote_program.clone());
        account_infos.push(self.token2022_program.clone());
        account_infos.push(self.damm_event_authority.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `MigrationDammV2` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` virtual_pool
///   1. `[]` migration_metadata
///   2. `[]` config
///   3. `[writable]` pool_authority
///   4. `[writable]` pool
///   5. `[writable]` first_position_nft_mint
///   6. `[writable]` first_position_nft_account
///   7. `[writable]` first_position
///   8. `[writable, optional]` second_position_nft_mint
///   9. `[writable, optional]` second_position_nft_account
///   10. `[writable, optional]` second_position
///   11. `[]` damm_pool_authority
///   12. `[]` amm_program
///   13. `[writable]` base_mint
///   14. `[writable]` quote_mint
///   15. `[writable]` token_a_vault
///   16. `[writable]` token_b_vault
///   17. `[writable]` base_vault
///   18. `[writable]` quote_vault
///   19. `[writable, signer]` payer
///   20. `[]` token_base_program
///   21. `[]` token_quote_program
///   22. `[]` token2022_program
///   23. `[]` damm_event_authority
///   24. `[]` system_program
#[derive(Clone, Debug)]
pub struct MigrationDammV2CpiBuilder<'a, 'b> {
    instruction: Box<MigrationDammV2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> MigrationDammV2CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(MigrationDammV2CpiBuilderInstruction {
            __program: program,
            virtual_pool: None,
            migration_metadata: None,
            config: None,
            pool_authority: None,
            pool: None,
            first_position_nft_mint: None,
            first_position_nft_account: None,
            first_position: None,
            second_position_nft_mint: None,
            second_position_nft_account: None,
            second_position: None,
            damm_pool_authority: None,
            amm_program: None,
            base_mint: None,
            quote_mint: None,
            token_a_vault: None,
            token_b_vault: None,
            base_vault: None,
            quote_vault: None,
            payer: None,
            token_base_program: None,
            token_quote_program: None,
            token2022_program: None,
            damm_event_authority: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    /// virtual pool
    #[inline(always)]
    pub fn virtual_pool(
        &mut self,
        virtual_pool: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtual_pool = Some(virtual_pool);
        self
    }

    /// migration metadata
    #[inline(always)]
    pub fn migration_metadata(
        &mut self,
        migration_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.migration_metadata = Some(migration_metadata);
        self
    }

    /// virtual pool config key
    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn pool_authority(
        &mut self,
        pool_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_authority = Some(pool_authority);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn first_position_nft_mint(
        &mut self,
        first_position_nft_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.first_position_nft_mint = Some(first_position_nft_mint);
        self
    }

    #[inline(always)]
    pub fn first_position_nft_account(
        &mut self,
        first_position_nft_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.first_position_nft_account = Some(first_position_nft_account);
        self
    }

    #[inline(always)]
    pub fn first_position(
        &mut self,
        first_position: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.first_position = Some(first_position);
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn second_position_nft_mint(
        &mut self,
        second_position_nft_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.second_position_nft_mint = second_position_nft_mint;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn second_position_nft_account(
        &mut self,
        second_position_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.second_position_nft_account = second_position_nft_account;
        self
    }

    /// `[optional account]`
    #[inline(always)]
    pub fn second_position(
        &mut self,
        second_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    ) -> &mut Self {
        self.instruction.second_position = second_position;
        self
    }

    #[inline(always)]
    pub fn damm_pool_authority(
        &mut self,
        damm_pool_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.damm_pool_authority = Some(damm_pool_authority);
        self
    }

    #[inline(always)]
    pub fn amm_program(
        &mut self,
        amm_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.amm_program = Some(amm_program);
        self
    }

    #[inline(always)]
    pub fn base_mint(
        &mut self,
        base_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_mint = Some(base_mint);
        self
    }

    #[inline(always)]
    pub fn quote_mint(
        &mut self,
        quote_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_mint = Some(quote_mint);
        self
    }

    #[inline(always)]
    pub fn token_a_vault(
        &mut self,
        token_a_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_vault = Some(token_a_vault);
        self
    }

    #[inline(always)]
    pub fn token_b_vault(
        &mut self,
        token_b_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_vault = Some(token_b_vault);
        self
    }

    #[inline(always)]
    pub fn base_vault(
        &mut self,
        base_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.base_vault = Some(base_vault);
        self
    }

    #[inline(always)]
    pub fn quote_vault(
        &mut self,
        quote_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.quote_vault = Some(quote_vault);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn token_base_program(
        &mut self,
        token_base_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_base_program = Some(token_base_program);
        self
    }

    #[inline(always)]
    pub fn token_quote_program(
        &mut self,
        token_quote_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_quote_program = Some(token_quote_program);
        self
    }

    #[inline(always)]
    pub fn token2022_program(
        &mut self,
        token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token2022_program = Some(token2022_program);
        self
    }

    #[inline(always)]
    pub fn damm_event_authority(
        &mut self,
        damm_event_authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.damm_event_authority = Some(damm_event_authority);
        self
    }

    /// System program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = MigrationDammV2Cpi {
            __program: self.instruction.__program,

            virtual_pool: self
                .instruction
                .virtual_pool
                .expect("virtual_pool is not set"),

            migration_metadata: self
                .instruction
                .migration_metadata
                .expect("migration_metadata is not set"),

            config: self.instruction.config.expect("config is not set"),

            pool_authority: self
                .instruction
                .pool_authority
                .expect("pool_authority is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            first_position_nft_mint: self
                .instruction
                .first_position_nft_mint
                .expect("first_position_nft_mint is not set"),

            first_position_nft_account: self
                .instruction
                .first_position_nft_account
                .expect("first_position_nft_account is not set"),

            first_position: self
                .instruction
                .first_position
                .expect("first_position is not set"),

            second_position_nft_mint: self.instruction.second_position_nft_mint,

            second_position_nft_account: self.instruction.second_position_nft_account,

            second_position: self.instruction.second_position,

            damm_pool_authority: self
                .instruction
                .damm_pool_authority
                .expect("damm_pool_authority is not set"),

            amm_program: self
                .instruction
                .amm_program
                .expect("amm_program is not set"),

            base_mint: self.instruction.base_mint.expect("base_mint is not set"),

            quote_mint: self.instruction.quote_mint.expect("quote_mint is not set"),

            token_a_vault: self
                .instruction
                .token_a_vault
                .expect("token_a_vault is not set"),

            token_b_vault: self
                .instruction
                .token_b_vault
                .expect("token_b_vault is not set"),

            base_vault: self.instruction.base_vault.expect("base_vault is not set"),

            quote_vault: self
                .instruction
                .quote_vault
                .expect("quote_vault is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            token_base_program: self
                .instruction
                .token_base_program
                .expect("token_base_program is not set"),

            token_quote_program: self
                .instruction
                .token_quote_program
                .expect("token_quote_program is not set"),

            token2022_program: self
                .instruction
                .token2022_program
                .expect("token2022_program is not set"),

            damm_event_authority: self
                .instruction
                .damm_event_authority
                .expect("damm_event_authority is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct MigrationDammV2CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    virtual_pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    migration_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    first_position_nft_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    first_position_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    first_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    second_position_nft_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    second_position_nft_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    second_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    damm_pool_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_a_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_b_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    base_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    quote_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_base_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_quote_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token2022_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    damm_event_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
