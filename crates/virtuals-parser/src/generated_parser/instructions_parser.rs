//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshDeserialize;

use crate::{
    instructions::{
        Buy as BuyIxAccounts, BuyInstructionArgs as BuyIxData, ClaimFees as ClaimFeesIxAccounts,
        CreateMeteoraPool as CreateMeteoraPoolIxAccounts, Initialize as InitializeIxAccounts,
        InitializeMeteoraAccounts as InitializeMeteoraAccountsIxAccounts,
        Launch as LaunchIxAccounts, LaunchInstructionArgs as LaunchIxData, Sell as SellIxAccounts,
        SellInstructionArgs as SellIxData, UpdatePoolCreator as UpdatePoolCreatorIxAccounts,
    },
    ID,
};

/// VirtualsProgram Instructions
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum VirtualsProgramProgramIx {
    Buy(BuyIxAccounts, BuyIxData),
    ClaimFees(ClaimFeesIxAccounts),
    CreateMeteoraPool(CreateMeteoraPoolIxAccounts),
    Initialize(InitializeIxAccounts),
    InitializeMeteoraAccounts(InitializeMeteoraAccountsIxAccounts),
    Launch(LaunchIxAccounts, LaunchIxData),
    Sell(SellIxAccounts, SellIxData),
    UpdatePoolCreator(UpdatePoolCreatorIxAccounts),
}

#[derive(Debug, Copy, Clone)]
pub struct InstructionParser;

impl yellowstone_vixen_core::Parser for InstructionParser {
    type Input = yellowstone_vixen_core::instruction::InstructionUpdate;
    type Output = VirtualsProgramProgramIx;

    fn id(&self) -> std::borrow::Cow<str> { "VirtualsProgram::InstructionParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .transaction_accounts([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        ix_update: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        if ix_update.program.equals_ref(ID) {
            InstructionParser::parse_impl(ix_update)
        } else {
            Err(yellowstone_vixen_core::ParseError::Filtered)
        }
    }
}

impl yellowstone_vixen_core::ProgramParser for InstructionParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

impl InstructionParser {
    pub(crate) fn parse_impl(
        ix: &yellowstone_vixen_core::instruction::InstructionUpdate,
    ) -> yellowstone_vixen_core::ParseResult<VirtualsProgramProgramIx> {
        let accounts_len = ix.accounts.len();

        let ix_discriminator: [u8; 8] = ix.data[0..8].try_into()?;
        let mut ix_data = &ix.data[8..];
        let ix = match ix_discriminator {
            [102, 6, 61, 18, 1, 218, 235, 234] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = BuyIxAccounts {
                    user: ix.accounts[0].0.into(),
                    vpool: ix.accounts[1].0.into(),
                    token_mint: ix.accounts[2].0.into(),
                    user_virtuals_ata: ix.accounts[3].0.into(),
                    user_token_ata: ix.accounts[4].0.into(),
                    vpool_token_ata: ix.accounts[5].0.into(),
                    platform_prototype: ix.accounts[6].0.into(),
                    platform_prototype_virtuals_ata: ix.accounts[7].0.into(),
                    vpool_virtuals_ata: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: BuyIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(VirtualsProgramProgramIx::Buy(ix_accounts, de_ix_data))
            },
            [82, 251, 233, 156, 12, 52, 184, 202] => {
                check_min_accounts_req(accounts_len, 28)?;
                let ix_accounts = ClaimFeesIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    vpool: ix.accounts[1].0.into(),
                    virtuals_mint: ix.accounts[2].0.into(),
                    token_mint: ix.accounts[3].0.into(),
                    vpool_virtuals_ata: ix.accounts[4].0.into(),
                    vpool_token_ata: ix.accounts[5].0.into(),
                    platform: ix.accounts[6].0.into(),
                    platform_virtuals_ata: ix.accounts[7].0.into(),
                    platform_token_ata: ix.accounts[8].0.into(),
                    creator_virtuals_ata: ix.accounts[9].0.into(),
                    creator_token_ata: ix.accounts[10].0.into(),
                    pool: ix.accounts[11].0.into(),
                    lp_mint: ix.accounts[12].0.into(),
                    lock_escrow: ix.accounts[13].0.into(),
                    escrow_vault: ix.accounts[14].0.into(),
                    token_program: ix.accounts[15].0.into(),
                    virtuals_vault: ix.accounts[16].0.into(),
                    token_vault: ix.accounts[17].0.into(),
                    virtuals_token_vault: ix.accounts[18].0.into(),
                    token_token_vault: ix.accounts[19].0.into(),
                    virtuals_vault_lp_mint: ix.accounts[20].0.into(),
                    token_vault_lp_mint: ix.accounts[21].0.into(),
                    virtuals_vault_lp: ix.accounts[22].0.into(),
                    token_vault_lp: ix.accounts[23].0.into(),
                    vault_program: ix.accounts[24].0.into(),
                    associated_token_program: ix.accounts[25].0.into(),
                    system_program: ix.accounts[26].0.into(),
                    dynamic_amm_program: ix.accounts[27].0.into(),
                };
                Ok(VirtualsProgramProgramIx::ClaimFees(ix_accounts))
            },
            [246, 254, 33, 37, 225, 176, 41, 232] => {
                check_min_accounts_req(accounts_len, 36)?;
                let ix_accounts = CreateMeteoraPoolIxAccounts {
                    vpool: ix.accounts[0].0.into(),
                    meteora_deployer: ix.accounts[1].0.into(),
                    meteora_deployer_virtuals_ata: ix.accounts[2].0.into(),
                    meteora_deployer_token_ata: ix.accounts[3].0.into(),
                    vpool_virtuals_ata: ix.accounts[4].0.into(),
                    vpool_token_ata: ix.accounts[5].0.into(),
                    lock_escrow: ix.accounts[6].0.into(),
                    escrow_vault: ix.accounts[7].0.into(),
                    pool: ix.accounts[8].0.into(),
                    config: ix.accounts[9].0.into(),
                    lp_mint: ix.accounts[10].0.into(),
                    virtuals_mint: ix.accounts[11].0.into(),
                    token_mint: ix.accounts[12].0.into(),
                    virtuals_vault: ix.accounts[13].0.into(),
                    token_vault: ix.accounts[14].0.into(),
                    virtuals_token_vault: ix.accounts[15].0.into(),
                    token_token_vault: ix.accounts[16].0.into(),
                    virtuals_vault_lp_mint: ix.accounts[17].0.into(),
                    token_vault_lp_mint: ix.accounts[18].0.into(),
                    virtuals_vault_lp: ix.accounts[19].0.into(),
                    token_vault_lp: ix.accounts[20].0.into(),
                    pool_virtuals_ata: ix.accounts[21].0.into(),
                    pool_token_ata: ix.accounts[22].0.into(),
                    meteora_deployer_pool_lp: ix.accounts[23].0.into(),
                    protocol_virtuals_fee: ix.accounts[24].0.into(),
                    protocol_token_fee: ix.accounts[25].0.into(),
                    payer: ix.accounts[26].0.into(),
                    token_metadata: ix.accounts[27].0.into(),
                    rent: ix.accounts[28].0.into(),
                    mint_metadata: ix.accounts[29].0.into(),
                    metadata_program: ix.accounts[30].0.into(),
                    vault_program: ix.accounts[31].0.into(),
                    token_program: ix.accounts[32].0.into(),
                    associated_token_program: ix.accounts[33].0.into(),
                    system_program: ix.accounts[34].0.into(),
                    dynamic_amm_program: ix.accounts[35].0.into(),
                };
                Ok(VirtualsProgramProgramIx::CreateMeteoraPool(ix_accounts))
            },
            [175, 175, 109, 31, 13, 152, 155, 237] => {
                check_min_accounts_req(accounts_len, 9)?;
                let ix_accounts = InitializeIxAccounts {
                    payer: ix.accounts[0].0.into(),
                    virtuals_mint: ix.accounts[1].0.into(),
                    token_mint: ix.accounts[2].0.into(),
                    vpool_virtuals_ata: ix.accounts[3].0.into(),
                    vpool_token_ata: ix.accounts[4].0.into(),
                    vpool: ix.accounts[5].0.into(),
                    token_program: ix.accounts[6].0.into(),
                    associated_token_program: ix.accounts[7].0.into(),
                    system_program: ix.accounts[8].0.into(),
                };
                Ok(VirtualsProgramProgramIx::Initialize(ix_accounts))
            },
            [53, 12, 118, 158, 253, 239, 185, 214] => {
                check_min_accounts_req(accounts_len, 36)?;
                let ix_accounts = InitializeMeteoraAccountsIxAccounts {
                    vpool: ix.accounts[0].0.into(),
                    meteora_deployer: ix.accounts[1].0.into(),
                    meteora_deployer_virtuals_ata: ix.accounts[2].0.into(),
                    meteora_deployer_token_ata: ix.accounts[3].0.into(),
                    vpool_virtuals_ata: ix.accounts[4].0.into(),
                    vpool_token_ata: ix.accounts[5].0.into(),
                    lock_escrow: ix.accounts[6].0.into(),
                    escrow_vault: ix.accounts[7].0.into(),
                    pool: ix.accounts[8].0.into(),
                    config: ix.accounts[9].0.into(),
                    lp_mint: ix.accounts[10].0.into(),
                    virtuals_mint: ix.accounts[11].0.into(),
                    token_mint: ix.accounts[12].0.into(),
                    virtuals_vault: ix.accounts[13].0.into(),
                    token_vault: ix.accounts[14].0.into(),
                    virtuals_token_vault: ix.accounts[15].0.into(),
                    token_token_vault: ix.accounts[16].0.into(),
                    virtuals_vault_lp_mint: ix.accounts[17].0.into(),
                    token_vault_lp_mint: ix.accounts[18].0.into(),
                    virtuals_vault_lp: ix.accounts[19].0.into(),
                    token_vault_lp: ix.accounts[20].0.into(),
                    pool_virtuals_ata: ix.accounts[21].0.into(),
                    pool_token_ata: ix.accounts[22].0.into(),
                    meteora_deployer_pool_lp: ix.accounts[23].0.into(),
                    protocol_virtuals_fee: ix.accounts[24].0.into(),
                    protocol_token_fee: ix.accounts[25].0.into(),
                    payer: ix.accounts[26].0.into(),
                    token_metadata: ix.accounts[27].0.into(),
                    rent: ix.accounts[28].0.into(),
                    mint_metadata: ix.accounts[29].0.into(),
                    metadata_program: ix.accounts[30].0.into(),
                    vault_program: ix.accounts[31].0.into(),
                    token_program: ix.accounts[32].0.into(),
                    associated_token_program: ix.accounts[33].0.into(),
                    system_program: ix.accounts[34].0.into(),
                    dynamic_amm_program: ix.accounts[35].0.into(),
                };
                Ok(VirtualsProgramProgramIx::InitializeMeteoraAccounts(
                    ix_accounts,
                ))
            },
            [153, 241, 93, 225, 22, 69, 74, 61] => {
                check_min_accounts_req(accounts_len, 12)?;
                let ix_accounts = LaunchIxAccounts {
                    creator: ix.accounts[0].0.into(),
                    creator_virtuals_ata: ix.accounts[1].0.into(),
                    token_mint: ix.accounts[2].0.into(),
                    platform_prototype: ix.accounts[3].0.into(),
                    platform_prototype_virtuals_ata: ix.accounts[4].0.into(),
                    vpool: ix.accounts[5].0.into(),
                    token_metadata: ix.accounts[6].0.into(),
                    metadata_program: ix.accounts[7].0.into(),
                    token_program: ix.accounts[8].0.into(),
                    associated_token_program: ix.accounts[9].0.into(),
                    system_program: ix.accounts[10].0.into(),
                    rent: ix.accounts[11].0.into(),
                };
                let de_ix_data: LaunchIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(VirtualsProgramProgramIx::Launch(ix_accounts, de_ix_data))
            },
            [51, 230, 133, 164, 1, 127, 131, 173] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = SellIxAccounts {
                    user: ix.accounts[0].0.into(),
                    vpool: ix.accounts[1].0.into(),
                    token_mint: ix.accounts[2].0.into(),
                    user_virtuals_ata: ix.accounts[3].0.into(),
                    user_token_ata: ix.accounts[4].0.into(),
                    vpool_token_ata: ix.accounts[5].0.into(),
                    platform_prototype: ix.accounts[6].0.into(),
                    platform_prototype_virtuals_ata: ix.accounts[7].0.into(),
                    vpool_virtuals_ata: ix.accounts[8].0.into(),
                    token_program: ix.accounts[9].0.into(),
                };
                let de_ix_data: SellIxData = BorshDeserialize::deserialize(&mut ix_data)?;
                Ok(VirtualsProgramProgramIx::Sell(ix_accounts, de_ix_data))
            },
            [113, 225, 166, 185, 94, 231, 96, 28] => {
                check_min_accounts_req(accounts_len, 10)?;
                let ix_accounts = UpdatePoolCreatorIxAccounts {
                    creator: ix.accounts[0].0.into(),
                    new_creator: ix.accounts[1].0.into(),
                    virtuals_mint: ix.accounts[2].0.into(),
                    token_mint: ix.accounts[3].0.into(),
                    new_creator_virtuals_ata: ix.accounts[4].0.into(),
                    new_creator_token_ata: ix.accounts[5].0.into(),
                    vpool: ix.accounts[6].0.into(),
                    token_program: ix.accounts[7].0.into(),
                    associated_token_program: ix.accounts[8].0.into(),
                    system_program: ix.accounts[9].0.into(),
                };
                Ok(VirtualsProgramProgramIx::UpdatePoolCreator(ix_accounts))
            },
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Instruction discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &ix {
            Ok(ix) => {
                tracing::info!(
                    name: "correctly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = ix.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_instruction",
                    name = "ix_update",
                    program = ID.to_string(),
                    ix = "error",
                    discriminator = ?ix_discriminator,
                    error = ?e
                );
            },
        }

        ix
    }
}

pub fn check_min_accounts_req(
    actual: usize,
    expected: usize,
) -> yellowstone_vixen_core::ParseResult<()> {
    if actual < expected {
        Err(yellowstone_vixen_core::ParseError::from(format!(
            "Too few accounts provided: expected {expected}, got {actual}"
        )))
    } else {
        Ok(())
    }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{BuyIxAccounts, InstructionParser, VirtualsProgramProgramIx};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::BuyIxAccounts> for BuyIxAccounts {
        fn into_proto(self) -> proto_def::BuyIxAccounts {
            proto_def::BuyIxAccounts {
                user: self.user.to_string(),
                vpool: self.vpool.to_string(),
                token_mint: self.token_mint.to_string(),
                user_virtuals_ata: self.user_virtuals_ata.to_string(),
                user_token_ata: self.user_token_ata.to_string(),
                vpool_token_ata: self.vpool_token_ata.to_string(),
                platform_prototype: self.platform_prototype.to_string(),
                platform_prototype_virtuals_ata: self.platform_prototype_virtuals_ata.to_string(),
                vpool_virtuals_ata: self.vpool_virtuals_ata.to_string(),
                token_program: self.token_program.to_string(),
            }
        }
    }
    use super::BuyIxData;
    impl IntoProto<proto_def::BuyIxData> for BuyIxData {
        fn into_proto(self) -> proto_def::BuyIxData {
            proto_def::BuyIxData {
                amount: self.amount,
                max_amount_out: self.max_amount_out,
            }
        }
    }
    use super::ClaimFeesIxAccounts;
    impl IntoProto<proto_def::ClaimFeesIxAccounts> for ClaimFeesIxAccounts {
        fn into_proto(self) -> proto_def::ClaimFeesIxAccounts {
            proto_def::ClaimFeesIxAccounts {
                payer: self.payer.to_string(),
                vpool: self.vpool.to_string(),
                virtuals_mint: self.virtuals_mint.to_string(),
                token_mint: self.token_mint.to_string(),
                vpool_virtuals_ata: self.vpool_virtuals_ata.to_string(),
                vpool_token_ata: self.vpool_token_ata.to_string(),
                platform: self.platform.to_string(),
                platform_virtuals_ata: self.platform_virtuals_ata.to_string(),
                platform_token_ata: self.platform_token_ata.to_string(),
                creator_virtuals_ata: self.creator_virtuals_ata.to_string(),
                creator_token_ata: self.creator_token_ata.to_string(),
                pool: self.pool.to_string(),
                lp_mint: self.lp_mint.to_string(),
                lock_escrow: self.lock_escrow.to_string(),
                escrow_vault: self.escrow_vault.to_string(),
                token_program: self.token_program.to_string(),
                virtuals_vault: self.virtuals_vault.to_string(),
                token_vault: self.token_vault.to_string(),
                virtuals_token_vault: self.virtuals_token_vault.to_string(),
                token_token_vault: self.token_token_vault.to_string(),
                virtuals_vault_lp_mint: self.virtuals_vault_lp_mint.to_string(),
                token_vault_lp_mint: self.token_vault_lp_mint.to_string(),
                virtuals_vault_lp: self.virtuals_vault_lp.to_string(),
                token_vault_lp: self.token_vault_lp.to_string(),
                vault_program: self.vault_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                system_program: self.system_program.to_string(),
                dynamic_amm_program: self.dynamic_amm_program.to_string(),
            }
        }
    }
    use super::CreateMeteoraPoolIxAccounts;
    impl IntoProto<proto_def::CreateMeteoraPoolIxAccounts> for CreateMeteoraPoolIxAccounts {
        fn into_proto(self) -> proto_def::CreateMeteoraPoolIxAccounts {
            proto_def::CreateMeteoraPoolIxAccounts {
                vpool: self.vpool.to_string(),
                meteora_deployer: self.meteora_deployer.to_string(),
                meteora_deployer_virtuals_ata: self.meteora_deployer_virtuals_ata.to_string(),
                meteora_deployer_token_ata: self.meteora_deployer_token_ata.to_string(),
                vpool_virtuals_ata: self.vpool_virtuals_ata.to_string(),
                vpool_token_ata: self.vpool_token_ata.to_string(),
                lock_escrow: self.lock_escrow.to_string(),
                escrow_vault: self.escrow_vault.to_string(),
                pool: self.pool.to_string(),
                config: self.config.to_string(),
                lp_mint: self.lp_mint.to_string(),
                virtuals_mint: self.virtuals_mint.to_string(),
                token_mint: self.token_mint.to_string(),
                virtuals_vault: self.virtuals_vault.to_string(),
                token_vault: self.token_vault.to_string(),
                virtuals_token_vault: self.virtuals_token_vault.to_string(),
                token_token_vault: self.token_token_vault.to_string(),
                virtuals_vault_lp_mint: self.virtuals_vault_lp_mint.to_string(),
                token_vault_lp_mint: self.token_vault_lp_mint.to_string(),
                virtuals_vault_lp: self.virtuals_vault_lp.to_string(),
                token_vault_lp: self.token_vault_lp.to_string(),
                pool_virtuals_ata: self.pool_virtuals_ata.to_string(),
                pool_token_ata: self.pool_token_ata.to_string(),
                meteora_deployer_pool_lp: self.meteora_deployer_pool_lp.to_string(),
                protocol_virtuals_fee: self.protocol_virtuals_fee.to_string(),
                protocol_token_fee: self.protocol_token_fee.to_string(),
                payer: self.payer.to_string(),
                token_metadata: self.token_metadata.to_string(),
                rent: self.rent.to_string(),
                mint_metadata: self.mint_metadata.to_string(),
                metadata_program: self.metadata_program.to_string(),
                vault_program: self.vault_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                system_program: self.system_program.to_string(),
                dynamic_amm_program: self.dynamic_amm_program.to_string(),
            }
        }
    }
    use super::InitializeIxAccounts;
    impl IntoProto<proto_def::InitializeIxAccounts> for InitializeIxAccounts {
        fn into_proto(self) -> proto_def::InitializeIxAccounts {
            proto_def::InitializeIxAccounts {
                payer: self.payer.to_string(),
                virtuals_mint: self.virtuals_mint.to_string(),
                token_mint: self.token_mint.to_string(),
                vpool_virtuals_ata: self.vpool_virtuals_ata.to_string(),
                vpool_token_ata: self.vpool_token_ata.to_string(),
                vpool: self.vpool.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }
    use super::InitializeMeteoraAccountsIxAccounts;
    impl IntoProto<proto_def::InitializeMeteoraAccountsIxAccounts>
        for InitializeMeteoraAccountsIxAccounts
    {
        fn into_proto(self) -> proto_def::InitializeMeteoraAccountsIxAccounts {
            proto_def::InitializeMeteoraAccountsIxAccounts {
                vpool: self.vpool.to_string(),
                meteora_deployer: self.meteora_deployer.to_string(),
                meteora_deployer_virtuals_ata: self.meteora_deployer_virtuals_ata.to_string(),
                meteora_deployer_token_ata: self.meteora_deployer_token_ata.to_string(),
                vpool_virtuals_ata: self.vpool_virtuals_ata.to_string(),
                vpool_token_ata: self.vpool_token_ata.to_string(),
                lock_escrow: self.lock_escrow.to_string(),
                escrow_vault: self.escrow_vault.to_string(),
                pool: self.pool.to_string(),
                config: self.config.to_string(),
                lp_mint: self.lp_mint.to_string(),
                virtuals_mint: self.virtuals_mint.to_string(),
                token_mint: self.token_mint.to_string(),
                virtuals_vault: self.virtuals_vault.to_string(),
                token_vault: self.token_vault.to_string(),
                virtuals_token_vault: self.virtuals_token_vault.to_string(),
                token_token_vault: self.token_token_vault.to_string(),
                virtuals_vault_lp_mint: self.virtuals_vault_lp_mint.to_string(),
                token_vault_lp_mint: self.token_vault_lp_mint.to_string(),
                virtuals_vault_lp: self.virtuals_vault_lp.to_string(),
                token_vault_lp: self.token_vault_lp.to_string(),
                pool_virtuals_ata: self.pool_virtuals_ata.to_string(),
                pool_token_ata: self.pool_token_ata.to_string(),
                meteora_deployer_pool_lp: self.meteora_deployer_pool_lp.to_string(),
                protocol_virtuals_fee: self.protocol_virtuals_fee.to_string(),
                protocol_token_fee: self.protocol_token_fee.to_string(),
                payer: self.payer.to_string(),
                token_metadata: self.token_metadata.to_string(),
                rent: self.rent.to_string(),
                mint_metadata: self.mint_metadata.to_string(),
                metadata_program: self.metadata_program.to_string(),
                vault_program: self.vault_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                system_program: self.system_program.to_string(),
                dynamic_amm_program: self.dynamic_amm_program.to_string(),
            }
        }
    }
    use super::LaunchIxAccounts;
    impl IntoProto<proto_def::LaunchIxAccounts> for LaunchIxAccounts {
        fn into_proto(self) -> proto_def::LaunchIxAccounts {
            proto_def::LaunchIxAccounts {
                creator: self.creator.to_string(),
                creator_virtuals_ata: self.creator_virtuals_ata.to_string(),
                token_mint: self.token_mint.to_string(),
                platform_prototype: self.platform_prototype.to_string(),
                platform_prototype_virtuals_ata: self.platform_prototype_virtuals_ata.to_string(),
                vpool: self.vpool.to_string(),
                token_metadata: self.token_metadata.to_string(),
                metadata_program: self.metadata_program.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                system_program: self.system_program.to_string(),
                rent: self.rent.to_string(),
            }
        }
    }
    use super::LaunchIxData;
    impl IntoProto<proto_def::LaunchIxData> for LaunchIxData {
        fn into_proto(self) -> proto_def::LaunchIxData {
            proto_def::LaunchIxData {
                symbol: self.symbol,
                name: self.name,
                uri: self.uri,
            }
        }
    }
    use super::SellIxAccounts;
    impl IntoProto<proto_def::SellIxAccounts> for SellIxAccounts {
        fn into_proto(self) -> proto_def::SellIxAccounts {
            proto_def::SellIxAccounts {
                user: self.user.to_string(),
                vpool: self.vpool.to_string(),
                token_mint: self.token_mint.to_string(),
                user_virtuals_ata: self.user_virtuals_ata.to_string(),
                user_token_ata: self.user_token_ata.to_string(),
                vpool_token_ata: self.vpool_token_ata.to_string(),
                platform_prototype: self.platform_prototype.to_string(),
                platform_prototype_virtuals_ata: self.platform_prototype_virtuals_ata.to_string(),
                vpool_virtuals_ata: self.vpool_virtuals_ata.to_string(),
                token_program: self.token_program.to_string(),
            }
        }
    }
    use super::SellIxData;
    impl IntoProto<proto_def::SellIxData> for SellIxData {
        fn into_proto(self) -> proto_def::SellIxData {
            proto_def::SellIxData {
                amount: self.amount,
                min_amount_out: self.min_amount_out,
            }
        }
    }
    use super::UpdatePoolCreatorIxAccounts;
    impl IntoProto<proto_def::UpdatePoolCreatorIxAccounts> for UpdatePoolCreatorIxAccounts {
        fn into_proto(self) -> proto_def::UpdatePoolCreatorIxAccounts {
            proto_def::UpdatePoolCreatorIxAccounts {
                creator: self.creator.to_string(),
                new_creator: self.new_creator.to_string(),
                virtuals_mint: self.virtuals_mint.to_string(),
                token_mint: self.token_mint.to_string(),
                new_creator_virtuals_ata: self.new_creator_virtuals_ata.to_string(),
                new_creator_token_ata: self.new_creator_token_ata.to_string(),
                vpool: self.vpool.to_string(),
                token_program: self.token_program.to_string(),
                associated_token_program: self.associated_token_program.to_string(),
                system_program: self.system_program.to_string(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramIxs> for VirtualsProgramProgramIx {
        fn into_proto(self) -> proto_def::ProgramIxs {
            match self {
                VirtualsProgramProgramIx::Buy(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Buy(proto_def::BuyIx {
                        accounts: Some(acc.into_proto()),
                        data: Some(data.into_proto()),
                    })),
                },
                VirtualsProgramProgramIx::ClaimFees(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::ClaimFees(
                        proto_def::ClaimFeesIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                VirtualsProgramProgramIx::CreateMeteoraPool(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::CreateMeteoraPool(
                        proto_def::CreateMeteoraPoolIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                VirtualsProgramProgramIx::Initialize(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Initialize(
                        proto_def::InitializeIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                VirtualsProgramProgramIx::InitializeMeteoraAccounts(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::InitializeMeteoraAccounts(
                        proto_def::InitializeMeteoraAccountsIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
                VirtualsProgramProgramIx::Launch(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Launch(
                        proto_def::LaunchIx {
                            accounts: Some(acc.into_proto()),
                            data: Some(data.into_proto()),
                        },
                    )),
                },
                VirtualsProgramProgramIx::Sell(acc, data) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::Sell(proto_def::SellIx {
                        accounts: Some(acc.into_proto()),
                        data: Some(data.into_proto()),
                    })),
                },
                VirtualsProgramProgramIx::UpdatePoolCreator(acc) => proto_def::ProgramIxs {
                    ix_oneof: Some(proto_def::program_ixs::IxOneof::UpdatePoolCreator(
                        proto_def::UpdatePoolCreatorIx {
                            accounts: Some(acc.into_proto()),
                        },
                    )),
                },
            }
        }
    }

    impl ParseProto for InstructionParser {
        type Message = proto_def::ProgramIxs;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
