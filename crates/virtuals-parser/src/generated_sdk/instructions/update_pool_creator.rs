//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct UpdatePoolCreator {
    pub creator: solana_program::pubkey::Pubkey,

    pub new_creator: solana_program::pubkey::Pubkey,

    pub virtuals_mint: solana_program::pubkey::Pubkey,

    pub token_mint: solana_program::pubkey::Pubkey,

    pub new_creator_virtuals_ata: solana_program::pubkey::Pubkey,

    pub new_creator_token_ata: solana_program::pubkey::Pubkey,

    pub vpool: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,

    pub associated_token_program: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl UpdatePoolCreator {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.creator,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.new_creator,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.virtuals_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.new_creator_virtuals_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.new_creator_token_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vpool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&UpdatePoolCreatorInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::VIRTUALS_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct UpdatePoolCreatorInstructionData {
    discriminator: [u8; 8],
}

impl UpdatePoolCreatorInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [113, 225, 166, 185, 94, 231, 96, 28],
        }
    }
}

impl Default for UpdatePoolCreatorInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `UpdatePoolCreator`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` creator
///   1. `[]` new_creator
///   2. `[optional]` virtuals_mint (default to `3iQL8BFS2vE7mww4ehAqQHAsbmRNCrPxizWAT2Zfyr9y`)
///   3. `[]` token_mint
///   4. `[writable]` new_creator_virtuals_ata
///   5. `[writable]` new_creator_token_ata
///   6. `[]` vpool
///   7. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   8. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   9. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct UpdatePoolCreatorBuilder {
    creator: Option<solana_program::pubkey::Pubkey>,
    new_creator: Option<solana_program::pubkey::Pubkey>,
    virtuals_mint: Option<solana_program::pubkey::Pubkey>,
    token_mint: Option<solana_program::pubkey::Pubkey>,
    new_creator_virtuals_ata: Option<solana_program::pubkey::Pubkey>,
    new_creator_token_ata: Option<solana_program::pubkey::Pubkey>,
    vpool: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdatePoolCreatorBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn creator(&mut self, creator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.creator = Some(creator);
        self
    }

    #[inline(always)]
    pub fn new_creator(&mut self, new_creator: solana_program::pubkey::Pubkey) -> &mut Self {
        self.new_creator = Some(new_creator);
        self
    }

    /// `[optional account, default to '3iQL8BFS2vE7mww4ehAqQHAsbmRNCrPxizWAT2Zfyr9y']`
    #[inline(always)]
    pub fn virtuals_mint(&mut self, virtuals_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.virtuals_mint = Some(virtuals_mint);
        self
    }

    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }

    #[inline(always)]
    pub fn new_creator_virtuals_ata(
        &mut self,
        new_creator_virtuals_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.new_creator_virtuals_ata = Some(new_creator_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn new_creator_token_ata(
        &mut self,
        new_creator_token_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.new_creator_token_ata = Some(new_creator_token_ata);
        self
    }

    #[inline(always)]
    pub fn vpool(&mut self, vpool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vpool = Some(vpool);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdatePoolCreator {
            creator: self.creator.expect("creator is not set"),
            new_creator: self.new_creator.expect("new_creator is not set"),
            virtuals_mint: self.virtuals_mint.unwrap_or(solana_program::pubkey!(
                "3iQL8BFS2vE7mww4ehAqQHAsbmRNCrPxizWAT2Zfyr9y"
            )),
            token_mint: self.token_mint.expect("token_mint is not set"),
            new_creator_virtuals_ata: self
                .new_creator_virtuals_ata
                .expect("new_creator_virtuals_ata is not set"),
            new_creator_token_ata: self
                .new_creator_token_ata
                .expect("new_creator_token_ata is not set"),
            vpool: self.vpool.expect("vpool is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `update_pool_creator` CPI accounts.
pub struct UpdatePoolCreatorCpiAccounts<'a, 'b> {
    pub creator: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_creator: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_creator_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_creator_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_pool_creator` CPI instruction.
pub struct UpdatePoolCreatorCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub creator: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_creator: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_creator_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub new_creator_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> UpdatePoolCreatorCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdatePoolCreatorCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            creator: accounts.creator,
            new_creator: accounts.new_creator,
            virtuals_mint: accounts.virtuals_mint,
            token_mint: accounts.token_mint,
            new_creator_virtuals_ata: accounts.new_creator_virtuals_ata,
            new_creator_token_ata: accounts.new_creator_token_ata,
            vpool: accounts.vpool,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.creator.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.new_creator.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.virtuals_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.new_creator_virtuals_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.new_creator_token_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vpool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&UpdatePoolCreatorInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::VIRTUALS_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.creator.clone());
        account_infos.push(self.new_creator.clone());
        account_infos.push(self.virtuals_mint.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.new_creator_virtuals_ata.clone());
        account_infos.push(self.new_creator_token_ata.clone());
        account_infos.push(self.vpool.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdatePoolCreator` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` creator
///   1. `[]` new_creator
///   2. `[]` virtuals_mint
///   3. `[]` token_mint
///   4. `[writable]` new_creator_virtuals_ata
///   5. `[writable]` new_creator_token_ata
///   6. `[]` vpool
///   7. `[]` token_program
///   8. `[]` associated_token_program
///   9. `[]` system_program
#[derive(Clone, Debug)]
pub struct UpdatePoolCreatorCpiBuilder<'a, 'b> {
    instruction: Box<UpdatePoolCreatorCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdatePoolCreatorCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdatePoolCreatorCpiBuilderInstruction {
            __program: program,
            creator: None,
            new_creator: None,
            virtuals_mint: None,
            token_mint: None,
            new_creator_virtuals_ata: None,
            new_creator_token_ata: None,
            vpool: None,
            token_program: None,
            associated_token_program: None,
            system_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn creator(
        &mut self,
        creator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.creator = Some(creator);
        self
    }

    #[inline(always)]
    pub fn new_creator(
        &mut self,
        new_creator: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_creator = Some(new_creator);
        self
    }

    #[inline(always)]
    pub fn virtuals_mint(
        &mut self,
        virtuals_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtuals_mint = Some(virtuals_mint);
        self
    }

    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }

    #[inline(always)]
    pub fn new_creator_virtuals_ata(
        &mut self,
        new_creator_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_creator_virtuals_ata = Some(new_creator_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn new_creator_token_ata(
        &mut self,
        new_creator_token_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_creator_token_ata = Some(new_creator_token_ata);
        self
    }

    #[inline(always)]
    pub fn vpool(&mut self, vpool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vpool = Some(vpool);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = UpdatePoolCreatorCpi {
            __program: self.instruction.__program,

            creator: self.instruction.creator.expect("creator is not set"),

            new_creator: self
                .instruction
                .new_creator
                .expect("new_creator is not set"),

            virtuals_mint: self
                .instruction
                .virtuals_mint
                .expect("virtuals_mint is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            new_creator_virtuals_ata: self
                .instruction
                .new_creator_virtuals_ata
                .expect("new_creator_virtuals_ata is not set"),

            new_creator_token_ata: self
                .instruction
                .new_creator_token_ata
                .expect("new_creator_token_ata is not set"),

            vpool: self.instruction.vpool.expect("vpool is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct UpdatePoolCreatorCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    creator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_creator: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    virtuals_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_creator_virtuals_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_creator_token_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vpool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
