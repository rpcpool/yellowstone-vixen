//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct Sell {
    pub user: solana_program::pubkey::Pubkey,

    pub vpool: solana_program::pubkey::Pubkey,

    pub token_mint: solana_program::pubkey::Pubkey,

    pub user_virtuals_ata: solana_program::pubkey::Pubkey,

    pub user_token_ata: solana_program::pubkey::Pubkey,

    pub vpool_token_ata: solana_program::pubkey::Pubkey,

    pub platform_prototype: solana_program::pubkey::Pubkey,

    pub platform_prototype_virtuals_ata: solana_program::pubkey::Pubkey,

    pub vpool_virtuals_ata: solana_program::pubkey::Pubkey,

    pub token_program: solana_program::pubkey::Pubkey,
}

impl Sell {
    pub fn instruction(
        &self,
        args: SellInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SellInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.user, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vpool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_virtuals_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.user_token_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vpool_token_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.platform_prototype,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.platform_prototype_virtuals_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vpool_virtuals_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&SellInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::VIRTUALS_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SellInstructionData {
    discriminator: [u8; 8],
}

impl SellInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [51, 230, 133, 164, 1, 127, 131, 173],
        }
    }
}

impl Default for SellInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SellInstructionArgs {
    pub amount: u64,
    pub min_amount_out: u64,
}

/// Instruction builder for `Sell`.
///
/// ### Accounts:
///
///   0. `[signer]` user
///   1. `[writable]` vpool
///   2. `[]` token_mint
///   3. `[writable]` user_virtuals_ata
///   4. `[writable]` user_token_ata
///   5. `[writable]` vpool_token_ata
///   6. `[writable, optional]` platform_prototype (default to `933jV351WDG23QTcHPqLFJxyYRrEPWRTR3qoPWi3jwEL`)
///   7. `[writable]` platform_prototype_virtuals_ata
///   8. `[writable]` vpool_virtuals_ata
///   9. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
#[derive(Clone, Debug, Default)]
pub struct SellBuilder {
    user: Option<solana_program::pubkey::Pubkey>,
    vpool: Option<solana_program::pubkey::Pubkey>,
    token_mint: Option<solana_program::pubkey::Pubkey>,
    user_virtuals_ata: Option<solana_program::pubkey::Pubkey>,
    user_token_ata: Option<solana_program::pubkey::Pubkey>,
    vpool_token_ata: Option<solana_program::pubkey::Pubkey>,
    platform_prototype: Option<solana_program::pubkey::Pubkey>,
    platform_prototype_virtuals_ata: Option<solana_program::pubkey::Pubkey>,
    vpool_virtuals_ata: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    amount: Option<u64>,
    min_amount_out: Option<u64>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl SellBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn user(&mut self, user: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user = Some(user);
        self
    }

    #[inline(always)]
    pub fn vpool(&mut self, vpool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vpool = Some(vpool);
        self
    }

    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }

    #[inline(always)]
    pub fn user_virtuals_ata(
        &mut self,
        user_virtuals_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.user_virtuals_ata = Some(user_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn user_token_ata(&mut self, user_token_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.user_token_ata = Some(user_token_ata);
        self
    }

    #[inline(always)]
    pub fn vpool_token_ata(
        &mut self,
        vpool_token_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vpool_token_ata = Some(vpool_token_ata);
        self
    }

    /// `[optional account, default to '933jV351WDG23QTcHPqLFJxyYRrEPWRTR3qoPWi3jwEL']`
    #[inline(always)]
    pub fn platform_prototype(
        &mut self,
        platform_prototype: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.platform_prototype = Some(platform_prototype);
        self
    }

    #[inline(always)]
    pub fn platform_prototype_virtuals_ata(
        &mut self,
        platform_prototype_virtuals_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.platform_prototype_virtuals_ata = Some(platform_prototype_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn vpool_virtuals_ata(
        &mut self,
        vpool_virtuals_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vpool_virtuals_ata = Some(vpool_virtuals_ata);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }

    #[inline(always)]
    pub fn min_amount_out(&mut self, min_amount_out: u64) -> &mut Self {
        self.min_amount_out = Some(min_amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = Sell {
            user: self.user.expect("user is not set"),
            vpool: self.vpool.expect("vpool is not set"),
            token_mint: self.token_mint.expect("token_mint is not set"),
            user_virtuals_ata: self
                .user_virtuals_ata
                .expect("user_virtuals_ata is not set"),
            user_token_ata: self.user_token_ata.expect("user_token_ata is not set"),
            vpool_token_ata: self.vpool_token_ata.expect("vpool_token_ata is not set"),
            platform_prototype: self.platform_prototype.unwrap_or(solana_program::pubkey!(
                "933jV351WDG23QTcHPqLFJxyYRrEPWRTR3qoPWi3jwEL"
            )),
            platform_prototype_virtuals_ata: self
                .platform_prototype_virtuals_ata
                .expect("platform_prototype_virtuals_ata is not set"),
            vpool_virtuals_ata: self
                .vpool_virtuals_ata
                .expect("vpool_virtuals_ata is not set"),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
        };
        let args = SellInstructionArgs {
            amount: self.amount.clone().expect("amount is not set"),
            min_amount_out: self
                .min_amount_out
                .clone()
                .expect("min_amount_out is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `sell` CPI accounts.
pub struct SellCpiAccounts<'a, 'b> {
    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub platform_prototype: &'b solana_program::account_info::AccountInfo<'a>,

    pub platform_prototype_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `sell` CPI instruction.
pub struct SellCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub user: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub user_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub platform_prototype: &'b solana_program::account_info::AccountInfo<'a>,

    pub platform_prototype_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SellInstructionArgs,
}

impl<'a, 'b> SellCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: SellCpiAccounts<'a, 'b>,
        args: SellInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            user: accounts.user,
            vpool: accounts.vpool,
            token_mint: accounts.token_mint,
            user_virtuals_ata: accounts.user_virtuals_ata,
            user_token_ata: accounts.user_token_ata,
            vpool_token_ata: accounts.vpool_token_ata,
            platform_prototype: accounts.platform_prototype,
            platform_prototype_virtuals_ata: accounts.platform_prototype_virtuals_ata,
            vpool_virtuals_ata: accounts.vpool_virtuals_ata,
            token_program: accounts.token_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(10 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.user.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vpool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_virtuals_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.user_token_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vpool_token_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.platform_prototype.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.platform_prototype_virtuals_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vpool_virtuals_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&SellInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::VIRTUALS_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(11 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.user.clone());
        account_infos.push(self.vpool.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.user_virtuals_ata.clone());
        account_infos.push(self.user_token_ata.clone());
        account_infos.push(self.vpool_token_ata.clone());
        account_infos.push(self.platform_prototype.clone());
        account_infos.push(self.platform_prototype_virtuals_ata.clone());
        account_infos.push(self.vpool_virtuals_ata.clone());
        account_infos.push(self.token_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `Sell` via CPI.
///
/// ### Accounts:
///
///   0. `[signer]` user
///   1. `[writable]` vpool
///   2. `[]` token_mint
///   3. `[writable]` user_virtuals_ata
///   4. `[writable]` user_token_ata
///   5. `[writable]` vpool_token_ata
///   6. `[writable]` platform_prototype
///   7. `[writable]` platform_prototype_virtuals_ata
///   8. `[writable]` vpool_virtuals_ata
///   9. `[]` token_program
#[derive(Clone, Debug)]
pub struct SellCpiBuilder<'a, 'b> {
    instruction: Box<SellCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SellCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SellCpiBuilderInstruction {
            __program: program,
            user: None,
            vpool: None,
            token_mint: None,
            user_virtuals_ata: None,
            user_token_ata: None,
            vpool_token_ata: None,
            platform_prototype: None,
            platform_prototype_virtuals_ata: None,
            vpool_virtuals_ata: None,
            token_program: None,
            amount: None,
            min_amount_out: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn user(&mut self, user: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.user = Some(user);
        self
    }

    #[inline(always)]
    pub fn vpool(&mut self, vpool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vpool = Some(vpool);
        self
    }

    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }

    #[inline(always)]
    pub fn user_virtuals_ata(
        &mut self,
        user_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_virtuals_ata = Some(user_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn user_token_ata(
        &mut self,
        user_token_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.user_token_ata = Some(user_token_ata);
        self
    }

    #[inline(always)]
    pub fn vpool_token_ata(
        &mut self,
        vpool_token_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vpool_token_ata = Some(vpool_token_ata);
        self
    }

    #[inline(always)]
    pub fn platform_prototype(
        &mut self,
        platform_prototype: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.platform_prototype = Some(platform_prototype);
        self
    }

    #[inline(always)]
    pub fn platform_prototype_virtuals_ata(
        &mut self,
        platform_prototype_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.platform_prototype_virtuals_ata = Some(platform_prototype_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn vpool_virtuals_ata(
        &mut self,
        vpool_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vpool_virtuals_ata = Some(vpool_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }

    #[inline(always)]
    pub fn min_amount_out(&mut self, min_amount_out: u64) -> &mut Self {
        self.instruction.min_amount_out = Some(min_amount_out);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = SellInstructionArgs {
            amount: self.instruction.amount.clone().expect("amount is not set"),
            min_amount_out: self
                .instruction
                .min_amount_out
                .clone()
                .expect("min_amount_out is not set"),
        };
        let instruction = SellCpi {
            __program: self.instruction.__program,

            user: self.instruction.user.expect("user is not set"),

            vpool: self.instruction.vpool.expect("vpool is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            user_virtuals_ata: self
                .instruction
                .user_virtuals_ata
                .expect("user_virtuals_ata is not set"),

            user_token_ata: self
                .instruction
                .user_token_ata
                .expect("user_token_ata is not set"),

            vpool_token_ata: self
                .instruction
                .vpool_token_ata
                .expect("vpool_token_ata is not set"),

            platform_prototype: self
                .instruction
                .platform_prototype
                .expect("platform_prototype is not set"),

            platform_prototype_virtuals_ata: self
                .instruction
                .platform_prototype_virtuals_ata
                .expect("platform_prototype_virtuals_ata is not set"),

            vpool_virtuals_ata: self
                .instruction
                .vpool_virtuals_ata
                .expect("vpool_virtuals_ata is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SellCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    user: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vpool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_virtuals_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    user_token_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vpool_token_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    platform_prototype: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    platform_prototype_virtuals_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vpool_virtuals_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    amount: Option<u64>,
    min_amount_out: Option<u64>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
