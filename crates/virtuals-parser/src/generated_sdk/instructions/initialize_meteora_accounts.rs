//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct InitializeMeteoraAccounts {
    pub vpool: solana_program::pubkey::Pubkey,

    pub meteora_deployer: solana_program::pubkey::Pubkey,

    pub meteora_deployer_virtuals_ata: solana_program::pubkey::Pubkey,

    pub meteora_deployer_token_ata: solana_program::pubkey::Pubkey,

    pub vpool_virtuals_ata: solana_program::pubkey::Pubkey,

    pub vpool_token_ata: solana_program::pubkey::Pubkey,

    pub lock_escrow: solana_program::pubkey::Pubkey,

    pub escrow_vault: solana_program::pubkey::Pubkey,

    pub pool: solana_program::pubkey::Pubkey,

    pub config: solana_program::pubkey::Pubkey,

    pub lp_mint: solana_program::pubkey::Pubkey,

    pub virtuals_mint: solana_program::pubkey::Pubkey,

    pub token_mint: solana_program::pubkey::Pubkey,

    pub virtuals_vault: solana_program::pubkey::Pubkey,

    pub token_vault: solana_program::pubkey::Pubkey,

    pub virtuals_token_vault: solana_program::pubkey::Pubkey,

    pub token_token_vault: solana_program::pubkey::Pubkey,

    pub virtuals_vault_lp_mint: solana_program::pubkey::Pubkey,

    pub token_vault_lp_mint: solana_program::pubkey::Pubkey,

    pub virtuals_vault_lp: solana_program::pubkey::Pubkey,

    pub token_vault_lp: solana_program::pubkey::Pubkey,

    pub pool_virtuals_ata: solana_program::pubkey::Pubkey,

    pub pool_token_ata: solana_program::pubkey::Pubkey,

    pub meteora_deployer_pool_lp: solana_program::pubkey::Pubkey,

    pub protocol_virtuals_fee: solana_program::pubkey::Pubkey,

    pub protocol_token_fee: solana_program::pubkey::Pubkey,

    pub payer: solana_program::pubkey::Pubkey,

    pub token_metadata: solana_program::pubkey::Pubkey,
    /// Rent account.
    pub rent: solana_program::pubkey::Pubkey,

    pub mint_metadata: solana_program::pubkey::Pubkey,

    pub metadata_program: solana_program::pubkey::Pubkey,

    pub vault_program: solana_program::pubkey::Pubkey,
    /// Token program.
    pub token_program: solana_program::pubkey::Pubkey,
    /// Associated token program.
    pub associated_token_program: solana_program::pubkey::Pubkey,
    /// System program.
    pub system_program: solana_program::pubkey::Pubkey,

    pub dynamic_amm_program: solana_program::pubkey::Pubkey,
}

impl InitializeMeteoraAccounts {
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(&[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(36 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vpool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.meteora_deployer,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.meteora_deployer_virtuals_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.meteora_deployer_token_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vpool_virtuals_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.vpool_token_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lock_escrow,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.escrow_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.virtuals_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.virtuals_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.virtuals_token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_token_vault,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.virtuals_vault_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_vault_lp_mint,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.virtuals_vault_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_vault_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_virtuals_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.pool_token_ata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.meteora_deployer_pool_lp,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_virtuals_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.protocol_token_fee,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.payer, true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.token_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.mint_metadata,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.metadata_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.vault_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.dynamic_amm_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let data = borsh::to_vec(&InitializeMeteoraAccountsInstructionData::new()).unwrap();

        solana_program::instruction::Instruction {
            program_id: crate::VIRTUALS_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeMeteoraAccountsInstructionData {
    discriminator: [u8; 8],
}

impl InitializeMeteoraAccountsInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [53, 12, 118, 158, 253, 239, 185, 214],
        }
    }
}

impl Default for InitializeMeteoraAccountsInstructionData {
    fn default() -> Self { Self::new() }
}

/// Instruction builder for `InitializeMeteoraAccounts`.
///
/// ### Accounts:
///
///   0. `[writable]` vpool
///   1. `[writable]` meteora_deployer
///   2. `[writable]` meteora_deployer_virtuals_ata
///   3. `[writable]` meteora_deployer_token_ata
///   4. `[writable]` vpool_virtuals_ata
///   5. `[writable]` vpool_token_ata
///   6. `[writable]` lock_escrow
///   7. `[writable]` escrow_vault
///   8. `[writable]` pool
///   9. `[optional]` config (default to `B6FT4AHhQJ7BttrC1i223km5bYRUA2nVwBR7k5TVwLtx`)
///   10. `[writable]` lp_mint
///   11. `[optional]` virtuals_mint (default to `3iQL8BFS2vE7mww4ehAqQHAsbmRNCrPxizWAT2Zfyr9y`)
///   12. `[]` token_mint
///   13. `[writable]` virtuals_vault
///   14. `[writable]` token_vault
///   15. `[writable]` virtuals_token_vault
///   16. `[writable]` token_token_vault
///   17. `[writable]` virtuals_vault_lp_mint
///   18. `[writable]` token_vault_lp_mint
///   19. `[writable]` virtuals_vault_lp
///   20. `[writable]` token_vault_lp
///   21. `[writable]` pool_virtuals_ata
///   22. `[writable]` pool_token_ata
///   23. `[writable]` meteora_deployer_pool_lp
///   24. `[writable]` protocol_virtuals_fee
///   25. `[writable]` protocol_token_fee
///   26. `[writable, signer]` payer
///   27. `[writable]` token_metadata
///   28. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
///   29. `[writable]` mint_metadata
///   30. `[optional]` metadata_program (default to `metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s`)
///   31. `[optional]` vault_program (default to `24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi`)
///   32. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   33. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   34. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   35. `[optional]` dynamic_amm_program (default to `Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB`)
#[derive(Clone, Debug, Default)]
pub struct InitializeMeteoraAccountsBuilder {
    vpool: Option<solana_program::pubkey::Pubkey>,
    meteora_deployer: Option<solana_program::pubkey::Pubkey>,
    meteora_deployer_virtuals_ata: Option<solana_program::pubkey::Pubkey>,
    meteora_deployer_token_ata: Option<solana_program::pubkey::Pubkey>,
    vpool_virtuals_ata: Option<solana_program::pubkey::Pubkey>,
    vpool_token_ata: Option<solana_program::pubkey::Pubkey>,
    lock_escrow: Option<solana_program::pubkey::Pubkey>,
    escrow_vault: Option<solana_program::pubkey::Pubkey>,
    pool: Option<solana_program::pubkey::Pubkey>,
    config: Option<solana_program::pubkey::Pubkey>,
    lp_mint: Option<solana_program::pubkey::Pubkey>,
    virtuals_mint: Option<solana_program::pubkey::Pubkey>,
    token_mint: Option<solana_program::pubkey::Pubkey>,
    virtuals_vault: Option<solana_program::pubkey::Pubkey>,
    token_vault: Option<solana_program::pubkey::Pubkey>,
    virtuals_token_vault: Option<solana_program::pubkey::Pubkey>,
    token_token_vault: Option<solana_program::pubkey::Pubkey>,
    virtuals_vault_lp_mint: Option<solana_program::pubkey::Pubkey>,
    token_vault_lp_mint: Option<solana_program::pubkey::Pubkey>,
    virtuals_vault_lp: Option<solana_program::pubkey::Pubkey>,
    token_vault_lp: Option<solana_program::pubkey::Pubkey>,
    pool_virtuals_ata: Option<solana_program::pubkey::Pubkey>,
    pool_token_ata: Option<solana_program::pubkey::Pubkey>,
    meteora_deployer_pool_lp: Option<solana_program::pubkey::Pubkey>,
    protocol_virtuals_fee: Option<solana_program::pubkey::Pubkey>,
    protocol_token_fee: Option<solana_program::pubkey::Pubkey>,
    payer: Option<solana_program::pubkey::Pubkey>,
    token_metadata: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    mint_metadata: Option<solana_program::pubkey::Pubkey>,
    metadata_program: Option<solana_program::pubkey::Pubkey>,
    vault_program: Option<solana_program::pubkey::Pubkey>,
    token_program: Option<solana_program::pubkey::Pubkey>,
    associated_token_program: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    dynamic_amm_program: Option<solana_program::pubkey::Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeMeteoraAccountsBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn vpool(&mut self, vpool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vpool = Some(vpool);
        self
    }

    #[inline(always)]
    pub fn meteora_deployer(
        &mut self,
        meteora_deployer: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.meteora_deployer = Some(meteora_deployer);
        self
    }

    #[inline(always)]
    pub fn meteora_deployer_virtuals_ata(
        &mut self,
        meteora_deployer_virtuals_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.meteora_deployer_virtuals_ata = Some(meteora_deployer_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn meteora_deployer_token_ata(
        &mut self,
        meteora_deployer_token_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.meteora_deployer_token_ata = Some(meteora_deployer_token_ata);
        self
    }

    #[inline(always)]
    pub fn vpool_virtuals_ata(
        &mut self,
        vpool_virtuals_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vpool_virtuals_ata = Some(vpool_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn vpool_token_ata(
        &mut self,
        vpool_token_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.vpool_token_ata = Some(vpool_token_ata);
        self
    }

    #[inline(always)]
    pub fn lock_escrow(&mut self, lock_escrow: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lock_escrow = Some(lock_escrow);
        self
    }

    #[inline(always)]
    pub fn escrow_vault(&mut self, escrow_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.escrow_vault = Some(escrow_vault);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    /// `[optional account, default to 'B6FT4AHhQJ7BttrC1i223km5bYRUA2nVwBR7k5TVwLtx']`
    #[inline(always)]
    pub fn config(&mut self, config: solana_program::pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn lp_mint(&mut self, lp_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.lp_mint = Some(lp_mint);
        self
    }

    /// `[optional account, default to '3iQL8BFS2vE7mww4ehAqQHAsbmRNCrPxizWAT2Zfyr9y']`
    #[inline(always)]
    pub fn virtuals_mint(&mut self, virtuals_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.virtuals_mint = Some(virtuals_mint);
        self
    }

    #[inline(always)]
    pub fn token_mint(&mut self, token_mint: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_mint = Some(token_mint);
        self
    }

    #[inline(always)]
    pub fn virtuals_vault(&mut self, virtuals_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.virtuals_vault = Some(virtuals_vault);
        self
    }

    #[inline(always)]
    pub fn token_vault(&mut self, token_vault: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_vault = Some(token_vault);
        self
    }

    #[inline(always)]
    pub fn virtuals_token_vault(
        &mut self,
        virtuals_token_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.virtuals_token_vault = Some(virtuals_token_vault);
        self
    }

    #[inline(always)]
    pub fn token_token_vault(
        &mut self,
        token_token_vault: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_token_vault = Some(token_token_vault);
        self
    }

    #[inline(always)]
    pub fn virtuals_vault_lp_mint(
        &mut self,
        virtuals_vault_lp_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.virtuals_vault_lp_mint = Some(virtuals_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn token_vault_lp_mint(
        &mut self,
        token_vault_lp_mint: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.token_vault_lp_mint = Some(token_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn virtuals_vault_lp(
        &mut self,
        virtuals_vault_lp: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.virtuals_vault_lp = Some(virtuals_vault_lp);
        self
    }

    #[inline(always)]
    pub fn token_vault_lp(&mut self, token_vault_lp: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_vault_lp = Some(token_vault_lp);
        self
    }

    #[inline(always)]
    pub fn pool_virtuals_ata(
        &mut self,
        pool_virtuals_ata: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_virtuals_ata = Some(pool_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn pool_token_ata(&mut self, pool_token_ata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.pool_token_ata = Some(pool_token_ata);
        self
    }

    #[inline(always)]
    pub fn meteora_deployer_pool_lp(
        &mut self,
        meteora_deployer_pool_lp: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.meteora_deployer_pool_lp = Some(meteora_deployer_pool_lp);
        self
    }

    #[inline(always)]
    pub fn protocol_virtuals_fee(
        &mut self,
        protocol_virtuals_fee: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_virtuals_fee = Some(protocol_virtuals_fee);
        self
    }

    #[inline(always)]
    pub fn protocol_token_fee(
        &mut self,
        protocol_token_fee: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.protocol_token_fee = Some(protocol_token_fee);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_program::pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn token_metadata(&mut self, token_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_metadata = Some(token_metadata);
        self
    }

    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    /// Rent account.
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn mint_metadata(&mut self, mint_metadata: solana_program::pubkey::Pubkey) -> &mut Self {
        self.mint_metadata = Some(mint_metadata);
        self
    }

    /// `[optional account, default to 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s']`
    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.metadata_program = Some(metadata_program);
        self
    }

    /// `[optional account, default to '24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi']`
    #[inline(always)]
    pub fn vault_program(&mut self, vault_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.vault_program = Some(vault_program);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    /// Token program.
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    /// Associated token program.
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    /// System program.
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    /// `[optional account, default to 'Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB']`
    #[inline(always)]
    pub fn dynamic_amm_program(
        &mut self,
        dynamic_amm_program: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.dynamic_amm_program = Some(dynamic_amm_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeMeteoraAccounts {
            vpool: self.vpool.expect("vpool is not set"),
            meteora_deployer: self.meteora_deployer.expect("meteora_deployer is not set"),
            meteora_deployer_virtuals_ata: self
                .meteora_deployer_virtuals_ata
                .expect("meteora_deployer_virtuals_ata is not set"),
            meteora_deployer_token_ata: self
                .meteora_deployer_token_ata
                .expect("meteora_deployer_token_ata is not set"),
            vpool_virtuals_ata: self
                .vpool_virtuals_ata
                .expect("vpool_virtuals_ata is not set"),
            vpool_token_ata: self.vpool_token_ata.expect("vpool_token_ata is not set"),
            lock_escrow: self.lock_escrow.expect("lock_escrow is not set"),
            escrow_vault: self.escrow_vault.expect("escrow_vault is not set"),
            pool: self.pool.expect("pool is not set"),
            config: self.config.unwrap_or(solana_program::pubkey!(
                "B6FT4AHhQJ7BttrC1i223km5bYRUA2nVwBR7k5TVwLtx"
            )),
            lp_mint: self.lp_mint.expect("lp_mint is not set"),
            virtuals_mint: self.virtuals_mint.unwrap_or(solana_program::pubkey!(
                "3iQL8BFS2vE7mww4ehAqQHAsbmRNCrPxizWAT2Zfyr9y"
            )),
            token_mint: self.token_mint.expect("token_mint is not set"),
            virtuals_vault: self.virtuals_vault.expect("virtuals_vault is not set"),
            token_vault: self.token_vault.expect("token_vault is not set"),
            virtuals_token_vault: self
                .virtuals_token_vault
                .expect("virtuals_token_vault is not set"),
            token_token_vault: self
                .token_token_vault
                .expect("token_token_vault is not set"),
            virtuals_vault_lp_mint: self
                .virtuals_vault_lp_mint
                .expect("virtuals_vault_lp_mint is not set"),
            token_vault_lp_mint: self
                .token_vault_lp_mint
                .expect("token_vault_lp_mint is not set"),
            virtuals_vault_lp: self
                .virtuals_vault_lp
                .expect("virtuals_vault_lp is not set"),
            token_vault_lp: self.token_vault_lp.expect("token_vault_lp is not set"),
            pool_virtuals_ata: self
                .pool_virtuals_ata
                .expect("pool_virtuals_ata is not set"),
            pool_token_ata: self.pool_token_ata.expect("pool_token_ata is not set"),
            meteora_deployer_pool_lp: self
                .meteora_deployer_pool_lp
                .expect("meteora_deployer_pool_lp is not set"),
            protocol_virtuals_fee: self
                .protocol_virtuals_fee
                .expect("protocol_virtuals_fee is not set"),
            protocol_token_fee: self
                .protocol_token_fee
                .expect("protocol_token_fee is not set"),
            payer: self.payer.expect("payer is not set"),
            token_metadata: self.token_metadata.expect("token_metadata is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
            mint_metadata: self.mint_metadata.expect("mint_metadata is not set"),
            metadata_program: self.metadata_program.unwrap_or(solana_program::pubkey!(
                "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s"
            )),
            vault_program: self.vault_program.unwrap_or(solana_program::pubkey!(
                "24Uqj9JCLxUeoC3hGfh5W3s9FM9uCHDS2SG3LYwBpyTi"
            )),
            token_program: self.token_program.unwrap_or(solana_program::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_program::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
            dynamic_amm_program: self.dynamic_amm_program.unwrap_or(solana_program::pubkey!(
                "Eo7WjKq67rjJQSZxS6z3YkapzY3eMj6Xy8X5EQVn5UaB"
            )),
        };

        accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
    }
}

/// `initialize_meteora_accounts` CPI accounts.
pub struct InitializeMeteoraAccountsCpiAccounts<'a, 'b> {
    pub vpool: &'b solana_program::account_info::AccountInfo<'a>,

    pub meteora_deployer: &'b solana_program::account_info::AccountInfo<'a>,

    pub meteora_deployer_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub meteora_deployer_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_escrow: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub meteora_deployer_pool_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_virtuals_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Rent account.
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Associated token program.
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub dynamic_amm_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_meteora_accounts` CPI instruction.
pub struct InitializeMeteoraAccountsCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool: &'b solana_program::account_info::AccountInfo<'a>,

    pub meteora_deployer: &'b solana_program::account_info::AccountInfo<'a>,

    pub meteora_deployer_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub meteora_deployer_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub vpool_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub lock_escrow: &'b solana_program::account_info::AccountInfo<'a>,

    pub escrow_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool: &'b solana_program::account_info::AccountInfo<'a>,

    pub config: &'b solana_program::account_info::AccountInfo<'a>,

    pub lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_token_vault: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,

    pub virtuals_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub pool_token_ata: &'b solana_program::account_info::AccountInfo<'a>,

    pub meteora_deployer_pool_lp: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_virtuals_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub protocol_token_fee: &'b solana_program::account_info::AccountInfo<'a>,

    pub payer: &'b solana_program::account_info::AccountInfo<'a>,

    pub token_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    /// Rent account.
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,

    pub mint_metadata: &'b solana_program::account_info::AccountInfo<'a>,

    pub metadata_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub vault_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Token program.
    pub token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Associated token program.
    pub associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// System program.
    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,

    pub dynamic_amm_program: &'b solana_program::account_info::AccountInfo<'a>,
}

impl<'a, 'b> InitializeMeteoraAccountsCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeMeteoraAccountsCpiAccounts<'a, 'b>,
    ) -> Self {
        Self {
            __program: program,
            vpool: accounts.vpool,
            meteora_deployer: accounts.meteora_deployer,
            meteora_deployer_virtuals_ata: accounts.meteora_deployer_virtuals_ata,
            meteora_deployer_token_ata: accounts.meteora_deployer_token_ata,
            vpool_virtuals_ata: accounts.vpool_virtuals_ata,
            vpool_token_ata: accounts.vpool_token_ata,
            lock_escrow: accounts.lock_escrow,
            escrow_vault: accounts.escrow_vault,
            pool: accounts.pool,
            config: accounts.config,
            lp_mint: accounts.lp_mint,
            virtuals_mint: accounts.virtuals_mint,
            token_mint: accounts.token_mint,
            virtuals_vault: accounts.virtuals_vault,
            token_vault: accounts.token_vault,
            virtuals_token_vault: accounts.virtuals_token_vault,
            token_token_vault: accounts.token_token_vault,
            virtuals_vault_lp_mint: accounts.virtuals_vault_lp_mint,
            token_vault_lp_mint: accounts.token_vault_lp_mint,
            virtuals_vault_lp: accounts.virtuals_vault_lp,
            token_vault_lp: accounts.token_vault_lp,
            pool_virtuals_ata: accounts.pool_virtuals_ata,
            pool_token_ata: accounts.pool_token_ata,
            meteora_deployer_pool_lp: accounts.meteora_deployer_pool_lp,
            protocol_virtuals_fee: accounts.protocol_virtuals_fee,
            protocol_token_fee: accounts.protocol_token_fee,
            payer: accounts.payer,
            token_metadata: accounts.token_metadata,
            rent: accounts.rent,
            mint_metadata: accounts.mint_metadata,
            metadata_program: accounts.metadata_program,
            vault_program: accounts.vault_program,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
            dynamic_amm_program: accounts.dynamic_amm_program,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(36 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vpool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.meteora_deployer.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.meteora_deployer_virtuals_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.meteora_deployer_token_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vpool_virtuals_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.vpool_token_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lock_escrow.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.escrow_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.virtuals_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.virtuals_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.virtuals_token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_token_vault.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.virtuals_vault_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_vault_lp_mint.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.virtuals_vault_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_vault_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_virtuals_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.pool_token_ata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.meteora_deployer_pool_lp.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_virtuals_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.protocol_token_fee.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.payer.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.token_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.mint_metadata.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.metadata_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.vault_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.dynamic_amm_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let data = borsh::to_vec(&InitializeMeteoraAccountsInstructionData::new()).unwrap();

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::VIRTUALS_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(37 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.vpool.clone());
        account_infos.push(self.meteora_deployer.clone());
        account_infos.push(self.meteora_deployer_virtuals_ata.clone());
        account_infos.push(self.meteora_deployer_token_ata.clone());
        account_infos.push(self.vpool_virtuals_ata.clone());
        account_infos.push(self.vpool_token_ata.clone());
        account_infos.push(self.lock_escrow.clone());
        account_infos.push(self.escrow_vault.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.lp_mint.clone());
        account_infos.push(self.virtuals_mint.clone());
        account_infos.push(self.token_mint.clone());
        account_infos.push(self.virtuals_vault.clone());
        account_infos.push(self.token_vault.clone());
        account_infos.push(self.virtuals_token_vault.clone());
        account_infos.push(self.token_token_vault.clone());
        account_infos.push(self.virtuals_vault_lp_mint.clone());
        account_infos.push(self.token_vault_lp_mint.clone());
        account_infos.push(self.virtuals_vault_lp.clone());
        account_infos.push(self.token_vault_lp.clone());
        account_infos.push(self.pool_virtuals_ata.clone());
        account_infos.push(self.pool_token_ata.clone());
        account_infos.push(self.meteora_deployer_pool_lp.clone());
        account_infos.push(self.protocol_virtuals_fee.clone());
        account_infos.push(self.protocol_token_fee.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.token_metadata.clone());
        account_infos.push(self.rent.clone());
        account_infos.push(self.mint_metadata.clone());
        account_infos.push(self.metadata_program.clone());
        account_infos.push(self.vault_program.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.dynamic_amm_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeMeteoraAccounts` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` vpool
///   1. `[writable]` meteora_deployer
///   2. `[writable]` meteora_deployer_virtuals_ata
///   3. `[writable]` meteora_deployer_token_ata
///   4. `[writable]` vpool_virtuals_ata
///   5. `[writable]` vpool_token_ata
///   6. `[writable]` lock_escrow
///   7. `[writable]` escrow_vault
///   8. `[writable]` pool
///   9. `[]` config
///   10. `[writable]` lp_mint
///   11. `[]` virtuals_mint
///   12. `[]` token_mint
///   13. `[writable]` virtuals_vault
///   14. `[writable]` token_vault
///   15. `[writable]` virtuals_token_vault
///   16. `[writable]` token_token_vault
///   17. `[writable]` virtuals_vault_lp_mint
///   18. `[writable]` token_vault_lp_mint
///   19. `[writable]` virtuals_vault_lp
///   20. `[writable]` token_vault_lp
///   21. `[writable]` pool_virtuals_ata
///   22. `[writable]` pool_token_ata
///   23. `[writable]` meteora_deployer_pool_lp
///   24. `[writable]` protocol_virtuals_fee
///   25. `[writable]` protocol_token_fee
///   26. `[writable, signer]` payer
///   27. `[writable]` token_metadata
///   28. `[]` rent
///   29. `[writable]` mint_metadata
///   30. `[]` metadata_program
///   31. `[]` vault_program
///   32. `[]` token_program
///   33. `[]` associated_token_program
///   34. `[]` system_program
///   35. `[]` dynamic_amm_program
#[derive(Clone, Debug)]
pub struct InitializeMeteoraAccountsCpiBuilder<'a, 'b> {
    instruction: Box<InitializeMeteoraAccountsCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeMeteoraAccountsCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeMeteoraAccountsCpiBuilderInstruction {
            __program: program,
            vpool: None,
            meteora_deployer: None,
            meteora_deployer_virtuals_ata: None,
            meteora_deployer_token_ata: None,
            vpool_virtuals_ata: None,
            vpool_token_ata: None,
            lock_escrow: None,
            escrow_vault: None,
            pool: None,
            config: None,
            lp_mint: None,
            virtuals_mint: None,
            token_mint: None,
            virtuals_vault: None,
            token_vault: None,
            virtuals_token_vault: None,
            token_token_vault: None,
            virtuals_vault_lp_mint: None,
            token_vault_lp_mint: None,
            virtuals_vault_lp: None,
            token_vault_lp: None,
            pool_virtuals_ata: None,
            pool_token_ata: None,
            meteora_deployer_pool_lp: None,
            protocol_virtuals_fee: None,
            protocol_token_fee: None,
            payer: None,
            token_metadata: None,
            rent: None,
            mint_metadata: None,
            metadata_program: None,
            vault_program: None,
            token_program: None,
            associated_token_program: None,
            system_program: None,
            dynamic_amm_program: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn vpool(&mut self, vpool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.vpool = Some(vpool);
        self
    }

    #[inline(always)]
    pub fn meteora_deployer(
        &mut self,
        meteora_deployer: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.meteora_deployer = Some(meteora_deployer);
        self
    }

    #[inline(always)]
    pub fn meteora_deployer_virtuals_ata(
        &mut self,
        meteora_deployer_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.meteora_deployer_virtuals_ata = Some(meteora_deployer_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn meteora_deployer_token_ata(
        &mut self,
        meteora_deployer_token_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.meteora_deployer_token_ata = Some(meteora_deployer_token_ata);
        self
    }

    #[inline(always)]
    pub fn vpool_virtuals_ata(
        &mut self,
        vpool_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vpool_virtuals_ata = Some(vpool_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn vpool_token_ata(
        &mut self,
        vpool_token_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vpool_token_ata = Some(vpool_token_ata);
        self
    }

    #[inline(always)]
    pub fn lock_escrow(
        &mut self,
        lock_escrow: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lock_escrow = Some(lock_escrow);
        self
    }

    #[inline(always)]
    pub fn escrow_vault(
        &mut self,
        escrow_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.escrow_vault = Some(escrow_vault);
        self
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn config(
        &mut self,
        config: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn lp_mint(
        &mut self,
        lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.lp_mint = Some(lp_mint);
        self
    }

    #[inline(always)]
    pub fn virtuals_mint(
        &mut self,
        virtuals_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtuals_mint = Some(virtuals_mint);
        self
    }

    #[inline(always)]
    pub fn token_mint(
        &mut self,
        token_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_mint = Some(token_mint);
        self
    }

    #[inline(always)]
    pub fn virtuals_vault(
        &mut self,
        virtuals_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtuals_vault = Some(virtuals_vault);
        self
    }

    #[inline(always)]
    pub fn token_vault(
        &mut self,
        token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_vault = Some(token_vault);
        self
    }

    #[inline(always)]
    pub fn virtuals_token_vault(
        &mut self,
        virtuals_token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtuals_token_vault = Some(virtuals_token_vault);
        self
    }

    #[inline(always)]
    pub fn token_token_vault(
        &mut self,
        token_token_vault: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_token_vault = Some(token_token_vault);
        self
    }

    #[inline(always)]
    pub fn virtuals_vault_lp_mint(
        &mut self,
        virtuals_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtuals_vault_lp_mint = Some(virtuals_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn token_vault_lp_mint(
        &mut self,
        token_vault_lp_mint: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_vault_lp_mint = Some(token_vault_lp_mint);
        self
    }

    #[inline(always)]
    pub fn virtuals_vault_lp(
        &mut self,
        virtuals_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.virtuals_vault_lp = Some(virtuals_vault_lp);
        self
    }

    #[inline(always)]
    pub fn token_vault_lp(
        &mut self,
        token_vault_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_vault_lp = Some(token_vault_lp);
        self
    }

    #[inline(always)]
    pub fn pool_virtuals_ata(
        &mut self,
        pool_virtuals_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_virtuals_ata = Some(pool_virtuals_ata);
        self
    }

    #[inline(always)]
    pub fn pool_token_ata(
        &mut self,
        pool_token_ata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_token_ata = Some(pool_token_ata);
        self
    }

    #[inline(always)]
    pub fn meteora_deployer_pool_lp(
        &mut self,
        meteora_deployer_pool_lp: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.meteora_deployer_pool_lp = Some(meteora_deployer_pool_lp);
        self
    }

    #[inline(always)]
    pub fn protocol_virtuals_fee(
        &mut self,
        protocol_virtuals_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_virtuals_fee = Some(protocol_virtuals_fee);
        self
    }

    #[inline(always)]
    pub fn protocol_token_fee(
        &mut self,
        protocol_token_fee: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.protocol_token_fee = Some(protocol_token_fee);
        self
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn token_metadata(
        &mut self,
        token_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_metadata = Some(token_metadata);
        self
    }

    /// Rent account.
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }

    #[inline(always)]
    pub fn mint_metadata(
        &mut self,
        mint_metadata: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.mint_metadata = Some(mint_metadata);
        self
    }

    #[inline(always)]
    pub fn metadata_program(
        &mut self,
        metadata_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.metadata_program = Some(metadata_program);
        self
    }

    #[inline(always)]
    pub fn vault_program(
        &mut self,
        vault_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.vault_program = Some(vault_program);
        self
    }

    /// Token program.
    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    /// Associated token program.
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    /// System program.
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn dynamic_amm_program(
        &mut self,
        dynamic_amm_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.dynamic_amm_program = Some(dynamic_amm_program);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let instruction = InitializeMeteoraAccountsCpi {
            __program: self.instruction.__program,

            vpool: self.instruction.vpool.expect("vpool is not set"),

            meteora_deployer: self
                .instruction
                .meteora_deployer
                .expect("meteora_deployer is not set"),

            meteora_deployer_virtuals_ata: self
                .instruction
                .meteora_deployer_virtuals_ata
                .expect("meteora_deployer_virtuals_ata is not set"),

            meteora_deployer_token_ata: self
                .instruction
                .meteora_deployer_token_ata
                .expect("meteora_deployer_token_ata is not set"),

            vpool_virtuals_ata: self
                .instruction
                .vpool_virtuals_ata
                .expect("vpool_virtuals_ata is not set"),

            vpool_token_ata: self
                .instruction
                .vpool_token_ata
                .expect("vpool_token_ata is not set"),

            lock_escrow: self
                .instruction
                .lock_escrow
                .expect("lock_escrow is not set"),

            escrow_vault: self
                .instruction
                .escrow_vault
                .expect("escrow_vault is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            config: self.instruction.config.expect("config is not set"),

            lp_mint: self.instruction.lp_mint.expect("lp_mint is not set"),

            virtuals_mint: self
                .instruction
                .virtuals_mint
                .expect("virtuals_mint is not set"),

            token_mint: self.instruction.token_mint.expect("token_mint is not set"),

            virtuals_vault: self
                .instruction
                .virtuals_vault
                .expect("virtuals_vault is not set"),

            token_vault: self
                .instruction
                .token_vault
                .expect("token_vault is not set"),

            virtuals_token_vault: self
                .instruction
                .virtuals_token_vault
                .expect("virtuals_token_vault is not set"),

            token_token_vault: self
                .instruction
                .token_token_vault
                .expect("token_token_vault is not set"),

            virtuals_vault_lp_mint: self
                .instruction
                .virtuals_vault_lp_mint
                .expect("virtuals_vault_lp_mint is not set"),

            token_vault_lp_mint: self
                .instruction
                .token_vault_lp_mint
                .expect("token_vault_lp_mint is not set"),

            virtuals_vault_lp: self
                .instruction
                .virtuals_vault_lp
                .expect("virtuals_vault_lp is not set"),

            token_vault_lp: self
                .instruction
                .token_vault_lp
                .expect("token_vault_lp is not set"),

            pool_virtuals_ata: self
                .instruction
                .pool_virtuals_ata
                .expect("pool_virtuals_ata is not set"),

            pool_token_ata: self
                .instruction
                .pool_token_ata
                .expect("pool_token_ata is not set"),

            meteora_deployer_pool_lp: self
                .instruction
                .meteora_deployer_pool_lp
                .expect("meteora_deployer_pool_lp is not set"),

            protocol_virtuals_fee: self
                .instruction
                .protocol_virtuals_fee
                .expect("protocol_virtuals_fee is not set"),

            protocol_token_fee: self
                .instruction
                .protocol_token_fee
                .expect("protocol_token_fee is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            token_metadata: self
                .instruction
                .token_metadata
                .expect("token_metadata is not set"),

            rent: self.instruction.rent.expect("rent is not set"),

            mint_metadata: self
                .instruction
                .mint_metadata
                .expect("mint_metadata is not set"),

            metadata_program: self
                .instruction
                .metadata_program
                .expect("metadata_program is not set"),

            vault_program: self
                .instruction
                .vault_program
                .expect("vault_program is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            dynamic_amm_program: self
                .instruction
                .dynamic_amm_program
                .expect("dynamic_amm_program is not set"),
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializeMeteoraAccountsCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    vpool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    meteora_deployer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    meteora_deployer_virtuals_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    meteora_deployer_token_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vpool_virtuals_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vpool_token_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lock_escrow: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    escrow_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    virtuals_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    virtuals_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    virtuals_token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_token_vault: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    virtuals_vault_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_vault_lp_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    virtuals_vault_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_vault_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_virtuals_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    pool_token_ata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    meteora_deployer_pool_lp: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_virtuals_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    protocol_token_fee: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    mint_metadata: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    metadata_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    vault_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    dynamic_amm_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
