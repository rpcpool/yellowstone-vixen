//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::FeeEvent};
    impl IntoProto<proto_def::FeeEvent> for FeeEvent {
        fn into_proto(self) -> proto_def::FeeEvent {
            proto_def::FeeEvent {
                account: self.account.to_string(),
                mint: self.mint.to_string(),
                amount: self.amount,
            }
        }
    }
    use crate::types::RemainingAccountsInfo;
    impl IntoProto<proto_def::RemainingAccountsInfo> for RemainingAccountsInfo {
        fn into_proto(self) -> proto_def::RemainingAccountsInfo {
            proto_def::RemainingAccountsInfo {
                slices: self.slices.into_iter().map(|x| x.into_proto()).collect(),
            }
        }
    }
    use crate::types::RemainingAccountsSlice;
    impl IntoProto<proto_def::RemainingAccountsSlice> for RemainingAccountsSlice {
        fn into_proto(self) -> proto_def::RemainingAccountsSlice {
            proto_def::RemainingAccountsSlice {
                accounts_type: self.accounts_type as i32,
                length: self.length.into(),
            }
        }
    }
    use crate::types::RoutePlanStep;
    impl IntoProto<proto_def::RoutePlanStep> for RoutePlanStep {
        fn into_proto(self) -> proto_def::RoutePlanStep {
            proto_def::RoutePlanStep {
                swap: Some(self.swap.into_proto()),
                percent: self.percent.into(),
                input_index: self.input_index.into(),
                output_index: self.output_index.into(),
            }
        }
    }
    use crate::types::SwapEvent;
    impl IntoProto<proto_def::SwapEvent> for SwapEvent {
        fn into_proto(self) -> proto_def::SwapEvent {
            proto_def::SwapEvent {
                amm: self.amm.to_string(),
                input_mint: self.input_mint.to_string(),
                input_amount: self.input_amount,
                output_mint: self.output_mint.to_string(),
                output_amount: self.output_amount,
            }
        }
    }

    use proto_def::swap;

    use crate::types::Swap;
    impl IntoProto<proto_def::Swap> for Swap {
        fn into_proto(self) -> proto_def::Swap {
            let variant = match self {
                Swap::Saber => swap::Variant::Saber(proto_def::SwapSaber {}),
                Swap::SaberAddDecimalsDeposit => swap::Variant::SaberAddDecimalsDeposit(
                    proto_def::SwapSaberAddDecimalsDeposit {},
                ),
                Swap::SaberAddDecimalsWithdraw => swap::Variant::SaberAddDecimalsWithdraw(
                    proto_def::SwapSaberAddDecimalsWithdraw {},
                ),
                Swap::TokenSwap => swap::Variant::TokenSwap(proto_def::SwapTokenSwap {}),
                Swap::Sencha => swap::Variant::Sencha(proto_def::SwapSencha {}),
                Swap::Step => swap::Variant::Step(proto_def::SwapStep {}),
                Swap::Cropper => swap::Variant::Cropper(proto_def::SwapCropper {}),
                Swap::Raydium => swap::Variant::Raydium(proto_def::SwapRaydium {}),
                Swap::Crema { a_to_b } => swap::Variant::Crema(proto_def::SwapCrema { a_to_b }),
                Swap::Lifinity => swap::Variant::Lifinity(proto_def::SwapLifinity {}),
                Swap::Mercurial => swap::Variant::Mercurial(proto_def::SwapMercurial {}),
                Swap::Cykura => swap::Variant::Cykura(proto_def::SwapCykura {}),
                Swap::Serum { side } => {
                    swap::Variant::Serum(proto_def::SwapSerum { side: side as i32 })
                },
                Swap::MarinadeDeposit => {
                    swap::Variant::MarinadeDeposit(proto_def::SwapMarinadeDeposit {})
                },
                Swap::MarinadeUnstake => {
                    swap::Variant::MarinadeUnstake(proto_def::SwapMarinadeUnstake {})
                },
                Swap::Aldrin { side } => {
                    swap::Variant::Aldrin(proto_def::SwapAldrin { side: side as i32 })
                },
                Swap::AldrinV2 { side } => {
                    swap::Variant::AldrinV2(proto_def::SwapAldrinV2 { side: side as i32 })
                },
                Swap::Whirlpool { a_to_b } => {
                    swap::Variant::Whirlpool(proto_def::SwapWhirlpool { a_to_b })
                },
                Swap::Invariant { x_to_y } => {
                    swap::Variant::Invariant(proto_def::SwapInvariant { x_to_y })
                },
                Swap::Meteora => swap::Variant::Meteora(proto_def::SwapMeteora {}),
                Swap::GooseFX => swap::Variant::GooseFX(proto_def::SwapGooseFx {}),
                Swap::DeltaFi { stable } => {
                    swap::Variant::DeltaFi(proto_def::SwapDeltaFi { stable })
                },
                Swap::Balansol => swap::Variant::Balansol(proto_def::SwapBalansol {}),
                Swap::MarcoPolo { x_to_y } => {
                    swap::Variant::MarcoPolo(proto_def::SwapMarcoPolo { x_to_y })
                },
                Swap::Dradex { side } => {
                    swap::Variant::Dradex(proto_def::SwapDradex { side: side as i32 })
                },
                Swap::LifinityV2 => swap::Variant::LifinityV2(proto_def::SwapLifinityV2 {}),
                Swap::RaydiumClmm => swap::Variant::RaydiumClmm(proto_def::SwapRaydiumClmm {}),
                Swap::Openbook { side } => {
                    swap::Variant::Openbook(proto_def::SwapOpenbook { side: side as i32 })
                },
                Swap::Phoenix { side } => {
                    swap::Variant::Phoenix(proto_def::SwapPhoenix { side: side as i32 })
                },
                Swap::Symmetry {
                    from_token_id,
                    to_token_id,
                } => swap::Variant::Symmetry(proto_def::SwapSymmetry {
                    from_token_id,
                    to_token_id,
                }),
                Swap::TokenSwapV2 => swap::Variant::TokenSwapV2(proto_def::SwapTokenSwapV2 {}),
                Swap::HeliumTreasuryManagementRedeemV0 => {
                    swap::Variant::HeliumTreasuryManagementRedeemV0(
                        proto_def::SwapHeliumTreasuryManagementRedeemV0 {},
                    )
                },
                Swap::StakeDexStakeWrappedSol => swap::Variant::StakeDexStakeWrappedSol(
                    proto_def::SwapStakeDexStakeWrappedSol {},
                ),
                Swap::StakeDexSwapViaStake { bridge_stake_seed } => {
                    swap::Variant::StakeDexSwapViaStake(proto_def::SwapStakeDexSwapViaStake {
                        bridge_stake_seed,
                    })
                },
                Swap::GooseFXV2 => swap::Variant::GooseFXV2(proto_def::SwapGooseFxv2 {}),
                Swap::Perps => swap::Variant::Perps(proto_def::SwapPerps {}),
                Swap::PerpsAddLiquidity => {
                    swap::Variant::PerpsAddLiquidity(proto_def::SwapPerpsAddLiquidity {})
                },
                Swap::PerpsRemoveLiquidity => {
                    swap::Variant::PerpsRemoveLiquidity(proto_def::SwapPerpsRemoveLiquidity {})
                },
                Swap::MeteoraDlmm => swap::Variant::MeteoraDlmm(proto_def::SwapMeteoraDlmm {}),
                Swap::OpenBookV2 { side } => {
                    swap::Variant::OpenBookV2(proto_def::SwapOpenBookV2 { side: side as i32 })
                },
                Swap::RaydiumClmmV2 => {
                    swap::Variant::RaydiumClmmV2(proto_def::SwapRaydiumClmmV2 {})
                },
                Swap::StakeDexPrefundWithdrawStakeAndDepositStake { bridge_stake_seed } => {
                    swap::Variant::StakeDexPrefundWithdrawStakeAndDepositStake(
                        proto_def::SwapStakeDexPrefundWithdrawStakeAndDepositStake {
                            bridge_stake_seed,
                        },
                    )
                },
                Swap::Clone {
                    pool_index,
                    quantity_is_input,
                    quantity_is_collateral,
                } => swap::Variant::Clone(proto_def::SwapClone {
                    pool_index: pool_index.into(),
                    quantity_is_input,
                    quantity_is_collateral,
                }),
                Swap::SanctumS {
                    src_lst_value_calc_accs,
                    dst_lst_value_calc_accs,
                    src_lst_index,
                    dst_lst_index,
                } => swap::Variant::SanctumS(proto_def::SwapSanctumS {
                    src_lst_value_calc_accs: src_lst_value_calc_accs.into(),
                    dst_lst_value_calc_accs: dst_lst_value_calc_accs.into(),
                    src_lst_index,
                    dst_lst_index,
                }),
                Swap::SanctumSAddLiquidity {
                    lst_value_calc_accs,
                    lst_index,
                } => swap::Variant::SanctumSAddLiquidity(proto_def::SwapSanctumSAddLiquidity {
                    lst_value_calc_accs: lst_value_calc_accs.into(),
                    lst_index,
                }),
                Swap::SanctumSRemoveLiquidity {
                    lst_value_calc_accs,
                    lst_index,
                } => {
                    swap::Variant::SanctumSRemoveLiquidity(proto_def::SwapSanctumSRemoveLiquidity {
                        lst_value_calc_accs: lst_value_calc_accs.into(),
                        lst_index,
                    })
                },
                Swap::RaydiumCP => swap::Variant::RaydiumCP(proto_def::SwapRaydiumCp {}),
                Swap::WhirlpoolSwapV2 {
                    a_to_b,
                    remaining_accounts_info,
                } => swap::Variant::WhirlpoolSwapV2(proto_def::SwapWhirlpoolSwapV2 {
                    a_to_b,
                    remaining_accounts_info: remaining_accounts_info.map(|x| x.into_proto()),
                }),
                Swap::OneIntro => swap::Variant::OneIntro(proto_def::SwapOneIntro {}),
                Swap::PumpdotfunWrappedBuy => {
                    swap::Variant::PumpdotfunWrappedBuy(proto_def::SwapPumpdotfunWrappedBuy {})
                },
                Swap::PumpdotfunWrappedSell => {
                    swap::Variant::PumpdotfunWrappedSell(proto_def::SwapPumpdotfunWrappedSell {})
                },
                Swap::PerpsV2 => swap::Variant::PerpsV2(proto_def::SwapPerpsV2 {}),
                Swap::PerpsV2AddLiquidity => {
                    swap::Variant::PerpsV2AddLiquidity(proto_def::SwapPerpsV2AddLiquidity {})
                },
                Swap::PerpsV2RemoveLiquidity => {
                    swap::Variant::PerpsV2RemoveLiquidity(proto_def::SwapPerpsV2RemoveLiquidity {})
                },
                Swap::MoonshotWrappedBuy => {
                    swap::Variant::MoonshotWrappedBuy(proto_def::SwapMoonshotWrappedBuy {})
                },
                Swap::MoonshotWrappedSell => {
                    swap::Variant::MoonshotWrappedSell(proto_def::SwapMoonshotWrappedSell {})
                },
                Swap::StabbleStableSwap => {
                    swap::Variant::StabbleStableSwap(proto_def::SwapStabbleStableSwap {})
                },
                Swap::StabbleWeightedSwap => {
                    swap::Variant::StabbleWeightedSwap(proto_def::SwapStabbleWeightedSwap {})
                },
                Swap::Obric { x_to_y } => swap::Variant::Obric(proto_def::SwapObric { x_to_y }),
                Swap::FoxBuyFromEstimatedCost => swap::Variant::FoxBuyFromEstimatedCost(
                    proto_def::SwapFoxBuyFromEstimatedCost {},
                ),
                Swap::FoxClaimPartial { is_y } => {
                    swap::Variant::FoxClaimPartial(proto_def::SwapFoxClaimPartial { is_y })
                },
                Swap::SolFi { is_quote_to_base } => {
                    swap::Variant::SolFi(proto_def::SwapSolFi { is_quote_to_base })
                },
                Swap::SolayerDelegateNoInit => {
                    swap::Variant::SolayerDelegateNoInit(proto_def::SwapSolayerDelegateNoInit {})
                },
                Swap::SolayerUndelegateNoInit => swap::Variant::SolayerUndelegateNoInit(
                    proto_def::SwapSolayerUndelegateNoInit {},
                ),
                Swap::TokenMill { side } => {
                    swap::Variant::TokenMill(proto_def::SwapTokenMill { side: side as i32 })
                },
                Swap::DaosFunBuy => swap::Variant::DaosFunBuy(proto_def::SwapDaosFunBuy {}),
                Swap::DaosFunSell => swap::Variant::DaosFunSell(proto_def::SwapDaosFunSell {}),
                Swap::ZeroFi => swap::Variant::ZeroFi(proto_def::SwapZeroFi {}),
                Swap::StakeDexWithdrawWrappedSol => swap::Variant::StakeDexWithdrawWrappedSol(
                    proto_def::SwapStakeDexWithdrawWrappedSol {},
                ),
                Swap::VirtualsBuy => swap::Variant::VirtualsBuy(proto_def::SwapVirtualsBuy {}),
                Swap::VirtualsSell => swap::Variant::VirtualsSell(proto_def::SwapVirtualsSell {}),
                Swap::Perena {
                    in_index,
                    out_index,
                } => swap::Variant::Perena(proto_def::SwapPerena {
                    in_index: in_index.into(),
                    out_index: out_index.into(),
                }),
                Swap::PumpdotfunAmmBuy => {
                    swap::Variant::PumpdotfunAmmBuy(proto_def::SwapPumpdotfunAmmBuy {})
                },
                Swap::PumpdotfunAmmSell => {
                    swap::Variant::PumpdotfunAmmSell(proto_def::SwapPumpdotfunAmmSell {})
                },
                Swap::Gamma => swap::Variant::Gamma(proto_def::SwapGamma {}),
                Swap::MeteoraDlmmSwapV2 {
                    remaining_accounts_info,
                } => swap::Variant::MeteoraDlmmSwapV2(proto_def::SwapMeteoraDlmmSwapV2 {
                    remaining_accounts_info: Some(remaining_accounts_info.into_proto()),
                }),
                Swap::Woofi => swap::Variant::Woofi(proto_def::SwapWoofi {}),
                Swap::MeteoraDammV2 => {
                    swap::Variant::MeteoraDammV2(proto_def::SwapMeteoraDammV2 {})
                },
                Swap::MeteoraDynamicBondingCurveSwap => {
                    swap::Variant::MeteoraDynamicBondingCurveSwap(
                        proto_def::SwapMeteoraDynamicBondingCurveSwap {},
                    )
                },
                Swap::StabbleStableSwapV2 => {
                    swap::Variant::StabbleStableSwapV2(proto_def::SwapStabbleStableSwapV2 {})
                },
                Swap::StabbleWeightedSwapV2 => {
                    swap::Variant::StabbleWeightedSwapV2(proto_def::SwapStabbleWeightedSwapV2 {})
                },
                Swap::RaydiumLaunchlabBuy { share_fee_rate } => {
                    swap::Variant::RaydiumLaunchlabBuy(proto_def::SwapRaydiumLaunchlabBuy {
                        share_fee_rate,
                    })
                },
                Swap::RaydiumLaunchlabSell { share_fee_rate } => {
                    swap::Variant::RaydiumLaunchlabSell(proto_def::SwapRaydiumLaunchlabSell {
                        share_fee_rate,
                    })
                },
                Swap::BoopdotfunWrappedBuy => {
                    swap::Variant::BoopdotfunWrappedBuy(proto_def::SwapBoopdotfunWrappedBuy {})
                },
                Swap::BoopdotfunWrappedSell => {
                    swap::Variant::BoopdotfunWrappedSell(proto_def::SwapBoopdotfunWrappedSell {})
                },
                Swap::Plasma { side } => {
                    swap::Variant::Plasma(proto_def::SwapPlasma { side: side as i32 })
                },
                Swap::GoonFi {
                    is_bid,
                    blacklist_bump,
                } => swap::Variant::GoonFi(proto_def::SwapGoonFi {
                    is_bid,
                    blacklist_bump: blacklist_bump.into(),
                }),
                Swap::HumidiFi {
                    swap_id,
                    is_base_to_quote,
                } => swap::Variant::HumidiFi(proto_def::SwapHumidiFi {
                    swap_id,
                    is_base_to_quote,
                }),
                Swap::MeteoraDynamicBondingCurveSwapWithRemainingAccounts => {
                    swap::Variant::MeteoraDynamicBondingCurveSwapWithRemainingAccounts(
                        proto_def::SwapMeteoraDynamicBondingCurveSwapWithRemainingAccounts {},
                    )
                },
                Swap::TesseraV { side } => {
                    swap::Variant::TesseraV(proto_def::SwapTesseraV { side: side as i32 })
                },
                Swap::RaydiumStable => {
                    swap::Variant::RaydiumStable(proto_def::SwapRaydiumStable {})
                },
            };

            proto_def::Swap {
                variant: Some(variant),
            }
        }
    }
}
