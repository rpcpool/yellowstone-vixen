//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum JupiterError {
    /// 6000 - Empty route
    #[error("Empty route")]
    EmptyRoute = 0x1770,
    /// 6001 - Slippage tolerance exceeded
    #[error("Slippage tolerance exceeded")]
    SlippageToleranceExceeded = 0x1771,
    /// 6002 - Invalid calculation
    #[error("Invalid calculation")]
    InvalidCalculation = 0x1772,
    /// 6003 - Missing platform fee account
    #[error("Missing platform fee account")]
    MissingPlatformFeeAccount = 0x1773,
    /// 6004 - Invalid slippage
    #[error("Invalid slippage")]
    InvalidSlippage = 0x1774,
    /// 6005 - Not enough percent to 100
    #[error("Not enough percent to 100")]
    NotEnoughPercent = 0x1775,
    /// 6006 - Token input index is invalid
    #[error("Token input index is invalid")]
    InvalidInputIndex = 0x1776,
    /// 6007 - Token output index is invalid
    #[error("Token output index is invalid")]
    InvalidOutputIndex = 0x1777,
    /// 6008 - Not Enough Account keys
    #[error("Not Enough Account keys")]
    NotEnoughAccountKeys = 0x1778,
    /// 6009 - Non zero minimum out amount not supported
    #[error("Non zero minimum out amount not supported")]
    NonZeroMinimumOutAmountNotSupported = 0x1779,
    /// 6010 - Invalid route plan
    #[error("Invalid route plan")]
    InvalidRoutePlan = 0x177a,
    /// 6011 - Invalid referral authority
    #[error("Invalid referral authority")]
    InvalidReferralAuthority = 0x177b,
    /// 6012 - Token account doesn't match the ledger
    #[error("Token account doesn't match the ledger")]
    LedgerTokenAccountDoesNotMatch = 0x177c,
    /// 6013 - Invalid token ledger
    #[error("Invalid token ledger")]
    InvalidTokenLedger = 0x177d,
    /// 6014 - Token program ID is invalid
    #[error("Token program ID is invalid")]
    IncorrectTokenProgramID = 0x177e,
    /// 6015 - Token program not provided
    #[error("Token program not provided")]
    TokenProgramNotProvided = 0x177f,
    /// 6016 - Swap not supported
    #[error("Swap not supported")]
    SwapNotSupported = 0x1780,
    /// 6017 - Exact out amount doesn't match
    #[error("Exact out amount doesn't match")]
    ExactOutAmountNotMatched = 0x1781,
    /// 6018 - Source mint and destination mint cannot the same
    #[error("Source mint and destination mint cannot the same")]
    SourceAndDestinationMintCannotBeTheSame = 0x1782,
}

impl solana_program_error::PrintProgramError for JupiterError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

impl<T> solana_decode_error::DecodeError<T> for JupiterError {
    fn type_of() -> &'static str { "JupiterError" }
}
