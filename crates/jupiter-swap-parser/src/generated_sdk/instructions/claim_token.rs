//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
#[derive(Debug)]
pub struct ClaimToken {
    pub payer: solana_pubkey::Pubkey,

    pub wallet: solana_pubkey::Pubkey,

    pub program_authority: solana_pubkey::Pubkey,

    pub program_token_account: solana_pubkey::Pubkey,

    pub destination_token_account: solana_pubkey::Pubkey,

    pub mint: solana_pubkey::Pubkey,

    pub token_program: solana_pubkey::Pubkey,

    pub associated_token_program: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,
}

impl ClaimToken {
    pub fn instruction(&self, args: ClaimTokenInstructionArgs) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: ClaimTokenInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.wallet,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.program_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.destination_token_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.mint, false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.associated_token_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = borsh::to_vec(&ClaimTokenInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimTokenInstructionData {
    discriminator: [u8; 8],
}

impl ClaimTokenInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [116, 206, 27, 191, 166, 19, 0, 73],
        }
    }
}

impl Default for ClaimTokenInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct ClaimTokenInstructionArgs {
    pub id: u8,
}

/// Instruction builder for `ClaimToken`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[optional]` wallet (default to `J434EKW6KDmnJHxVty1axHT6kjszKKFEyesKqxdQ7y64`)
///   2. `[]` program_authority
///   3. `[writable]` program_token_account
///   4. `[writable]` destination_token_account
///   5. `[]` mint
///   6. `[optional]` token_program (default to `TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA`)
///   7. `[optional]` associated_token_program (default to `ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL`)
///   8. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct ClaimTokenBuilder {
    payer: Option<solana_pubkey::Pubkey>,
    wallet: Option<solana_pubkey::Pubkey>,
    program_authority: Option<solana_pubkey::Pubkey>,
    program_token_account: Option<solana_pubkey::Pubkey>,
    destination_token_account: Option<solana_pubkey::Pubkey>,
    mint: Option<solana_pubkey::Pubkey>,
    token_program: Option<solana_pubkey::Pubkey>,
    associated_token_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    id: Option<u8>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ClaimTokenBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    /// `[optional account, default to 'J434EKW6KDmnJHxVty1axHT6kjszKKFEyesKqxdQ7y64']`
    #[inline(always)]
    pub fn wallet(&mut self, wallet: solana_pubkey::Pubkey) -> &mut Self {
        self.wallet = Some(wallet);
        self
    }

    #[inline(always)]
    pub fn program_authority(&mut self, program_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.program_authority = Some(program_authority);
        self
    }

    #[inline(always)]
    pub fn program_token_account(
        &mut self,
        program_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.program_token_account = Some(program_token_account);
        self
    }

    #[inline(always)]
    pub fn destination_token_account(
        &mut self,
        destination_token_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.destination_token_account = Some(destination_token_account);
        self
    }

    #[inline(always)]
    pub fn mint(&mut self, mint: solana_pubkey::Pubkey) -> &mut Self {
        self.mint = Some(mint);
        self
    }

    /// `[optional account, default to 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA']`
    #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_program = Some(token_program);
        self
    }

    /// `[optional account, default to 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL']`
    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.associated_token_program = Some(associated_token_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn id(&mut self, id: u8) -> &mut Self {
        self.id = Some(id);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = ClaimToken {
            payer: self.payer.expect("payer is not set"),
            wallet: self.wallet.unwrap_or(solana_pubkey::pubkey!(
                "J434EKW6KDmnJHxVty1axHT6kjszKKFEyesKqxdQ7y64"
            )),
            program_authority: self
                .program_authority
                .expect("program_authority is not set"),
            program_token_account: self
                .program_token_account
                .expect("program_token_account is not set"),
            destination_token_account: self
                .destination_token_account
                .expect("destination_token_account is not set"),
            mint: self.mint.expect("mint is not set"),
            token_program: self.token_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
            )),
            associated_token_program: self.associated_token_program.unwrap_or(
                solana_pubkey::pubkey!("ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"),
            ),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
        };
        let args = ClaimTokenInstructionArgs {
            id: self.id.clone().expect("id is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `claim_token` CPI accounts.
pub struct ClaimTokenCpiAccounts<'a, 'b> {
    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub wallet: &'b solana_account_info::AccountInfo<'a>,

    pub program_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub destination_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub mint: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
}

/// `claim_token` CPI instruction.
pub struct ClaimTokenCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub wallet: &'b solana_account_info::AccountInfo<'a>,

    pub program_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub destination_token_account: &'b solana_account_info::AccountInfo<'a>,

    pub mint: &'b solana_account_info::AccountInfo<'a>,

    pub token_program: &'b solana_account_info::AccountInfo<'a>,

    pub associated_token_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: ClaimTokenInstructionArgs,
}

impl<'a, 'b> ClaimTokenCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: ClaimTokenCpiAccounts<'a, 'b>,
        args: ClaimTokenInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            payer: accounts.payer,
            wallet: accounts.wallet,
            program_authority: accounts.program_authority,
            program_token_account: accounts.program_token_account,
            destination_token_account: accounts.destination_token_account,
            mint: accounts.mint,
            token_program: accounts.token_program,
            associated_token_program: accounts.associated_token_program,
            system_program: accounts.system_program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.wallet.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.program_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.destination_token_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.associated_token_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = borsh::to_vec(&ClaimTokenInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::JUPITER_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.wallet.clone());
        account_infos.push(self.program_authority.clone());
        account_infos.push(self.program_token_account.clone());
        account_infos.push(self.destination_token_account.clone());
        account_infos.push(self.mint.clone());
        account_infos.push(self.token_program.clone());
        account_infos.push(self.associated_token_program.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `ClaimToken` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` payer
///   1. `[]` wallet
///   2. `[]` program_authority
///   3. `[writable]` program_token_account
///   4. `[writable]` destination_token_account
///   5. `[]` mint
///   6. `[]` token_program
///   7. `[]` associated_token_program
///   8. `[]` system_program
#[derive(Clone, Debug)]
pub struct ClaimTokenCpiBuilder<'a, 'b> {
    instruction: Box<ClaimTokenCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ClaimTokenCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(ClaimTokenCpiBuilderInstruction {
            __program: program,
            payer: None,
            wallet: None,
            program_authority: None,
            program_token_account: None,
            destination_token_account: None,
            mint: None,
            token_program: None,
            associated_token_program: None,
            system_program: None,
            id: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn wallet(&mut self, wallet: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.wallet = Some(wallet);
        self
    }

    #[inline(always)]
    pub fn program_authority(
        &mut self,
        program_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_authority = Some(program_authority);
        self
    }

    #[inline(always)]
    pub fn program_token_account(
        &mut self,
        program_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.program_token_account = Some(program_token_account);
        self
    }

    #[inline(always)]
    pub fn destination_token_account(
        &mut self,
        destination_token_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.destination_token_account = Some(destination_token_account);
        self
    }

    #[inline(always)]
    pub fn mint(&mut self, mint: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.mint = Some(mint);
        self
    }

    #[inline(always)]
    pub fn token_program(
        &mut self,
        token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_program = Some(token_program);
        self
    }

    #[inline(always)]
    pub fn associated_token_program(
        &mut self,
        associated_token_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.associated_token_program = Some(associated_token_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn id(&mut self, id: u8) -> &mut Self {
        self.instruction.id = Some(id);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = ClaimTokenInstructionArgs {
            id: self.instruction.id.clone().expect("id is not set"),
        };
        let instruction = ClaimTokenCpi {
            __program: self.instruction.__program,

            payer: self.instruction.payer.expect("payer is not set"),

            wallet: self.instruction.wallet.expect("wallet is not set"),

            program_authority: self
                .instruction
                .program_authority
                .expect("program_authority is not set"),

            program_token_account: self
                .instruction
                .program_token_account
                .expect("program_token_account is not set"),

            destination_token_account: self
                .instruction
                .destination_token_account
                .expect("destination_token_account is not set"),

            mint: self.instruction.mint.expect("mint is not set"),

            token_program: self
                .instruction
                .token_program
                .expect("token_program is not set"),

            associated_token_program: self
                .instruction
                .associated_token_program
                .expect("associated_token_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct ClaimTokenCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    wallet: Option<&'b solana_account_info::AccountInfo<'a>>,
    program_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    destination_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    associated_token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    id: Option<u8>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
