//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::{
    accounts::{ClaimFeeOperator, Config, Pool, Position, TokenBadge, Vesting},
    deserialize_checked, ID,
};

/// CpAmm Program State
#[allow(clippy::large_enum_variant)]
#[derive(Debug)]
#[cfg_attr(feature = "tracing", derive(strum_macros::Display))]
pub enum CpAmmProgramState {
    ClaimFeeOperator(ClaimFeeOperator),
    Config(Config),
    Pool(Pool),
    Position(Position),
    TokenBadge(TokenBadge),
    Vesting(Vesting),
}

impl CpAmmProgramState {
    pub fn try_unpack(data_bytes: &[u8]) -> yellowstone_vixen_core::ParseResult<Self> {
        let acc_discriminator: [u8; 8] = data_bytes[0..8].try_into()?;
        let acc = match acc_discriminator {
            [166, 48, 134, 86, 34, 200, 188, 150] => Ok(CpAmmProgramState::ClaimFeeOperator(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [155, 12, 170, 224, 30, 250, 204, 130] => Ok(CpAmmProgramState::Config(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [241, 154, 109, 4, 17, 177, 109, 188] => Ok(CpAmmProgramState::Pool(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [170, 188, 143, 228, 122, 64, 247, 208] => Ok(CpAmmProgramState::Position(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [116, 219, 204, 229, 249, 116, 255, 150] => Ok(CpAmmProgramState::TokenBadge(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            [100, 149, 66, 138, 95, 200, 128, 241] => Ok(CpAmmProgramState::Vesting(
                deserialize_checked(data_bytes, &acc_discriminator)?,
            )),
            _ => Err(yellowstone_vixen_core::ParseError::from(
                "Invalid Account discriminator".to_owned(),
            )),
        };

        #[cfg(feature = "tracing")]
        match &acc {
            Ok(acc) => {
                tracing::info!(
                    name: "correctly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = acc.to_string()
                );
            },
            Err(e) => {
                tracing::info!(
                    name: "incorrectly_parsed_account",
                    name = "account_update",
                    program = ID.to_string(),
                    account = "error",
                    discriminator = ?acc_discriminator,
                    error = ?e
                );
            },
        }

        acc
    }
}

#[derive(Debug, Copy, Clone)]
pub struct AccountParser;

impl yellowstone_vixen_core::Parser for AccountParser {
    type Input = yellowstone_vixen_core::AccountUpdate;
    type Output = CpAmmProgramState;

    fn id(&self) -> std::borrow::Cow<str> { "cp_amm::AccountParser".into() }

    fn prefilter(&self) -> yellowstone_vixen_core::Prefilter {
        yellowstone_vixen_core::Prefilter::builder()
            .account_owners([ID])
            .build()
            .unwrap()
    }

    async fn parse(
        &self,
        acct: &yellowstone_vixen_core::AccountUpdate,
    ) -> yellowstone_vixen_core::ParseResult<Self::Output> {
        let inner = acct
            .account
            .as_ref()
            .ok_or(solana_program_error::ProgramError::InvalidArgument)?;
        let res = CpAmmProgramState::try_unpack(&inner.data);

        #[cfg(feature = "tracing")]
        if let Err(e) = &res {
            let acc_discriminator: [u8; 8] = inner.data[0..8].try_into()?;
            tracing::info!(
                name: "incorrectly_parsed_account",
                name = "account_update",
                program = ID.to_string(),
                account = "deserialization_error",
                discriminator = ?acc_discriminator,
                error = ?e
            );
        }

        res
    }
}

impl yellowstone_vixen_core::ProgramParser for AccountParser {
    #[inline]
    fn program_id(&self) -> yellowstone_vixen_core::Pubkey { ID.to_bytes().into() }
}

// #[cfg(feature = "proto")]
mod proto_parser {
    use yellowstone_vixen_core::proto::ParseProto;

    use super::{AccountParser, ClaimFeeOperator, CpAmmProgramState};
    use crate::{proto_def, proto_helpers::proto_types_parsers::IntoProto};
    impl IntoProto<proto_def::ClaimFeeOperator> for ClaimFeeOperator {
        fn into_proto(self) -> proto_def::ClaimFeeOperator {
            proto_def::ClaimFeeOperator {
                operator: self.operator.to_string(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::Config;
    impl IntoProto<proto_def::Config> for Config {
        fn into_proto(self) -> proto_def::Config {
            proto_def::Config {
                vault_config_key: self.vault_config_key.to_string(),
                pool_creator_authority: self.pool_creator_authority.to_string(),
                pool_fees: Some(self.pool_fees.into_proto()),
                activation_type: self.activation_type.into(),
                collect_fee_mode: self.collect_fee_mode.into(),
                config_type: self.config_type.into(),
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
                index: self.index,
                sqrt_min_price: self.sqrt_min_price.to_string(),
                sqrt_max_price: self.sqrt_max_price.to_string(),
                padding1: self.padding1.to_vec(),
            }
        }
    }
    use super::Pool;
    impl IntoProto<proto_def::Pool> for Pool {
        fn into_proto(self) -> proto_def::Pool {
            proto_def::Pool {
                pool_fees: Some(self.pool_fees.into_proto()),
                token_a_mint: self.token_a_mint.to_string(),
                token_b_mint: self.token_b_mint.to_string(),
                token_a_vault: self.token_a_vault.to_string(),
                token_b_vault: self.token_b_vault.to_string(),
                whitelisted_vault: self.whitelisted_vault.to_string(),
                partner: self.partner.to_string(),
                liquidity: self.liquidity.to_string(),
                padding: self.padding.to_string(),
                protocol_a_fee: self.protocol_a_fee,
                protocol_b_fee: self.protocol_b_fee,
                partner_a_fee: self.partner_a_fee,
                partner_b_fee: self.partner_b_fee,
                sqrt_min_price: self.sqrt_min_price.to_string(),
                sqrt_max_price: self.sqrt_max_price.to_string(),
                sqrt_price: self.sqrt_price.to_string(),
                activation_point: self.activation_point,
                activation_type: self.activation_type.into(),
                pool_status: self.pool_status.into(),
                token_a_flag: self.token_a_flag.into(),
                token_b_flag: self.token_b_flag.into(),
                collect_fee_mode: self.collect_fee_mode.into(),
                pool_type: self.pool_type.into(),
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
                fee_a_per_liquidity: self
                    .fee_a_per_liquidity
                    .into_iter()
                    .map(|x| x.into())
                    .collect(),
                fee_b_per_liquidity: self
                    .fee_b_per_liquidity
                    .into_iter()
                    .map(|x| x.into())
                    .collect(),
                permanent_lock_liquidity: self.permanent_lock_liquidity.to_string(),
                metrics: Some(self.metrics.into_proto()),
                padding1: self.padding1.to_vec(),
                reward_infos: self
                    .reward_infos
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
            }
        }
    }
    use super::Position;
    impl IntoProto<proto_def::Position> for Position {
        fn into_proto(self) -> proto_def::Position {
            proto_def::Position {
                pool: self.pool.to_string(),
                nft_mint: self.nft_mint.to_string(),
                fee_a_per_token_checkpoint: self
                    .fee_a_per_token_checkpoint
                    .into_iter()
                    .map(|x| x.into())
                    .collect(),
                fee_b_per_token_checkpoint: self
                    .fee_b_per_token_checkpoint
                    .into_iter()
                    .map(|x| x.into())
                    .collect(),
                fee_a_pending: self.fee_a_pending,
                fee_b_pending: self.fee_b_pending,
                unlocked_liquidity: self.unlocked_liquidity.to_string(),
                vested_liquidity: self.vested_liquidity.to_string(),
                permanent_locked_liquidity: self.permanent_locked_liquidity.to_string(),
                metrics: Some(self.metrics.into_proto()),
                reward_infos: self
                    .reward_infos
                    .into_iter()
                    .map(|x| x.into_proto())
                    .collect(),
                padding: self.padding.into_iter().map(|x| x.to_string()).collect(),
            }
        }
    }
    use super::TokenBadge;
    impl IntoProto<proto_def::TokenBadge> for TokenBadge {
        fn into_proto(self) -> proto_def::TokenBadge {
            proto_def::TokenBadge {
                token_mint: self.token_mint.to_string(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
            }
        }
    }
    use super::Vesting;
    impl IntoProto<proto_def::Vesting> for Vesting {
        fn into_proto(self) -> proto_def::Vesting {
            proto_def::Vesting {
                position: self.position.to_string(),
                cliff_point: self.cliff_point,
                period_frequency: self.period_frequency,
                cliff_unlock_liquidity: self.cliff_unlock_liquidity.to_string(),
                liquidity_per_period: self.liquidity_per_period.to_string(),
                total_released_liquidity: self.total_released_liquidity.to_string(),
                number_of_period: self.number_of_period.into(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
                padding2: self.padding2.into_iter().map(|x| x.to_string()).collect(),
            }
        }
    }

    impl IntoProto<proto_def::ProgramState> for CpAmmProgramState {
        fn into_proto(self) -> proto_def::ProgramState {
            let state_oneof = match self {
                CpAmmProgramState::ClaimFeeOperator(data) => {
                    proto_def::program_state::StateOneof::ClaimFeeOperator(data.into_proto())
                },
                CpAmmProgramState::Config(data) => {
                    proto_def::program_state::StateOneof::Config(data.into_proto())
                },
                CpAmmProgramState::Pool(data) => {
                    proto_def::program_state::StateOneof::Pool(data.into_proto())
                },
                CpAmmProgramState::Position(data) => {
                    proto_def::program_state::StateOneof::Position(data.into_proto())
                },
                CpAmmProgramState::TokenBadge(data) => {
                    proto_def::program_state::StateOneof::TokenBadge(data.into_proto())
                },
                CpAmmProgramState::Vesting(data) => {
                    proto_def::program_state::StateOneof::Vesting(data.into_proto())
                },
            };

            proto_def::ProgramState {
                state_oneof: Some(state_oneof),
            }
        }
    }

    impl ParseProto for AccountParser {
        type Message = proto_def::ProgramState;

        fn output_into_message(value: Self::Output) -> Self::Message { value.into_proto() }
    }
}
