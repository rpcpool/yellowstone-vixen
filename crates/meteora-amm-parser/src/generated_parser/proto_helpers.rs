//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

// #[cfg(feature = "proto")]
pub mod proto_types_parsers {
    use yellowstone_vixen_core::proto_helper_traits;
    proto_helper_traits!();
    use crate::{proto_def, types::AddLiquidityParameters};
    impl IntoProto<proto_def::AddLiquidityParameters> for AddLiquidityParameters {
        fn into_proto(self) -> proto_def::AddLiquidityParameters {
            proto_def::AddLiquidityParameters {
                liquidity_delta: self.liquidity_delta.to_string(),
                token_a_amount_threshold: self.token_a_amount_threshold,
                token_b_amount_threshold: self.token_b_amount_threshold,
            }
        }
    }
    use crate::types::BaseFeeConfig;
    impl IntoProto<proto_def::BaseFeeConfig> for BaseFeeConfig {
        fn into_proto(self) -> proto_def::BaseFeeConfig {
            proto_def::BaseFeeConfig {
                cliff_fee_numerator: self.cliff_fee_numerator,
                fee_scheduler_mode: self.fee_scheduler_mode.into(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
                number_of_period: self.number_of_period.into(),
                period_frequency: self.period_frequency,
                reduction_factor: self.reduction_factor,
            }
        }
    }
    use crate::types::BaseFeeParameters;
    impl IntoProto<proto_def::BaseFeeParameters> for BaseFeeParameters {
        fn into_proto(self) -> proto_def::BaseFeeParameters {
            proto_def::BaseFeeParameters {
                cliff_fee_numerator: self.cliff_fee_numerator,
                number_of_period: self.number_of_period.into(),
                period_frequency: self.period_frequency,
                reduction_factor: self.reduction_factor,
                fee_scheduler_mode: self.fee_scheduler_mode.into(),
            }
        }
    }
    use crate::types::BaseFeeStruct;
    impl IntoProto<proto_def::BaseFeeStruct> for BaseFeeStruct {
        fn into_proto(self) -> proto_def::BaseFeeStruct {
            proto_def::BaseFeeStruct {
                cliff_fee_numerator: self.cliff_fee_numerator,
                fee_scheduler_mode: self.fee_scheduler_mode.into(),
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
                number_of_period: self.number_of_period.into(),
                period_frequency: self.period_frequency,
                reduction_factor: self.reduction_factor,
                padding1: self.padding1,
            }
        }
    }
    use crate::types::DynamicFeeConfig;
    impl IntoProto<proto_def::DynamicFeeConfig> for DynamicFeeConfig {
        fn into_proto(self) -> proto_def::DynamicFeeConfig {
            proto_def::DynamicFeeConfig {
                initialized: self.initialized.into(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
                max_volatility_accumulator: self.max_volatility_accumulator,
                variable_fee_control: self.variable_fee_control,
                bin_step: self.bin_step.into(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                padding1: self.padding1.into_iter().map(|x| x.into()).collect(),
                bin_step_u128: self.bin_step_u128.to_string(),
            }
        }
    }
    use crate::types::DynamicFeeParameters;
    impl IntoProto<proto_def::DynamicFeeParameters> for DynamicFeeParameters {
        fn into_proto(self) -> proto_def::DynamicFeeParameters {
            proto_def::DynamicFeeParameters {
                bin_step: self.bin_step.into(),
                bin_step_u128: self.bin_step_u128.to_string(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                max_volatility_accumulator: self.max_volatility_accumulator,
                variable_fee_control: self.variable_fee_control,
            }
        }
    }
    use crate::types::DynamicFeeStruct;
    impl IntoProto<proto_def::DynamicFeeStruct> for DynamicFeeStruct {
        fn into_proto(self) -> proto_def::DynamicFeeStruct {
            proto_def::DynamicFeeStruct {
                initialized: self.initialized.into(),
                padding: self.padding.into_iter().map(|x| x.into()).collect(),
                max_volatility_accumulator: self.max_volatility_accumulator,
                variable_fee_control: self.variable_fee_control,
                bin_step: self.bin_step.into(),
                filter_period: self.filter_period.into(),
                decay_period: self.decay_period.into(),
                reduction_factor: self.reduction_factor.into(),
                last_update_timestamp: self.last_update_timestamp,
                bin_step_u128: self.bin_step_u128.to_string(),
                sqrt_price_reference: self.sqrt_price_reference.to_string(),
                volatility_accumulator: self.volatility_accumulator.to_string(),
                volatility_reference: self.volatility_reference.to_string(),
            }
        }
    }
    use crate::types::EvtAddLiquidity;
    impl IntoProto<proto_def::EvtAddLiquidity> for EvtAddLiquidity {
        fn into_proto(self) -> proto_def::EvtAddLiquidity {
            proto_def::EvtAddLiquidity {
                pool: self.pool.to_string(),
                position: self.position.to_string(),
                owner: self.owner.to_string(),
                params: Some(self.params.into_proto()),
                token_a_amount: self.token_a_amount,
                token_b_amount: self.token_b_amount,
                total_amount_a: self.total_amount_a,
                total_amount_b: self.total_amount_b,
            }
        }
    }
    use crate::types::EvtClaimPartnerFee;
    impl IntoProto<proto_def::EvtClaimPartnerFee> for EvtClaimPartnerFee {
        fn into_proto(self) -> proto_def::EvtClaimPartnerFee {
            proto_def::EvtClaimPartnerFee {
                pool: self.pool.to_string(),
                token_a_amount: self.token_a_amount,
                token_b_amount: self.token_b_amount,
            }
        }
    }
    use crate::types::EvtClaimPositionFee;
    impl IntoProto<proto_def::EvtClaimPositionFee> for EvtClaimPositionFee {
        fn into_proto(self) -> proto_def::EvtClaimPositionFee {
            proto_def::EvtClaimPositionFee {
                pool: self.pool.to_string(),
                position: self.position.to_string(),
                owner: self.owner.to_string(),
                fee_a_claimed: self.fee_a_claimed,
                fee_b_claimed: self.fee_b_claimed,
            }
        }
    }
    use crate::types::EvtClaimProtocolFee;
    impl IntoProto<proto_def::EvtClaimProtocolFee> for EvtClaimProtocolFee {
        fn into_proto(self) -> proto_def::EvtClaimProtocolFee {
            proto_def::EvtClaimProtocolFee {
                pool: self.pool.to_string(),
                token_a_amount: self.token_a_amount,
                token_b_amount: self.token_b_amount,
            }
        }
    }
    use crate::types::EvtClaimReward;
    impl IntoProto<proto_def::EvtClaimReward> for EvtClaimReward {
        fn into_proto(self) -> proto_def::EvtClaimReward {
            proto_def::EvtClaimReward {
                pool: self.pool.to_string(),
                position: self.position.to_string(),
                owner: self.owner.to_string(),
                mint_reward: self.mint_reward.to_string(),
                reward_index: self.reward_index.into(),
                total_reward: self.total_reward,
            }
        }
    }
    use crate::types::EvtCloseClaimFeeOperator;
    impl IntoProto<proto_def::EvtCloseClaimFeeOperator> for EvtCloseClaimFeeOperator {
        fn into_proto(self) -> proto_def::EvtCloseClaimFeeOperator {
            proto_def::EvtCloseClaimFeeOperator {
                claim_fee_operator: self.claim_fee_operator.to_string(),
                operator: self.operator.to_string(),
            }
        }
    }
    use crate::types::EvtCloseConfig;
    impl IntoProto<proto_def::EvtCloseConfig> for EvtCloseConfig {
        fn into_proto(self) -> proto_def::EvtCloseConfig {
            proto_def::EvtCloseConfig {
                config: self.config.to_string(),
                admin: self.admin.to_string(),
            }
        }
    }
    use crate::types::EvtClosePosition;
    impl IntoProto<proto_def::EvtClosePosition> for EvtClosePosition {
        fn into_proto(self) -> proto_def::EvtClosePosition {
            proto_def::EvtClosePosition {
                pool: self.pool.to_string(),
                owner: self.owner.to_string(),
                position: self.position.to_string(),
                position_nft_mint: self.position_nft_mint.to_string(),
            }
        }
    }
    use crate::types::EvtCreateClaimFeeOperator;
    impl IntoProto<proto_def::EvtCreateClaimFeeOperator> for EvtCreateClaimFeeOperator {
        fn into_proto(self) -> proto_def::EvtCreateClaimFeeOperator {
            proto_def::EvtCreateClaimFeeOperator {
                operator: self.operator.to_string(),
            }
        }
    }
    use crate::types::EvtCreateConfig;
    impl IntoProto<proto_def::EvtCreateConfig> for EvtCreateConfig {
        fn into_proto(self) -> proto_def::EvtCreateConfig {
            proto_def::EvtCreateConfig {
                pool_fees: Some(self.pool_fees.into_proto()),
                vault_config_key: self.vault_config_key.to_string(),
                pool_creator_authority: self.pool_creator_authority.to_string(),
                activation_type: self.activation_type.into(),
                sqrt_min_price: self.sqrt_min_price.to_string(),
                sqrt_max_price: self.sqrt_max_price.to_string(),
                collect_fee_mode: self.collect_fee_mode.into(),
                index: self.index,
                config: self.config.to_string(),
            }
        }
    }
    use crate::types::EvtCreateDynamicConfig;
    impl IntoProto<proto_def::EvtCreateDynamicConfig> for EvtCreateDynamicConfig {
        fn into_proto(self) -> proto_def::EvtCreateDynamicConfig {
            proto_def::EvtCreateDynamicConfig {
                config: self.config.to_string(),
                pool_creator_authority: self.pool_creator_authority.to_string(),
                index: self.index,
            }
        }
    }
    use crate::types::EvtCreatePosition;
    impl IntoProto<proto_def::EvtCreatePosition> for EvtCreatePosition {
        fn into_proto(self) -> proto_def::EvtCreatePosition {
            proto_def::EvtCreatePosition {
                pool: self.pool.to_string(),
                owner: self.owner.to_string(),
                position: self.position.to_string(),
                position_nft_mint: self.position_nft_mint.to_string(),
            }
        }
    }
    use crate::types::EvtCreateTokenBadge;
    impl IntoProto<proto_def::EvtCreateTokenBadge> for EvtCreateTokenBadge {
        fn into_proto(self) -> proto_def::EvtCreateTokenBadge {
            proto_def::EvtCreateTokenBadge {
                token_mint: self.token_mint.to_string(),
            }
        }
    }
    use crate::types::EvtFundReward;
    impl IntoProto<proto_def::EvtFundReward> for EvtFundReward {
        fn into_proto(self) -> proto_def::EvtFundReward {
            proto_def::EvtFundReward {
                pool: self.pool.to_string(),
                funder: self.funder.to_string(),
                mint_reward: self.mint_reward.to_string(),
                reward_index: self.reward_index.into(),
                amount: self.amount,
                transfer_fee_excluded_amount_in: self.transfer_fee_excluded_amount_in,
            }
        }
    }
    use crate::types::EvtInitializePool;
    impl IntoProto<proto_def::EvtInitializePool> for EvtInitializePool {
        fn into_proto(self) -> proto_def::EvtInitializePool {
            proto_def::EvtInitializePool {
                pool: self.pool.to_string(),
                token_a_mint: self.token_a_mint.to_string(),
                token_b_mint: self.token_b_mint.to_string(),
                creator: self.creator.to_string(),
                payer: self.payer.to_string(),
                alpha_vault: self.alpha_vault.to_string(),
                pool_fees: Some(self.pool_fees.into_proto()),
                sqrt_min_price: self.sqrt_min_price.to_string(),
                sqrt_max_price: self.sqrt_max_price.to_string(),
                activation_type: self.activation_type.into(),
                collect_fee_mode: self.collect_fee_mode.into(),
                liquidity: self.liquidity.to_string(),
                sqrt_price: self.sqrt_price.to_string(),
                activation_point: self.activation_point,
                token_a_flag: self.token_a_flag.into(),
                token_b_flag: self.token_b_flag.into(),
                token_a_amount: self.token_a_amount,
                token_b_amount: self.token_b_amount,
                total_amount_a: self.total_amount_a,
                total_amount_b: self.total_amount_b,
                pool_type: self.pool_type.into(),
            }
        }
    }
    use crate::types::EvtInitializeReward;
    impl IntoProto<proto_def::EvtInitializeReward> for EvtInitializeReward {
        fn into_proto(self) -> proto_def::EvtInitializeReward {
            proto_def::EvtInitializeReward {
                pool: self.pool.to_string(),
                reward_mint: self.reward_mint.to_string(),
                funder: self.funder.to_string(),
                reward_index: self.reward_index.into(),
                reward_duration: self.reward_duration,
            }
        }
    }
    use crate::types::EvtLockPosition;
    impl IntoProto<proto_def::EvtLockPosition> for EvtLockPosition {
        fn into_proto(self) -> proto_def::EvtLockPosition {
            proto_def::EvtLockPosition {
                pool: self.pool.to_string(),
                position: self.position.to_string(),
                owner: self.owner.to_string(),
                vesting: self.vesting.to_string(),
                cliff_point: self.cliff_point,
                period_frequency: self.period_frequency,
                cliff_unlock_liquidity: self.cliff_unlock_liquidity.to_string(),
                liquidity_per_period: self.liquidity_per_period.to_string(),
                number_of_period: self.number_of_period.into(),
            }
        }
    }
    use crate::types::EvtPermanentLockPosition;
    impl IntoProto<proto_def::EvtPermanentLockPosition> for EvtPermanentLockPosition {
        fn into_proto(self) -> proto_def::EvtPermanentLockPosition {
            proto_def::EvtPermanentLockPosition {
                pool: self.pool.to_string(),
                position: self.position.to_string(),
                lock_liquidity_amount: self.lock_liquidity_amount.to_string(),
                total_permanent_locked_liquidity: self.total_permanent_locked_liquidity.to_string(),
            }
        }
    }
    use crate::types::EvtRemoveLiquidity;
    impl IntoProto<proto_def::EvtRemoveLiquidity> for EvtRemoveLiquidity {
        fn into_proto(self) -> proto_def::EvtRemoveLiquidity {
            proto_def::EvtRemoveLiquidity {
                pool: self.pool.to_string(),
                position: self.position.to_string(),
                owner: self.owner.to_string(),
                params: Some(self.params.into_proto()),
                token_a_amount: self.token_a_amount,
                token_b_amount: self.token_b_amount,
            }
        }
    }
    use crate::types::EvtSetPoolStatus;
    impl IntoProto<proto_def::EvtSetPoolStatus> for EvtSetPoolStatus {
        fn into_proto(self) -> proto_def::EvtSetPoolStatus {
            proto_def::EvtSetPoolStatus {
                pool: self.pool.to_string(),
                status: self.status.into(),
            }
        }
    }
    use crate::types::EvtSwap;
    impl IntoProto<proto_def::EvtSwap> for EvtSwap {
        fn into_proto(self) -> proto_def::EvtSwap {
            proto_def::EvtSwap {
                pool: self.pool.to_string(),
                trade_direction: self.trade_direction.into(),
                has_referral: self.has_referral,
                params: Some(self.params.into_proto()),
                swap_result: Some(self.swap_result.into_proto()),
                actual_amount_in: self.actual_amount_in,
                current_timestamp: self.current_timestamp,
            }
        }
    }
    use crate::types::EvtUpdateRewardDuration;
    impl IntoProto<proto_def::EvtUpdateRewardDuration> for EvtUpdateRewardDuration {
        fn into_proto(self) -> proto_def::EvtUpdateRewardDuration {
            proto_def::EvtUpdateRewardDuration {
                pool: self.pool.to_string(),
                reward_index: self.reward_index.into(),
                old_reward_duration: self.old_reward_duration,
                new_reward_duration: self.new_reward_duration,
            }
        }
    }
    use crate::types::EvtUpdateRewardFunder;
    impl IntoProto<proto_def::EvtUpdateRewardFunder> for EvtUpdateRewardFunder {
        fn into_proto(self) -> proto_def::EvtUpdateRewardFunder {
            proto_def::EvtUpdateRewardFunder {
                pool: self.pool.to_string(),
                reward_index: self.reward_index.into(),
                old_funder: self.old_funder.to_string(),
                new_funder: self.new_funder.to_string(),
            }
        }
    }
    use crate::types::EvtWithdrawIneligibleReward;
    impl IntoProto<proto_def::EvtWithdrawIneligibleReward> for EvtWithdrawIneligibleReward {
        fn into_proto(self) -> proto_def::EvtWithdrawIneligibleReward {
            proto_def::EvtWithdrawIneligibleReward {
                pool: self.pool.to_string(),
                reward_mint: self.reward_mint.to_string(),
                amount: self.amount,
            }
        }
    }
    use crate::types::InitializeCustomizablePoolParameters;
    impl IntoProto<proto_def::InitializeCustomizablePoolParameters>
        for InitializeCustomizablePoolParameters
    {
        fn into_proto(self) -> proto_def::InitializeCustomizablePoolParameters {
            proto_def::InitializeCustomizablePoolParameters {
                pool_fees: Some(self.pool_fees.into_proto()),
                sqrt_min_price: self.sqrt_min_price.to_string(),
                sqrt_max_price: self.sqrt_max_price.to_string(),
                has_alpha_vault: self.has_alpha_vault,
                liquidity: self.liquidity.to_string(),
                sqrt_price: self.sqrt_price.to_string(),
                activation_type: self.activation_type.into(),
                collect_fee_mode: self.collect_fee_mode.into(),
                activation_point: self.activation_point,
            }
        }
    }
    use crate::types::PoolFeeParameters;
    impl IntoProto<proto_def::PoolFeeParameters> for PoolFeeParameters {
        fn into_proto(self) -> proto_def::PoolFeeParameters {
            proto_def::PoolFeeParameters {
                base_fee: Some(self.base_fee.into_proto()),
                protocol_fee_percent: self.protocol_fee_percent.into(),
                partner_fee_percent: self.partner_fee_percent.into(),
                referral_fee_percent: self.referral_fee_percent.into(),
                dynamic_fee: self.dynamic_fee.map(|x| x.into_proto()),
            }
        }
    }
    use crate::types::PoolFeesConfig;
    impl IntoProto<proto_def::PoolFeesConfig> for PoolFeesConfig {
        fn into_proto(self) -> proto_def::PoolFeesConfig {
            proto_def::PoolFeesConfig {
                base_fee: Some(self.base_fee.into_proto()),
                dynamic_fee: Some(self.dynamic_fee.into_proto()),
                protocol_fee_percent: self.protocol_fee_percent.into(),
                partner_fee_percent: self.partner_fee_percent.into(),
                referral_fee_percent: self.referral_fee_percent.into(),
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
                padding1: self.padding1.to_vec(),
            }
        }
    }
    use crate::types::PoolFeesStruct;
    impl IntoProto<proto_def::PoolFeesStruct> for PoolFeesStruct {
        fn into_proto(self) -> proto_def::PoolFeesStruct {
            proto_def::PoolFeesStruct {
                base_fee: Some(self.base_fee.into_proto()),
                protocol_fee_percent: self.protocol_fee_percent.into(),
                partner_fee_percent: self.partner_fee_percent.into(),
                referral_fee_percent: self.referral_fee_percent.into(),
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
                dynamic_fee: Some(self.dynamic_fee.into_proto()),
                padding1: self.padding1.to_vec(),
            }
        }
    }
    use crate::types::PoolMetrics;
    impl IntoProto<proto_def::PoolMetrics> for PoolMetrics {
        fn into_proto(self) -> proto_def::PoolMetrics {
            proto_def::PoolMetrics {
                total_lp_a_fee: self.total_lp_a_fee.to_string(),
                total_lp_b_fee: self.total_lp_b_fee.to_string(),
                total_protocol_a_fee: self.total_protocol_a_fee,
                total_protocol_b_fee: self.total_protocol_b_fee,
                total_partner_a_fee: self.total_partner_a_fee,
                total_partner_b_fee: self.total_partner_b_fee,
                total_position: self.total_position,
                padding: self.padding,
            }
        }
    }
    use crate::types::PositionMetrics;
    impl IntoProto<proto_def::PositionMetrics> for PositionMetrics {
        fn into_proto(self) -> proto_def::PositionMetrics {
            proto_def::PositionMetrics {
                total_claimed_a_fee: self.total_claimed_a_fee,
                total_claimed_b_fee: self.total_claimed_b_fee,
            }
        }
    }
    use crate::types::RemoveLiquidityParameters;
    impl IntoProto<proto_def::RemoveLiquidityParameters> for RemoveLiquidityParameters {
        fn into_proto(self) -> proto_def::RemoveLiquidityParameters {
            proto_def::RemoveLiquidityParameters {
                liquidity_delta: self.liquidity_delta.to_string(),
                token_a_amount_threshold: self.token_a_amount_threshold,
                token_b_amount_threshold: self.token_b_amount_threshold,
            }
        }
    }
    use crate::types::RewardInfo;
    impl IntoProto<proto_def::RewardInfo> for RewardInfo {
        fn into_proto(self) -> proto_def::RewardInfo {
            proto_def::RewardInfo {
                initialized: self.initialized.into(),
                reward_token_flag: self.reward_token_flag.into(),
                padding0: self.padding0.into_iter().map(|x| x.into()).collect(),
                padding1: self.padding1.into_iter().map(|x| x.into()).collect(),
                mint: self.mint.to_string(),
                vault: self.vault.to_string(),
                funder: self.funder.to_string(),
                reward_duration: self.reward_duration,
                reward_duration_end: self.reward_duration_end,
                reward_rate: self.reward_rate.to_string(),
                reward_per_token_stored: self
                    .reward_per_token_stored
                    .into_iter()
                    .map(|x| x.into())
                    .collect(),
                last_update_time: self.last_update_time,
                cumulative_seconds_with_empty_liquidity_reward: self
                    .cumulative_seconds_with_empty_liquidity_reward,
            }
        }
    }
    use crate::types::SwapParameters;
    impl IntoProto<proto_def::SwapParameters> for SwapParameters {
        fn into_proto(self) -> proto_def::SwapParameters {
            proto_def::SwapParameters {
                amount_in: self.amount_in,
                minimum_amount_out: self.minimum_amount_out,
            }
        }
    }
    use crate::types::SwapResult;
    impl IntoProto<proto_def::SwapResult> for SwapResult {
        fn into_proto(self) -> proto_def::SwapResult {
            proto_def::SwapResult {
                output_amount: self.output_amount,
                next_sqrt_price: self.next_sqrt_price.to_string(),
                lp_fee: self.lp_fee,
                protocol_fee: self.protocol_fee,
                partner_fee: self.partner_fee,
                referral_fee: self.referral_fee,
            }
        }
    }
    use crate::types::UserRewardInfo;
    impl IntoProto<proto_def::UserRewardInfo> for UserRewardInfo {
        fn into_proto(self) -> proto_def::UserRewardInfo {
            proto_def::UserRewardInfo {
                reward_per_token_checkpoint: self
                    .reward_per_token_checkpoint
                    .into_iter()
                    .map(|x| x.into())
                    .collect(),
                reward_pendings: self.reward_pendings,
                total_claimed_rewards: self.total_claimed_rewards,
            }
        }
    }
}
