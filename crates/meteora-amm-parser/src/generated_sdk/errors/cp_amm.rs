//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum CpAmmError {
    /// 6000 - Math operation overflow
    #[error("Math operation overflow")]
    MathOverflow = 0x1770,
    /// 6001 - Invalid fee setup
    #[error("Invalid fee setup")]
    InvalidFee = 0x1771,
    /// 6002 - Exceeded slippage tolerance
    #[error("Exceeded slippage tolerance")]
    ExceededSlippage = 0x1772,
    /// 6003 - Pool disabled
    #[error("Pool disabled")]
    PoolDisabled = 0x1773,
    /// 6004 - Exceeded max fee bps
    #[error("Exceeded max fee bps")]
    ExceedMaxFeeBps = 0x1774,
    /// 6005 - Invalid admin
    #[error("Invalid admin")]
    InvalidAdmin = 0x1775,
    /// 6006 - Amount is zero
    #[error("Amount is zero")]
    AmountIsZero = 0x1776,
    /// 6007 - Type cast error
    #[error("Type cast error")]
    TypeCastFailed = 0x1777,
    /// 6008 - Unable to modify activation point
    #[error("Unable to modify activation point")]
    UnableToModifyActivationPoint = 0x1778,
    /// 6009 - Invalid authority to create the pool
    #[error("Invalid authority to create the pool")]
    InvalidAuthorityToCreateThePool = 0x1779,
    /// 6010 - Invalid activation type
    #[error("Invalid activation type")]
    InvalidActivationType = 0x177a,
    /// 6011 - Invalid activation point
    #[error("Invalid activation point")]
    InvalidActivationPoint = 0x177b,
    /// 6012 - Quote token must be SOL,USDC
    #[error("Quote token must be SOL,USDC")]
    InvalidQuoteMint = 0x177c,
    /// 6013 - Invalid fee curve
    #[error("Invalid fee curve")]
    InvalidFeeCurve = 0x177d,
    /// 6014 - Invalid Price Range
    #[error("Invalid Price Range")]
    InvalidPriceRange = 0x177e,
    /// 6015 - Trade is over price range
    #[error("Trade is over price range")]
    PriceRangeViolation = 0x177f,
    /// 6016 - Invalid parameters
    #[error("Invalid parameters")]
    InvalidParameters = 0x1780,
    /// 6017 - Invalid collect fee mode
    #[error("Invalid collect fee mode")]
    InvalidCollectFeeMode = 0x1781,
    /// 6018 - Invalid input
    #[error("Invalid input")]
    InvalidInput = 0x1782,
    /// 6019 - Cannot create token badge on supported mint
    #[error("Cannot create token badge on supported mint")]
    CannotCreateTokenBadgeOnSupportedMint = 0x1783,
    /// 6020 - Invalid token badge
    #[error("Invalid token badge")]
    InvalidTokenBadge = 0x1784,
    /// 6021 - Invalid minimum liquidity
    #[error("Invalid minimum liquidity")]
    InvalidMinimumLiquidity = 0x1785,
    /// 6022 - Invalid vesting information
    #[error("Invalid vesting information")]
    InvalidVestingInfo = 0x1786,
    /// 6023 - Insufficient liquidity
    #[error("Insufficient liquidity")]
    InsufficientLiquidity = 0x1787,
    /// 6024 - Invalid vesting account
    #[error("Invalid vesting account")]
    InvalidVestingAccount = 0x1788,
    /// 6025 - Invalid pool status
    #[error("Invalid pool status")]
    InvalidPoolStatus = 0x1789,
    /// 6026 - Unsupported native mint token2022
    #[error("Unsupported native mint token2022")]
    UnsupportNativeMintToken2022 = 0x178a,
    /// 6027 - Invalid reward index
    #[error("Invalid reward index")]
    InvalidRewardIndex = 0x178b,
    /// 6028 - Invalid reward duration
    #[error("Invalid reward duration")]
    InvalidRewardDuration = 0x178c,
    /// 6029 - Reward already initialized
    #[error("Reward already initialized")]
    RewardInitialized = 0x178d,
    /// 6030 - Reward not initialized
    #[error("Reward not initialized")]
    RewardUninitialized = 0x178e,
    /// 6031 - Invalid reward vault
    #[error("Invalid reward vault")]
    InvalidRewardVault = 0x178f,
    /// 6032 - Must withdraw ineligible reward
    #[error("Must withdraw ineligible reward")]
    MustWithdrawnIneligibleReward = 0x1790,
    /// 6033 - Reward duration is the same
    #[error("Reward duration is the same")]
    IdenticalRewardDuration = 0x1791,
    /// 6034 - Reward campaign in progress
    #[error("Reward campaign in progress")]
    RewardCampaignInProgress = 0x1792,
    /// 6035 - Identical funder
    #[error("Identical funder")]
    IdenticalFunder = 0x1793,
    /// 6036 - Invalid funder
    #[error("Invalid funder")]
    InvalidFunder = 0x1794,
    /// 6037 - Reward not ended
    #[error("Reward not ended")]
    RewardNotEnded = 0x1795,
    /// 6038 - Fee inverse is incorrect
    #[error("Fee inverse is incorrect")]
    FeeInverseIsIncorrect = 0x1796,
    /// 6039 - Position is not empty
    #[error("Position is not empty")]
    PositionIsNotEmpty = 0x1797,
    /// 6040 - Invalid pool creator authority
    #[error("Invalid pool creator authority")]
    InvalidPoolCreatorAuthority = 0x1798,
    /// 6041 - Invalid config type
    #[error("Invalid config type")]
    InvalidConfigType = 0x1799,
}

impl solana_program_error::PrintProgramError for CpAmmError {
    fn print<E>(&self) {
        solana_msg::msg!(&self.to_string());
    }
}

impl<T> solana_decode_error::DecodeError<T> for CpAmmError {
    fn type_of() -> &'static str { "CpAmmError" }
}
