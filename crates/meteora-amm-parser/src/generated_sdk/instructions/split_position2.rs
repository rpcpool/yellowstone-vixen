//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

pub const SPLIT_POSITION2_DISCRIMINATOR: [u8; 8] = [221, 147, 228, 207, 140, 212, 17, 119];

/// Accounts.
#[derive(Debug)]
pub struct SplitPosition2 {
    pub pool: solana_pubkey::Pubkey,
    /// The first position
    pub first_position: solana_pubkey::Pubkey,
    /// The token account for position nft
    pub first_position_nft_account: solana_pubkey::Pubkey,
    /// The second position
    pub second_position: solana_pubkey::Pubkey,
    /// The token account for position nft
    pub second_position_nft_account: solana_pubkey::Pubkey,
    /// Owner of first position
    pub first_owner: solana_pubkey::Pubkey,
    /// Owner of second position
    pub second_owner: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub program: solana_pubkey::Pubkey,
}

impl SplitPosition2 {
    pub fn instruction(
        &self,
        args: SplitPosition2InstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: SplitPosition2InstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(self.pool, false));
        accounts.push(solana_instruction::AccountMeta::new(
            self.first_position,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.first_position_nft_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.second_position,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.second_position_nft_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.first_owner,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.second_owner,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = SplitPosition2InstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::CP_AMM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SplitPosition2InstructionData {
    discriminator: [u8; 8],
}

impl SplitPosition2InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [221, 147, 228, 207, 140, 212, 17, 119],
        }
    }

    pub(crate) fn try_to_vec(&self) -> Result<Vec<u8>, std::io::Error> { borsh::to_vec(self) }
}

impl Default for SplitPosition2InstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct SplitPosition2InstructionArgs {
    pub numerator: u32,
}

impl SplitPosition2InstructionArgs {
    pub(crate) fn try_to_vec(&self) -> Result<Vec<u8>, std::io::Error> { borsh::to_vec(self) }
}

/// Instruction builder for `SplitPosition2`.
///
/// ### Accounts:
///
///   0. `[writable]` pool
///   1. `[writable]` first_position
///   2. `[]` first_position_nft_account
///   3. `[writable]` second_position
///   4. `[]` second_position_nft_account
///   5. `[signer]` first_owner
///   6. `[signer]` second_owner
///   7. `[]` event_authority
///   8. `[]` program
#[derive(Clone, Debug, Default)]
pub struct SplitPosition2Builder {
    pool: Option<solana_pubkey::Pubkey>,
    first_position: Option<solana_pubkey::Pubkey>,
    first_position_nft_account: Option<solana_pubkey::Pubkey>,
    second_position: Option<solana_pubkey::Pubkey>,
    second_position_nft_account: Option<solana_pubkey::Pubkey>,
    first_owner: Option<solana_pubkey::Pubkey>,
    second_owner: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    program: Option<solana_pubkey::Pubkey>,
    numerator: Option<u32>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl SplitPosition2Builder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn pool(&mut self, pool: solana_pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    /// The first position
    #[inline(always)]
    pub fn first_position(&mut self, first_position: solana_pubkey::Pubkey) -> &mut Self {
        self.first_position = Some(first_position);
        self
    }

    /// The token account for position nft
    #[inline(always)]
    pub fn first_position_nft_account(
        &mut self,
        first_position_nft_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.first_position_nft_account = Some(first_position_nft_account);
        self
    }

    /// The second position
    #[inline(always)]
    pub fn second_position(&mut self, second_position: solana_pubkey::Pubkey) -> &mut Self {
        self.second_position = Some(second_position);
        self
    }

    /// The token account for position nft
    #[inline(always)]
    pub fn second_position_nft_account(
        &mut self,
        second_position_nft_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.second_position_nft_account = Some(second_position_nft_account);
        self
    }

    /// Owner of first position
    #[inline(always)]
    pub fn first_owner(&mut self, first_owner: solana_pubkey::Pubkey) -> &mut Self {
        self.first_owner = Some(first_owner);
        self
    }

    /// Owner of second position
    #[inline(always)]
    pub fn second_owner(&mut self, second_owner: solana_pubkey::Pubkey) -> &mut Self {
        self.second_owner = Some(second_owner);
        self
    }

    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn numerator(&mut self, numerator: u32) -> &mut Self {
        self.numerator = Some(numerator);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = SplitPosition2 {
            pool: self.pool.expect("pool is not set"),
            first_position: self.first_position.expect("first_position is not set"),
            first_position_nft_account: self
                .first_position_nft_account
                .expect("first_position_nft_account is not set"),
            second_position: self.second_position.expect("second_position is not set"),
            second_position_nft_account: self
                .second_position_nft_account
                .expect("second_position_nft_account is not set"),
            first_owner: self.first_owner.expect("first_owner is not set"),
            second_owner: self.second_owner.expect("second_owner is not set"),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = SplitPosition2InstructionArgs {
            numerator: self.numerator.clone().expect("numerator is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `split_position2` CPI accounts.
pub struct SplitPosition2CpiAccounts<'a, 'b> {
    pub pool: &'b solana_account_info::AccountInfo<'a>,
    /// The first position
    pub first_position: &'b solana_account_info::AccountInfo<'a>,
    /// The token account for position nft
    pub first_position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    /// The second position
    pub second_position: &'b solana_account_info::AccountInfo<'a>,
    /// The token account for position nft
    pub second_position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    /// Owner of first position
    pub first_owner: &'b solana_account_info::AccountInfo<'a>,
    /// Owner of second position
    pub second_owner: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

/// `split_position2` CPI instruction.
pub struct SplitPosition2Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub pool: &'b solana_account_info::AccountInfo<'a>,
    /// The first position
    pub first_position: &'b solana_account_info::AccountInfo<'a>,
    /// The token account for position nft
    pub first_position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    /// The second position
    pub second_position: &'b solana_account_info::AccountInfo<'a>,
    /// The token account for position nft
    pub second_position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    /// Owner of first position
    pub first_owner: &'b solana_account_info::AccountInfo<'a>,
    /// Owner of second position
    pub second_owner: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: SplitPosition2InstructionArgs,
}

impl<'a, 'b> SplitPosition2Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: SplitPosition2CpiAccounts<'a, 'b>,
        args: SplitPosition2InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            pool: accounts.pool,
            first_position: accounts.first_position,
            first_position_nft_account: accounts.first_position_nft_account,
            second_position: accounts.second_position,
            second_position_nft_account: accounts.second_position_nft_account,
            first_owner: accounts.first_owner,
            second_owner: accounts.second_owner,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_error::ProgramResult {
        let mut accounts = Vec::with_capacity(9 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new(*self.pool.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.first_position.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.first_position_nft_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.second_position.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.second_position_nft_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.first_owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.second_owner.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = SplitPosition2InstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::CP_AMM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(10 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.first_position.clone());
        account_infos.push(self.first_position_nft_account.clone());
        account_infos.push(self.second_position.clone());
        account_infos.push(self.second_position_nft_account.clone());
        account_infos.push(self.first_owner.clone());
        account_infos.push(self.second_owner.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `SplitPosition2` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` pool
///   1. `[writable]` first_position
///   2. `[]` first_position_nft_account
///   3. `[writable]` second_position
///   4. `[]` second_position_nft_account
///   5. `[signer]` first_owner
///   6. `[signer]` second_owner
///   7. `[]` event_authority
///   8. `[]` program
#[derive(Clone, Debug)]
pub struct SplitPosition2CpiBuilder<'a, 'b> {
    instruction: Box<SplitPosition2CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> SplitPosition2CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(SplitPosition2CpiBuilderInstruction {
            __program: program,
            pool: None,
            first_position: None,
            first_position_nft_account: None,
            second_position: None,
            second_position_nft_account: None,
            first_owner: None,
            second_owner: None,
            event_authority: None,
            program: None,
            numerator: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    /// The first position
    #[inline(always)]
    pub fn first_position(
        &mut self,
        first_position: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.first_position = Some(first_position);
        self
    }

    /// The token account for position nft
    #[inline(always)]
    pub fn first_position_nft_account(
        &mut self,
        first_position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.first_position_nft_account = Some(first_position_nft_account);
        self
    }

    /// The second position
    #[inline(always)]
    pub fn second_position(
        &mut self,
        second_position: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.second_position = Some(second_position);
        self
    }

    /// The token account for position nft
    #[inline(always)]
    pub fn second_position_nft_account(
        &mut self,
        second_position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.second_position_nft_account = Some(second_position_nft_account);
        self
    }

    /// Owner of first position
    #[inline(always)]
    pub fn first_owner(
        &mut self,
        first_owner: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.first_owner = Some(first_owner);
        self
    }

    /// Owner of second position
    #[inline(always)]
    pub fn second_owner(
        &mut self,
        second_owner: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.second_owner = Some(second_owner);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn numerator(&mut self, numerator: u32) -> &mut Self {
        self.instruction.numerator = Some(numerator);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_error::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let args = SplitPosition2InstructionArgs {
            numerator: self
                .instruction
                .numerator
                .clone()
                .expect("numerator is not set"),
        };
        let instruction = SplitPosition2Cpi {
            __program: self.instruction.__program,

            pool: self.instruction.pool.expect("pool is not set"),

            first_position: self
                .instruction
                .first_position
                .expect("first_position is not set"),

            first_position_nft_account: self
                .instruction
                .first_position_nft_account
                .expect("first_position_nft_account is not set"),

            second_position: self
                .instruction
                .second_position
                .expect("second_position is not set"),

            second_position_nft_account: self
                .instruction
                .second_position_nft_account
                .expect("second_position_nft_account is not set"),

            first_owner: self
                .instruction
                .first_owner
                .expect("first_owner is not set"),

            second_owner: self
                .instruction
                .second_owner
                .expect("second_owner is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct SplitPosition2CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    pool: Option<&'b solana_account_info::AccountInfo<'a>>,
    first_position: Option<&'b solana_account_info::AccountInfo<'a>>,
    first_position_nft_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    second_position: Option<&'b solana_account_info::AccountInfo<'a>>,
    second_position_nft_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    first_owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    second_owner: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program: Option<&'b solana_account_info::AccountInfo<'a>>,
    numerator: Option<u32>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
