//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::{BorshDeserialize, BorshSerialize};

use crate::generated::types::InitializeCustomizablePoolParameters;

/// Accounts.
#[derive(Debug)]
pub struct InitializePoolWithDynamicConfig {
    pub creator: solana_pubkey::Pubkey,
    /// position_nft_mint
    pub position_nft_mint: solana_pubkey::Pubkey,
    /// position nft account
    pub position_nft_account: solana_pubkey::Pubkey,
    /// Address paying to create the pool. Can be anyone
    pub payer: solana_pubkey::Pubkey,

    pub pool_creator_authority: solana_pubkey::Pubkey,
    /// Which config the pool belongs to.
    pub config: solana_pubkey::Pubkey,

    pub pool_authority: solana_pubkey::Pubkey,
    /// Initialize an account to store the pool state
    pub pool: solana_pubkey::Pubkey,

    pub position: solana_pubkey::Pubkey,
    /// Token a mint
    pub token_a_mint: solana_pubkey::Pubkey,
    /// Token b mint
    pub token_b_mint: solana_pubkey::Pubkey,
    /// Token a vault for the pool
    pub token_a_vault: solana_pubkey::Pubkey,
    /// Token b vault for the pool
    pub token_b_vault: solana_pubkey::Pubkey,
    /// payer token a account
    pub payer_token_a: solana_pubkey::Pubkey,
    /// creator token b account
    pub payer_token_b: solana_pubkey::Pubkey,
    /// Program to create mint account and mint tokens
    pub token_a_program: solana_pubkey::Pubkey,
    /// Program to create mint account and mint tokens
    pub token_b_program: solana_pubkey::Pubkey,
    /// Program to create NFT mint/token account and transfer for token22 account
    pub token2022_program: solana_pubkey::Pubkey,

    pub system_program: solana_pubkey::Pubkey,

    pub event_authority: solana_pubkey::Pubkey,

    pub program: solana_pubkey::Pubkey,
}

impl InitializePoolWithDynamicConfig {
    pub fn instruction(
        &self,
        args: InitializePoolWithDynamicConfigInstructionArgs,
    ) -> solana_instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializePoolWithDynamicConfigInstructionArgs,
        remaining_accounts: &[solana_instruction::AccountMeta],
    ) -> solana_instruction::Instruction {
        let mut accounts = Vec::with_capacity(21 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.creator,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.position_nft_mint,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.position_nft_account,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.payer, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.pool_creator_authority,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.config,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.pool_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(self.pool, false));
        accounts.push(solana_instruction::AccountMeta::new(self.position, false));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_a_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_b_mint,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token_a_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.token_b_vault,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.payer_token_a,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            self.payer_token_b,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_a_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_b_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token2022_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data =
            borsh::to_vec(&InitializePoolWithDynamicConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&args).unwrap();
        data.append(&mut args);

        solana_instruction::Instruction {
            program_id: crate::CP_AMM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePoolWithDynamicConfigInstructionData {
    discriminator: [u8; 8],
}

impl InitializePoolWithDynamicConfigInstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [149, 82, 72, 197, 253, 252, 68, 15],
        }
    }
}

impl Default for InitializePoolWithDynamicConfigInstructionData {
    fn default() -> Self { Self::new() }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializePoolWithDynamicConfigInstructionArgs {
    pub params: InitializeCustomizablePoolParameters,
}

/// Instruction builder for `InitializePoolWithDynamicConfig`.
///
/// ### Accounts:
///
///   0. `[]` creator
///   1. `[writable, signer]` position_nft_mint
///   2. `[writable]` position_nft_account
///   3. `[writable, signer]` payer
///   4. `[signer]` pool_creator_authority
///   5. `[]` config
///   6. `[]` pool_authority
///   7. `[writable]` pool
///   8. `[writable]` position
///   9. `[]` token_a_mint
///   10. `[]` token_b_mint
///   11. `[writable]` token_a_vault
///   12. `[writable]` token_b_vault
///   13. `[writable]` payer_token_a
///   14. `[writable]` payer_token_b
///   15. `[]` token_a_program
///   16. `[]` token_b_program
///   17. `[optional]` token2022_program (default to `TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb`)
///   18. `[optional]` system_program (default to `11111111111111111111111111111111`)
///   19. `[]` event_authority
///   20. `[]` program
#[derive(Clone, Debug, Default)]
pub struct InitializePoolWithDynamicConfigBuilder {
    creator: Option<solana_pubkey::Pubkey>,
    position_nft_mint: Option<solana_pubkey::Pubkey>,
    position_nft_account: Option<solana_pubkey::Pubkey>,
    payer: Option<solana_pubkey::Pubkey>,
    pool_creator_authority: Option<solana_pubkey::Pubkey>,
    config: Option<solana_pubkey::Pubkey>,
    pool_authority: Option<solana_pubkey::Pubkey>,
    pool: Option<solana_pubkey::Pubkey>,
    position: Option<solana_pubkey::Pubkey>,
    token_a_mint: Option<solana_pubkey::Pubkey>,
    token_b_mint: Option<solana_pubkey::Pubkey>,
    token_a_vault: Option<solana_pubkey::Pubkey>,
    token_b_vault: Option<solana_pubkey::Pubkey>,
    payer_token_a: Option<solana_pubkey::Pubkey>,
    payer_token_b: Option<solana_pubkey::Pubkey>,
    token_a_program: Option<solana_pubkey::Pubkey>,
    token_b_program: Option<solana_pubkey::Pubkey>,
    token2022_program: Option<solana_pubkey::Pubkey>,
    system_program: Option<solana_pubkey::Pubkey>,
    event_authority: Option<solana_pubkey::Pubkey>,
    program: Option<solana_pubkey::Pubkey>,
    params: Option<InitializeCustomizablePoolParameters>,
    __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializePoolWithDynamicConfigBuilder {
    pub fn new() -> Self { Self::default() }

    #[inline(always)]
    pub fn creator(&mut self, creator: solana_pubkey::Pubkey) -> &mut Self {
        self.creator = Some(creator);
        self
    }

    /// position_nft_mint
    #[inline(always)]
    pub fn position_nft_mint(&mut self, position_nft_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.position_nft_mint = Some(position_nft_mint);
        self
    }

    /// position nft account
    #[inline(always)]
    pub fn position_nft_account(
        &mut self,
        position_nft_account: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.position_nft_account = Some(position_nft_account);
        self
    }

    /// Address paying to create the pool. Can be anyone
    #[inline(always)]
    pub fn payer(&mut self, payer: solana_pubkey::Pubkey) -> &mut Self {
        self.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn pool_creator_authority(
        &mut self,
        pool_creator_authority: solana_pubkey::Pubkey,
    ) -> &mut Self {
        self.pool_creator_authority = Some(pool_creator_authority);
        self
    }

    /// Which config the pool belongs to.
    #[inline(always)]
    pub fn config(&mut self, config: solana_pubkey::Pubkey) -> &mut Self {
        self.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn pool_authority(&mut self, pool_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.pool_authority = Some(pool_authority);
        self
    }

    /// Initialize an account to store the pool state
    #[inline(always)]
    pub fn pool(&mut self, pool: solana_pubkey::Pubkey) -> &mut Self {
        self.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn position(&mut self, position: solana_pubkey::Pubkey) -> &mut Self {
        self.position = Some(position);
        self
    }

    /// Token a mint
    #[inline(always)]
    pub fn token_a_mint(&mut self, token_a_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.token_a_mint = Some(token_a_mint);
        self
    }

    /// Token b mint
    #[inline(always)]
    pub fn token_b_mint(&mut self, token_b_mint: solana_pubkey::Pubkey) -> &mut Self {
        self.token_b_mint = Some(token_b_mint);
        self
    }

    /// Token a vault for the pool
    #[inline(always)]
    pub fn token_a_vault(&mut self, token_a_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.token_a_vault = Some(token_a_vault);
        self
    }

    /// Token b vault for the pool
    #[inline(always)]
    pub fn token_b_vault(&mut self, token_b_vault: solana_pubkey::Pubkey) -> &mut Self {
        self.token_b_vault = Some(token_b_vault);
        self
    }

    /// payer token a account
    #[inline(always)]
    pub fn payer_token_a(&mut self, payer_token_a: solana_pubkey::Pubkey) -> &mut Self {
        self.payer_token_a = Some(payer_token_a);
        self
    }

    /// creator token b account
    #[inline(always)]
    pub fn payer_token_b(&mut self, payer_token_b: solana_pubkey::Pubkey) -> &mut Self {
        self.payer_token_b = Some(payer_token_b);
        self
    }

    /// Program to create mint account and mint tokens
    #[inline(always)]
    pub fn token_a_program(&mut self, token_a_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_a_program = Some(token_a_program);
        self
    }

    /// Program to create mint account and mint tokens
    #[inline(always)]
    pub fn token_b_program(&mut self, token_b_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token_b_program = Some(token_b_program);
        self
    }

    /// `[optional account, default to 'TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb']`
    /// Program to create NFT mint/token account and transfer for token22 account
    #[inline(always)]
    pub fn token2022_program(&mut self, token2022_program: solana_pubkey::Pubkey) -> &mut Self {
        self.token2022_program = Some(token2022_program);
        self
    }

    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
        self.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
        self.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn params(&mut self, params: InitializeCustomizablePoolParameters) -> &mut Self {
        self.params = Some(params);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }

    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }

    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_instruction::Instruction {
        let accounts = InitializePoolWithDynamicConfig {
            creator: self.creator.expect("creator is not set"),
            position_nft_mint: self
                .position_nft_mint
                .expect("position_nft_mint is not set"),
            position_nft_account: self
                .position_nft_account
                .expect("position_nft_account is not set"),
            payer: self.payer.expect("payer is not set"),
            pool_creator_authority: self
                .pool_creator_authority
                .expect("pool_creator_authority is not set"),
            config: self.config.expect("config is not set"),
            pool_authority: self.pool_authority.expect("pool_authority is not set"),
            pool: self.pool.expect("pool is not set"),
            position: self.position.expect("position is not set"),
            token_a_mint: self.token_a_mint.expect("token_a_mint is not set"),
            token_b_mint: self.token_b_mint.expect("token_b_mint is not set"),
            token_a_vault: self.token_a_vault.expect("token_a_vault is not set"),
            token_b_vault: self.token_b_vault.expect("token_b_vault is not set"),
            payer_token_a: self.payer_token_a.expect("payer_token_a is not set"),
            payer_token_b: self.payer_token_b.expect("payer_token_b is not set"),
            token_a_program: self.token_a_program.expect("token_a_program is not set"),
            token_b_program: self.token_b_program.expect("token_b_program is not set"),
            token2022_program: self.token2022_program.unwrap_or(solana_pubkey::pubkey!(
                "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
            )),
            system_program: self
                .system_program
                .unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
            event_authority: self.event_authority.expect("event_authority is not set"),
            program: self.program.expect("program is not set"),
        };
        let args = InitializePoolWithDynamicConfigInstructionArgs {
            params: self.params.clone().expect("params is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_pool_with_dynamic_config` CPI accounts.
pub struct InitializePoolWithDynamicConfigCpiAccounts<'a, 'b> {
    pub creator: &'b solana_account_info::AccountInfo<'a>,
    /// position_nft_mint
    pub position_nft_mint: &'b solana_account_info::AccountInfo<'a>,
    /// position nft account
    pub position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    /// Address paying to create the pool. Can be anyone
    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub pool_creator_authority: &'b solana_account_info::AccountInfo<'a>,
    /// Which config the pool belongs to.
    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_account_info::AccountInfo<'a>,
    /// Initialize an account to store the pool state
    pub pool: &'b solana_account_info::AccountInfo<'a>,

    pub position: &'b solana_account_info::AccountInfo<'a>,
    /// Token a mint
    pub token_a_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Token b mint
    pub token_b_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Token a vault for the pool
    pub token_a_vault: &'b solana_account_info::AccountInfo<'a>,
    /// Token b vault for the pool
    pub token_b_vault: &'b solana_account_info::AccountInfo<'a>,
    /// payer token a account
    pub payer_token_a: &'b solana_account_info::AccountInfo<'a>,
    /// creator token b account
    pub payer_token_b: &'b solana_account_info::AccountInfo<'a>,
    /// Program to create mint account and mint tokens
    pub token_a_program: &'b solana_account_info::AccountInfo<'a>,
    /// Program to create mint account and mint tokens
    pub token_b_program: &'b solana_account_info::AccountInfo<'a>,
    /// Program to create NFT mint/token account and transfer for token22 account
    pub token2022_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
}

/// `initialize_pool_with_dynamic_config` CPI instruction.
pub struct InitializePoolWithDynamicConfigCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_account_info::AccountInfo<'a>,

    pub creator: &'b solana_account_info::AccountInfo<'a>,
    /// position_nft_mint
    pub position_nft_mint: &'b solana_account_info::AccountInfo<'a>,
    /// position nft account
    pub position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    /// Address paying to create the pool. Can be anyone
    pub payer: &'b solana_account_info::AccountInfo<'a>,

    pub pool_creator_authority: &'b solana_account_info::AccountInfo<'a>,
    /// Which config the pool belongs to.
    pub config: &'b solana_account_info::AccountInfo<'a>,

    pub pool_authority: &'b solana_account_info::AccountInfo<'a>,
    /// Initialize an account to store the pool state
    pub pool: &'b solana_account_info::AccountInfo<'a>,

    pub position: &'b solana_account_info::AccountInfo<'a>,
    /// Token a mint
    pub token_a_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Token b mint
    pub token_b_mint: &'b solana_account_info::AccountInfo<'a>,
    /// Token a vault for the pool
    pub token_a_vault: &'b solana_account_info::AccountInfo<'a>,
    /// Token b vault for the pool
    pub token_b_vault: &'b solana_account_info::AccountInfo<'a>,
    /// payer token a account
    pub payer_token_a: &'b solana_account_info::AccountInfo<'a>,
    /// creator token b account
    pub payer_token_b: &'b solana_account_info::AccountInfo<'a>,
    /// Program to create mint account and mint tokens
    pub token_a_program: &'b solana_account_info::AccountInfo<'a>,
    /// Program to create mint account and mint tokens
    pub token_b_program: &'b solana_account_info::AccountInfo<'a>,
    /// Program to create NFT mint/token account and transfer for token22 account
    pub token2022_program: &'b solana_account_info::AccountInfo<'a>,

    pub system_program: &'b solana_account_info::AccountInfo<'a>,

    pub event_authority: &'b solana_account_info::AccountInfo<'a>,

    pub program: &'b solana_account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializePoolWithDynamicConfigInstructionArgs,
}

impl<'a, 'b> InitializePoolWithDynamicConfigCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_account_info::AccountInfo<'a>,
        accounts: InitializePoolWithDynamicConfigCpiAccounts<'a, 'b>,
        args: InitializePoolWithDynamicConfigInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            creator: accounts.creator,
            position_nft_mint: accounts.position_nft_mint,
            position_nft_account: accounts.position_nft_account,
            payer: accounts.payer,
            pool_creator_authority: accounts.pool_creator_authority,
            config: accounts.config,
            pool_authority: accounts.pool_authority,
            pool: accounts.pool,
            position: accounts.position,
            token_a_mint: accounts.token_a_mint,
            token_b_mint: accounts.token_b_mint,
            token_a_vault: accounts.token_a_vault,
            token_b_vault: accounts.token_b_vault,
            payer_token_a: accounts.payer_token_a,
            payer_token_b: accounts.payer_token_b,
            token_a_program: accounts.token_a_program,
            token_b_program: accounts.token_b_program,
            token2022_program: accounts.token2022_program,
            system_program: accounts.system_program,
            event_authority: accounts.event_authority,
            program: accounts.program,
            __args: args,
        }
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }

    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }

    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }

    #[allow(clippy::arithmetic_side_effects)]
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> solana_program_entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(21 + remaining_accounts.len());
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.creator.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.position_nft_mint.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.position_nft_account.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.payer.key, true));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.pool_creator_authority.key,
            true,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.config.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.pool_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(*self.pool.key, false));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.position.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_a_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_b_mint.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_a_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.token_b_vault.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.payer_token_a.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new(
            *self.payer_token_b.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_a_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_b_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token2022_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false,
        ));
        accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data =
            borsh::to_vec(&InitializePoolWithDynamicConfigInstructionData::new()).unwrap();
        let mut args = borsh::to_vec(&self.__args).unwrap();
        data.append(&mut args);

        let instruction = solana_instruction::Instruction {
            program_id: crate::CP_AMM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(22 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.creator.clone());
        account_infos.push(self.position_nft_mint.clone());
        account_infos.push(self.position_nft_account.clone());
        account_infos.push(self.payer.clone());
        account_infos.push(self.pool_creator_authority.clone());
        account_infos.push(self.config.clone());
        account_infos.push(self.pool_authority.clone());
        account_infos.push(self.pool.clone());
        account_infos.push(self.position.clone());
        account_infos.push(self.token_a_mint.clone());
        account_infos.push(self.token_b_mint.clone());
        account_infos.push(self.token_a_vault.clone());
        account_infos.push(self.token_b_vault.clone());
        account_infos.push(self.payer_token_a.clone());
        account_infos.push(self.payer_token_b.clone());
        account_infos.push(self.token_a_program.clone());
        account_infos.push(self.token_b_program.clone());
        account_infos.push(self.token2022_program.clone());
        account_infos.push(self.system_program.clone());
        account_infos.push(self.event_authority.clone());
        account_infos.push(self.program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_cpi::invoke(&instruction, &account_infos)
        } else {
            solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializePoolWithDynamicConfig` via CPI.
///
/// ### Accounts:
///
///   0. `[]` creator
///   1. `[writable, signer]` position_nft_mint
///   2. `[writable]` position_nft_account
///   3. `[writable, signer]` payer
///   4. `[signer]` pool_creator_authority
///   5. `[]` config
///   6. `[]` pool_authority
///   7. `[writable]` pool
///   8. `[writable]` position
///   9. `[]` token_a_mint
///   10. `[]` token_b_mint
///   11. `[writable]` token_a_vault
///   12. `[writable]` token_b_vault
///   13. `[writable]` payer_token_a
///   14. `[writable]` payer_token_b
///   15. `[]` token_a_program
///   16. `[]` token_b_program
///   17. `[]` token2022_program
///   18. `[]` system_program
///   19. `[]` event_authority
///   20. `[]` program
#[derive(Clone, Debug)]
pub struct InitializePoolWithDynamicConfigCpiBuilder<'a, 'b> {
    instruction: Box<InitializePoolWithDynamicConfigCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializePoolWithDynamicConfigCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializePoolWithDynamicConfigCpiBuilderInstruction {
            __program: program,
            creator: None,
            position_nft_mint: None,
            position_nft_account: None,
            payer: None,
            pool_creator_authority: None,
            config: None,
            pool_authority: None,
            pool: None,
            position: None,
            token_a_mint: None,
            token_b_mint: None,
            token_a_vault: None,
            token_b_vault: None,
            payer_token_a: None,
            payer_token_b: None,
            token_a_program: None,
            token_b_program: None,
            token2022_program: None,
            system_program: None,
            event_authority: None,
            program: None,
            params: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }

    #[inline(always)]
    pub fn creator(&mut self, creator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.creator = Some(creator);
        self
    }

    /// position_nft_mint
    #[inline(always)]
    pub fn position_nft_mint(
        &mut self,
        position_nft_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_nft_mint = Some(position_nft_mint);
        self
    }

    /// position nft account
    #[inline(always)]
    pub fn position_nft_account(
        &mut self,
        position_nft_account: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.position_nft_account = Some(position_nft_account);
        self
    }

    /// Address paying to create the pool. Can be anyone
    #[inline(always)]
    pub fn payer(&mut self, payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.payer = Some(payer);
        self
    }

    #[inline(always)]
    pub fn pool_creator_authority(
        &mut self,
        pool_creator_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_creator_authority = Some(pool_creator_authority);
        self
    }

    /// Which config the pool belongs to.
    #[inline(always)]
    pub fn config(&mut self, config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.config = Some(config);
        self
    }

    #[inline(always)]
    pub fn pool_authority(
        &mut self,
        pool_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.pool_authority = Some(pool_authority);
        self
    }

    /// Initialize an account to store the pool state
    #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.pool = Some(pool);
        self
    }

    #[inline(always)]
    pub fn position(&mut self, position: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.position = Some(position);
        self
    }

    /// Token a mint
    #[inline(always)]
    pub fn token_a_mint(
        &mut self,
        token_a_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_mint = Some(token_a_mint);
        self
    }

    /// Token b mint
    #[inline(always)]
    pub fn token_b_mint(
        &mut self,
        token_b_mint: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_mint = Some(token_b_mint);
        self
    }

    /// Token a vault for the pool
    #[inline(always)]
    pub fn token_a_vault(
        &mut self,
        token_a_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_vault = Some(token_a_vault);
        self
    }

    /// Token b vault for the pool
    #[inline(always)]
    pub fn token_b_vault(
        &mut self,
        token_b_vault: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_vault = Some(token_b_vault);
        self
    }

    /// payer token a account
    #[inline(always)]
    pub fn payer_token_a(
        &mut self,
        payer_token_a: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.payer_token_a = Some(payer_token_a);
        self
    }

    /// creator token b account
    #[inline(always)]
    pub fn payer_token_b(
        &mut self,
        payer_token_b: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.payer_token_b = Some(payer_token_b);
        self
    }

    /// Program to create mint account and mint tokens
    #[inline(always)]
    pub fn token_a_program(
        &mut self,
        token_a_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_a_program = Some(token_a_program);
        self
    }

    /// Program to create mint account and mint tokens
    #[inline(always)]
    pub fn token_b_program(
        &mut self,
        token_b_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token_b_program = Some(token_b_program);
        self
    }

    /// Program to create NFT mint/token account and transfer for token22 account
    #[inline(always)]
    pub fn token2022_program(
        &mut self,
        token2022_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.token2022_program = Some(token2022_program);
        self
    }

    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }

    #[inline(always)]
    pub fn event_authority(
        &mut self,
        event_authority: &'b solana_account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.event_authority = Some(event_authority);
        self
    }

    #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.program = Some(program);
        self
    }

    #[inline(always)]
    pub fn params(&mut self, params: InitializeCustomizablePoolParameters) -> &mut Self {
        self.instruction.params = Some(params);
        self
    }

    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }

    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }

    #[inline(always)]
    pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult { self.invoke_signed(&[]) }

    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program_entrypoint::ProgramResult {
        let args = InitializePoolWithDynamicConfigInstructionArgs {
            params: self.instruction.params.clone().expect("params is not set"),
        };
        let instruction = InitializePoolWithDynamicConfigCpi {
            __program: self.instruction.__program,

            creator: self.instruction.creator.expect("creator is not set"),

            position_nft_mint: self
                .instruction
                .position_nft_mint
                .expect("position_nft_mint is not set"),

            position_nft_account: self
                .instruction
                .position_nft_account
                .expect("position_nft_account is not set"),

            payer: self.instruction.payer.expect("payer is not set"),

            pool_creator_authority: self
                .instruction
                .pool_creator_authority
                .expect("pool_creator_authority is not set"),

            config: self.instruction.config.expect("config is not set"),

            pool_authority: self
                .instruction
                .pool_authority
                .expect("pool_authority is not set"),

            pool: self.instruction.pool.expect("pool is not set"),

            position: self.instruction.position.expect("position is not set"),

            token_a_mint: self
                .instruction
                .token_a_mint
                .expect("token_a_mint is not set"),

            token_b_mint: self
                .instruction
                .token_b_mint
                .expect("token_b_mint is not set"),

            token_a_vault: self
                .instruction
                .token_a_vault
                .expect("token_a_vault is not set"),

            token_b_vault: self
                .instruction
                .token_b_vault
                .expect("token_b_vault is not set"),

            payer_token_a: self
                .instruction
                .payer_token_a
                .expect("payer_token_a is not set"),

            payer_token_b: self
                .instruction
                .payer_token_b
                .expect("payer_token_b is not set"),

            token_a_program: self
                .instruction
                .token_a_program
                .expect("token_a_program is not set"),

            token_b_program: self
                .instruction
                .token_b_program
                .expect("token_b_program is not set"),

            token2022_program: self
                .instruction
                .token2022_program
                .expect("token2022_program is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),

            event_authority: self
                .instruction
                .event_authority
                .expect("event_authority is not set"),

            program: self.instruction.program.expect("program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

#[derive(Clone, Debug)]
struct InitializePoolWithDynamicConfigCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_account_info::AccountInfo<'a>,
    creator: Option<&'b solana_account_info::AccountInfo<'a>>,
    position_nft_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    position_nft_account: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool_creator_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    config: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    pool: Option<&'b solana_account_info::AccountInfo<'a>>,
    position: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_a_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_b_mint: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_a_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_b_vault: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer_token_a: Option<&'b solana_account_info::AccountInfo<'a>>,
    payer_token_b: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_a_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token_b_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    token2022_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
    event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
    program: Option<&'b solana_account_info::AccountInfo<'a>>,
    params: Option<InitializeCustomizablePoolParameters>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}
