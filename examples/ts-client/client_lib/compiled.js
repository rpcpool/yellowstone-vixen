/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.vixen = (function() {

    var vixen = {};

    vixen.stream = (function() {

        var stream = {};

        stream.ProgramStreams = (function() {

            function ProgramStreams(rpcImpl, requestDelimited, responseDelimited) {
                $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
            }

            (ProgramStreams.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ProgramStreams;

            ProgramStreams.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                return new this(rpcImpl, requestDelimited, responseDelimited);
            };


            Object.defineProperty(ProgramStreams.prototype.subscribe = function subscribe(request, callback) {
                return this.rpcCall(subscribe, $root.vixen.stream.SubscribeRequest, $root.vixen.stream.SubscribeUpdate, request, callback);
            }, "name", { value: "Subscribe" });

            return ProgramStreams;
        })();

        stream.SubscribeRequest = (function() {

            function SubscribeRequest(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SubscribeRequest.prototype.program = "";

            SubscribeRequest.create = function create(properties) {
                return new SubscribeRequest(properties);
            };

            SubscribeRequest.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.program != null && Object.hasOwnProperty.call(message, "program"))
                    writer.uint32(10).string(message.program);
                return writer;
            };

            SubscribeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SubscribeRequest.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.stream.SubscribeRequest();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.program = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SubscribeRequest.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SubscribeRequest.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.program != null && message.hasOwnProperty("program"))
                    if (!$util.isString(message.program))
                        return "program: string expected";
                return null;
            };

            SubscribeRequest.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.stream.SubscribeRequest)
                    return object;
                var message = new $root.vixen.stream.SubscribeRequest();
                if (object.program != null)
                    message.program = String(object.program);
                return message;
            };

            SubscribeRequest.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.program = "";
                if (message.program != null && message.hasOwnProperty("program"))
                    object.program = message.program;
                return object;
            };

            SubscribeRequest.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SubscribeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.stream.SubscribeRequest";
            };

            return SubscribeRequest;
        })();

        stream.SubscribeUpdate = (function() {

            function SubscribeUpdate(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SubscribeUpdate.prototype.parsed = null;

            SubscribeUpdate.create = function create(properties) {
                return new SubscribeUpdate(properties);
            };

            SubscribeUpdate.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.parsed != null && Object.hasOwnProperty.call(message, "parsed"))
                    $root.google.protobuf.Any.encode(message.parsed, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            SubscribeUpdate.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SubscribeUpdate.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.stream.SubscribeUpdate();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.parsed = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SubscribeUpdate.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SubscribeUpdate.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.parsed != null && message.hasOwnProperty("parsed")) {
                    var error = $root.google.protobuf.Any.verify(message.parsed);
                    if (error)
                        return "parsed." + error;
                }
                return null;
            };

            SubscribeUpdate.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.stream.SubscribeUpdate)
                    return object;
                var message = new $root.vixen.stream.SubscribeUpdate();
                if (object.parsed != null) {
                    if (typeof object.parsed !== "object")
                        throw TypeError(".vixen.stream.SubscribeUpdate.parsed: object expected");
                    message.parsed = $root.google.protobuf.Any.fromObject(object.parsed);
                }
                return message;
            };

            SubscribeUpdate.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.parsed = null;
                if (message.parsed != null && message.hasOwnProperty("parsed"))
                    object.parsed = $root.google.protobuf.Any.toObject(message.parsed, options);
                return object;
            };

            SubscribeUpdate.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SubscribeUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.stream.SubscribeUpdate";
            };

            return SubscribeUpdate;
        })();

        return stream;
    })();

    vixen.parser = (function() {

        var parser = {};

        parser.TokenProgramStateProto = (function() {

            function TokenProgramStateProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenProgramStateProto.prototype.tokenAccount = null;
            TokenProgramStateProto.prototype.mint = null;
            TokenProgramStateProto.prototype.multisig = null;

            var $oneOfFields;

            Object.defineProperty(TokenProgramStateProto.prototype, "stateOneof", {
                get: $util.oneOfGetter($oneOfFields = ["tokenAccount", "mint", "multisig"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TokenProgramStateProto.create = function create(properties) {
                return new TokenProgramStateProto(properties);
            };

            TokenProgramStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tokenAccount != null && Object.hasOwnProperty.call(message, "tokenAccount"))
                    $root.vixen.parser.TokenAccountProto.encode(message.tokenAccount, writer.uint32(10).fork()).ldelim();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    $root.vixen.parser.MintProto.encode(message.mint, writer.uint32(18).fork()).ldelim();
                if (message.multisig != null && Object.hasOwnProperty.call(message, "multisig"))
                    $root.vixen.parser.MultisigProto.encode(message.multisig, writer.uint32(26).fork()).ldelim();
                return writer;
            };

            TokenProgramStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenProgramStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenProgramStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.tokenAccount = $root.vixen.parser.TokenAccountProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.mint = $root.vixen.parser.MintProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.multisig = $root.vixen.parser.MultisigProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenProgramStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenProgramStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.tokenAccount != null && message.hasOwnProperty("tokenAccount")) {
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.TokenAccountProto.verify(message.tokenAccount);
                        if (error)
                            return "tokenAccount." + error;
                    }
                }
                if (message.mint != null && message.hasOwnProperty("mint")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.MintProto.verify(message.mint);
                        if (error)
                            return "mint." + error;
                    }
                }
                if (message.multisig != null && message.hasOwnProperty("multisig")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.MultisigProto.verify(message.multisig);
                        if (error)
                            return "multisig." + error;
                    }
                }
                return null;
            };

            TokenProgramStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenProgramStateProto)
                    return object;
                var message = new $root.vixen.parser.TokenProgramStateProto();
                if (object.tokenAccount != null) {
                    if (typeof object.tokenAccount !== "object")
                        throw TypeError(".vixen.parser.TokenProgramStateProto.tokenAccount: object expected");
                    message.tokenAccount = $root.vixen.parser.TokenAccountProto.fromObject(object.tokenAccount);
                }
                if (object.mint != null) {
                    if (typeof object.mint !== "object")
                        throw TypeError(".vixen.parser.TokenProgramStateProto.mint: object expected");
                    message.mint = $root.vixen.parser.MintProto.fromObject(object.mint);
                }
                if (object.multisig != null) {
                    if (typeof object.multisig !== "object")
                        throw TypeError(".vixen.parser.TokenProgramStateProto.multisig: object expected");
                    message.multisig = $root.vixen.parser.MultisigProto.fromObject(object.multisig);
                }
                return message;
            };

            TokenProgramStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.tokenAccount != null && message.hasOwnProperty("tokenAccount")) {
                    object.tokenAccount = $root.vixen.parser.TokenAccountProto.toObject(message.tokenAccount, options);
                    if (options.oneofs)
                        object.stateOneof = "tokenAccount";
                }
                if (message.mint != null && message.hasOwnProperty("mint")) {
                    object.mint = $root.vixen.parser.MintProto.toObject(message.mint, options);
                    if (options.oneofs)
                        object.stateOneof = "mint";
                }
                if (message.multisig != null && message.hasOwnProperty("multisig")) {
                    object.multisig = $root.vixen.parser.MultisigProto.toObject(message.multisig, options);
                    if (options.oneofs)
                        object.stateOneof = "multisig";
                }
                return object;
            };

            TokenProgramStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenProgramStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenProgramStateProto";
            };

            return TokenProgramStateProto;
        })();

        parser.TokenProgramIxProto = (function() {

            function TokenProgramIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenProgramIxProto.prototype.transfer = null;
            TokenProgramIxProto.prototype.initializeMint = null;
            TokenProgramIxProto.prototype.initializeAccount = null;
            TokenProgramIxProto.prototype.initializeAccount2 = null;
            TokenProgramIxProto.prototype.initializeAccount3 = null;
            TokenProgramIxProto.prototype.initializeMultisig = null;
            TokenProgramIxProto.prototype.approve = null;
            TokenProgramIxProto.prototype.revoke = null;
            TokenProgramIxProto.prototype.setAuthority = null;
            TokenProgramIxProto.prototype.mintTo = null;
            TokenProgramIxProto.prototype.burn = null;
            TokenProgramIxProto.prototype.closeAccount = null;
            TokenProgramIxProto.prototype.freezeAccount = null;
            TokenProgramIxProto.prototype.thawAccount = null;
            TokenProgramIxProto.prototype.transferChecked = null;
            TokenProgramIxProto.prototype.approveChecked = null;
            TokenProgramIxProto.prototype.mintToChecked = null;
            TokenProgramIxProto.prototype.burnChecked = null;
            TokenProgramIxProto.prototype.syncNative = null;
            TokenProgramIxProto.prototype.getAccountDataSize = null;
            TokenProgramIxProto.prototype.initializeImmutableOwner = null;
            TokenProgramIxProto.prototype.amountToUiAmount = null;
            TokenProgramIxProto.prototype.uiAmountToAmount = null;

            var $oneOfFields;

            Object.defineProperty(TokenProgramIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["transfer", "initializeMint", "initializeAccount", "initializeAccount2", "initializeAccount3", "initializeMultisig", "approve", "revoke", "setAuthority", "mintTo", "burn", "closeAccount", "freezeAccount", "thawAccount", "transferChecked", "approveChecked", "mintToChecked", "burnChecked", "syncNative", "getAccountDataSize", "initializeImmutableOwner", "amountToUiAmount", "uiAmountToAmount"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TokenProgramIxProto.create = function create(properties) {
                return new TokenProgramIxProto(properties);
            };

            TokenProgramIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.transfer != null && Object.hasOwnProperty.call(message, "transfer"))
                    $root.vixen.parser.TransferIxProto.encode(message.transfer, writer.uint32(10).fork()).ldelim();
                if (message.initializeMint != null && Object.hasOwnProperty.call(message, "initializeMint"))
                    $root.vixen.parser.InitializeMintIxProto.encode(message.initializeMint, writer.uint32(18).fork()).ldelim();
                if (message.initializeAccount != null && Object.hasOwnProperty.call(message, "initializeAccount"))
                    $root.vixen.parser.InitializeAccountIxProto.encode(message.initializeAccount, writer.uint32(26).fork()).ldelim();
                if (message.initializeAccount2 != null && Object.hasOwnProperty.call(message, "initializeAccount2"))
                    $root.vixen.parser.InitializeAccount2IxProto.encode(message.initializeAccount2, writer.uint32(34).fork()).ldelim();
                if (message.initializeAccount3 != null && Object.hasOwnProperty.call(message, "initializeAccount3"))
                    $root.vixen.parser.InitializeAccount3IxProto.encode(message.initializeAccount3, writer.uint32(42).fork()).ldelim();
                if (message.initializeMultisig != null && Object.hasOwnProperty.call(message, "initializeMultisig"))
                    $root.vixen.parser.InitializeMultisigIxProto.encode(message.initializeMultisig, writer.uint32(50).fork()).ldelim();
                if (message.approve != null && Object.hasOwnProperty.call(message, "approve"))
                    $root.vixen.parser.ApproveIxProto.encode(message.approve, writer.uint32(58).fork()).ldelim();
                if (message.revoke != null && Object.hasOwnProperty.call(message, "revoke"))
                    $root.vixen.parser.RevokeIxProto.encode(message.revoke, writer.uint32(66).fork()).ldelim();
                if (message.setAuthority != null && Object.hasOwnProperty.call(message, "setAuthority"))
                    $root.vixen.parser.SetAuthorityIxProto.encode(message.setAuthority, writer.uint32(74).fork()).ldelim();
                if (message.mintTo != null && Object.hasOwnProperty.call(message, "mintTo"))
                    $root.vixen.parser.MintToIxProto.encode(message.mintTo, writer.uint32(82).fork()).ldelim();
                if (message.burn != null && Object.hasOwnProperty.call(message, "burn"))
                    $root.vixen.parser.BurnIxProto.encode(message.burn, writer.uint32(90).fork()).ldelim();
                if (message.closeAccount != null && Object.hasOwnProperty.call(message, "closeAccount"))
                    $root.vixen.parser.CloseAccountIxProto.encode(message.closeAccount, writer.uint32(98).fork()).ldelim();
                if (message.freezeAccount != null && Object.hasOwnProperty.call(message, "freezeAccount"))
                    $root.vixen.parser.FreezeAccountIxProto.encode(message.freezeAccount, writer.uint32(106).fork()).ldelim();
                if (message.thawAccount != null && Object.hasOwnProperty.call(message, "thawAccount"))
                    $root.vixen.parser.ThawAccountIxProto.encode(message.thawAccount, writer.uint32(114).fork()).ldelim();
                if (message.transferChecked != null && Object.hasOwnProperty.call(message, "transferChecked"))
                    $root.vixen.parser.TransferCheckedIxProto.encode(message.transferChecked, writer.uint32(122).fork()).ldelim();
                if (message.approveChecked != null && Object.hasOwnProperty.call(message, "approveChecked"))
                    $root.vixen.parser.ApproveCheckedIxProto.encode(message.approveChecked, writer.uint32(130).fork()).ldelim();
                if (message.mintToChecked != null && Object.hasOwnProperty.call(message, "mintToChecked"))
                    $root.vixen.parser.MintToCheckedIxProto.encode(message.mintToChecked, writer.uint32(138).fork()).ldelim();
                if (message.burnChecked != null && Object.hasOwnProperty.call(message, "burnChecked"))
                    $root.vixen.parser.BurnCheckedIxProto.encode(message.burnChecked, writer.uint32(146).fork()).ldelim();
                if (message.syncNative != null && Object.hasOwnProperty.call(message, "syncNative"))
                    $root.vixen.parser.SyncNativeIxProto.encode(message.syncNative, writer.uint32(154).fork()).ldelim();
                if (message.getAccountDataSize != null && Object.hasOwnProperty.call(message, "getAccountDataSize"))
                    $root.vixen.parser.GetAccountDataSizeIxProto.encode(message.getAccountDataSize, writer.uint32(162).fork()).ldelim();
                if (message.initializeImmutableOwner != null && Object.hasOwnProperty.call(message, "initializeImmutableOwner"))
                    $root.vixen.parser.InitializeImmutableOwnerIxProto.encode(message.initializeImmutableOwner, writer.uint32(170).fork()).ldelim();
                if (message.amountToUiAmount != null && Object.hasOwnProperty.call(message, "amountToUiAmount"))
                    $root.vixen.parser.AmountToUiAmountIxProto.encode(message.amountToUiAmount, writer.uint32(178).fork()).ldelim();
                if (message.uiAmountToAmount != null && Object.hasOwnProperty.call(message, "uiAmountToAmount"))
                    $root.vixen.parser.UiAmountToAmountIxProto.encode(message.uiAmountToAmount, writer.uint32(186).fork()).ldelim();
                return writer;
            };

            TokenProgramIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenProgramIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenProgramIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.transfer = $root.vixen.parser.TransferIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.initializeMint = $root.vixen.parser.InitializeMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.initializeAccount = $root.vixen.parser.InitializeAccountIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.initializeAccount2 = $root.vixen.parser.InitializeAccount2IxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.initializeAccount3 = $root.vixen.parser.InitializeAccount3IxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.initializeMultisig = $root.vixen.parser.InitializeMultisigIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.approve = $root.vixen.parser.ApproveIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.revoke = $root.vixen.parser.RevokeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.setAuthority = $root.vixen.parser.SetAuthorityIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            message.mintTo = $root.vixen.parser.MintToIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.burn = $root.vixen.parser.BurnIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.closeAccount = $root.vixen.parser.CloseAccountIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 13: {
                            message.freezeAccount = $root.vixen.parser.FreezeAccountIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 14: {
                            message.thawAccount = $root.vixen.parser.ThawAccountIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 15: {
                            message.transferChecked = $root.vixen.parser.TransferCheckedIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 16: {
                            message.approveChecked = $root.vixen.parser.ApproveCheckedIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 17: {
                            message.mintToChecked = $root.vixen.parser.MintToCheckedIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.burnChecked = $root.vixen.parser.BurnCheckedIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 19: {
                            message.syncNative = $root.vixen.parser.SyncNativeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 20: {
                            message.getAccountDataSize = $root.vixen.parser.GetAccountDataSizeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 21: {
                            message.initializeImmutableOwner = $root.vixen.parser.InitializeImmutableOwnerIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 22: {
                            message.amountToUiAmount = $root.vixen.parser.AmountToUiAmountIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 23: {
                            message.uiAmountToAmount = $root.vixen.parser.UiAmountToAmountIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenProgramIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenProgramIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.transfer != null && message.hasOwnProperty("transfer")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.TransferIxProto.verify(message.transfer);
                        if (error)
                            return "transfer." + error;
                    }
                }
                if (message.initializeMint != null && message.hasOwnProperty("initializeMint")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeMintIxProto.verify(message.initializeMint);
                        if (error)
                            return "initializeMint." + error;
                    }
                }
                if (message.initializeAccount != null && message.hasOwnProperty("initializeAccount")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeAccountIxProto.verify(message.initializeAccount);
                        if (error)
                            return "initializeAccount." + error;
                    }
                }
                if (message.initializeAccount2 != null && message.hasOwnProperty("initializeAccount2")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeAccount2IxProto.verify(message.initializeAccount2);
                        if (error)
                            return "initializeAccount2." + error;
                    }
                }
                if (message.initializeAccount3 != null && message.hasOwnProperty("initializeAccount3")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeAccount3IxProto.verify(message.initializeAccount3);
                        if (error)
                            return "initializeAccount3." + error;
                    }
                }
                if (message.initializeMultisig != null && message.hasOwnProperty("initializeMultisig")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeMultisigIxProto.verify(message.initializeMultisig);
                        if (error)
                            return "initializeMultisig." + error;
                    }
                }
                if (message.approve != null && message.hasOwnProperty("approve")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ApproveIxProto.verify(message.approve);
                        if (error)
                            return "approve." + error;
                    }
                }
                if (message.revoke != null && message.hasOwnProperty("revoke")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.RevokeIxProto.verify(message.revoke);
                        if (error)
                            return "revoke." + error;
                    }
                }
                if (message.setAuthority != null && message.hasOwnProperty("setAuthority")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.SetAuthorityIxProto.verify(message.setAuthority);
                        if (error)
                            return "setAuthority." + error;
                    }
                }
                if (message.mintTo != null && message.hasOwnProperty("mintTo")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.MintToIxProto.verify(message.mintTo);
                        if (error)
                            return "mintTo." + error;
                    }
                }
                if (message.burn != null && message.hasOwnProperty("burn")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.BurnIxProto.verify(message.burn);
                        if (error)
                            return "burn." + error;
                    }
                }
                if (message.closeAccount != null && message.hasOwnProperty("closeAccount")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.CloseAccountIxProto.verify(message.closeAccount);
                        if (error)
                            return "closeAccount." + error;
                    }
                }
                if (message.freezeAccount != null && message.hasOwnProperty("freezeAccount")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.FreezeAccountIxProto.verify(message.freezeAccount);
                        if (error)
                            return "freezeAccount." + error;
                    }
                }
                if (message.thawAccount != null && message.hasOwnProperty("thawAccount")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ThawAccountIxProto.verify(message.thawAccount);
                        if (error)
                            return "thawAccount." + error;
                    }
                }
                if (message.transferChecked != null && message.hasOwnProperty("transferChecked")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.TransferCheckedIxProto.verify(message.transferChecked);
                        if (error)
                            return "transferChecked." + error;
                    }
                }
                if (message.approveChecked != null && message.hasOwnProperty("approveChecked")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ApproveCheckedIxProto.verify(message.approveChecked);
                        if (error)
                            return "approveChecked." + error;
                    }
                }
                if (message.mintToChecked != null && message.hasOwnProperty("mintToChecked")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.MintToCheckedIxProto.verify(message.mintToChecked);
                        if (error)
                            return "mintToChecked." + error;
                    }
                }
                if (message.burnChecked != null && message.hasOwnProperty("burnChecked")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.BurnCheckedIxProto.verify(message.burnChecked);
                        if (error)
                            return "burnChecked." + error;
                    }
                }
                if (message.syncNative != null && message.hasOwnProperty("syncNative")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.SyncNativeIxProto.verify(message.syncNative);
                        if (error)
                            return "syncNative." + error;
                    }
                }
                if (message.getAccountDataSize != null && message.hasOwnProperty("getAccountDataSize")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.GetAccountDataSizeIxProto.verify(message.getAccountDataSize);
                        if (error)
                            return "getAccountDataSize." + error;
                    }
                }
                if (message.initializeImmutableOwner != null && message.hasOwnProperty("initializeImmutableOwner")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeImmutableOwnerIxProto.verify(message.initializeImmutableOwner);
                        if (error)
                            return "initializeImmutableOwner." + error;
                    }
                }
                if (message.amountToUiAmount != null && message.hasOwnProperty("amountToUiAmount")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.AmountToUiAmountIxProto.verify(message.amountToUiAmount);
                        if (error)
                            return "amountToUiAmount." + error;
                    }
                }
                if (message.uiAmountToAmount != null && message.hasOwnProperty("uiAmountToAmount")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.UiAmountToAmountIxProto.verify(message.uiAmountToAmount);
                        if (error)
                            return "uiAmountToAmount." + error;
                    }
                }
                return null;
            };

            TokenProgramIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenProgramIxProto)
                    return object;
                var message = new $root.vixen.parser.TokenProgramIxProto();
                if (object.transfer != null) {
                    if (typeof object.transfer !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.transfer: object expected");
                    message.transfer = $root.vixen.parser.TransferIxProto.fromObject(object.transfer);
                }
                if (object.initializeMint != null) {
                    if (typeof object.initializeMint !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.initializeMint: object expected");
                    message.initializeMint = $root.vixen.parser.InitializeMintIxProto.fromObject(object.initializeMint);
                }
                if (object.initializeAccount != null) {
                    if (typeof object.initializeAccount !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.initializeAccount: object expected");
                    message.initializeAccount = $root.vixen.parser.InitializeAccountIxProto.fromObject(object.initializeAccount);
                }
                if (object.initializeAccount2 != null) {
                    if (typeof object.initializeAccount2 !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.initializeAccount2: object expected");
                    message.initializeAccount2 = $root.vixen.parser.InitializeAccount2IxProto.fromObject(object.initializeAccount2);
                }
                if (object.initializeAccount3 != null) {
                    if (typeof object.initializeAccount3 !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.initializeAccount3: object expected");
                    message.initializeAccount3 = $root.vixen.parser.InitializeAccount3IxProto.fromObject(object.initializeAccount3);
                }
                if (object.initializeMultisig != null) {
                    if (typeof object.initializeMultisig !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.initializeMultisig: object expected");
                    message.initializeMultisig = $root.vixen.parser.InitializeMultisigIxProto.fromObject(object.initializeMultisig);
                }
                if (object.approve != null) {
                    if (typeof object.approve !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.approve: object expected");
                    message.approve = $root.vixen.parser.ApproveIxProto.fromObject(object.approve);
                }
                if (object.revoke != null) {
                    if (typeof object.revoke !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.revoke: object expected");
                    message.revoke = $root.vixen.parser.RevokeIxProto.fromObject(object.revoke);
                }
                if (object.setAuthority != null) {
                    if (typeof object.setAuthority !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.setAuthority: object expected");
                    message.setAuthority = $root.vixen.parser.SetAuthorityIxProto.fromObject(object.setAuthority);
                }
                if (object.mintTo != null) {
                    if (typeof object.mintTo !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.mintTo: object expected");
                    message.mintTo = $root.vixen.parser.MintToIxProto.fromObject(object.mintTo);
                }
                if (object.burn != null) {
                    if (typeof object.burn !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.burn: object expected");
                    message.burn = $root.vixen.parser.BurnIxProto.fromObject(object.burn);
                }
                if (object.closeAccount != null) {
                    if (typeof object.closeAccount !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.closeAccount: object expected");
                    message.closeAccount = $root.vixen.parser.CloseAccountIxProto.fromObject(object.closeAccount);
                }
                if (object.freezeAccount != null) {
                    if (typeof object.freezeAccount !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.freezeAccount: object expected");
                    message.freezeAccount = $root.vixen.parser.FreezeAccountIxProto.fromObject(object.freezeAccount);
                }
                if (object.thawAccount != null) {
                    if (typeof object.thawAccount !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.thawAccount: object expected");
                    message.thawAccount = $root.vixen.parser.ThawAccountIxProto.fromObject(object.thawAccount);
                }
                if (object.transferChecked != null) {
                    if (typeof object.transferChecked !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.transferChecked: object expected");
                    message.transferChecked = $root.vixen.parser.TransferCheckedIxProto.fromObject(object.transferChecked);
                }
                if (object.approveChecked != null) {
                    if (typeof object.approveChecked !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.approveChecked: object expected");
                    message.approveChecked = $root.vixen.parser.ApproveCheckedIxProto.fromObject(object.approveChecked);
                }
                if (object.mintToChecked != null) {
                    if (typeof object.mintToChecked !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.mintToChecked: object expected");
                    message.mintToChecked = $root.vixen.parser.MintToCheckedIxProto.fromObject(object.mintToChecked);
                }
                if (object.burnChecked != null) {
                    if (typeof object.burnChecked !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.burnChecked: object expected");
                    message.burnChecked = $root.vixen.parser.BurnCheckedIxProto.fromObject(object.burnChecked);
                }
                if (object.syncNative != null) {
                    if (typeof object.syncNative !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.syncNative: object expected");
                    message.syncNative = $root.vixen.parser.SyncNativeIxProto.fromObject(object.syncNative);
                }
                if (object.getAccountDataSize != null) {
                    if (typeof object.getAccountDataSize !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.getAccountDataSize: object expected");
                    message.getAccountDataSize = $root.vixen.parser.GetAccountDataSizeIxProto.fromObject(object.getAccountDataSize);
                }
                if (object.initializeImmutableOwner != null) {
                    if (typeof object.initializeImmutableOwner !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.initializeImmutableOwner: object expected");
                    message.initializeImmutableOwner = $root.vixen.parser.InitializeImmutableOwnerIxProto.fromObject(object.initializeImmutableOwner);
                }
                if (object.amountToUiAmount != null) {
                    if (typeof object.amountToUiAmount !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.amountToUiAmount: object expected");
                    message.amountToUiAmount = $root.vixen.parser.AmountToUiAmountIxProto.fromObject(object.amountToUiAmount);
                }
                if (object.uiAmountToAmount != null) {
                    if (typeof object.uiAmountToAmount !== "object")
                        throw TypeError(".vixen.parser.TokenProgramIxProto.uiAmountToAmount: object expected");
                    message.uiAmountToAmount = $root.vixen.parser.UiAmountToAmountIxProto.fromObject(object.uiAmountToAmount);
                }
                return message;
            };

            TokenProgramIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.transfer != null && message.hasOwnProperty("transfer")) {
                    object.transfer = $root.vixen.parser.TransferIxProto.toObject(message.transfer, options);
                    if (options.oneofs)
                        object.ixOneof = "transfer";
                }
                if (message.initializeMint != null && message.hasOwnProperty("initializeMint")) {
                    object.initializeMint = $root.vixen.parser.InitializeMintIxProto.toObject(message.initializeMint, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeMint";
                }
                if (message.initializeAccount != null && message.hasOwnProperty("initializeAccount")) {
                    object.initializeAccount = $root.vixen.parser.InitializeAccountIxProto.toObject(message.initializeAccount, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeAccount";
                }
                if (message.initializeAccount2 != null && message.hasOwnProperty("initializeAccount2")) {
                    object.initializeAccount2 = $root.vixen.parser.InitializeAccount2IxProto.toObject(message.initializeAccount2, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeAccount2";
                }
                if (message.initializeAccount3 != null && message.hasOwnProperty("initializeAccount3")) {
                    object.initializeAccount3 = $root.vixen.parser.InitializeAccount3IxProto.toObject(message.initializeAccount3, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeAccount3";
                }
                if (message.initializeMultisig != null && message.hasOwnProperty("initializeMultisig")) {
                    object.initializeMultisig = $root.vixen.parser.InitializeMultisigIxProto.toObject(message.initializeMultisig, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeMultisig";
                }
                if (message.approve != null && message.hasOwnProperty("approve")) {
                    object.approve = $root.vixen.parser.ApproveIxProto.toObject(message.approve, options);
                    if (options.oneofs)
                        object.ixOneof = "approve";
                }
                if (message.revoke != null && message.hasOwnProperty("revoke")) {
                    object.revoke = $root.vixen.parser.RevokeIxProto.toObject(message.revoke, options);
                    if (options.oneofs)
                        object.ixOneof = "revoke";
                }
                if (message.setAuthority != null && message.hasOwnProperty("setAuthority")) {
                    object.setAuthority = $root.vixen.parser.SetAuthorityIxProto.toObject(message.setAuthority, options);
                    if (options.oneofs)
                        object.ixOneof = "setAuthority";
                }
                if (message.mintTo != null && message.hasOwnProperty("mintTo")) {
                    object.mintTo = $root.vixen.parser.MintToIxProto.toObject(message.mintTo, options);
                    if (options.oneofs)
                        object.ixOneof = "mintTo";
                }
                if (message.burn != null && message.hasOwnProperty("burn")) {
                    object.burn = $root.vixen.parser.BurnIxProto.toObject(message.burn, options);
                    if (options.oneofs)
                        object.ixOneof = "burn";
                }
                if (message.closeAccount != null && message.hasOwnProperty("closeAccount")) {
                    object.closeAccount = $root.vixen.parser.CloseAccountIxProto.toObject(message.closeAccount, options);
                    if (options.oneofs)
                        object.ixOneof = "closeAccount";
                }
                if (message.freezeAccount != null && message.hasOwnProperty("freezeAccount")) {
                    object.freezeAccount = $root.vixen.parser.FreezeAccountIxProto.toObject(message.freezeAccount, options);
                    if (options.oneofs)
                        object.ixOneof = "freezeAccount";
                }
                if (message.thawAccount != null && message.hasOwnProperty("thawAccount")) {
                    object.thawAccount = $root.vixen.parser.ThawAccountIxProto.toObject(message.thawAccount, options);
                    if (options.oneofs)
                        object.ixOneof = "thawAccount";
                }
                if (message.transferChecked != null && message.hasOwnProperty("transferChecked")) {
                    object.transferChecked = $root.vixen.parser.TransferCheckedIxProto.toObject(message.transferChecked, options);
                    if (options.oneofs)
                        object.ixOneof = "transferChecked";
                }
                if (message.approveChecked != null && message.hasOwnProperty("approveChecked")) {
                    object.approveChecked = $root.vixen.parser.ApproveCheckedIxProto.toObject(message.approveChecked, options);
                    if (options.oneofs)
                        object.ixOneof = "approveChecked";
                }
                if (message.mintToChecked != null && message.hasOwnProperty("mintToChecked")) {
                    object.mintToChecked = $root.vixen.parser.MintToCheckedIxProto.toObject(message.mintToChecked, options);
                    if (options.oneofs)
                        object.ixOneof = "mintToChecked";
                }
                if (message.burnChecked != null && message.hasOwnProperty("burnChecked")) {
                    object.burnChecked = $root.vixen.parser.BurnCheckedIxProto.toObject(message.burnChecked, options);
                    if (options.oneofs)
                        object.ixOneof = "burnChecked";
                }
                if (message.syncNative != null && message.hasOwnProperty("syncNative")) {
                    object.syncNative = $root.vixen.parser.SyncNativeIxProto.toObject(message.syncNative, options);
                    if (options.oneofs)
                        object.ixOneof = "syncNative";
                }
                if (message.getAccountDataSize != null && message.hasOwnProperty("getAccountDataSize")) {
                    object.getAccountDataSize = $root.vixen.parser.GetAccountDataSizeIxProto.toObject(message.getAccountDataSize, options);
                    if (options.oneofs)
                        object.ixOneof = "getAccountDataSize";
                }
                if (message.initializeImmutableOwner != null && message.hasOwnProperty("initializeImmutableOwner")) {
                    object.initializeImmutableOwner = $root.vixen.parser.InitializeImmutableOwnerIxProto.toObject(message.initializeImmutableOwner, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeImmutableOwner";
                }
                if (message.amountToUiAmount != null && message.hasOwnProperty("amountToUiAmount")) {
                    object.amountToUiAmount = $root.vixen.parser.AmountToUiAmountIxProto.toObject(message.amountToUiAmount, options);
                    if (options.oneofs)
                        object.ixOneof = "amountToUiAmount";
                }
                if (message.uiAmountToAmount != null && message.hasOwnProperty("uiAmountToAmount")) {
                    object.uiAmountToAmount = $root.vixen.parser.UiAmountToAmountIxProto.toObject(message.uiAmountToAmount, options);
                    if (options.oneofs)
                        object.ixOneof = "uiAmountToAmount";
                }
                return object;
            };

            TokenProgramIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenProgramIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenProgramIxProto";
            };

            return TokenProgramIxProto;
        })();

        parser.TokenExtensionStateProto = (function() {

            function TokenExtensionStateProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenExtensionStateProto.prototype.extendedTokenAccount = null;
            TokenExtensionStateProto.prototype.extendedMintAccount = null;
            TokenExtensionStateProto.prototype.multisig = null;

            var $oneOfFields;

            Object.defineProperty(TokenExtensionStateProto.prototype, "stateOneof", {
                get: $util.oneOfGetter($oneOfFields = ["extendedTokenAccount", "extendedMintAccount", "multisig"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TokenExtensionStateProto.create = function create(properties) {
                return new TokenExtensionStateProto(properties);
            };

            TokenExtensionStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.extendedTokenAccount != null && Object.hasOwnProperty.call(message, "extendedTokenAccount"))
                    $root.vixen.parser.ExtendedTokenAccountProto.encode(message.extendedTokenAccount, writer.uint32(10).fork()).ldelim();
                if (message.extendedMintAccount != null && Object.hasOwnProperty.call(message, "extendedMintAccount"))
                    $root.vixen.parser.ExtendedMintProto.encode(message.extendedMintAccount, writer.uint32(18).fork()).ldelim();
                if (message.multisig != null && Object.hasOwnProperty.call(message, "multisig"))
                    $root.vixen.parser.MultisigProto.encode(message.multisig, writer.uint32(26).fork()).ldelim();
                return writer;
            };

            TokenExtensionStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenExtensionStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenExtensionStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.extendedTokenAccount = $root.vixen.parser.ExtendedTokenAccountProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.extendedMintAccount = $root.vixen.parser.ExtendedMintProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.multisig = $root.vixen.parser.MultisigProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenExtensionStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenExtensionStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.extendedTokenAccount != null && message.hasOwnProperty("extendedTokenAccount")) {
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.ExtendedTokenAccountProto.verify(message.extendedTokenAccount);
                        if (error)
                            return "extendedTokenAccount." + error;
                    }
                }
                if (message.extendedMintAccount != null && message.hasOwnProperty("extendedMintAccount")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.ExtendedMintProto.verify(message.extendedMintAccount);
                        if (error)
                            return "extendedMintAccount." + error;
                    }
                }
                if (message.multisig != null && message.hasOwnProperty("multisig")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.MultisigProto.verify(message.multisig);
                        if (error)
                            return "multisig." + error;
                    }
                }
                return null;
            };

            TokenExtensionStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenExtensionStateProto)
                    return object;
                var message = new $root.vixen.parser.TokenExtensionStateProto();
                if (object.extendedTokenAccount != null) {
                    if (typeof object.extendedTokenAccount !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionStateProto.extendedTokenAccount: object expected");
                    message.extendedTokenAccount = $root.vixen.parser.ExtendedTokenAccountProto.fromObject(object.extendedTokenAccount);
                }
                if (object.extendedMintAccount != null) {
                    if (typeof object.extendedMintAccount !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionStateProto.extendedMintAccount: object expected");
                    message.extendedMintAccount = $root.vixen.parser.ExtendedMintProto.fromObject(object.extendedMintAccount);
                }
                if (object.multisig != null) {
                    if (typeof object.multisig !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionStateProto.multisig: object expected");
                    message.multisig = $root.vixen.parser.MultisigProto.fromObject(object.multisig);
                }
                return message;
            };

            TokenExtensionStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.extendedTokenAccount != null && message.hasOwnProperty("extendedTokenAccount")) {
                    object.extendedTokenAccount = $root.vixen.parser.ExtendedTokenAccountProto.toObject(message.extendedTokenAccount, options);
                    if (options.oneofs)
                        object.stateOneof = "extendedTokenAccount";
                }
                if (message.extendedMintAccount != null && message.hasOwnProperty("extendedMintAccount")) {
                    object.extendedMintAccount = $root.vixen.parser.ExtendedMintProto.toObject(message.extendedMintAccount, options);
                    if (options.oneofs)
                        object.stateOneof = "extendedMintAccount";
                }
                if (message.multisig != null && message.hasOwnProperty("multisig")) {
                    object.multisig = $root.vixen.parser.MultisigProto.toObject(message.multisig, options);
                    if (options.oneofs)
                        object.stateOneof = "multisig";
                }
                return object;
            };

            TokenExtensionStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenExtensionStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenExtensionStateProto";
            };

            return TokenExtensionStateProto;
        })();

        parser.TokenExtensionProgramIxProto = (function() {

            function TokenExtensionProgramIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenExtensionProgramIxProto.prototype.tokenProgramIx = null;
            TokenExtensionProgramIxProto.prototype.transferFeeIx = null;
            TokenExtensionProgramIxProto.prototype.tokenMetadataIx = null;
            TokenExtensionProgramIxProto.prototype.tokenGroupIx = null;
            TokenExtensionProgramIxProto.prototype.confidentialTransferIx = null;
            TokenExtensionProgramIxProto.prototype.confidentialTransferFeeIx = null;
            TokenExtensionProgramIxProto.prototype.cpiGuardIx = null;
            TokenExtensionProgramIxProto.prototype.transferHookIx = null;
            TokenExtensionProgramIxProto.prototype.metadataPointerIx = null;
            TokenExtensionProgramIxProto.prototype.memoTransferIx = null;
            TokenExtensionProgramIxProto.prototype.interestBearingMintIx = null;
            TokenExtensionProgramIxProto.prototype.defaultAccountStateIx = null;
            TokenExtensionProgramIxProto.prototype.groupMemberPointerIx = null;
            TokenExtensionProgramIxProto.prototype.groupPointerIx = null;
            TokenExtensionProgramIxProto.prototype.withdrawExcessLamportsIx = null;
            TokenExtensionProgramIxProto.prototype.initializePermanentDelegateIx = null;
            TokenExtensionProgramIxProto.prototype.reallocateIx = null;
            TokenExtensionProgramIxProto.prototype.initializeNonTransferableMintIx = null;
            TokenExtensionProgramIxProto.prototype.initializeMintCloseAuthorityIx = null;
            TokenExtensionProgramIxProto.prototype.createNativeMintIx = null;
            TokenExtensionProgramIxProto.prototype.setAuthority = null;

            var $oneOfFields;

            Object.defineProperty(TokenExtensionProgramIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["tokenProgramIx", "transferFeeIx", "tokenMetadataIx", "tokenGroupIx", "confidentialTransferIx", "confidentialTransferFeeIx", "cpiGuardIx", "transferHookIx", "metadataPointerIx", "memoTransferIx", "interestBearingMintIx", "defaultAccountStateIx", "groupMemberPointerIx", "groupPointerIx", "withdrawExcessLamportsIx", "initializePermanentDelegateIx", "reallocateIx", "initializeNonTransferableMintIx", "initializeMintCloseAuthorityIx", "createNativeMintIx", "setAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TokenExtensionProgramIxProto.create = function create(properties) {
                return new TokenExtensionProgramIxProto(properties);
            };

            TokenExtensionProgramIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tokenProgramIx != null && Object.hasOwnProperty.call(message, "tokenProgramIx"))
                    $root.vixen.parser.TokenProgramIxProto.encode(message.tokenProgramIx, writer.uint32(10).fork()).ldelim();
                if (message.transferFeeIx != null && Object.hasOwnProperty.call(message, "transferFeeIx"))
                    $root.vixen.parser.TransferFeeIxProto.encode(message.transferFeeIx, writer.uint32(18).fork()).ldelim();
                if (message.tokenMetadataIx != null && Object.hasOwnProperty.call(message, "tokenMetadataIx"))
                    $root.vixen.parser.TokenMetadataIxProto.encode(message.tokenMetadataIx, writer.uint32(26).fork()).ldelim();
                if (message.tokenGroupIx != null && Object.hasOwnProperty.call(message, "tokenGroupIx"))
                    $root.vixen.parser.TokenGroupIxProto.encode(message.tokenGroupIx, writer.uint32(34).fork()).ldelim();
                if (message.confidentialTransferIx != null && Object.hasOwnProperty.call(message, "confidentialTransferIx"))
                    $root.vixen.parser.ConfidentialTransferExtIxProto.encode(message.confidentialTransferIx, writer.uint32(42).fork()).ldelim();
                if (message.confidentialTransferFeeIx != null && Object.hasOwnProperty.call(message, "confidentialTransferFeeIx"))
                    $root.vixen.parser.ConfidentialTransferFeeIxProto.encode(message.confidentialTransferFeeIx, writer.uint32(50).fork()).ldelim();
                if (message.cpiGuardIx != null && Object.hasOwnProperty.call(message, "cpiGuardIx"))
                    $root.vixen.parser.CpiGuardIxProto.encode(message.cpiGuardIx, writer.uint32(58).fork()).ldelim();
                if (message.transferHookIx != null && Object.hasOwnProperty.call(message, "transferHookIx"))
                    $root.vixen.parser.TransferHookIxProto.encode(message.transferHookIx, writer.uint32(66).fork()).ldelim();
                if (message.metadataPointerIx != null && Object.hasOwnProperty.call(message, "metadataPointerIx"))
                    $root.vixen.parser.MetadataPointerIxProto.encode(message.metadataPointerIx, writer.uint32(74).fork()).ldelim();
                if (message.memoTransferIx != null && Object.hasOwnProperty.call(message, "memoTransferIx"))
                    $root.vixen.parser.MemoTransferIxProto.encode(message.memoTransferIx, writer.uint32(82).fork()).ldelim();
                if (message.interestBearingMintIx != null && Object.hasOwnProperty.call(message, "interestBearingMintIx"))
                    $root.vixen.parser.InterestBearingMintIxProto.encode(message.interestBearingMintIx, writer.uint32(90).fork()).ldelim();
                if (message.defaultAccountStateIx != null && Object.hasOwnProperty.call(message, "defaultAccountStateIx"))
                    $root.vixen.parser.DefaultAccountStateIxProto.encode(message.defaultAccountStateIx, writer.uint32(98).fork()).ldelim();
                if (message.groupMemberPointerIx != null && Object.hasOwnProperty.call(message, "groupMemberPointerIx"))
                    $root.vixen.parser.GroupMemberPointerIxProto.encode(message.groupMemberPointerIx, writer.uint32(106).fork()).ldelim();
                if (message.groupPointerIx != null && Object.hasOwnProperty.call(message, "groupPointerIx"))
                    $root.vixen.parser.GroupPointerIxProto.encode(message.groupPointerIx, writer.uint32(114).fork()).ldelim();
                if (message.withdrawExcessLamportsIx != null && Object.hasOwnProperty.call(message, "withdrawExcessLamportsIx"))
                    $root.vixen.parser.WithdrawExcessLamportsIxProto.encode(message.withdrawExcessLamportsIx, writer.uint32(122).fork()).ldelim();
                if (message.initializePermanentDelegateIx != null && Object.hasOwnProperty.call(message, "initializePermanentDelegateIx"))
                    $root.vixen.parser.InitializePermanentDelegateIxProto.encode(message.initializePermanentDelegateIx, writer.uint32(130).fork()).ldelim();
                if (message.reallocateIx != null && Object.hasOwnProperty.call(message, "reallocateIx"))
                    $root.vixen.parser.ReallocateIxProto.encode(message.reallocateIx, writer.uint32(138).fork()).ldelim();
                if (message.initializeNonTransferableMintIx != null && Object.hasOwnProperty.call(message, "initializeNonTransferableMintIx"))
                    $root.vixen.parser.InitializeNonTransferableMintIxProto.encode(message.initializeNonTransferableMintIx, writer.uint32(146).fork()).ldelim();
                if (message.initializeMintCloseAuthorityIx != null && Object.hasOwnProperty.call(message, "initializeMintCloseAuthorityIx"))
                    $root.vixen.parser.InitializeMintCloseAuthorityIxProto.encode(message.initializeMintCloseAuthorityIx, writer.uint32(154).fork()).ldelim();
                if (message.createNativeMintIx != null && Object.hasOwnProperty.call(message, "createNativeMintIx"))
                    $root.vixen.parser.CreateNativeMintIxProto.encode(message.createNativeMintIx, writer.uint32(162).fork()).ldelim();
                if (message.setAuthority != null && Object.hasOwnProperty.call(message, "setAuthority"))
                    $root.vixen.parser.SetAuthorityIxProto.encode(message.setAuthority, writer.uint32(170).fork()).ldelim();
                return writer;
            };

            TokenExtensionProgramIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenExtensionProgramIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenExtensionProgramIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.tokenProgramIx = $root.vixen.parser.TokenProgramIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.transferFeeIx = $root.vixen.parser.TransferFeeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.tokenMetadataIx = $root.vixen.parser.TokenMetadataIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.tokenGroupIx = $root.vixen.parser.TokenGroupIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.confidentialTransferIx = $root.vixen.parser.ConfidentialTransferExtIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.confidentialTransferFeeIx = $root.vixen.parser.ConfidentialTransferFeeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.cpiGuardIx = $root.vixen.parser.CpiGuardIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.transferHookIx = $root.vixen.parser.TransferHookIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.metadataPointerIx = $root.vixen.parser.MetadataPointerIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            message.memoTransferIx = $root.vixen.parser.MemoTransferIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.interestBearingMintIx = $root.vixen.parser.InterestBearingMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.defaultAccountStateIx = $root.vixen.parser.DefaultAccountStateIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 13: {
                            message.groupMemberPointerIx = $root.vixen.parser.GroupMemberPointerIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 14: {
                            message.groupPointerIx = $root.vixen.parser.GroupPointerIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 15: {
                            message.withdrawExcessLamportsIx = $root.vixen.parser.WithdrawExcessLamportsIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 16: {
                            message.initializePermanentDelegateIx = $root.vixen.parser.InitializePermanentDelegateIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 17: {
                            message.reallocateIx = $root.vixen.parser.ReallocateIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.initializeNonTransferableMintIx = $root.vixen.parser.InitializeNonTransferableMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 19: {
                            message.initializeMintCloseAuthorityIx = $root.vixen.parser.InitializeMintCloseAuthorityIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 20: {
                            message.createNativeMintIx = $root.vixen.parser.CreateNativeMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 21: {
                            message.setAuthority = $root.vixen.parser.SetAuthorityIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenExtensionProgramIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenExtensionProgramIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.tokenProgramIx != null && message.hasOwnProperty("tokenProgramIx")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.TokenProgramIxProto.verify(message.tokenProgramIx);
                        if (error)
                            return "tokenProgramIx." + error;
                    }
                }
                if (message.transferFeeIx != null && message.hasOwnProperty("transferFeeIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.TransferFeeIxProto.verify(message.transferFeeIx);
                        if (error)
                            return "transferFeeIx." + error;
                    }
                }
                if (message.tokenMetadataIx != null && message.hasOwnProperty("tokenMetadataIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.TokenMetadataIxProto.verify(message.tokenMetadataIx);
                        if (error)
                            return "tokenMetadataIx." + error;
                    }
                }
                if (message.tokenGroupIx != null && message.hasOwnProperty("tokenGroupIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.TokenGroupIxProto.verify(message.tokenGroupIx);
                        if (error)
                            return "tokenGroupIx." + error;
                    }
                }
                if (message.confidentialTransferIx != null && message.hasOwnProperty("confidentialTransferIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialTransferExtIxProto.verify(message.confidentialTransferIx);
                        if (error)
                            return "confidentialTransferIx." + error;
                    }
                }
                if (message.confidentialTransferFeeIx != null && message.hasOwnProperty("confidentialTransferFeeIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialTransferFeeIxProto.verify(message.confidentialTransferFeeIx);
                        if (error)
                            return "confidentialTransferFeeIx." + error;
                    }
                }
                if (message.cpiGuardIx != null && message.hasOwnProperty("cpiGuardIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.CpiGuardIxProto.verify(message.cpiGuardIx);
                        if (error)
                            return "cpiGuardIx." + error;
                    }
                }
                if (message.transferHookIx != null && message.hasOwnProperty("transferHookIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.TransferHookIxProto.verify(message.transferHookIx);
                        if (error)
                            return "transferHookIx." + error;
                    }
                }
                if (message.metadataPointerIx != null && message.hasOwnProperty("metadataPointerIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.MetadataPointerIxProto.verify(message.metadataPointerIx);
                        if (error)
                            return "metadataPointerIx." + error;
                    }
                }
                if (message.memoTransferIx != null && message.hasOwnProperty("memoTransferIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.MemoTransferIxProto.verify(message.memoTransferIx);
                        if (error)
                            return "memoTransferIx." + error;
                    }
                }
                if (message.interestBearingMintIx != null && message.hasOwnProperty("interestBearingMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InterestBearingMintIxProto.verify(message.interestBearingMintIx);
                        if (error)
                            return "interestBearingMintIx." + error;
                    }
                }
                if (message.defaultAccountStateIx != null && message.hasOwnProperty("defaultAccountStateIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.DefaultAccountStateIxProto.verify(message.defaultAccountStateIx);
                        if (error)
                            return "defaultAccountStateIx." + error;
                    }
                }
                if (message.groupMemberPointerIx != null && message.hasOwnProperty("groupMemberPointerIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.GroupMemberPointerIxProto.verify(message.groupMemberPointerIx);
                        if (error)
                            return "groupMemberPointerIx." + error;
                    }
                }
                if (message.groupPointerIx != null && message.hasOwnProperty("groupPointerIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.GroupPointerIxProto.verify(message.groupPointerIx);
                        if (error)
                            return "groupPointerIx." + error;
                    }
                }
                if (message.withdrawExcessLamportsIx != null && message.hasOwnProperty("withdrawExcessLamportsIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.WithdrawExcessLamportsIxProto.verify(message.withdrawExcessLamportsIx);
                        if (error)
                            return "withdrawExcessLamportsIx." + error;
                    }
                }
                if (message.initializePermanentDelegateIx != null && message.hasOwnProperty("initializePermanentDelegateIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializePermanentDelegateIxProto.verify(message.initializePermanentDelegateIx);
                        if (error)
                            return "initializePermanentDelegateIx." + error;
                    }
                }
                if (message.reallocateIx != null && message.hasOwnProperty("reallocateIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ReallocateIxProto.verify(message.reallocateIx);
                        if (error)
                            return "reallocateIx." + error;
                    }
                }
                if (message.initializeNonTransferableMintIx != null && message.hasOwnProperty("initializeNonTransferableMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeNonTransferableMintIxProto.verify(message.initializeNonTransferableMintIx);
                        if (error)
                            return "initializeNonTransferableMintIx." + error;
                    }
                }
                if (message.initializeMintCloseAuthorityIx != null && message.hasOwnProperty("initializeMintCloseAuthorityIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeMintCloseAuthorityIxProto.verify(message.initializeMintCloseAuthorityIx);
                        if (error)
                            return "initializeMintCloseAuthorityIx." + error;
                    }
                }
                if (message.createNativeMintIx != null && message.hasOwnProperty("createNativeMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.CreateNativeMintIxProto.verify(message.createNativeMintIx);
                        if (error)
                            return "createNativeMintIx." + error;
                    }
                }
                if (message.setAuthority != null && message.hasOwnProperty("setAuthority")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.SetAuthorityIxProto.verify(message.setAuthority);
                        if (error)
                            return "setAuthority." + error;
                    }
                }
                return null;
            };

            TokenExtensionProgramIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenExtensionProgramIxProto)
                    return object;
                var message = new $root.vixen.parser.TokenExtensionProgramIxProto();
                if (object.tokenProgramIx != null) {
                    if (typeof object.tokenProgramIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.tokenProgramIx: object expected");
                    message.tokenProgramIx = $root.vixen.parser.TokenProgramIxProto.fromObject(object.tokenProgramIx);
                }
                if (object.transferFeeIx != null) {
                    if (typeof object.transferFeeIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.transferFeeIx: object expected");
                    message.transferFeeIx = $root.vixen.parser.TransferFeeIxProto.fromObject(object.transferFeeIx);
                }
                if (object.tokenMetadataIx != null) {
                    if (typeof object.tokenMetadataIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.tokenMetadataIx: object expected");
                    message.tokenMetadataIx = $root.vixen.parser.TokenMetadataIxProto.fromObject(object.tokenMetadataIx);
                }
                if (object.tokenGroupIx != null) {
                    if (typeof object.tokenGroupIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.tokenGroupIx: object expected");
                    message.tokenGroupIx = $root.vixen.parser.TokenGroupIxProto.fromObject(object.tokenGroupIx);
                }
                if (object.confidentialTransferIx != null) {
                    if (typeof object.confidentialTransferIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.confidentialTransferIx: object expected");
                    message.confidentialTransferIx = $root.vixen.parser.ConfidentialTransferExtIxProto.fromObject(object.confidentialTransferIx);
                }
                if (object.confidentialTransferFeeIx != null) {
                    if (typeof object.confidentialTransferFeeIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.confidentialTransferFeeIx: object expected");
                    message.confidentialTransferFeeIx = $root.vixen.parser.ConfidentialTransferFeeIxProto.fromObject(object.confidentialTransferFeeIx);
                }
                if (object.cpiGuardIx != null) {
                    if (typeof object.cpiGuardIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.cpiGuardIx: object expected");
                    message.cpiGuardIx = $root.vixen.parser.CpiGuardIxProto.fromObject(object.cpiGuardIx);
                }
                if (object.transferHookIx != null) {
                    if (typeof object.transferHookIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.transferHookIx: object expected");
                    message.transferHookIx = $root.vixen.parser.TransferHookIxProto.fromObject(object.transferHookIx);
                }
                if (object.metadataPointerIx != null) {
                    if (typeof object.metadataPointerIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.metadataPointerIx: object expected");
                    message.metadataPointerIx = $root.vixen.parser.MetadataPointerIxProto.fromObject(object.metadataPointerIx);
                }
                if (object.memoTransferIx != null) {
                    if (typeof object.memoTransferIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.memoTransferIx: object expected");
                    message.memoTransferIx = $root.vixen.parser.MemoTransferIxProto.fromObject(object.memoTransferIx);
                }
                if (object.interestBearingMintIx != null) {
                    if (typeof object.interestBearingMintIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.interestBearingMintIx: object expected");
                    message.interestBearingMintIx = $root.vixen.parser.InterestBearingMintIxProto.fromObject(object.interestBearingMintIx);
                }
                if (object.defaultAccountStateIx != null) {
                    if (typeof object.defaultAccountStateIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.defaultAccountStateIx: object expected");
                    message.defaultAccountStateIx = $root.vixen.parser.DefaultAccountStateIxProto.fromObject(object.defaultAccountStateIx);
                }
                if (object.groupMemberPointerIx != null) {
                    if (typeof object.groupMemberPointerIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.groupMemberPointerIx: object expected");
                    message.groupMemberPointerIx = $root.vixen.parser.GroupMemberPointerIxProto.fromObject(object.groupMemberPointerIx);
                }
                if (object.groupPointerIx != null) {
                    if (typeof object.groupPointerIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.groupPointerIx: object expected");
                    message.groupPointerIx = $root.vixen.parser.GroupPointerIxProto.fromObject(object.groupPointerIx);
                }
                if (object.withdrawExcessLamportsIx != null) {
                    if (typeof object.withdrawExcessLamportsIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.withdrawExcessLamportsIx: object expected");
                    message.withdrawExcessLamportsIx = $root.vixen.parser.WithdrawExcessLamportsIxProto.fromObject(object.withdrawExcessLamportsIx);
                }
                if (object.initializePermanentDelegateIx != null) {
                    if (typeof object.initializePermanentDelegateIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.initializePermanentDelegateIx: object expected");
                    message.initializePermanentDelegateIx = $root.vixen.parser.InitializePermanentDelegateIxProto.fromObject(object.initializePermanentDelegateIx);
                }
                if (object.reallocateIx != null) {
                    if (typeof object.reallocateIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.reallocateIx: object expected");
                    message.reallocateIx = $root.vixen.parser.ReallocateIxProto.fromObject(object.reallocateIx);
                }
                if (object.initializeNonTransferableMintIx != null) {
                    if (typeof object.initializeNonTransferableMintIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.initializeNonTransferableMintIx: object expected");
                    message.initializeNonTransferableMintIx = $root.vixen.parser.InitializeNonTransferableMintIxProto.fromObject(object.initializeNonTransferableMintIx);
                }
                if (object.initializeMintCloseAuthorityIx != null) {
                    if (typeof object.initializeMintCloseAuthorityIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.initializeMintCloseAuthorityIx: object expected");
                    message.initializeMintCloseAuthorityIx = $root.vixen.parser.InitializeMintCloseAuthorityIxProto.fromObject(object.initializeMintCloseAuthorityIx);
                }
                if (object.createNativeMintIx != null) {
                    if (typeof object.createNativeMintIx !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.createNativeMintIx: object expected");
                    message.createNativeMintIx = $root.vixen.parser.CreateNativeMintIxProto.fromObject(object.createNativeMintIx);
                }
                if (object.setAuthority != null) {
                    if (typeof object.setAuthority !== "object")
                        throw TypeError(".vixen.parser.TokenExtensionProgramIxProto.setAuthority: object expected");
                    message.setAuthority = $root.vixen.parser.SetAuthorityIxProto.fromObject(object.setAuthority);
                }
                return message;
            };

            TokenExtensionProgramIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.tokenProgramIx != null && message.hasOwnProperty("tokenProgramIx")) {
                    object.tokenProgramIx = $root.vixen.parser.TokenProgramIxProto.toObject(message.tokenProgramIx, options);
                    if (options.oneofs)
                        object.ixOneof = "tokenProgramIx";
                }
                if (message.transferFeeIx != null && message.hasOwnProperty("transferFeeIx")) {
                    object.transferFeeIx = $root.vixen.parser.TransferFeeIxProto.toObject(message.transferFeeIx, options);
                    if (options.oneofs)
                        object.ixOneof = "transferFeeIx";
                }
                if (message.tokenMetadataIx != null && message.hasOwnProperty("tokenMetadataIx")) {
                    object.tokenMetadataIx = $root.vixen.parser.TokenMetadataIxProto.toObject(message.tokenMetadataIx, options);
                    if (options.oneofs)
                        object.ixOneof = "tokenMetadataIx";
                }
                if (message.tokenGroupIx != null && message.hasOwnProperty("tokenGroupIx")) {
                    object.tokenGroupIx = $root.vixen.parser.TokenGroupIxProto.toObject(message.tokenGroupIx, options);
                    if (options.oneofs)
                        object.ixOneof = "tokenGroupIx";
                }
                if (message.confidentialTransferIx != null && message.hasOwnProperty("confidentialTransferIx")) {
                    object.confidentialTransferIx = $root.vixen.parser.ConfidentialTransferExtIxProto.toObject(message.confidentialTransferIx, options);
                    if (options.oneofs)
                        object.ixOneof = "confidentialTransferIx";
                }
                if (message.confidentialTransferFeeIx != null && message.hasOwnProperty("confidentialTransferFeeIx")) {
                    object.confidentialTransferFeeIx = $root.vixen.parser.ConfidentialTransferFeeIxProto.toObject(message.confidentialTransferFeeIx, options);
                    if (options.oneofs)
                        object.ixOneof = "confidentialTransferFeeIx";
                }
                if (message.cpiGuardIx != null && message.hasOwnProperty("cpiGuardIx")) {
                    object.cpiGuardIx = $root.vixen.parser.CpiGuardIxProto.toObject(message.cpiGuardIx, options);
                    if (options.oneofs)
                        object.ixOneof = "cpiGuardIx";
                }
                if (message.transferHookIx != null && message.hasOwnProperty("transferHookIx")) {
                    object.transferHookIx = $root.vixen.parser.TransferHookIxProto.toObject(message.transferHookIx, options);
                    if (options.oneofs)
                        object.ixOneof = "transferHookIx";
                }
                if (message.metadataPointerIx != null && message.hasOwnProperty("metadataPointerIx")) {
                    object.metadataPointerIx = $root.vixen.parser.MetadataPointerIxProto.toObject(message.metadataPointerIx, options);
                    if (options.oneofs)
                        object.ixOneof = "metadataPointerIx";
                }
                if (message.memoTransferIx != null && message.hasOwnProperty("memoTransferIx")) {
                    object.memoTransferIx = $root.vixen.parser.MemoTransferIxProto.toObject(message.memoTransferIx, options);
                    if (options.oneofs)
                        object.ixOneof = "memoTransferIx";
                }
                if (message.interestBearingMintIx != null && message.hasOwnProperty("interestBearingMintIx")) {
                    object.interestBearingMintIx = $root.vixen.parser.InterestBearingMintIxProto.toObject(message.interestBearingMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "interestBearingMintIx";
                }
                if (message.defaultAccountStateIx != null && message.hasOwnProperty("defaultAccountStateIx")) {
                    object.defaultAccountStateIx = $root.vixen.parser.DefaultAccountStateIxProto.toObject(message.defaultAccountStateIx, options);
                    if (options.oneofs)
                        object.ixOneof = "defaultAccountStateIx";
                }
                if (message.groupMemberPointerIx != null && message.hasOwnProperty("groupMemberPointerIx")) {
                    object.groupMemberPointerIx = $root.vixen.parser.GroupMemberPointerIxProto.toObject(message.groupMemberPointerIx, options);
                    if (options.oneofs)
                        object.ixOneof = "groupMemberPointerIx";
                }
                if (message.groupPointerIx != null && message.hasOwnProperty("groupPointerIx")) {
                    object.groupPointerIx = $root.vixen.parser.GroupPointerIxProto.toObject(message.groupPointerIx, options);
                    if (options.oneofs)
                        object.ixOneof = "groupPointerIx";
                }
                if (message.withdrawExcessLamportsIx != null && message.hasOwnProperty("withdrawExcessLamportsIx")) {
                    object.withdrawExcessLamportsIx = $root.vixen.parser.WithdrawExcessLamportsIxProto.toObject(message.withdrawExcessLamportsIx, options);
                    if (options.oneofs)
                        object.ixOneof = "withdrawExcessLamportsIx";
                }
                if (message.initializePermanentDelegateIx != null && message.hasOwnProperty("initializePermanentDelegateIx")) {
                    object.initializePermanentDelegateIx = $root.vixen.parser.InitializePermanentDelegateIxProto.toObject(message.initializePermanentDelegateIx, options);
                    if (options.oneofs)
                        object.ixOneof = "initializePermanentDelegateIx";
                }
                if (message.reallocateIx != null && message.hasOwnProperty("reallocateIx")) {
                    object.reallocateIx = $root.vixen.parser.ReallocateIxProto.toObject(message.reallocateIx, options);
                    if (options.oneofs)
                        object.ixOneof = "reallocateIx";
                }
                if (message.initializeNonTransferableMintIx != null && message.hasOwnProperty("initializeNonTransferableMintIx")) {
                    object.initializeNonTransferableMintIx = $root.vixen.parser.InitializeNonTransferableMintIxProto.toObject(message.initializeNonTransferableMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeNonTransferableMintIx";
                }
                if (message.initializeMintCloseAuthorityIx != null && message.hasOwnProperty("initializeMintCloseAuthorityIx")) {
                    object.initializeMintCloseAuthorityIx = $root.vixen.parser.InitializeMintCloseAuthorityIxProto.toObject(message.initializeMintCloseAuthorityIx, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeMintCloseAuthorityIx";
                }
                if (message.createNativeMintIx != null && message.hasOwnProperty("createNativeMintIx")) {
                    object.createNativeMintIx = $root.vixen.parser.CreateNativeMintIxProto.toObject(message.createNativeMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "createNativeMintIx";
                }
                if (message.setAuthority != null && message.hasOwnProperty("setAuthority")) {
                    object.setAuthority = $root.vixen.parser.SetAuthorityIxProto.toObject(message.setAuthority, options);
                    if (options.oneofs)
                        object.ixOneof = "setAuthority";
                }
                return object;
            };

            TokenExtensionProgramIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenExtensionProgramIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenExtensionProgramIxProto";
            };

            return TokenExtensionProgramIxProto;
        })();

        parser.OrcaProgramStateProto = (function() {

            function OrcaProgramStateProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaProgramStateProto.prototype.whirlpool = null;
            OrcaProgramStateProto.prototype.whirlpoolsConfig = null;
            OrcaProgramStateProto.prototype.feeTier = null;
            OrcaProgramStateProto.prototype.position = null;
            OrcaProgramStateProto.prototype.tickArray = null;

            var $oneOfFields;

            Object.defineProperty(OrcaProgramStateProto.prototype, "stateOneof", {
                get: $util.oneOfGetter($oneOfFields = ["whirlpool", "whirlpoolsConfig", "feeTier", "position", "tickArray"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            OrcaProgramStateProto.create = function create(properties) {
                return new OrcaProgramStateProto(properties);
            };

            OrcaProgramStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.whirlpool != null && Object.hasOwnProperty.call(message, "whirlpool"))
                    $root.vixen.parser.WhirlpoolProto.encode(message.whirlpool, writer.uint32(10).fork()).ldelim();
                if (message.whirlpoolsConfig != null && Object.hasOwnProperty.call(message, "whirlpoolsConfig"))
                    $root.vixen.parser.WhirlpoolsConfigProto.encode(message.whirlpoolsConfig, writer.uint32(18).fork()).ldelim();
                if (message.feeTier != null && Object.hasOwnProperty.call(message, "feeTier"))
                    $root.vixen.parser.FeeTierProto.encode(message.feeTier, writer.uint32(26).fork()).ldelim();
                if (message.position != null && Object.hasOwnProperty.call(message, "position"))
                    $root.vixen.parser.PositionProto.encode(message.position, writer.uint32(34).fork()).ldelim();
                if (message.tickArray != null && Object.hasOwnProperty.call(message, "tickArray"))
                    $root.vixen.parser.OrcaTickArrayProto.encode(message.tickArray, writer.uint32(42).fork()).ldelim();
                return writer;
            };

            OrcaProgramStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaProgramStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaProgramStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.whirlpool = $root.vixen.parser.WhirlpoolProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.whirlpoolsConfig = $root.vixen.parser.WhirlpoolsConfigProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.feeTier = $root.vixen.parser.FeeTierProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.position = $root.vixen.parser.PositionProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.tickArray = $root.vixen.parser.OrcaTickArrayProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaProgramStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaProgramStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool")) {
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.WhirlpoolProto.verify(message.whirlpool);
                        if (error)
                            return "whirlpool." + error;
                    }
                }
                if (message.whirlpoolsConfig != null && message.hasOwnProperty("whirlpoolsConfig")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.WhirlpoolsConfigProto.verify(message.whirlpoolsConfig);
                        if (error)
                            return "whirlpoolsConfig." + error;
                    }
                }
                if (message.feeTier != null && message.hasOwnProperty("feeTier")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.FeeTierProto.verify(message.feeTier);
                        if (error)
                            return "feeTier." + error;
                    }
                }
                if (message.position != null && message.hasOwnProperty("position")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.PositionProto.verify(message.position);
                        if (error)
                            return "position." + error;
                    }
                }
                if (message.tickArray != null && message.hasOwnProperty("tickArray")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.OrcaTickArrayProto.verify(message.tickArray);
                        if (error)
                            return "tickArray." + error;
                    }
                }
                return null;
            };

            OrcaProgramStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaProgramStateProto)
                    return object;
                var message = new $root.vixen.parser.OrcaProgramStateProto();
                if (object.whirlpool != null) {
                    if (typeof object.whirlpool !== "object")
                        throw TypeError(".vixen.parser.OrcaProgramStateProto.whirlpool: object expected");
                    message.whirlpool = $root.vixen.parser.WhirlpoolProto.fromObject(object.whirlpool);
                }
                if (object.whirlpoolsConfig != null) {
                    if (typeof object.whirlpoolsConfig !== "object")
                        throw TypeError(".vixen.parser.OrcaProgramStateProto.whirlpoolsConfig: object expected");
                    message.whirlpoolsConfig = $root.vixen.parser.WhirlpoolsConfigProto.fromObject(object.whirlpoolsConfig);
                }
                if (object.feeTier != null) {
                    if (typeof object.feeTier !== "object")
                        throw TypeError(".vixen.parser.OrcaProgramStateProto.feeTier: object expected");
                    message.feeTier = $root.vixen.parser.FeeTierProto.fromObject(object.feeTier);
                }
                if (object.position != null) {
                    if (typeof object.position !== "object")
                        throw TypeError(".vixen.parser.OrcaProgramStateProto.position: object expected");
                    message.position = $root.vixen.parser.PositionProto.fromObject(object.position);
                }
                if (object.tickArray != null) {
                    if (typeof object.tickArray !== "object")
                        throw TypeError(".vixen.parser.OrcaProgramStateProto.tickArray: object expected");
                    message.tickArray = $root.vixen.parser.OrcaTickArrayProto.fromObject(object.tickArray);
                }
                return message;
            };

            OrcaProgramStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool")) {
                    object.whirlpool = $root.vixen.parser.WhirlpoolProto.toObject(message.whirlpool, options);
                    if (options.oneofs)
                        object.stateOneof = "whirlpool";
                }
                if (message.whirlpoolsConfig != null && message.hasOwnProperty("whirlpoolsConfig")) {
                    object.whirlpoolsConfig = $root.vixen.parser.WhirlpoolsConfigProto.toObject(message.whirlpoolsConfig, options);
                    if (options.oneofs)
                        object.stateOneof = "whirlpoolsConfig";
                }
                if (message.feeTier != null && message.hasOwnProperty("feeTier")) {
                    object.feeTier = $root.vixen.parser.FeeTierProto.toObject(message.feeTier, options);
                    if (options.oneofs)
                        object.stateOneof = "feeTier";
                }
                if (message.position != null && message.hasOwnProperty("position")) {
                    object.position = $root.vixen.parser.PositionProto.toObject(message.position, options);
                    if (options.oneofs)
                        object.stateOneof = "position";
                }
                if (message.tickArray != null && message.hasOwnProperty("tickArray")) {
                    object.tickArray = $root.vixen.parser.OrcaTickArrayProto.toObject(message.tickArray, options);
                    if (options.oneofs)
                        object.stateOneof = "tickArray";
                }
                return object;
            };

            OrcaProgramStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaProgramStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaProgramStateProto";
            };

            return OrcaProgramStateProto;
        })();

        parser.OrcaProgramIxProto = (function() {

            function OrcaProgramIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaProgramIxProto.prototype.swap = null;
            OrcaProgramIxProto.prototype.swapV2 = null;

            var $oneOfFields;

            Object.defineProperty(OrcaProgramIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["swap", "swapV2"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            OrcaProgramIxProto.create = function create(properties) {
                return new OrcaProgramIxProto(properties);
            };

            OrcaProgramIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.swap != null && Object.hasOwnProperty.call(message, "swap"))
                    $root.vixen.parser.OrcaSwapInstructionProto.encode(message.swap, writer.uint32(10).fork()).ldelim();
                if (message.swapV2 != null && Object.hasOwnProperty.call(message, "swapV2"))
                    $root.vixen.parser.OrcaSwapV2InstructionProto.encode(message.swapV2, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            OrcaProgramIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaProgramIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaProgramIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.swap = $root.vixen.parser.OrcaSwapInstructionProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.swapV2 = $root.vixen.parser.OrcaSwapV2InstructionProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaProgramIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaProgramIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.swap != null && message.hasOwnProperty("swap")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.OrcaSwapInstructionProto.verify(message.swap);
                        if (error)
                            return "swap." + error;
                    }
                }
                if (message.swapV2 != null && message.hasOwnProperty("swapV2")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.OrcaSwapV2InstructionProto.verify(message.swapV2);
                        if (error)
                            return "swapV2." + error;
                    }
                }
                return null;
            };

            OrcaProgramIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaProgramIxProto)
                    return object;
                var message = new $root.vixen.parser.OrcaProgramIxProto();
                if (object.swap != null) {
                    if (typeof object.swap !== "object")
                        throw TypeError(".vixen.parser.OrcaProgramIxProto.swap: object expected");
                    message.swap = $root.vixen.parser.OrcaSwapInstructionProto.fromObject(object.swap);
                }
                if (object.swapV2 != null) {
                    if (typeof object.swapV2 !== "object")
                        throw TypeError(".vixen.parser.OrcaProgramIxProto.swapV2: object expected");
                    message.swapV2 = $root.vixen.parser.OrcaSwapV2InstructionProto.fromObject(object.swapV2);
                }
                return message;
            };

            OrcaProgramIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.swap != null && message.hasOwnProperty("swap")) {
                    object.swap = $root.vixen.parser.OrcaSwapInstructionProto.toObject(message.swap, options);
                    if (options.oneofs)
                        object.ixOneof = "swap";
                }
                if (message.swapV2 != null && message.hasOwnProperty("swapV2")) {
                    object.swapV2 = $root.vixen.parser.OrcaSwapV2InstructionProto.toObject(message.swapV2, options);
                    if (options.oneofs)
                        object.ixOneof = "swapV2";
                }
                return object;
            };

            OrcaProgramIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaProgramIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaProgramIxProto";
            };

            return OrcaProgramIxProto;
        })();

        parser.RaydiumProgramStateProto = (function() {

            function RaydiumProgramStateProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumProgramStateProto.prototype.ammConfig = null;
            RaydiumProgramStateProto.prototype.operationState = null;
            RaydiumProgramStateProto.prototype.observationState = null;
            RaydiumProgramStateProto.prototype.personalPositionState = null;
            RaydiumProgramStateProto.prototype.poolState = null;
            RaydiumProgramStateProto.prototype.protocolPositionState = null;
            RaydiumProgramStateProto.prototype.tickArrayState = null;
            RaydiumProgramStateProto.prototype.tickArrayBitmapExtension = null;

            var $oneOfFields;

            Object.defineProperty(RaydiumProgramStateProto.prototype, "stateOneof", {
                get: $util.oneOfGetter($oneOfFields = ["ammConfig", "operationState", "observationState", "personalPositionState", "poolState", "protocolPositionState", "tickArrayState", "tickArrayBitmapExtension"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            RaydiumProgramStateProto.create = function create(properties) {
                return new RaydiumProgramStateProto(properties);
            };

            RaydiumProgramStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ammConfig != null && Object.hasOwnProperty.call(message, "ammConfig"))
                    $root.vixen.parser.AmmConfigProto.encode(message.ammConfig, writer.uint32(10).fork()).ldelim();
                if (message.operationState != null && Object.hasOwnProperty.call(message, "operationState"))
                    $root.vixen.parser.OperationStateProto.encode(message.operationState, writer.uint32(18).fork()).ldelim();
                if (message.observationState != null && Object.hasOwnProperty.call(message, "observationState"))
                    $root.vixen.parser.ObservationStateProto.encode(message.observationState, writer.uint32(26).fork()).ldelim();
                if (message.personalPositionState != null && Object.hasOwnProperty.call(message, "personalPositionState"))
                    $root.vixen.parser.PersonalPositionStateProto.encode(message.personalPositionState, writer.uint32(34).fork()).ldelim();
                if (message.poolState != null && Object.hasOwnProperty.call(message, "poolState"))
                    $root.vixen.parser.PoolStateProto.encode(message.poolState, writer.uint32(42).fork()).ldelim();
                if (message.protocolPositionState != null && Object.hasOwnProperty.call(message, "protocolPositionState"))
                    $root.vixen.parser.ProtocolPositionStateProto.encode(message.protocolPositionState, writer.uint32(50).fork()).ldelim();
                if (message.tickArrayState != null && Object.hasOwnProperty.call(message, "tickArrayState"))
                    $root.vixen.parser.RaydiumTickArrayStateProto.encode(message.tickArrayState, writer.uint32(58).fork()).ldelim();
                if (message.tickArrayBitmapExtension != null && Object.hasOwnProperty.call(message, "tickArrayBitmapExtension"))
                    $root.vixen.parser.TickArrayBitmapExtensionProto.encode(message.tickArrayBitmapExtension, writer.uint32(66).fork()).ldelim();
                return writer;
            };

            RaydiumProgramStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumProgramStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumProgramStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ammConfig = $root.vixen.parser.AmmConfigProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.operationState = $root.vixen.parser.OperationStateProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.observationState = $root.vixen.parser.ObservationStateProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.personalPositionState = $root.vixen.parser.PersonalPositionStateProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.poolState = $root.vixen.parser.PoolStateProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.protocolPositionState = $root.vixen.parser.ProtocolPositionStateProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.tickArrayState = $root.vixen.parser.RaydiumTickArrayStateProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.tickArrayBitmapExtension = $root.vixen.parser.TickArrayBitmapExtensionProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumProgramStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumProgramStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.ammConfig != null && message.hasOwnProperty("ammConfig")) {
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.AmmConfigProto.verify(message.ammConfig);
                        if (error)
                            return "ammConfig." + error;
                    }
                }
                if (message.operationState != null && message.hasOwnProperty("operationState")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.OperationStateProto.verify(message.operationState);
                        if (error)
                            return "operationState." + error;
                    }
                }
                if (message.observationState != null && message.hasOwnProperty("observationState")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.ObservationStateProto.verify(message.observationState);
                        if (error)
                            return "observationState." + error;
                    }
                }
                if (message.personalPositionState != null && message.hasOwnProperty("personalPositionState")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.PersonalPositionStateProto.verify(message.personalPositionState);
                        if (error)
                            return "personalPositionState." + error;
                    }
                }
                if (message.poolState != null && message.hasOwnProperty("poolState")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.PoolStateProto.verify(message.poolState);
                        if (error)
                            return "poolState." + error;
                    }
                }
                if (message.protocolPositionState != null && message.hasOwnProperty("protocolPositionState")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.ProtocolPositionStateProto.verify(message.protocolPositionState);
                        if (error)
                            return "protocolPositionState." + error;
                    }
                }
                if (message.tickArrayState != null && message.hasOwnProperty("tickArrayState")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.RaydiumTickArrayStateProto.verify(message.tickArrayState);
                        if (error)
                            return "tickArrayState." + error;
                    }
                }
                if (message.tickArrayBitmapExtension != null && message.hasOwnProperty("tickArrayBitmapExtension")) {
                    if (properties.stateOneof === 1)
                        return "stateOneof: multiple values";
                    properties.stateOneof = 1;
                    {
                        var error = $root.vixen.parser.TickArrayBitmapExtensionProto.verify(message.tickArrayBitmapExtension);
                        if (error)
                            return "tickArrayBitmapExtension." + error;
                    }
                }
                return null;
            };

            RaydiumProgramStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumProgramStateProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumProgramStateProto();
                if (object.ammConfig != null) {
                    if (typeof object.ammConfig !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramStateProto.ammConfig: object expected");
                    message.ammConfig = $root.vixen.parser.AmmConfigProto.fromObject(object.ammConfig);
                }
                if (object.operationState != null) {
                    if (typeof object.operationState !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramStateProto.operationState: object expected");
                    message.operationState = $root.vixen.parser.OperationStateProto.fromObject(object.operationState);
                }
                if (object.observationState != null) {
                    if (typeof object.observationState !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramStateProto.observationState: object expected");
                    message.observationState = $root.vixen.parser.ObservationStateProto.fromObject(object.observationState);
                }
                if (object.personalPositionState != null) {
                    if (typeof object.personalPositionState !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramStateProto.personalPositionState: object expected");
                    message.personalPositionState = $root.vixen.parser.PersonalPositionStateProto.fromObject(object.personalPositionState);
                }
                if (object.poolState != null) {
                    if (typeof object.poolState !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramStateProto.poolState: object expected");
                    message.poolState = $root.vixen.parser.PoolStateProto.fromObject(object.poolState);
                }
                if (object.protocolPositionState != null) {
                    if (typeof object.protocolPositionState !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramStateProto.protocolPositionState: object expected");
                    message.protocolPositionState = $root.vixen.parser.ProtocolPositionStateProto.fromObject(object.protocolPositionState);
                }
                if (object.tickArrayState != null) {
                    if (typeof object.tickArrayState !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramStateProto.tickArrayState: object expected");
                    message.tickArrayState = $root.vixen.parser.RaydiumTickArrayStateProto.fromObject(object.tickArrayState);
                }
                if (object.tickArrayBitmapExtension != null) {
                    if (typeof object.tickArrayBitmapExtension !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramStateProto.tickArrayBitmapExtension: object expected");
                    message.tickArrayBitmapExtension = $root.vixen.parser.TickArrayBitmapExtensionProto.fromObject(object.tickArrayBitmapExtension);
                }
                return message;
            };

            RaydiumProgramStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.ammConfig != null && message.hasOwnProperty("ammConfig")) {
                    object.ammConfig = $root.vixen.parser.AmmConfigProto.toObject(message.ammConfig, options);
                    if (options.oneofs)
                        object.stateOneof = "ammConfig";
                }
                if (message.operationState != null && message.hasOwnProperty("operationState")) {
                    object.operationState = $root.vixen.parser.OperationStateProto.toObject(message.operationState, options);
                    if (options.oneofs)
                        object.stateOneof = "operationState";
                }
                if (message.observationState != null && message.hasOwnProperty("observationState")) {
                    object.observationState = $root.vixen.parser.ObservationStateProto.toObject(message.observationState, options);
                    if (options.oneofs)
                        object.stateOneof = "observationState";
                }
                if (message.personalPositionState != null && message.hasOwnProperty("personalPositionState")) {
                    object.personalPositionState = $root.vixen.parser.PersonalPositionStateProto.toObject(message.personalPositionState, options);
                    if (options.oneofs)
                        object.stateOneof = "personalPositionState";
                }
                if (message.poolState != null && message.hasOwnProperty("poolState")) {
                    object.poolState = $root.vixen.parser.PoolStateProto.toObject(message.poolState, options);
                    if (options.oneofs)
                        object.stateOneof = "poolState";
                }
                if (message.protocolPositionState != null && message.hasOwnProperty("protocolPositionState")) {
                    object.protocolPositionState = $root.vixen.parser.ProtocolPositionStateProto.toObject(message.protocolPositionState, options);
                    if (options.oneofs)
                        object.stateOneof = "protocolPositionState";
                }
                if (message.tickArrayState != null && message.hasOwnProperty("tickArrayState")) {
                    object.tickArrayState = $root.vixen.parser.RaydiumTickArrayStateProto.toObject(message.tickArrayState, options);
                    if (options.oneofs)
                        object.stateOneof = "tickArrayState";
                }
                if (message.tickArrayBitmapExtension != null && message.hasOwnProperty("tickArrayBitmapExtension")) {
                    object.tickArrayBitmapExtension = $root.vixen.parser.TickArrayBitmapExtensionProto.toObject(message.tickArrayBitmapExtension, options);
                    if (options.oneofs)
                        object.stateOneof = "tickArrayBitmapExtension";
                }
                return object;
            };

            RaydiumProgramStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumProgramStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumProgramStateProto";
            };

            return RaydiumProgramStateProto;
        })();

        parser.RaydiumProgramIxProto = (function() {

            function RaydiumProgramIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumProgramIxProto.prototype.swap = null;
            RaydiumProgramIxProto.prototype.swapV2 = null;

            var $oneOfFields;

            Object.defineProperty(RaydiumProgramIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["swap", "swapV2"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            RaydiumProgramIxProto.create = function create(properties) {
                return new RaydiumProgramIxProto(properties);
            };

            RaydiumProgramIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.swap != null && Object.hasOwnProperty.call(message, "swap"))
                    $root.vixen.parser.RaydiumSwapInstructionProto.encode(message.swap, writer.uint32(10).fork()).ldelim();
                if (message.swapV2 != null && Object.hasOwnProperty.call(message, "swapV2"))
                    $root.vixen.parser.RaydiumSwapV2InstructionProto.encode(message.swapV2, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            RaydiumProgramIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumProgramIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumProgramIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.swap = $root.vixen.parser.RaydiumSwapInstructionProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.swapV2 = $root.vixen.parser.RaydiumSwapV2InstructionProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumProgramIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumProgramIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.swap != null && message.hasOwnProperty("swap")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.RaydiumSwapInstructionProto.verify(message.swap);
                        if (error)
                            return "swap." + error;
                    }
                }
                if (message.swapV2 != null && message.hasOwnProperty("swapV2")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.RaydiumSwapV2InstructionProto.verify(message.swapV2);
                        if (error)
                            return "swapV2." + error;
                    }
                }
                return null;
            };

            RaydiumProgramIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumProgramIxProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumProgramIxProto();
                if (object.swap != null) {
                    if (typeof object.swap !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramIxProto.swap: object expected");
                    message.swap = $root.vixen.parser.RaydiumSwapInstructionProto.fromObject(object.swap);
                }
                if (object.swapV2 != null) {
                    if (typeof object.swapV2 !== "object")
                        throw TypeError(".vixen.parser.RaydiumProgramIxProto.swapV2: object expected");
                    message.swapV2 = $root.vixen.parser.RaydiumSwapV2InstructionProto.fromObject(object.swapV2);
                }
                return message;
            };

            RaydiumProgramIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.swap != null && message.hasOwnProperty("swap")) {
                    object.swap = $root.vixen.parser.RaydiumSwapInstructionProto.toObject(message.swap, options);
                    if (options.oneofs)
                        object.ixOneof = "swap";
                }
                if (message.swapV2 != null && message.hasOwnProperty("swapV2")) {
                    object.swapV2 = $root.vixen.parser.RaydiumSwapV2InstructionProto.toObject(message.swapV2, options);
                    if (options.oneofs)
                        object.ixOneof = "swapV2";
                }
                return object;
            };

            RaydiumProgramIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumProgramIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumProgramIxProto";
            };

            return RaydiumProgramIxProto;
        })();

        parser.AccountStateProto = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "Uninitialized"] = 0;
            values[valuesById[1] = "Initialized"] = 1;
            values[valuesById[2] = "Frozen"] = 2;
            return values;
        })();

        parser.TokenAccountProto = (function() {

            function TokenAccountProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenAccountProto.prototype.mint = "";
            TokenAccountProto.prototype.owner = "";
            TokenAccountProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            TokenAccountProto.prototype.delegate = null;
            TokenAccountProto.prototype.state = 0;
            TokenAccountProto.prototype.isNative = null;
            TokenAccountProto.prototype.delegatedAmount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            TokenAccountProto.prototype.closeAuthority = null;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TokenAccountProto.prototype, "_delegate", {
                get: $util.oneOfGetter($oneOfFields = ["delegate"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TokenAccountProto.prototype, "_isNative", {
                get: $util.oneOfGetter($oneOfFields = ["isNative"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TokenAccountProto.prototype, "_closeAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["closeAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TokenAccountProto.create = function create(properties) {
                return new TokenAccountProto(properties);
            };

            TokenAccountProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(18).string(message.owner);
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(24).uint64(message.amount);
                if (message.delegate != null && Object.hasOwnProperty.call(message, "delegate"))
                    writer.uint32(34).string(message.delegate);
                if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(40).int32(message.state);
                if (message.isNative != null && Object.hasOwnProperty.call(message, "isNative"))
                    writer.uint32(48).uint64(message.isNative);
                if (message.delegatedAmount != null && Object.hasOwnProperty.call(message, "delegatedAmount"))
                    writer.uint32(56).uint64(message.delegatedAmount);
                if (message.closeAuthority != null && Object.hasOwnProperty.call(message, "closeAuthority"))
                    writer.uint32(66).string(message.closeAuthority);
                return writer;
            };

            TokenAccountProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenAccountProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenAccountProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.owner = reader.string();
                            break;
                        }
                    case 3: {
                            message.amount = reader.uint64();
                            break;
                        }
                    case 4: {
                            message.delegate = reader.string();
                            break;
                        }
                    case 5: {
                            message.state = reader.int32();
                            break;
                        }
                    case 6: {
                            message.isNative = reader.uint64();
                            break;
                        }
                    case 7: {
                            message.delegatedAmount = reader.uint64();
                            break;
                        }
                    case 8: {
                            message.closeAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenAccountProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenAccountProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                if (message.delegate != null && message.hasOwnProperty("delegate")) {
                    properties._delegate = 1;
                    if (!$util.isString(message.delegate))
                        return "delegate: string expected";
                }
                if (message.state != null && message.hasOwnProperty("state"))
                    switch (message.state) {
                    default:
                        return "state: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.isNative != null && message.hasOwnProperty("isNative")) {
                    properties._isNative = 1;
                    if (!$util.isInteger(message.isNative) && !(message.isNative && $util.isInteger(message.isNative.low) && $util.isInteger(message.isNative.high)))
                        return "isNative: integer|Long expected";
                }
                if (message.delegatedAmount != null && message.hasOwnProperty("delegatedAmount"))
                    if (!$util.isInteger(message.delegatedAmount) && !(message.delegatedAmount && $util.isInteger(message.delegatedAmount.low) && $util.isInteger(message.delegatedAmount.high)))
                        return "delegatedAmount: integer|Long expected";
                if (message.closeAuthority != null && message.hasOwnProperty("closeAuthority")) {
                    properties._closeAuthority = 1;
                    if (!$util.isString(message.closeAuthority))
                        return "closeAuthority: string expected";
                }
                return null;
            };

            TokenAccountProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenAccountProto)
                    return object;
                var message = new $root.vixen.parser.TokenAccountProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                if (object.delegate != null)
                    message.delegate = String(object.delegate);
                switch (object.state) {
                default:
                    if (typeof object.state === "number") {
                        message.state = object.state;
                        break;
                    }
                    break;
                case "Uninitialized":
                case 0:
                    message.state = 0;
                    break;
                case "Initialized":
                case 1:
                    message.state = 1;
                    break;
                case "Frozen":
                case 2:
                    message.state = 2;
                    break;
                }
                if (object.isNative != null)
                    if ($util.Long)
                        (message.isNative = $util.Long.fromValue(object.isNative)).unsigned = true;
                    else if (typeof object.isNative === "string")
                        message.isNative = parseInt(object.isNative, 10);
                    else if (typeof object.isNative === "number")
                        message.isNative = object.isNative;
                    else if (typeof object.isNative === "object")
                        message.isNative = new $util.LongBits(object.isNative.low >>> 0, object.isNative.high >>> 0).toNumber(true);
                if (object.delegatedAmount != null)
                    if ($util.Long)
                        (message.delegatedAmount = $util.Long.fromValue(object.delegatedAmount)).unsigned = true;
                    else if (typeof object.delegatedAmount === "string")
                        message.delegatedAmount = parseInt(object.delegatedAmount, 10);
                    else if (typeof object.delegatedAmount === "number")
                        message.delegatedAmount = object.delegatedAmount;
                    else if (typeof object.delegatedAmount === "object")
                        message.delegatedAmount = new $util.LongBits(object.delegatedAmount.low >>> 0, object.delegatedAmount.high >>> 0).toNumber(true);
                if (object.closeAuthority != null)
                    message.closeAuthority = String(object.closeAuthority);
                return message;
            };

            TokenAccountProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.mint = "";
                    object.owner = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                    object.state = options.enums === String ? "Uninitialized" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.delegatedAmount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.delegatedAmount = options.longs === String ? "0" : 0;
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                if (message.delegate != null && message.hasOwnProperty("delegate")) {
                    object.delegate = message.delegate;
                    if (options.oneofs)
                        object._delegate = "delegate";
                }
                if (message.state != null && message.hasOwnProperty("state"))
                    object.state = options.enums === String ? $root.vixen.parser.AccountStateProto[message.state] === undefined ? message.state : $root.vixen.parser.AccountStateProto[message.state] : message.state;
                if (message.isNative != null && message.hasOwnProperty("isNative")) {
                    if (typeof message.isNative === "number")
                        object.isNative = options.longs === String ? String(message.isNative) : message.isNative;
                    else
                        object.isNative = options.longs === String ? $util.Long.prototype.toString.call(message.isNative) : options.longs === Number ? new $util.LongBits(message.isNative.low >>> 0, message.isNative.high >>> 0).toNumber(true) : message.isNative;
                    if (options.oneofs)
                        object._isNative = "isNative";
                }
                if (message.delegatedAmount != null && message.hasOwnProperty("delegatedAmount"))
                    if (typeof message.delegatedAmount === "number")
                        object.delegatedAmount = options.longs === String ? String(message.delegatedAmount) : message.delegatedAmount;
                    else
                        object.delegatedAmount = options.longs === String ? $util.Long.prototype.toString.call(message.delegatedAmount) : options.longs === Number ? new $util.LongBits(message.delegatedAmount.low >>> 0, message.delegatedAmount.high >>> 0).toNumber(true) : message.delegatedAmount;
                if (message.closeAuthority != null && message.hasOwnProperty("closeAuthority")) {
                    object.closeAuthority = message.closeAuthority;
                    if (options.oneofs)
                        object._closeAuthority = "closeAuthority";
                }
                return object;
            };

            TokenAccountProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenAccountProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenAccountProto";
            };

            return TokenAccountProto;
        })();

        parser.MintProto = (function() {

            function MintProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MintProto.prototype.mintAuthority = null;
            MintProto.prototype.supply = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            MintProto.prototype.decimals = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            MintProto.prototype.isInitialized = false;
            MintProto.prototype.freezeAuthority = null;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(MintProto.prototype, "_mintAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["mintAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(MintProto.prototype, "_freezeAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["freezeAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            MintProto.create = function create(properties) {
                return new MintProto(properties);
            };

            MintProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mintAuthority != null && Object.hasOwnProperty.call(message, "mintAuthority"))
                    writer.uint32(10).string(message.mintAuthority);
                if (message.supply != null && Object.hasOwnProperty.call(message, "supply"))
                    writer.uint32(16).uint64(message.supply);
                if (message.decimals != null && Object.hasOwnProperty.call(message, "decimals"))
                    writer.uint32(32).uint64(message.decimals);
                if (message.isInitialized != null && Object.hasOwnProperty.call(message, "isInitialized"))
                    writer.uint32(40).bool(message.isInitialized);
                if (message.freezeAuthority != null && Object.hasOwnProperty.call(message, "freezeAuthority"))
                    writer.uint32(50).string(message.freezeAuthority);
                return writer;
            };

            MintProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MintProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MintProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mintAuthority = reader.string();
                            break;
                        }
                    case 2: {
                            message.supply = reader.uint64();
                            break;
                        }
                    case 4: {
                            message.decimals = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.isInitialized = reader.bool();
                            break;
                        }
                    case 6: {
                            message.freezeAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MintProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MintProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority")) {
                    properties._mintAuthority = 1;
                    if (!$util.isString(message.mintAuthority))
                        return "mintAuthority: string expected";
                }
                if (message.supply != null && message.hasOwnProperty("supply"))
                    if (!$util.isInteger(message.supply) && !(message.supply && $util.isInteger(message.supply.low) && $util.isInteger(message.supply.high)))
                        return "supply: integer|Long expected";
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (!$util.isInteger(message.decimals) && !(message.decimals && $util.isInteger(message.decimals.low) && $util.isInteger(message.decimals.high)))
                        return "decimals: integer|Long expected";
                if (message.isInitialized != null && message.hasOwnProperty("isInitialized"))
                    if (typeof message.isInitialized !== "boolean")
                        return "isInitialized: boolean expected";
                if (message.freezeAuthority != null && message.hasOwnProperty("freezeAuthority")) {
                    properties._freezeAuthority = 1;
                    if (!$util.isString(message.freezeAuthority))
                        return "freezeAuthority: string expected";
                }
                return null;
            };

            MintProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MintProto)
                    return object;
                var message = new $root.vixen.parser.MintProto();
                if (object.mintAuthority != null)
                    message.mintAuthority = String(object.mintAuthority);
                if (object.supply != null)
                    if ($util.Long)
                        (message.supply = $util.Long.fromValue(object.supply)).unsigned = true;
                    else if (typeof object.supply === "string")
                        message.supply = parseInt(object.supply, 10);
                    else if (typeof object.supply === "number")
                        message.supply = object.supply;
                    else if (typeof object.supply === "object")
                        message.supply = new $util.LongBits(object.supply.low >>> 0, object.supply.high >>> 0).toNumber(true);
                if (object.decimals != null)
                    if ($util.Long)
                        (message.decimals = $util.Long.fromValue(object.decimals)).unsigned = true;
                    else if (typeof object.decimals === "string")
                        message.decimals = parseInt(object.decimals, 10);
                    else if (typeof object.decimals === "number")
                        message.decimals = object.decimals;
                    else if (typeof object.decimals === "object")
                        message.decimals = new $util.LongBits(object.decimals.low >>> 0, object.decimals.high >>> 0).toNumber(true);
                if (object.isInitialized != null)
                    message.isInitialized = Boolean(object.isInitialized);
                if (object.freezeAuthority != null)
                    message.freezeAuthority = String(object.freezeAuthority);
                return message;
            };

            MintProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.supply = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.supply = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.decimals = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.decimals = options.longs === String ? "0" : 0;
                    object.isInitialized = false;
                }
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority")) {
                    object.mintAuthority = message.mintAuthority;
                    if (options.oneofs)
                        object._mintAuthority = "mintAuthority";
                }
                if (message.supply != null && message.hasOwnProperty("supply"))
                    if (typeof message.supply === "number")
                        object.supply = options.longs === String ? String(message.supply) : message.supply;
                    else
                        object.supply = options.longs === String ? $util.Long.prototype.toString.call(message.supply) : options.longs === Number ? new $util.LongBits(message.supply.low >>> 0, message.supply.high >>> 0).toNumber(true) : message.supply;
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (typeof message.decimals === "number")
                        object.decimals = options.longs === String ? String(message.decimals) : message.decimals;
                    else
                        object.decimals = options.longs === String ? $util.Long.prototype.toString.call(message.decimals) : options.longs === Number ? new $util.LongBits(message.decimals.low >>> 0, message.decimals.high >>> 0).toNumber(true) : message.decimals;
                if (message.isInitialized != null && message.hasOwnProperty("isInitialized"))
                    object.isInitialized = message.isInitialized;
                if (message.freezeAuthority != null && message.hasOwnProperty("freezeAuthority")) {
                    object.freezeAuthority = message.freezeAuthority;
                    if (options.oneofs)
                        object._freezeAuthority = "freezeAuthority";
                }
                return object;
            };

            MintProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MintProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MintProto";
            };

            return MintProto;
        })();

        parser.MultisigProto = (function() {

            function MultisigProto(properties) {
                this.signers = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MultisigProto.prototype.m = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            MultisigProto.prototype.n = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            MultisigProto.prototype.isInitialized = false;
            MultisigProto.prototype.signers = $util.emptyArray;

            MultisigProto.create = function create(properties) {
                return new MultisigProto(properties);
            };

            MultisigProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.m != null && Object.hasOwnProperty.call(message, "m"))
                    writer.uint32(8).uint64(message.m);
                if (message.n != null && Object.hasOwnProperty.call(message, "n"))
                    writer.uint32(16).uint64(message.n);
                if (message.isInitialized != null && Object.hasOwnProperty.call(message, "isInitialized"))
                    writer.uint32(24).bool(message.isInitialized);
                if (message.signers != null && message.signers.length)
                    for (var i = 0; i < message.signers.length; ++i)
                        writer.uint32(34).string(message.signers[i]);
                return writer;
            };

            MultisigProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MultisigProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MultisigProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.m = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.n = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.isInitialized = reader.bool();
                            break;
                        }
                    case 4: {
                            if (!(message.signers && message.signers.length))
                                message.signers = [];
                            message.signers.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MultisigProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MultisigProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.m != null && message.hasOwnProperty("m"))
                    if (!$util.isInteger(message.m) && !(message.m && $util.isInteger(message.m.low) && $util.isInteger(message.m.high)))
                        return "m: integer|Long expected";
                if (message.n != null && message.hasOwnProperty("n"))
                    if (!$util.isInteger(message.n) && !(message.n && $util.isInteger(message.n.low) && $util.isInteger(message.n.high)))
                        return "n: integer|Long expected";
                if (message.isInitialized != null && message.hasOwnProperty("isInitialized"))
                    if (typeof message.isInitialized !== "boolean")
                        return "isInitialized: boolean expected";
                if (message.signers != null && message.hasOwnProperty("signers")) {
                    if (!Array.isArray(message.signers))
                        return "signers: array expected";
                    for (var i = 0; i < message.signers.length; ++i)
                        if (!$util.isString(message.signers[i]))
                            return "signers: string[] expected";
                }
                return null;
            };

            MultisigProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MultisigProto)
                    return object;
                var message = new $root.vixen.parser.MultisigProto();
                if (object.m != null)
                    if ($util.Long)
                        (message.m = $util.Long.fromValue(object.m)).unsigned = true;
                    else if (typeof object.m === "string")
                        message.m = parseInt(object.m, 10);
                    else if (typeof object.m === "number")
                        message.m = object.m;
                    else if (typeof object.m === "object")
                        message.m = new $util.LongBits(object.m.low >>> 0, object.m.high >>> 0).toNumber(true);
                if (object.n != null)
                    if ($util.Long)
                        (message.n = $util.Long.fromValue(object.n)).unsigned = true;
                    else if (typeof object.n === "string")
                        message.n = parseInt(object.n, 10);
                    else if (typeof object.n === "number")
                        message.n = object.n;
                    else if (typeof object.n === "object")
                        message.n = new $util.LongBits(object.n.low >>> 0, object.n.high >>> 0).toNumber(true);
                if (object.isInitialized != null)
                    message.isInitialized = Boolean(object.isInitialized);
                if (object.signers) {
                    if (!Array.isArray(object.signers))
                        throw TypeError(".vixen.parser.MultisigProto.signers: array expected");
                    message.signers = [];
                    for (var i = 0; i < object.signers.length; ++i)
                        message.signers[i] = String(object.signers[i]);
                }
                return message;
            };

            MultisigProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.signers = [];
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.m = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.m = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.n = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.n = options.longs === String ? "0" : 0;
                    object.isInitialized = false;
                }
                if (message.m != null && message.hasOwnProperty("m"))
                    if (typeof message.m === "number")
                        object.m = options.longs === String ? String(message.m) : message.m;
                    else
                        object.m = options.longs === String ? $util.Long.prototype.toString.call(message.m) : options.longs === Number ? new $util.LongBits(message.m.low >>> 0, message.m.high >>> 0).toNumber(true) : message.m;
                if (message.n != null && message.hasOwnProperty("n"))
                    if (typeof message.n === "number")
                        object.n = options.longs === String ? String(message.n) : message.n;
                    else
                        object.n = options.longs === String ? $util.Long.prototype.toString.call(message.n) : options.longs === Number ? new $util.LongBits(message.n.low >>> 0, message.n.high >>> 0).toNumber(true) : message.n;
                if (message.isInitialized != null && message.hasOwnProperty("isInitialized"))
                    object.isInitialized = message.isInitialized;
                if (message.signers && message.signers.length) {
                    object.signers = [];
                    for (var j = 0; j < message.signers.length; ++j)
                        object.signers[j] = message.signers[j];
                }
                return object;
            };

            MultisigProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MultisigProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MultisigProto";
            };

            return MultisigProto;
        })();

        parser.ImmutableOwnerProto = (function() {

            function ImmutableOwnerProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ImmutableOwnerProto.create = function create(properties) {
                return new ImmutableOwnerProto(properties);
            };

            ImmutableOwnerProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            ImmutableOwnerProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ImmutableOwnerProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ImmutableOwnerProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ImmutableOwnerProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ImmutableOwnerProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            ImmutableOwnerProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ImmutableOwnerProto)
                    return object;
                return new $root.vixen.parser.ImmutableOwnerProto();
            };

            ImmutableOwnerProto.toObject = function toObject() {
                return {};
            };

            ImmutableOwnerProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ImmutableOwnerProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ImmutableOwnerProto";
            };

            return ImmutableOwnerProto;
        })();

        parser.TransferFeeAmountProto = (function() {

            function TransferFeeAmountProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferFeeAmountProto.prototype.withheldAmount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            TransferFeeAmountProto.create = function create(properties) {
                return new TransferFeeAmountProto(properties);
            };

            TransferFeeAmountProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.withheldAmount != null && Object.hasOwnProperty.call(message, "withheldAmount"))
                    writer.uint32(8).uint64(message.withheldAmount);
                return writer;
            };

            TransferFeeAmountProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferFeeAmountProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferFeeAmountProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.withheldAmount = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferFeeAmountProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferFeeAmountProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.withheldAmount != null && message.hasOwnProperty("withheldAmount"))
                    if (!$util.isInteger(message.withheldAmount) && !(message.withheldAmount && $util.isInteger(message.withheldAmount.low) && $util.isInteger(message.withheldAmount.high)))
                        return "withheldAmount: integer|Long expected";
                return null;
            };

            TransferFeeAmountProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferFeeAmountProto)
                    return object;
                var message = new $root.vixen.parser.TransferFeeAmountProto();
                if (object.withheldAmount != null)
                    if ($util.Long)
                        (message.withheldAmount = $util.Long.fromValue(object.withheldAmount)).unsigned = true;
                    else if (typeof object.withheldAmount === "string")
                        message.withheldAmount = parseInt(object.withheldAmount, 10);
                    else if (typeof object.withheldAmount === "number")
                        message.withheldAmount = object.withheldAmount;
                    else if (typeof object.withheldAmount === "object")
                        message.withheldAmount = new $util.LongBits(object.withheldAmount.low >>> 0, object.withheldAmount.high >>> 0).toNumber(true);
                return message;
            };

            TransferFeeAmountProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.withheldAmount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.withheldAmount = options.longs === String ? "0" : 0;
                if (message.withheldAmount != null && message.hasOwnProperty("withheldAmount"))
                    if (typeof message.withheldAmount === "number")
                        object.withheldAmount = options.longs === String ? String(message.withheldAmount) : message.withheldAmount;
                    else
                        object.withheldAmount = options.longs === String ? $util.Long.prototype.toString.call(message.withheldAmount) : options.longs === Number ? new $util.LongBits(message.withheldAmount.low >>> 0, message.withheldAmount.high >>> 0).toNumber(true) : message.withheldAmount;
                return object;
            };

            TransferFeeAmountProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferFeeAmountProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferFeeAmountProto";
            };

            return TransferFeeAmountProto;
        })();

        parser.ConfidentialTransferAccountProto = (function() {

            function ConfidentialTransferAccountProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialTransferAccountProto.prototype.approved = false;
            ConfidentialTransferAccountProto.prototype.elgamalPubkey = "";
            ConfidentialTransferAccountProto.prototype.pendingBalanceLo = "";
            ConfidentialTransferAccountProto.prototype.pendingBalanceHi = "";
            ConfidentialTransferAccountProto.prototype.pendingBalance = "";
            ConfidentialTransferAccountProto.prototype.availableBalance = "";
            ConfidentialTransferAccountProto.prototype.decryptableAvailableBalance = "";
            ConfidentialTransferAccountProto.prototype.allowConfidentialCredits = false;
            ConfidentialTransferAccountProto.prototype.pendingBalanceCreditCounter = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            ConfidentialTransferAccountProto.prototype.maximumPendingBalanceCreditCounter = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            ConfidentialTransferAccountProto.prototype.expectedPendingBalanceCreditCounter = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            ConfidentialTransferAccountProto.prototype.actualPendingBalanceCreditCounter = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            ConfidentialTransferAccountProto.create = function create(properties) {
                return new ConfidentialTransferAccountProto(properties);
            };

            ConfidentialTransferAccountProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.approved != null && Object.hasOwnProperty.call(message, "approved"))
                    writer.uint32(8).bool(message.approved);
                if (message.elgamalPubkey != null && Object.hasOwnProperty.call(message, "elgamalPubkey"))
                    writer.uint32(18).string(message.elgamalPubkey);
                if (message.pendingBalanceLo != null && Object.hasOwnProperty.call(message, "pendingBalanceLo"))
                    writer.uint32(26).string(message.pendingBalanceLo);
                if (message.pendingBalanceHi != null && Object.hasOwnProperty.call(message, "pendingBalanceHi"))
                    writer.uint32(34).string(message.pendingBalanceHi);
                if (message.pendingBalance != null && Object.hasOwnProperty.call(message, "pendingBalance"))
                    writer.uint32(42).string(message.pendingBalance);
                if (message.availableBalance != null && Object.hasOwnProperty.call(message, "availableBalance"))
                    writer.uint32(50).string(message.availableBalance);
                if (message.decryptableAvailableBalance != null && Object.hasOwnProperty.call(message, "decryptableAvailableBalance"))
                    writer.uint32(58).string(message.decryptableAvailableBalance);
                if (message.allowConfidentialCredits != null && Object.hasOwnProperty.call(message, "allowConfidentialCredits"))
                    writer.uint32(64).bool(message.allowConfidentialCredits);
                if (message.pendingBalanceCreditCounter != null && Object.hasOwnProperty.call(message, "pendingBalanceCreditCounter"))
                    writer.uint32(72).uint64(message.pendingBalanceCreditCounter);
                if (message.maximumPendingBalanceCreditCounter != null && Object.hasOwnProperty.call(message, "maximumPendingBalanceCreditCounter"))
                    writer.uint32(80).uint64(message.maximumPendingBalanceCreditCounter);
                if (message.expectedPendingBalanceCreditCounter != null && Object.hasOwnProperty.call(message, "expectedPendingBalanceCreditCounter"))
                    writer.uint32(88).uint64(message.expectedPendingBalanceCreditCounter);
                if (message.actualPendingBalanceCreditCounter != null && Object.hasOwnProperty.call(message, "actualPendingBalanceCreditCounter"))
                    writer.uint32(96).uint64(message.actualPendingBalanceCreditCounter);
                return writer;
            };

            ConfidentialTransferAccountProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialTransferAccountProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialTransferAccountProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.approved = reader.bool();
                            break;
                        }
                    case 2: {
                            message.elgamalPubkey = reader.string();
                            break;
                        }
                    case 3: {
                            message.pendingBalanceLo = reader.string();
                            break;
                        }
                    case 4: {
                            message.pendingBalanceHi = reader.string();
                            break;
                        }
                    case 5: {
                            message.pendingBalance = reader.string();
                            break;
                        }
                    case 6: {
                            message.availableBalance = reader.string();
                            break;
                        }
                    case 7: {
                            message.decryptableAvailableBalance = reader.string();
                            break;
                        }
                    case 8: {
                            message.allowConfidentialCredits = reader.bool();
                            break;
                        }
                    case 9: {
                            message.pendingBalanceCreditCounter = reader.uint64();
                            break;
                        }
                    case 10: {
                            message.maximumPendingBalanceCreditCounter = reader.uint64();
                            break;
                        }
                    case 11: {
                            message.expectedPendingBalanceCreditCounter = reader.uint64();
                            break;
                        }
                    case 12: {
                            message.actualPendingBalanceCreditCounter = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialTransferAccountProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialTransferAccountProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.approved != null && message.hasOwnProperty("approved"))
                    if (typeof message.approved !== "boolean")
                        return "approved: boolean expected";
                if (message.elgamalPubkey != null && message.hasOwnProperty("elgamalPubkey"))
                    if (!$util.isString(message.elgamalPubkey))
                        return "elgamalPubkey: string expected";
                if (message.pendingBalanceLo != null && message.hasOwnProperty("pendingBalanceLo"))
                    if (!$util.isString(message.pendingBalanceLo))
                        return "pendingBalanceLo: string expected";
                if (message.pendingBalanceHi != null && message.hasOwnProperty("pendingBalanceHi"))
                    if (!$util.isString(message.pendingBalanceHi))
                        return "pendingBalanceHi: string expected";
                if (message.pendingBalance != null && message.hasOwnProperty("pendingBalance"))
                    if (!$util.isString(message.pendingBalance))
                        return "pendingBalance: string expected";
                if (message.availableBalance != null && message.hasOwnProperty("availableBalance"))
                    if (!$util.isString(message.availableBalance))
                        return "availableBalance: string expected";
                if (message.decryptableAvailableBalance != null && message.hasOwnProperty("decryptableAvailableBalance"))
                    if (!$util.isString(message.decryptableAvailableBalance))
                        return "decryptableAvailableBalance: string expected";
                if (message.allowConfidentialCredits != null && message.hasOwnProperty("allowConfidentialCredits"))
                    if (typeof message.allowConfidentialCredits !== "boolean")
                        return "allowConfidentialCredits: boolean expected";
                if (message.pendingBalanceCreditCounter != null && message.hasOwnProperty("pendingBalanceCreditCounter"))
                    if (!$util.isInteger(message.pendingBalanceCreditCounter) && !(message.pendingBalanceCreditCounter && $util.isInteger(message.pendingBalanceCreditCounter.low) && $util.isInteger(message.pendingBalanceCreditCounter.high)))
                        return "pendingBalanceCreditCounter: integer|Long expected";
                if (message.maximumPendingBalanceCreditCounter != null && message.hasOwnProperty("maximumPendingBalanceCreditCounter"))
                    if (!$util.isInteger(message.maximumPendingBalanceCreditCounter) && !(message.maximumPendingBalanceCreditCounter && $util.isInteger(message.maximumPendingBalanceCreditCounter.low) && $util.isInteger(message.maximumPendingBalanceCreditCounter.high)))
                        return "maximumPendingBalanceCreditCounter: integer|Long expected";
                if (message.expectedPendingBalanceCreditCounter != null && message.hasOwnProperty("expectedPendingBalanceCreditCounter"))
                    if (!$util.isInteger(message.expectedPendingBalanceCreditCounter) && !(message.expectedPendingBalanceCreditCounter && $util.isInteger(message.expectedPendingBalanceCreditCounter.low) && $util.isInteger(message.expectedPendingBalanceCreditCounter.high)))
                        return "expectedPendingBalanceCreditCounter: integer|Long expected";
                if (message.actualPendingBalanceCreditCounter != null && message.hasOwnProperty("actualPendingBalanceCreditCounter"))
                    if (!$util.isInteger(message.actualPendingBalanceCreditCounter) && !(message.actualPendingBalanceCreditCounter && $util.isInteger(message.actualPendingBalanceCreditCounter.low) && $util.isInteger(message.actualPendingBalanceCreditCounter.high)))
                        return "actualPendingBalanceCreditCounter: integer|Long expected";
                return null;
            };

            ConfidentialTransferAccountProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialTransferAccountProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialTransferAccountProto();
                if (object.approved != null)
                    message.approved = Boolean(object.approved);
                if (object.elgamalPubkey != null)
                    message.elgamalPubkey = String(object.elgamalPubkey);
                if (object.pendingBalanceLo != null)
                    message.pendingBalanceLo = String(object.pendingBalanceLo);
                if (object.pendingBalanceHi != null)
                    message.pendingBalanceHi = String(object.pendingBalanceHi);
                if (object.pendingBalance != null)
                    message.pendingBalance = String(object.pendingBalance);
                if (object.availableBalance != null)
                    message.availableBalance = String(object.availableBalance);
                if (object.decryptableAvailableBalance != null)
                    message.decryptableAvailableBalance = String(object.decryptableAvailableBalance);
                if (object.allowConfidentialCredits != null)
                    message.allowConfidentialCredits = Boolean(object.allowConfidentialCredits);
                if (object.pendingBalanceCreditCounter != null)
                    if ($util.Long)
                        (message.pendingBalanceCreditCounter = $util.Long.fromValue(object.pendingBalanceCreditCounter)).unsigned = true;
                    else if (typeof object.pendingBalanceCreditCounter === "string")
                        message.pendingBalanceCreditCounter = parseInt(object.pendingBalanceCreditCounter, 10);
                    else if (typeof object.pendingBalanceCreditCounter === "number")
                        message.pendingBalanceCreditCounter = object.pendingBalanceCreditCounter;
                    else if (typeof object.pendingBalanceCreditCounter === "object")
                        message.pendingBalanceCreditCounter = new $util.LongBits(object.pendingBalanceCreditCounter.low >>> 0, object.pendingBalanceCreditCounter.high >>> 0).toNumber(true);
                if (object.maximumPendingBalanceCreditCounter != null)
                    if ($util.Long)
                        (message.maximumPendingBalanceCreditCounter = $util.Long.fromValue(object.maximumPendingBalanceCreditCounter)).unsigned = true;
                    else if (typeof object.maximumPendingBalanceCreditCounter === "string")
                        message.maximumPendingBalanceCreditCounter = parseInt(object.maximumPendingBalanceCreditCounter, 10);
                    else if (typeof object.maximumPendingBalanceCreditCounter === "number")
                        message.maximumPendingBalanceCreditCounter = object.maximumPendingBalanceCreditCounter;
                    else if (typeof object.maximumPendingBalanceCreditCounter === "object")
                        message.maximumPendingBalanceCreditCounter = new $util.LongBits(object.maximumPendingBalanceCreditCounter.low >>> 0, object.maximumPendingBalanceCreditCounter.high >>> 0).toNumber(true);
                if (object.expectedPendingBalanceCreditCounter != null)
                    if ($util.Long)
                        (message.expectedPendingBalanceCreditCounter = $util.Long.fromValue(object.expectedPendingBalanceCreditCounter)).unsigned = true;
                    else if (typeof object.expectedPendingBalanceCreditCounter === "string")
                        message.expectedPendingBalanceCreditCounter = parseInt(object.expectedPendingBalanceCreditCounter, 10);
                    else if (typeof object.expectedPendingBalanceCreditCounter === "number")
                        message.expectedPendingBalanceCreditCounter = object.expectedPendingBalanceCreditCounter;
                    else if (typeof object.expectedPendingBalanceCreditCounter === "object")
                        message.expectedPendingBalanceCreditCounter = new $util.LongBits(object.expectedPendingBalanceCreditCounter.low >>> 0, object.expectedPendingBalanceCreditCounter.high >>> 0).toNumber(true);
                if (object.actualPendingBalanceCreditCounter != null)
                    if ($util.Long)
                        (message.actualPendingBalanceCreditCounter = $util.Long.fromValue(object.actualPendingBalanceCreditCounter)).unsigned = true;
                    else if (typeof object.actualPendingBalanceCreditCounter === "string")
                        message.actualPendingBalanceCreditCounter = parseInt(object.actualPendingBalanceCreditCounter, 10);
                    else if (typeof object.actualPendingBalanceCreditCounter === "number")
                        message.actualPendingBalanceCreditCounter = object.actualPendingBalanceCreditCounter;
                    else if (typeof object.actualPendingBalanceCreditCounter === "object")
                        message.actualPendingBalanceCreditCounter = new $util.LongBits(object.actualPendingBalanceCreditCounter.low >>> 0, object.actualPendingBalanceCreditCounter.high >>> 0).toNumber(true);
                return message;
            };

            ConfidentialTransferAccountProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.approved = false;
                    object.elgamalPubkey = "";
                    object.pendingBalanceLo = "";
                    object.pendingBalanceHi = "";
                    object.pendingBalance = "";
                    object.availableBalance = "";
                    object.decryptableAvailableBalance = "";
                    object.allowConfidentialCredits = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.pendingBalanceCreditCounter = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.pendingBalanceCreditCounter = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.maximumPendingBalanceCreditCounter = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.maximumPendingBalanceCreditCounter = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.expectedPendingBalanceCreditCounter = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.expectedPendingBalanceCreditCounter = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.actualPendingBalanceCreditCounter = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.actualPendingBalanceCreditCounter = options.longs === String ? "0" : 0;
                }
                if (message.approved != null && message.hasOwnProperty("approved"))
                    object.approved = message.approved;
                if (message.elgamalPubkey != null && message.hasOwnProperty("elgamalPubkey"))
                    object.elgamalPubkey = message.elgamalPubkey;
                if (message.pendingBalanceLo != null && message.hasOwnProperty("pendingBalanceLo"))
                    object.pendingBalanceLo = message.pendingBalanceLo;
                if (message.pendingBalanceHi != null && message.hasOwnProperty("pendingBalanceHi"))
                    object.pendingBalanceHi = message.pendingBalanceHi;
                if (message.pendingBalance != null && message.hasOwnProperty("pendingBalance"))
                    object.pendingBalance = message.pendingBalance;
                if (message.availableBalance != null && message.hasOwnProperty("availableBalance"))
                    object.availableBalance = message.availableBalance;
                if (message.decryptableAvailableBalance != null && message.hasOwnProperty("decryptableAvailableBalance"))
                    object.decryptableAvailableBalance = message.decryptableAvailableBalance;
                if (message.allowConfidentialCredits != null && message.hasOwnProperty("allowConfidentialCredits"))
                    object.allowConfidentialCredits = message.allowConfidentialCredits;
                if (message.pendingBalanceCreditCounter != null && message.hasOwnProperty("pendingBalanceCreditCounter"))
                    if (typeof message.pendingBalanceCreditCounter === "number")
                        object.pendingBalanceCreditCounter = options.longs === String ? String(message.pendingBalanceCreditCounter) : message.pendingBalanceCreditCounter;
                    else
                        object.pendingBalanceCreditCounter = options.longs === String ? $util.Long.prototype.toString.call(message.pendingBalanceCreditCounter) : options.longs === Number ? new $util.LongBits(message.pendingBalanceCreditCounter.low >>> 0, message.pendingBalanceCreditCounter.high >>> 0).toNumber(true) : message.pendingBalanceCreditCounter;
                if (message.maximumPendingBalanceCreditCounter != null && message.hasOwnProperty("maximumPendingBalanceCreditCounter"))
                    if (typeof message.maximumPendingBalanceCreditCounter === "number")
                        object.maximumPendingBalanceCreditCounter = options.longs === String ? String(message.maximumPendingBalanceCreditCounter) : message.maximumPendingBalanceCreditCounter;
                    else
                        object.maximumPendingBalanceCreditCounter = options.longs === String ? $util.Long.prototype.toString.call(message.maximumPendingBalanceCreditCounter) : options.longs === Number ? new $util.LongBits(message.maximumPendingBalanceCreditCounter.low >>> 0, message.maximumPendingBalanceCreditCounter.high >>> 0).toNumber(true) : message.maximumPendingBalanceCreditCounter;
                if (message.expectedPendingBalanceCreditCounter != null && message.hasOwnProperty("expectedPendingBalanceCreditCounter"))
                    if (typeof message.expectedPendingBalanceCreditCounter === "number")
                        object.expectedPendingBalanceCreditCounter = options.longs === String ? String(message.expectedPendingBalanceCreditCounter) : message.expectedPendingBalanceCreditCounter;
                    else
                        object.expectedPendingBalanceCreditCounter = options.longs === String ? $util.Long.prototype.toString.call(message.expectedPendingBalanceCreditCounter) : options.longs === Number ? new $util.LongBits(message.expectedPendingBalanceCreditCounter.low >>> 0, message.expectedPendingBalanceCreditCounter.high >>> 0).toNumber(true) : message.expectedPendingBalanceCreditCounter;
                if (message.actualPendingBalanceCreditCounter != null && message.hasOwnProperty("actualPendingBalanceCreditCounter"))
                    if (typeof message.actualPendingBalanceCreditCounter === "number")
                        object.actualPendingBalanceCreditCounter = options.longs === String ? String(message.actualPendingBalanceCreditCounter) : message.actualPendingBalanceCreditCounter;
                    else
                        object.actualPendingBalanceCreditCounter = options.longs === String ? $util.Long.prototype.toString.call(message.actualPendingBalanceCreditCounter) : options.longs === Number ? new $util.LongBits(message.actualPendingBalanceCreditCounter.low >>> 0, message.actualPendingBalanceCreditCounter.high >>> 0).toNumber(true) : message.actualPendingBalanceCreditCounter;
                return object;
            };

            ConfidentialTransferAccountProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialTransferAccountProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialTransferAccountProto";
            };

            return ConfidentialTransferAccountProto;
        })();

        parser.MemoTransferProto = (function() {

            function MemoTransferProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MemoTransferProto.prototype.requireIncomingTransferMemos = false;

            MemoTransferProto.create = function create(properties) {
                return new MemoTransferProto(properties);
            };

            MemoTransferProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.requireIncomingTransferMemos != null && Object.hasOwnProperty.call(message, "requireIncomingTransferMemos"))
                    writer.uint32(8).bool(message.requireIncomingTransferMemos);
                return writer;
            };

            MemoTransferProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MemoTransferProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MemoTransferProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.requireIncomingTransferMemos = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MemoTransferProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MemoTransferProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.requireIncomingTransferMemos != null && message.hasOwnProperty("requireIncomingTransferMemos"))
                    if (typeof message.requireIncomingTransferMemos !== "boolean")
                        return "requireIncomingTransferMemos: boolean expected";
                return null;
            };

            MemoTransferProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MemoTransferProto)
                    return object;
                var message = new $root.vixen.parser.MemoTransferProto();
                if (object.requireIncomingTransferMemos != null)
                    message.requireIncomingTransferMemos = Boolean(object.requireIncomingTransferMemos);
                return message;
            };

            MemoTransferProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.requireIncomingTransferMemos = false;
                if (message.requireIncomingTransferMemos != null && message.hasOwnProperty("requireIncomingTransferMemos"))
                    object.requireIncomingTransferMemos = message.requireIncomingTransferMemos;
                return object;
            };

            MemoTransferProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MemoTransferProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MemoTransferProto";
            };

            return MemoTransferProto;
        })();

        parser.NonTransferableAccountProto = (function() {

            function NonTransferableAccountProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            NonTransferableAccountProto.create = function create(properties) {
                return new NonTransferableAccountProto(properties);
            };

            NonTransferableAccountProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            NonTransferableAccountProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            NonTransferableAccountProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.NonTransferableAccountProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            NonTransferableAccountProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            NonTransferableAccountProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            NonTransferableAccountProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.NonTransferableAccountProto)
                    return object;
                return new $root.vixen.parser.NonTransferableAccountProto();
            };

            NonTransferableAccountProto.toObject = function toObject() {
                return {};
            };

            NonTransferableAccountProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            NonTransferableAccountProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.NonTransferableAccountProto";
            };

            return NonTransferableAccountProto;
        })();

        parser.TransferHookAccountProto = (function() {

            function TransferHookAccountProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferHookAccountProto.prototype.transferring = false;

            TransferHookAccountProto.create = function create(properties) {
                return new TransferHookAccountProto(properties);
            };

            TransferHookAccountProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.transferring != null && Object.hasOwnProperty.call(message, "transferring"))
                    writer.uint32(8).bool(message.transferring);
                return writer;
            };

            TransferHookAccountProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferHookAccountProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferHookAccountProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.transferring = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferHookAccountProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferHookAccountProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.transferring != null && message.hasOwnProperty("transferring"))
                    if (typeof message.transferring !== "boolean")
                        return "transferring: boolean expected";
                return null;
            };

            TransferHookAccountProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferHookAccountProto)
                    return object;
                var message = new $root.vixen.parser.TransferHookAccountProto();
                if (object.transferring != null)
                    message.transferring = Boolean(object.transferring);
                return message;
            };

            TransferHookAccountProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.transferring = false;
                if (message.transferring != null && message.hasOwnProperty("transferring"))
                    object.transferring = message.transferring;
                return object;
            };

            TransferHookAccountProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferHookAccountProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferHookAccountProto";
            };

            return TransferHookAccountProto;
        })();

        parser.CpiGuardProto = (function() {

            function CpiGuardProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            CpiGuardProto.prototype.lockCpi = false;

            CpiGuardProto.create = function create(properties) {
                return new CpiGuardProto(properties);
            };

            CpiGuardProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.lockCpi != null && Object.hasOwnProperty.call(message, "lockCpi"))
                    writer.uint32(8).bool(message.lockCpi);
                return writer;
            };

            CpiGuardProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            CpiGuardProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.CpiGuardProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.lockCpi = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            CpiGuardProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            CpiGuardProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.lockCpi != null && message.hasOwnProperty("lockCpi"))
                    if (typeof message.lockCpi !== "boolean")
                        return "lockCpi: boolean expected";
                return null;
            };

            CpiGuardProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.CpiGuardProto)
                    return object;
                var message = new $root.vixen.parser.CpiGuardProto();
                if (object.lockCpi != null)
                    message.lockCpi = Boolean(object.lockCpi);
                return message;
            };

            CpiGuardProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.lockCpi = false;
                if (message.lockCpi != null && message.hasOwnProperty("lockCpi"))
                    object.lockCpi = message.lockCpi;
                return object;
            };

            CpiGuardProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            CpiGuardProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.CpiGuardProto";
            };

            return CpiGuardProto;
        })();

        parser.ConfidentialTransferFeeAmountProto = (function() {

            function ConfidentialTransferFeeAmountProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialTransferFeeAmountProto.prototype.withheldAmount = "";

            ConfidentialTransferFeeAmountProto.create = function create(properties) {
                return new ConfidentialTransferFeeAmountProto(properties);
            };

            ConfidentialTransferFeeAmountProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.withheldAmount != null && Object.hasOwnProperty.call(message, "withheldAmount"))
                    writer.uint32(10).string(message.withheldAmount);
                return writer;
            };

            ConfidentialTransferFeeAmountProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialTransferFeeAmountProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialTransferFeeAmountProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.withheldAmount = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialTransferFeeAmountProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialTransferFeeAmountProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.withheldAmount != null && message.hasOwnProperty("withheldAmount"))
                    if (!$util.isString(message.withheldAmount))
                        return "withheldAmount: string expected";
                return null;
            };

            ConfidentialTransferFeeAmountProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialTransferFeeAmountProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialTransferFeeAmountProto();
                if (object.withheldAmount != null)
                    message.withheldAmount = String(object.withheldAmount);
                return message;
            };

            ConfidentialTransferFeeAmountProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.withheldAmount = "";
                if (message.withheldAmount != null && message.hasOwnProperty("withheldAmount"))
                    object.withheldAmount = message.withheldAmount;
                return object;
            };

            ConfidentialTransferFeeAmountProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialTransferFeeAmountProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialTransferFeeAmountProto";
            };

            return ConfidentialTransferFeeAmountProto;
        })();

        parser.TransferFeeProto = (function() {

            function TransferFeeProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferFeeProto.prototype.epoch = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            TransferFeeProto.prototype.maximumFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            TransferFeeProto.prototype.transferFeeBasisPoints = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            TransferFeeProto.create = function create(properties) {
                return new TransferFeeProto(properties);
            };

            TransferFeeProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.epoch != null && Object.hasOwnProperty.call(message, "epoch"))
                    writer.uint32(8).uint64(message.epoch);
                if (message.maximumFee != null && Object.hasOwnProperty.call(message, "maximumFee"))
                    writer.uint32(16).uint64(message.maximumFee);
                if (message.transferFeeBasisPoints != null && Object.hasOwnProperty.call(message, "transferFeeBasisPoints"))
                    writer.uint32(24).uint64(message.transferFeeBasisPoints);
                return writer;
            };

            TransferFeeProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferFeeProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferFeeProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.epoch = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.maximumFee = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.transferFeeBasisPoints = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferFeeProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferFeeProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.epoch != null && message.hasOwnProperty("epoch"))
                    if (!$util.isInteger(message.epoch) && !(message.epoch && $util.isInteger(message.epoch.low) && $util.isInteger(message.epoch.high)))
                        return "epoch: integer|Long expected";
                if (message.maximumFee != null && message.hasOwnProperty("maximumFee"))
                    if (!$util.isInteger(message.maximumFee) && !(message.maximumFee && $util.isInteger(message.maximumFee.low) && $util.isInteger(message.maximumFee.high)))
                        return "maximumFee: integer|Long expected";
                if (message.transferFeeBasisPoints != null && message.hasOwnProperty("transferFeeBasisPoints"))
                    if (!$util.isInteger(message.transferFeeBasisPoints) && !(message.transferFeeBasisPoints && $util.isInteger(message.transferFeeBasisPoints.low) && $util.isInteger(message.transferFeeBasisPoints.high)))
                        return "transferFeeBasisPoints: integer|Long expected";
                return null;
            };

            TransferFeeProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferFeeProto)
                    return object;
                var message = new $root.vixen.parser.TransferFeeProto();
                if (object.epoch != null)
                    if ($util.Long)
                        (message.epoch = $util.Long.fromValue(object.epoch)).unsigned = true;
                    else if (typeof object.epoch === "string")
                        message.epoch = parseInt(object.epoch, 10);
                    else if (typeof object.epoch === "number")
                        message.epoch = object.epoch;
                    else if (typeof object.epoch === "object")
                        message.epoch = new $util.LongBits(object.epoch.low >>> 0, object.epoch.high >>> 0).toNumber(true);
                if (object.maximumFee != null)
                    if ($util.Long)
                        (message.maximumFee = $util.Long.fromValue(object.maximumFee)).unsigned = true;
                    else if (typeof object.maximumFee === "string")
                        message.maximumFee = parseInt(object.maximumFee, 10);
                    else if (typeof object.maximumFee === "number")
                        message.maximumFee = object.maximumFee;
                    else if (typeof object.maximumFee === "object")
                        message.maximumFee = new $util.LongBits(object.maximumFee.low >>> 0, object.maximumFee.high >>> 0).toNumber(true);
                if (object.transferFeeBasisPoints != null)
                    if ($util.Long)
                        (message.transferFeeBasisPoints = $util.Long.fromValue(object.transferFeeBasisPoints)).unsigned = true;
                    else if (typeof object.transferFeeBasisPoints === "string")
                        message.transferFeeBasisPoints = parseInt(object.transferFeeBasisPoints, 10);
                    else if (typeof object.transferFeeBasisPoints === "number")
                        message.transferFeeBasisPoints = object.transferFeeBasisPoints;
                    else if (typeof object.transferFeeBasisPoints === "object")
                        message.transferFeeBasisPoints = new $util.LongBits(object.transferFeeBasisPoints.low >>> 0, object.transferFeeBasisPoints.high >>> 0).toNumber(true);
                return message;
            };

            TransferFeeProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.epoch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.epoch = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.maximumFee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.maximumFee = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.transferFeeBasisPoints = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.transferFeeBasisPoints = options.longs === String ? "0" : 0;
                }
                if (message.epoch != null && message.hasOwnProperty("epoch"))
                    if (typeof message.epoch === "number")
                        object.epoch = options.longs === String ? String(message.epoch) : message.epoch;
                    else
                        object.epoch = options.longs === String ? $util.Long.prototype.toString.call(message.epoch) : options.longs === Number ? new $util.LongBits(message.epoch.low >>> 0, message.epoch.high >>> 0).toNumber(true) : message.epoch;
                if (message.maximumFee != null && message.hasOwnProperty("maximumFee"))
                    if (typeof message.maximumFee === "number")
                        object.maximumFee = options.longs === String ? String(message.maximumFee) : message.maximumFee;
                    else
                        object.maximumFee = options.longs === String ? $util.Long.prototype.toString.call(message.maximumFee) : options.longs === Number ? new $util.LongBits(message.maximumFee.low >>> 0, message.maximumFee.high >>> 0).toNumber(true) : message.maximumFee;
                if (message.transferFeeBasisPoints != null && message.hasOwnProperty("transferFeeBasisPoints"))
                    if (typeof message.transferFeeBasisPoints === "number")
                        object.transferFeeBasisPoints = options.longs === String ? String(message.transferFeeBasisPoints) : message.transferFeeBasisPoints;
                    else
                        object.transferFeeBasisPoints = options.longs === String ? $util.Long.prototype.toString.call(message.transferFeeBasisPoints) : options.longs === Number ? new $util.LongBits(message.transferFeeBasisPoints.low >>> 0, message.transferFeeBasisPoints.high >>> 0).toNumber(true) : message.transferFeeBasisPoints;
                return object;
            };

            TransferFeeProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferFeeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferFeeProto";
            };

            return TransferFeeProto;
        })();

        parser.TransferFeeConfigProto = (function() {

            function TransferFeeConfigProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferFeeConfigProto.prototype.transferFeeConfigAuthority = "";
            TransferFeeConfigProto.prototype.withdrawWithheldAuthority = "";
            TransferFeeConfigProto.prototype.withheldAmount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            TransferFeeConfigProto.prototype.olderTransferFee = null;
            TransferFeeConfigProto.prototype.newerTransferFee = null;

            TransferFeeConfigProto.create = function create(properties) {
                return new TransferFeeConfigProto(properties);
            };

            TransferFeeConfigProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.transferFeeConfigAuthority != null && Object.hasOwnProperty.call(message, "transferFeeConfigAuthority"))
                    writer.uint32(10).string(message.transferFeeConfigAuthority);
                if (message.withdrawWithheldAuthority != null && Object.hasOwnProperty.call(message, "withdrawWithheldAuthority"))
                    writer.uint32(18).string(message.withdrawWithheldAuthority);
                if (message.withheldAmount != null && Object.hasOwnProperty.call(message, "withheldAmount"))
                    writer.uint32(24).uint64(message.withheldAmount);
                if (message.olderTransferFee != null && Object.hasOwnProperty.call(message, "olderTransferFee"))
                    $root.vixen.parser.TransferFeeProto.encode(message.olderTransferFee, writer.uint32(34).fork()).ldelim();
                if (message.newerTransferFee != null && Object.hasOwnProperty.call(message, "newerTransferFee"))
                    $root.vixen.parser.TransferFeeProto.encode(message.newerTransferFee, writer.uint32(42).fork()).ldelim();
                return writer;
            };

            TransferFeeConfigProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferFeeConfigProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferFeeConfigProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.transferFeeConfigAuthority = reader.string();
                            break;
                        }
                    case 2: {
                            message.withdrawWithheldAuthority = reader.string();
                            break;
                        }
                    case 3: {
                            message.withheldAmount = reader.uint64();
                            break;
                        }
                    case 4: {
                            message.olderTransferFee = $root.vixen.parser.TransferFeeProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.newerTransferFee = $root.vixen.parser.TransferFeeProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferFeeConfigProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferFeeConfigProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.transferFeeConfigAuthority != null && message.hasOwnProperty("transferFeeConfigAuthority"))
                    if (!$util.isString(message.transferFeeConfigAuthority))
                        return "transferFeeConfigAuthority: string expected";
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    if (!$util.isString(message.withdrawWithheldAuthority))
                        return "withdrawWithheldAuthority: string expected";
                if (message.withheldAmount != null && message.hasOwnProperty("withheldAmount"))
                    if (!$util.isInteger(message.withheldAmount) && !(message.withheldAmount && $util.isInteger(message.withheldAmount.low) && $util.isInteger(message.withheldAmount.high)))
                        return "withheldAmount: integer|Long expected";
                if (message.olderTransferFee != null && message.hasOwnProperty("olderTransferFee")) {
                    var error = $root.vixen.parser.TransferFeeProto.verify(message.olderTransferFee);
                    if (error)
                        return "olderTransferFee." + error;
                }
                if (message.newerTransferFee != null && message.hasOwnProperty("newerTransferFee")) {
                    var error = $root.vixen.parser.TransferFeeProto.verify(message.newerTransferFee);
                    if (error)
                        return "newerTransferFee." + error;
                }
                return null;
            };

            TransferFeeConfigProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferFeeConfigProto)
                    return object;
                var message = new $root.vixen.parser.TransferFeeConfigProto();
                if (object.transferFeeConfigAuthority != null)
                    message.transferFeeConfigAuthority = String(object.transferFeeConfigAuthority);
                if (object.withdrawWithheldAuthority != null)
                    message.withdrawWithheldAuthority = String(object.withdrawWithheldAuthority);
                if (object.withheldAmount != null)
                    if ($util.Long)
                        (message.withheldAmount = $util.Long.fromValue(object.withheldAmount)).unsigned = true;
                    else if (typeof object.withheldAmount === "string")
                        message.withheldAmount = parseInt(object.withheldAmount, 10);
                    else if (typeof object.withheldAmount === "number")
                        message.withheldAmount = object.withheldAmount;
                    else if (typeof object.withheldAmount === "object")
                        message.withheldAmount = new $util.LongBits(object.withheldAmount.low >>> 0, object.withheldAmount.high >>> 0).toNumber(true);
                if (object.olderTransferFee != null) {
                    if (typeof object.olderTransferFee !== "object")
                        throw TypeError(".vixen.parser.TransferFeeConfigProto.olderTransferFee: object expected");
                    message.olderTransferFee = $root.vixen.parser.TransferFeeProto.fromObject(object.olderTransferFee);
                }
                if (object.newerTransferFee != null) {
                    if (typeof object.newerTransferFee !== "object")
                        throw TypeError(".vixen.parser.TransferFeeConfigProto.newerTransferFee: object expected");
                    message.newerTransferFee = $root.vixen.parser.TransferFeeProto.fromObject(object.newerTransferFee);
                }
                return message;
            };

            TransferFeeConfigProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.transferFeeConfigAuthority = "";
                    object.withdrawWithheldAuthority = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.withheldAmount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.withheldAmount = options.longs === String ? "0" : 0;
                    object.olderTransferFee = null;
                    object.newerTransferFee = null;
                }
                if (message.transferFeeConfigAuthority != null && message.hasOwnProperty("transferFeeConfigAuthority"))
                    object.transferFeeConfigAuthority = message.transferFeeConfigAuthority;
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    object.withdrawWithheldAuthority = message.withdrawWithheldAuthority;
                if (message.withheldAmount != null && message.hasOwnProperty("withheldAmount"))
                    if (typeof message.withheldAmount === "number")
                        object.withheldAmount = options.longs === String ? String(message.withheldAmount) : message.withheldAmount;
                    else
                        object.withheldAmount = options.longs === String ? $util.Long.prototype.toString.call(message.withheldAmount) : options.longs === Number ? new $util.LongBits(message.withheldAmount.low >>> 0, message.withheldAmount.high >>> 0).toNumber(true) : message.withheldAmount;
                if (message.olderTransferFee != null && message.hasOwnProperty("olderTransferFee"))
                    object.olderTransferFee = $root.vixen.parser.TransferFeeProto.toObject(message.olderTransferFee, options);
                if (message.newerTransferFee != null && message.hasOwnProperty("newerTransferFee"))
                    object.newerTransferFee = $root.vixen.parser.TransferFeeProto.toObject(message.newerTransferFee, options);
                return object;
            };

            TransferFeeConfigProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferFeeConfigProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferFeeConfigProto";
            };

            return TransferFeeConfigProto;
        })();

        parser.MintCloseAuthorityProto = (function() {

            function MintCloseAuthorityProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MintCloseAuthorityProto.prototype.closeAuthority = "";

            MintCloseAuthorityProto.create = function create(properties) {
                return new MintCloseAuthorityProto(properties);
            };

            MintCloseAuthorityProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.closeAuthority != null && Object.hasOwnProperty.call(message, "closeAuthority"))
                    writer.uint32(10).string(message.closeAuthority);
                return writer;
            };

            MintCloseAuthorityProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MintCloseAuthorityProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MintCloseAuthorityProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.closeAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MintCloseAuthorityProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MintCloseAuthorityProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.closeAuthority != null && message.hasOwnProperty("closeAuthority"))
                    if (!$util.isString(message.closeAuthority))
                        return "closeAuthority: string expected";
                return null;
            };

            MintCloseAuthorityProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MintCloseAuthorityProto)
                    return object;
                var message = new $root.vixen.parser.MintCloseAuthorityProto();
                if (object.closeAuthority != null)
                    message.closeAuthority = String(object.closeAuthority);
                return message;
            };

            MintCloseAuthorityProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.closeAuthority = "";
                if (message.closeAuthority != null && message.hasOwnProperty("closeAuthority"))
                    object.closeAuthority = message.closeAuthority;
                return object;
            };

            MintCloseAuthorityProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MintCloseAuthorityProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MintCloseAuthorityProto";
            };

            return MintCloseAuthorityProto;
        })();

        parser.ConfidentialTransferMintProto = (function() {

            function ConfidentialTransferMintProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialTransferMintProto.prototype.authority = "";
            ConfidentialTransferMintProto.prototype.autoApproveNewAccounts = false;
            ConfidentialTransferMintProto.prototype.auditorElgamalPubkey = null;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(ConfidentialTransferMintProto.prototype, "_auditorElgamalPubkey", {
                get: $util.oneOfGetter($oneOfFields = ["auditorElgamalPubkey"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            ConfidentialTransferMintProto.create = function create(properties) {
                return new ConfidentialTransferMintProto(properties);
            };

            ConfidentialTransferMintProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(10).string(message.authority);
                if (message.autoApproveNewAccounts != null && Object.hasOwnProperty.call(message, "autoApproveNewAccounts"))
                    writer.uint32(16).bool(message.autoApproveNewAccounts);
                if (message.auditorElgamalPubkey != null && Object.hasOwnProperty.call(message, "auditorElgamalPubkey"))
                    writer.uint32(26).string(message.auditorElgamalPubkey);
                return writer;
            };

            ConfidentialTransferMintProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialTransferMintProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialTransferMintProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.authority = reader.string();
                            break;
                        }
                    case 2: {
                            message.autoApproveNewAccounts = reader.bool();
                            break;
                        }
                    case 3: {
                            message.auditorElgamalPubkey = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialTransferMintProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialTransferMintProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                if (message.autoApproveNewAccounts != null && message.hasOwnProperty("autoApproveNewAccounts"))
                    if (typeof message.autoApproveNewAccounts !== "boolean")
                        return "autoApproveNewAccounts: boolean expected";
                if (message.auditorElgamalPubkey != null && message.hasOwnProperty("auditorElgamalPubkey")) {
                    properties._auditorElgamalPubkey = 1;
                    if (!$util.isString(message.auditorElgamalPubkey))
                        return "auditorElgamalPubkey: string expected";
                }
                return null;
            };

            ConfidentialTransferMintProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialTransferMintProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialTransferMintProto();
                if (object.authority != null)
                    message.authority = String(object.authority);
                if (object.autoApproveNewAccounts != null)
                    message.autoApproveNewAccounts = Boolean(object.autoApproveNewAccounts);
                if (object.auditorElgamalPubkey != null)
                    message.auditorElgamalPubkey = String(object.auditorElgamalPubkey);
                return message;
            };

            ConfidentialTransferMintProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.authority = "";
                    object.autoApproveNewAccounts = false;
                }
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                if (message.autoApproveNewAccounts != null && message.hasOwnProperty("autoApproveNewAccounts"))
                    object.autoApproveNewAccounts = message.autoApproveNewAccounts;
                if (message.auditorElgamalPubkey != null && message.hasOwnProperty("auditorElgamalPubkey")) {
                    object.auditorElgamalPubkey = message.auditorElgamalPubkey;
                    if (options.oneofs)
                        object._auditorElgamalPubkey = "auditorElgamalPubkey";
                }
                return object;
            };

            ConfidentialTransferMintProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialTransferMintProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialTransferMintProto";
            };

            return ConfidentialTransferMintProto;
        })();

        parser.DefaultAccountStateProto = (function() {

            function DefaultAccountStateProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DefaultAccountStateProto.prototype.state = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            DefaultAccountStateProto.create = function create(properties) {
                return new DefaultAccountStateProto(properties);
            };

            DefaultAccountStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                    writer.uint32(8).uint64(message.state);
                return writer;
            };

            DefaultAccountStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DefaultAccountStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DefaultAccountStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.state = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DefaultAccountStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DefaultAccountStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.state != null && message.hasOwnProperty("state"))
                    if (!$util.isInteger(message.state) && !(message.state && $util.isInteger(message.state.low) && $util.isInteger(message.state.high)))
                        return "state: integer|Long expected";
                return null;
            };

            DefaultAccountStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DefaultAccountStateProto)
                    return object;
                var message = new $root.vixen.parser.DefaultAccountStateProto();
                if (object.state != null)
                    if ($util.Long)
                        (message.state = $util.Long.fromValue(object.state)).unsigned = true;
                    else if (typeof object.state === "string")
                        message.state = parseInt(object.state, 10);
                    else if (typeof object.state === "number")
                        message.state = object.state;
                    else if (typeof object.state === "object")
                        message.state = new $util.LongBits(object.state.low >>> 0, object.state.high >>> 0).toNumber(true);
                return message;
            };

            DefaultAccountStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.state = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.state = options.longs === String ? "0" : 0;
                if (message.state != null && message.hasOwnProperty("state"))
                    if (typeof message.state === "number")
                        object.state = options.longs === String ? String(message.state) : message.state;
                    else
                        object.state = options.longs === String ? $util.Long.prototype.toString.call(message.state) : options.longs === Number ? new $util.LongBits(message.state.low >>> 0, message.state.high >>> 0).toNumber(true) : message.state;
                return object;
            };

            DefaultAccountStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DefaultAccountStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DefaultAccountStateProto";
            };

            return DefaultAccountStateProto;
        })();

        parser.NonTransferableProto = (function() {

            function NonTransferableProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            NonTransferableProto.create = function create(properties) {
                return new NonTransferableProto(properties);
            };

            NonTransferableProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            NonTransferableProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            NonTransferableProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.NonTransferableProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            NonTransferableProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            NonTransferableProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            NonTransferableProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.NonTransferableProto)
                    return object;
                return new $root.vixen.parser.NonTransferableProto();
            };

            NonTransferableProto.toObject = function toObject() {
                return {};
            };

            NonTransferableProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            NonTransferableProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.NonTransferableProto";
            };

            return NonTransferableProto;
        })();

        parser.InterestBearingConfigProto = (function() {

            function InterestBearingConfigProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InterestBearingConfigProto.prototype.rateAuthority = "";
            InterestBearingConfigProto.prototype.initializationTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            InterestBearingConfigProto.prototype.preUpdateAverageRate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            InterestBearingConfigProto.prototype.lastUpdateTimestamp = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            InterestBearingConfigProto.prototype.currentRate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            InterestBearingConfigProto.create = function create(properties) {
                return new InterestBearingConfigProto(properties);
            };

            InterestBearingConfigProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rateAuthority != null && Object.hasOwnProperty.call(message, "rateAuthority"))
                    writer.uint32(10).string(message.rateAuthority);
                if (message.initializationTimestamp != null && Object.hasOwnProperty.call(message, "initializationTimestamp"))
                    writer.uint32(16).int64(message.initializationTimestamp);
                if (message.preUpdateAverageRate != null && Object.hasOwnProperty.call(message, "preUpdateAverageRate"))
                    writer.uint32(24).int64(message.preUpdateAverageRate);
                if (message.lastUpdateTimestamp != null && Object.hasOwnProperty.call(message, "lastUpdateTimestamp"))
                    writer.uint32(32).int64(message.lastUpdateTimestamp);
                if (message.currentRate != null && Object.hasOwnProperty.call(message, "currentRate"))
                    writer.uint32(40).int64(message.currentRate);
                return writer;
            };

            InterestBearingConfigProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InterestBearingConfigProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InterestBearingConfigProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.rateAuthority = reader.string();
                            break;
                        }
                    case 2: {
                            message.initializationTimestamp = reader.int64();
                            break;
                        }
                    case 3: {
                            message.preUpdateAverageRate = reader.int64();
                            break;
                        }
                    case 4: {
                            message.lastUpdateTimestamp = reader.int64();
                            break;
                        }
                    case 5: {
                            message.currentRate = reader.int64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InterestBearingConfigProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InterestBearingConfigProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rateAuthority != null && message.hasOwnProperty("rateAuthority"))
                    if (!$util.isString(message.rateAuthority))
                        return "rateAuthority: string expected";
                if (message.initializationTimestamp != null && message.hasOwnProperty("initializationTimestamp"))
                    if (!$util.isInteger(message.initializationTimestamp) && !(message.initializationTimestamp && $util.isInteger(message.initializationTimestamp.low) && $util.isInteger(message.initializationTimestamp.high)))
                        return "initializationTimestamp: integer|Long expected";
                if (message.preUpdateAverageRate != null && message.hasOwnProperty("preUpdateAverageRate"))
                    if (!$util.isInteger(message.preUpdateAverageRate) && !(message.preUpdateAverageRate && $util.isInteger(message.preUpdateAverageRate.low) && $util.isInteger(message.preUpdateAverageRate.high)))
                        return "preUpdateAverageRate: integer|Long expected";
                if (message.lastUpdateTimestamp != null && message.hasOwnProperty("lastUpdateTimestamp"))
                    if (!$util.isInteger(message.lastUpdateTimestamp) && !(message.lastUpdateTimestamp && $util.isInteger(message.lastUpdateTimestamp.low) && $util.isInteger(message.lastUpdateTimestamp.high)))
                        return "lastUpdateTimestamp: integer|Long expected";
                if (message.currentRate != null && message.hasOwnProperty("currentRate"))
                    if (!$util.isInteger(message.currentRate) && !(message.currentRate && $util.isInteger(message.currentRate.low) && $util.isInteger(message.currentRate.high)))
                        return "currentRate: integer|Long expected";
                return null;
            };

            InterestBearingConfigProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InterestBearingConfigProto)
                    return object;
                var message = new $root.vixen.parser.InterestBearingConfigProto();
                if (object.rateAuthority != null)
                    message.rateAuthority = String(object.rateAuthority);
                if (object.initializationTimestamp != null)
                    if ($util.Long)
                        (message.initializationTimestamp = $util.Long.fromValue(object.initializationTimestamp)).unsigned = false;
                    else if (typeof object.initializationTimestamp === "string")
                        message.initializationTimestamp = parseInt(object.initializationTimestamp, 10);
                    else if (typeof object.initializationTimestamp === "number")
                        message.initializationTimestamp = object.initializationTimestamp;
                    else if (typeof object.initializationTimestamp === "object")
                        message.initializationTimestamp = new $util.LongBits(object.initializationTimestamp.low >>> 0, object.initializationTimestamp.high >>> 0).toNumber();
                if (object.preUpdateAverageRate != null)
                    if ($util.Long)
                        (message.preUpdateAverageRate = $util.Long.fromValue(object.preUpdateAverageRate)).unsigned = false;
                    else if (typeof object.preUpdateAverageRate === "string")
                        message.preUpdateAverageRate = parseInt(object.preUpdateAverageRate, 10);
                    else if (typeof object.preUpdateAverageRate === "number")
                        message.preUpdateAverageRate = object.preUpdateAverageRate;
                    else if (typeof object.preUpdateAverageRate === "object")
                        message.preUpdateAverageRate = new $util.LongBits(object.preUpdateAverageRate.low >>> 0, object.preUpdateAverageRate.high >>> 0).toNumber();
                if (object.lastUpdateTimestamp != null)
                    if ($util.Long)
                        (message.lastUpdateTimestamp = $util.Long.fromValue(object.lastUpdateTimestamp)).unsigned = false;
                    else if (typeof object.lastUpdateTimestamp === "string")
                        message.lastUpdateTimestamp = parseInt(object.lastUpdateTimestamp, 10);
                    else if (typeof object.lastUpdateTimestamp === "number")
                        message.lastUpdateTimestamp = object.lastUpdateTimestamp;
                    else if (typeof object.lastUpdateTimestamp === "object")
                        message.lastUpdateTimestamp = new $util.LongBits(object.lastUpdateTimestamp.low >>> 0, object.lastUpdateTimestamp.high >>> 0).toNumber();
                if (object.currentRate != null)
                    if ($util.Long)
                        (message.currentRate = $util.Long.fromValue(object.currentRate)).unsigned = false;
                    else if (typeof object.currentRate === "string")
                        message.currentRate = parseInt(object.currentRate, 10);
                    else if (typeof object.currentRate === "number")
                        message.currentRate = object.currentRate;
                    else if (typeof object.currentRate === "object")
                        message.currentRate = new $util.LongBits(object.currentRate.low >>> 0, object.currentRate.high >>> 0).toNumber();
                return message;
            };

            InterestBearingConfigProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rateAuthority = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.initializationTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.initializationTimestamp = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.preUpdateAverageRate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.preUpdateAverageRate = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.lastUpdateTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.lastUpdateTimestamp = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.currentRate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.currentRate = options.longs === String ? "0" : 0;
                }
                if (message.rateAuthority != null && message.hasOwnProperty("rateAuthority"))
                    object.rateAuthority = message.rateAuthority;
                if (message.initializationTimestamp != null && message.hasOwnProperty("initializationTimestamp"))
                    if (typeof message.initializationTimestamp === "number")
                        object.initializationTimestamp = options.longs === String ? String(message.initializationTimestamp) : message.initializationTimestamp;
                    else
                        object.initializationTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.initializationTimestamp) : options.longs === Number ? new $util.LongBits(message.initializationTimestamp.low >>> 0, message.initializationTimestamp.high >>> 0).toNumber() : message.initializationTimestamp;
                if (message.preUpdateAverageRate != null && message.hasOwnProperty("preUpdateAverageRate"))
                    if (typeof message.preUpdateAverageRate === "number")
                        object.preUpdateAverageRate = options.longs === String ? String(message.preUpdateAverageRate) : message.preUpdateAverageRate;
                    else
                        object.preUpdateAverageRate = options.longs === String ? $util.Long.prototype.toString.call(message.preUpdateAverageRate) : options.longs === Number ? new $util.LongBits(message.preUpdateAverageRate.low >>> 0, message.preUpdateAverageRate.high >>> 0).toNumber() : message.preUpdateAverageRate;
                if (message.lastUpdateTimestamp != null && message.hasOwnProperty("lastUpdateTimestamp"))
                    if (typeof message.lastUpdateTimestamp === "number")
                        object.lastUpdateTimestamp = options.longs === String ? String(message.lastUpdateTimestamp) : message.lastUpdateTimestamp;
                    else
                        object.lastUpdateTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.lastUpdateTimestamp) : options.longs === Number ? new $util.LongBits(message.lastUpdateTimestamp.low >>> 0, message.lastUpdateTimestamp.high >>> 0).toNumber() : message.lastUpdateTimestamp;
                if (message.currentRate != null && message.hasOwnProperty("currentRate"))
                    if (typeof message.currentRate === "number")
                        object.currentRate = options.longs === String ? String(message.currentRate) : message.currentRate;
                    else
                        object.currentRate = options.longs === String ? $util.Long.prototype.toString.call(message.currentRate) : options.longs === Number ? new $util.LongBits(message.currentRate.low >>> 0, message.currentRate.high >>> 0).toNumber() : message.currentRate;
                return object;
            };

            InterestBearingConfigProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InterestBearingConfigProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InterestBearingConfigProto";
            };

            return InterestBearingConfigProto;
        })();

        parser.PermanentDelegateProto = (function() {

            function PermanentDelegateProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            PermanentDelegateProto.prototype.delegate = "";

            PermanentDelegateProto.create = function create(properties) {
                return new PermanentDelegateProto(properties);
            };

            PermanentDelegateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.delegate != null && Object.hasOwnProperty.call(message, "delegate"))
                    writer.uint32(10).string(message.delegate);
                return writer;
            };

            PermanentDelegateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            PermanentDelegateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.PermanentDelegateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.delegate = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            PermanentDelegateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            PermanentDelegateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.delegate != null && message.hasOwnProperty("delegate"))
                    if (!$util.isString(message.delegate))
                        return "delegate: string expected";
                return null;
            };

            PermanentDelegateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.PermanentDelegateProto)
                    return object;
                var message = new $root.vixen.parser.PermanentDelegateProto();
                if (object.delegate != null)
                    message.delegate = String(object.delegate);
                return message;
            };

            PermanentDelegateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.delegate = "";
                if (message.delegate != null && message.hasOwnProperty("delegate"))
                    object.delegate = message.delegate;
                return object;
            };

            PermanentDelegateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            PermanentDelegateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.PermanentDelegateProto";
            };

            return PermanentDelegateProto;
        })();

        parser.TransferHookProto = (function() {

            function TransferHookProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferHookProto.prototype.authority = "";
            TransferHookProto.prototype.programId = "";

            TransferHookProto.create = function create(properties) {
                return new TransferHookProto(properties);
            };

            TransferHookProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(10).string(message.authority);
                if (message.programId != null && Object.hasOwnProperty.call(message, "programId"))
                    writer.uint32(18).string(message.programId);
                return writer;
            };

            TransferHookProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferHookProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferHookProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.authority = reader.string();
                            break;
                        }
                    case 2: {
                            message.programId = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferHookProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferHookProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                if (message.programId != null && message.hasOwnProperty("programId"))
                    if (!$util.isString(message.programId))
                        return "programId: string expected";
                return null;
            };

            TransferHookProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferHookProto)
                    return object;
                var message = new $root.vixen.parser.TransferHookProto();
                if (object.authority != null)
                    message.authority = String(object.authority);
                if (object.programId != null)
                    message.programId = String(object.programId);
                return message;
            };

            TransferHookProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.authority = "";
                    object.programId = "";
                }
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                if (message.programId != null && message.hasOwnProperty("programId"))
                    object.programId = message.programId;
                return object;
            };

            TransferHookProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferHookProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferHookProto";
            };

            return TransferHookProto;
        })();

        parser.ConfidentialTransferFeeConfigProto = (function() {

            function ConfidentialTransferFeeConfigProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialTransferFeeConfigProto.prototype.authority = "";
            ConfidentialTransferFeeConfigProto.prototype.withdrawWithheldAuthorityElgamalPubkey = "";
            ConfidentialTransferFeeConfigProto.prototype.harvestToMintEnabled = false;
            ConfidentialTransferFeeConfigProto.prototype.withheldAmount = "";

            ConfidentialTransferFeeConfigProto.create = function create(properties) {
                return new ConfidentialTransferFeeConfigProto(properties);
            };

            ConfidentialTransferFeeConfigProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(10).string(message.authority);
                if (message.withdrawWithheldAuthorityElgamalPubkey != null && Object.hasOwnProperty.call(message, "withdrawWithheldAuthorityElgamalPubkey"))
                    writer.uint32(18).string(message.withdrawWithheldAuthorityElgamalPubkey);
                if (message.harvestToMintEnabled != null && Object.hasOwnProperty.call(message, "harvestToMintEnabled"))
                    writer.uint32(24).bool(message.harvestToMintEnabled);
                if (message.withheldAmount != null && Object.hasOwnProperty.call(message, "withheldAmount"))
                    writer.uint32(34).string(message.withheldAmount);
                return writer;
            };

            ConfidentialTransferFeeConfigProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialTransferFeeConfigProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialTransferFeeConfigProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.authority = reader.string();
                            break;
                        }
                    case 2: {
                            message.withdrawWithheldAuthorityElgamalPubkey = reader.string();
                            break;
                        }
                    case 3: {
                            message.harvestToMintEnabled = reader.bool();
                            break;
                        }
                    case 4: {
                            message.withheldAmount = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialTransferFeeConfigProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialTransferFeeConfigProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                if (message.withdrawWithheldAuthorityElgamalPubkey != null && message.hasOwnProperty("withdrawWithheldAuthorityElgamalPubkey"))
                    if (!$util.isString(message.withdrawWithheldAuthorityElgamalPubkey))
                        return "withdrawWithheldAuthorityElgamalPubkey: string expected";
                if (message.harvestToMintEnabled != null && message.hasOwnProperty("harvestToMintEnabled"))
                    if (typeof message.harvestToMintEnabled !== "boolean")
                        return "harvestToMintEnabled: boolean expected";
                if (message.withheldAmount != null && message.hasOwnProperty("withheldAmount"))
                    if (!$util.isString(message.withheldAmount))
                        return "withheldAmount: string expected";
                return null;
            };

            ConfidentialTransferFeeConfigProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialTransferFeeConfigProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialTransferFeeConfigProto();
                if (object.authority != null)
                    message.authority = String(object.authority);
                if (object.withdrawWithheldAuthorityElgamalPubkey != null)
                    message.withdrawWithheldAuthorityElgamalPubkey = String(object.withdrawWithheldAuthorityElgamalPubkey);
                if (object.harvestToMintEnabled != null)
                    message.harvestToMintEnabled = Boolean(object.harvestToMintEnabled);
                if (object.withheldAmount != null)
                    message.withheldAmount = String(object.withheldAmount);
                return message;
            };

            ConfidentialTransferFeeConfigProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.authority = "";
                    object.withdrawWithheldAuthorityElgamalPubkey = "";
                    object.harvestToMintEnabled = false;
                    object.withheldAmount = "";
                }
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                if (message.withdrawWithheldAuthorityElgamalPubkey != null && message.hasOwnProperty("withdrawWithheldAuthorityElgamalPubkey"))
                    object.withdrawWithheldAuthorityElgamalPubkey = message.withdrawWithheldAuthorityElgamalPubkey;
                if (message.harvestToMintEnabled != null && message.hasOwnProperty("harvestToMintEnabled"))
                    object.harvestToMintEnabled = message.harvestToMintEnabled;
                if (message.withheldAmount != null && message.hasOwnProperty("withheldAmount"))
                    object.withheldAmount = message.withheldAmount;
                return object;
            };

            ConfidentialTransferFeeConfigProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialTransferFeeConfigProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialTransferFeeConfigProto";
            };

            return ConfidentialTransferFeeConfigProto;
        })();

        parser.MetadataPointerProto = (function() {

            function MetadataPointerProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MetadataPointerProto.prototype.authority = "";
            MetadataPointerProto.prototype.metadataAddress = "";

            MetadataPointerProto.create = function create(properties) {
                return new MetadataPointerProto(properties);
            };

            MetadataPointerProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(10).string(message.authority);
                if (message.metadataAddress != null && Object.hasOwnProperty.call(message, "metadataAddress"))
                    writer.uint32(18).string(message.metadataAddress);
                return writer;
            };

            MetadataPointerProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MetadataPointerProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MetadataPointerProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.authority = reader.string();
                            break;
                        }
                    case 2: {
                            message.metadataAddress = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MetadataPointerProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MetadataPointerProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                if (message.metadataAddress != null && message.hasOwnProperty("metadataAddress"))
                    if (!$util.isString(message.metadataAddress))
                        return "metadataAddress: string expected";
                return null;
            };

            MetadataPointerProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MetadataPointerProto)
                    return object;
                var message = new $root.vixen.parser.MetadataPointerProto();
                if (object.authority != null)
                    message.authority = String(object.authority);
                if (object.metadataAddress != null)
                    message.metadataAddress = String(object.metadataAddress);
                return message;
            };

            MetadataPointerProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.authority = "";
                    object.metadataAddress = "";
                }
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                if (message.metadataAddress != null && message.hasOwnProperty("metadataAddress"))
                    object.metadataAddress = message.metadataAddress;
                return object;
            };

            MetadataPointerProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MetadataPointerProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MetadataPointerProto";
            };

            return MetadataPointerProto;
        })();

        parser.KeyValue = (function() {

            function KeyValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            KeyValue.prototype.key = "";
            KeyValue.prototype.value = "";

            KeyValue.create = function create(properties) {
                return new KeyValue(properties);
            };

            KeyValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(10).string(message.key);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(18).string(message.value);
                return writer;
            };

            KeyValue.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            KeyValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.KeyValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.key = reader.string();
                            break;
                        }
                    case 2: {
                            message.value = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            KeyValue.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            KeyValue.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };

            KeyValue.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.KeyValue)
                    return object;
                var message = new $root.vixen.parser.KeyValue();
                if (object.key != null)
                    message.key = String(object.key);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };

            KeyValue.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.key = "";
                    object.value = "";
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            KeyValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            KeyValue.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.KeyValue";
            };

            return KeyValue;
        })();

        parser.TokenMetadataProto = (function() {

            function TokenMetadataProto(properties) {
                this.additionalMetadata = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenMetadataProto.prototype.updateAuthority = "";
            TokenMetadataProto.prototype.mint = "";
            TokenMetadataProto.prototype.name = "";
            TokenMetadataProto.prototype.symbol = "";
            TokenMetadataProto.prototype.uri = "";
            TokenMetadataProto.prototype.additionalMetadata = $util.emptyArray;

            TokenMetadataProto.create = function create(properties) {
                return new TokenMetadataProto(properties);
            };

            TokenMetadataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.updateAuthority != null && Object.hasOwnProperty.call(message, "updateAuthority"))
                    writer.uint32(10).string(message.updateAuthority);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(26).string(message.name);
                if (message.symbol != null && Object.hasOwnProperty.call(message, "symbol"))
                    writer.uint32(34).string(message.symbol);
                if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                    writer.uint32(42).string(message.uri);
                if (message.additionalMetadata != null && message.additionalMetadata.length)
                    for (var i = 0; i < message.additionalMetadata.length; ++i)
                        $root.vixen.parser.KeyValue.encode(message.additionalMetadata[i], writer.uint32(50).fork()).ldelim();
                return writer;
            };

            TokenMetadataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenMetadataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenMetadataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.updateAuthority = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.name = reader.string();
                            break;
                        }
                    case 4: {
                            message.symbol = reader.string();
                            break;
                        }
                    case 5: {
                            message.uri = reader.string();
                            break;
                        }
                    case 6: {
                            if (!(message.additionalMetadata && message.additionalMetadata.length))
                                message.additionalMetadata = [];
                            message.additionalMetadata.push($root.vixen.parser.KeyValue.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenMetadataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenMetadataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    if (!$util.isString(message.updateAuthority))
                        return "updateAuthority: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.symbol != null && message.hasOwnProperty("symbol"))
                    if (!$util.isString(message.symbol))
                        return "symbol: string expected";
                if (message.uri != null && message.hasOwnProperty("uri"))
                    if (!$util.isString(message.uri))
                        return "uri: string expected";
                if (message.additionalMetadata != null && message.hasOwnProperty("additionalMetadata")) {
                    if (!Array.isArray(message.additionalMetadata))
                        return "additionalMetadata: array expected";
                    for (var i = 0; i < message.additionalMetadata.length; ++i) {
                        var error = $root.vixen.parser.KeyValue.verify(message.additionalMetadata[i]);
                        if (error)
                            return "additionalMetadata." + error;
                    }
                }
                return null;
            };

            TokenMetadataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenMetadataProto)
                    return object;
                var message = new $root.vixen.parser.TokenMetadataProto();
                if (object.updateAuthority != null)
                    message.updateAuthority = String(object.updateAuthority);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.name != null)
                    message.name = String(object.name);
                if (object.symbol != null)
                    message.symbol = String(object.symbol);
                if (object.uri != null)
                    message.uri = String(object.uri);
                if (object.additionalMetadata) {
                    if (!Array.isArray(object.additionalMetadata))
                        throw TypeError(".vixen.parser.TokenMetadataProto.additionalMetadata: array expected");
                    message.additionalMetadata = [];
                    for (var i = 0; i < object.additionalMetadata.length; ++i) {
                        if (typeof object.additionalMetadata[i] !== "object")
                            throw TypeError(".vixen.parser.TokenMetadataProto.additionalMetadata: object expected");
                        message.additionalMetadata[i] = $root.vixen.parser.KeyValue.fromObject(object.additionalMetadata[i]);
                    }
                }
                return message;
            };

            TokenMetadataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.additionalMetadata = [];
                if (options.defaults) {
                    object.updateAuthority = "";
                    object.mint = "";
                    object.name = "";
                    object.symbol = "";
                    object.uri = "";
                }
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    object.updateAuthority = message.updateAuthority;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.symbol != null && message.hasOwnProperty("symbol"))
                    object.symbol = message.symbol;
                if (message.uri != null && message.hasOwnProperty("uri"))
                    object.uri = message.uri;
                if (message.additionalMetadata && message.additionalMetadata.length) {
                    object.additionalMetadata = [];
                    for (var j = 0; j < message.additionalMetadata.length; ++j)
                        object.additionalMetadata[j] = $root.vixen.parser.KeyValue.toObject(message.additionalMetadata[j], options);
                }
                return object;
            };

            TokenMetadataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenMetadataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenMetadataProto";
            };

            return TokenMetadataProto;
        })();

        parser.GroupPointerProto = (function() {

            function GroupPointerProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            GroupPointerProto.prototype.authority = "";
            GroupPointerProto.prototype.groupAddress = "";

            GroupPointerProto.create = function create(properties) {
                return new GroupPointerProto(properties);
            };

            GroupPointerProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(10).string(message.authority);
                if (message.groupAddress != null && Object.hasOwnProperty.call(message, "groupAddress"))
                    writer.uint32(18).string(message.groupAddress);
                return writer;
            };

            GroupPointerProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            GroupPointerProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.GroupPointerProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.authority = reader.string();
                            break;
                        }
                    case 2: {
                            message.groupAddress = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            GroupPointerProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            GroupPointerProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                if (message.groupAddress != null && message.hasOwnProperty("groupAddress"))
                    if (!$util.isString(message.groupAddress))
                        return "groupAddress: string expected";
                return null;
            };

            GroupPointerProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.GroupPointerProto)
                    return object;
                var message = new $root.vixen.parser.GroupPointerProto();
                if (object.authority != null)
                    message.authority = String(object.authority);
                if (object.groupAddress != null)
                    message.groupAddress = String(object.groupAddress);
                return message;
            };

            GroupPointerProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.authority = "";
                    object.groupAddress = "";
                }
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                if (message.groupAddress != null && message.hasOwnProperty("groupAddress"))
                    object.groupAddress = message.groupAddress;
                return object;
            };

            GroupPointerProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GroupPointerProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.GroupPointerProto";
            };

            return GroupPointerProto;
        })();

        parser.TokenGroupProto = (function() {

            function TokenGroupProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenGroupProto.prototype.updateAuthority = "";
            TokenGroupProto.prototype.mint = "";
            TokenGroupProto.prototype.size = 0;
            TokenGroupProto.prototype.maxSize = 0;

            TokenGroupProto.create = function create(properties) {
                return new TokenGroupProto(properties);
            };

            TokenGroupProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.updateAuthority != null && Object.hasOwnProperty.call(message, "updateAuthority"))
                    writer.uint32(10).string(message.updateAuthority);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.size != null && Object.hasOwnProperty.call(message, "size"))
                    writer.uint32(24).uint32(message.size);
                if (message.maxSize != null && Object.hasOwnProperty.call(message, "maxSize"))
                    writer.uint32(32).uint32(message.maxSize);
                return writer;
            };

            TokenGroupProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenGroupProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenGroupProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.updateAuthority = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.size = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.maxSize = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenGroupProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenGroupProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    if (!$util.isString(message.updateAuthority))
                        return "updateAuthority: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.size != null && message.hasOwnProperty("size"))
                    if (!$util.isInteger(message.size))
                        return "size: integer expected";
                if (message.maxSize != null && message.hasOwnProperty("maxSize"))
                    if (!$util.isInteger(message.maxSize))
                        return "maxSize: integer expected";
                return null;
            };

            TokenGroupProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenGroupProto)
                    return object;
                var message = new $root.vixen.parser.TokenGroupProto();
                if (object.updateAuthority != null)
                    message.updateAuthority = String(object.updateAuthority);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.size != null)
                    message.size = object.size >>> 0;
                if (object.maxSize != null)
                    message.maxSize = object.maxSize >>> 0;
                return message;
            };

            TokenGroupProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.updateAuthority = "";
                    object.mint = "";
                    object.size = 0;
                    object.maxSize = 0;
                }
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    object.updateAuthority = message.updateAuthority;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.size != null && message.hasOwnProperty("size"))
                    object.size = message.size;
                if (message.maxSize != null && message.hasOwnProperty("maxSize"))
                    object.maxSize = message.maxSize;
                return object;
            };

            TokenGroupProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenGroupProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenGroupProto";
            };

            return TokenGroupProto;
        })();

        parser.GroupMemberPointerProto = (function() {

            function GroupMemberPointerProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            GroupMemberPointerProto.prototype.authority = "";
            GroupMemberPointerProto.prototype.memberAddress = "";

            GroupMemberPointerProto.create = function create(properties) {
                return new GroupMemberPointerProto(properties);
            };

            GroupMemberPointerProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(10).string(message.authority);
                if (message.memberAddress != null && Object.hasOwnProperty.call(message, "memberAddress"))
                    writer.uint32(26).string(message.memberAddress);
                return writer;
            };

            GroupMemberPointerProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            GroupMemberPointerProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.GroupMemberPointerProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.authority = reader.string();
                            break;
                        }
                    case 3: {
                            message.memberAddress = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            GroupMemberPointerProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            GroupMemberPointerProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                if (message.memberAddress != null && message.hasOwnProperty("memberAddress"))
                    if (!$util.isString(message.memberAddress))
                        return "memberAddress: string expected";
                return null;
            };

            GroupMemberPointerProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.GroupMemberPointerProto)
                    return object;
                var message = new $root.vixen.parser.GroupMemberPointerProto();
                if (object.authority != null)
                    message.authority = String(object.authority);
                if (object.memberAddress != null)
                    message.memberAddress = String(object.memberAddress);
                return message;
            };

            GroupMemberPointerProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.authority = "";
                    object.memberAddress = "";
                }
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                if (message.memberAddress != null && message.hasOwnProperty("memberAddress"))
                    object.memberAddress = message.memberAddress;
                return object;
            };

            GroupMemberPointerProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GroupMemberPointerProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.GroupMemberPointerProto";
            };

            return GroupMemberPointerProto;
        })();

        parser.TokenGroupMemberProto = (function() {

            function TokenGroupMemberProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenGroupMemberProto.prototype.mint = "";
            TokenGroupMemberProto.prototype.group = "";
            TokenGroupMemberProto.prototype.memberNumber = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            TokenGroupMemberProto.create = function create(properties) {
                return new TokenGroupMemberProto(properties);
            };

            TokenGroupMemberProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                    writer.uint32(26).string(message.group);
                if (message.memberNumber != null && Object.hasOwnProperty.call(message, "memberNumber"))
                    writer.uint32(32).uint64(message.memberNumber);
                return writer;
            };

            TokenGroupMemberProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenGroupMemberProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenGroupMemberProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.group = reader.string();
                            break;
                        }
                    case 4: {
                            message.memberNumber = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenGroupMemberProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenGroupMemberProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.group != null && message.hasOwnProperty("group"))
                    if (!$util.isString(message.group))
                        return "group: string expected";
                if (message.memberNumber != null && message.hasOwnProperty("memberNumber"))
                    if (!$util.isInteger(message.memberNumber) && !(message.memberNumber && $util.isInteger(message.memberNumber.low) && $util.isInteger(message.memberNumber.high)))
                        return "memberNumber: integer|Long expected";
                return null;
            };

            TokenGroupMemberProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenGroupMemberProto)
                    return object;
                var message = new $root.vixen.parser.TokenGroupMemberProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.group != null)
                    message.group = String(object.group);
                if (object.memberNumber != null)
                    if ($util.Long)
                        (message.memberNumber = $util.Long.fromValue(object.memberNumber)).unsigned = true;
                    else if (typeof object.memberNumber === "string")
                        message.memberNumber = parseInt(object.memberNumber, 10);
                    else if (typeof object.memberNumber === "number")
                        message.memberNumber = object.memberNumber;
                    else if (typeof object.memberNumber === "object")
                        message.memberNumber = new $util.LongBits(object.memberNumber.low >>> 0, object.memberNumber.high >>> 0).toNumber(true);
                return message;
            };

            TokenGroupMemberProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.mint = "";
                    object.group = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.memberNumber = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.memberNumber = options.longs === String ? "0" : 0;
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.group != null && message.hasOwnProperty("group"))
                    object.group = message.group;
                if (message.memberNumber != null && message.hasOwnProperty("memberNumber"))
                    if (typeof message.memberNumber === "number")
                        object.memberNumber = options.longs === String ? String(message.memberNumber) : message.memberNumber;
                    else
                        object.memberNumber = options.longs === String ? $util.Long.prototype.toString.call(message.memberNumber) : options.longs === Number ? new $util.LongBits(message.memberNumber.low >>> 0, message.memberNumber.high >>> 0).toNumber(true) : message.memberNumber;
                return object;
            };

            TokenGroupMemberProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenGroupMemberProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenGroupMemberProto";
            };

            return TokenGroupMemberProto;
        })();

        parser.ExtensionDataProto = (function() {

            function ExtensionDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ExtensionDataProto.prototype.immutableOwner = null;
            ExtensionDataProto.prototype.transferFeeAmount = null;
            ExtensionDataProto.prototype.confidentialTransferAccount = null;
            ExtensionDataProto.prototype.memoTransfer = null;
            ExtensionDataProto.prototype.nonTransferableAccount = null;
            ExtensionDataProto.prototype.transferHookAccount = null;
            ExtensionDataProto.prototype.cpiGuard = null;
            ExtensionDataProto.prototype.confidentialTransferFeeAmount = null;
            ExtensionDataProto.prototype.transferFeeConfig = null;
            ExtensionDataProto.prototype.mintCloseAuthority = null;
            ExtensionDataProto.prototype.confidentialTransferMint = null;
            ExtensionDataProto.prototype.defaultAccountState = null;
            ExtensionDataProto.prototype.nonTransferable = null;
            ExtensionDataProto.prototype.interestBearingConfig = null;
            ExtensionDataProto.prototype.permanentDelegate = null;
            ExtensionDataProto.prototype.transferHook = null;
            ExtensionDataProto.prototype.confidentialTransferFeeConfig = null;
            ExtensionDataProto.prototype.metadataPointer = null;
            ExtensionDataProto.prototype.tokenMetadata = null;
            ExtensionDataProto.prototype.groupPointer = null;
            ExtensionDataProto.prototype.tokenGroup = null;
            ExtensionDataProto.prototype.groupMemberPointer = null;
            ExtensionDataProto.prototype.tokenGroupMember = null;

            var $oneOfFields;

            Object.defineProperty(ExtensionDataProto.prototype, "data", {
                get: $util.oneOfGetter($oneOfFields = ["immutableOwner", "transferFeeAmount", "confidentialTransferAccount", "memoTransfer", "nonTransferableAccount", "transferHookAccount", "cpiGuard", "confidentialTransferFeeAmount", "transferFeeConfig", "mintCloseAuthority", "confidentialTransferMint", "defaultAccountState", "nonTransferable", "interestBearingConfig", "permanentDelegate", "transferHook", "confidentialTransferFeeConfig", "metadataPointer", "tokenMetadata", "groupPointer", "tokenGroup", "groupMemberPointer", "tokenGroupMember"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            ExtensionDataProto.create = function create(properties) {
                return new ExtensionDataProto(properties);
            };

            ExtensionDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.immutableOwner != null && Object.hasOwnProperty.call(message, "immutableOwner"))
                    $root.vixen.parser.ImmutableOwnerProto.encode(message.immutableOwner, writer.uint32(10).fork()).ldelim();
                if (message.transferFeeAmount != null && Object.hasOwnProperty.call(message, "transferFeeAmount"))
                    $root.vixen.parser.TransferFeeAmountProto.encode(message.transferFeeAmount, writer.uint32(18).fork()).ldelim();
                if (message.confidentialTransferAccount != null && Object.hasOwnProperty.call(message, "confidentialTransferAccount"))
                    $root.vixen.parser.ConfidentialTransferAccountProto.encode(message.confidentialTransferAccount, writer.uint32(26).fork()).ldelim();
                if (message.memoTransfer != null && Object.hasOwnProperty.call(message, "memoTransfer"))
                    $root.vixen.parser.MemoTransferProto.encode(message.memoTransfer, writer.uint32(34).fork()).ldelim();
                if (message.nonTransferableAccount != null && Object.hasOwnProperty.call(message, "nonTransferableAccount"))
                    $root.vixen.parser.NonTransferableAccountProto.encode(message.nonTransferableAccount, writer.uint32(42).fork()).ldelim();
                if (message.transferHookAccount != null && Object.hasOwnProperty.call(message, "transferHookAccount"))
                    $root.vixen.parser.TransferHookAccountProto.encode(message.transferHookAccount, writer.uint32(50).fork()).ldelim();
                if (message.cpiGuard != null && Object.hasOwnProperty.call(message, "cpiGuard"))
                    $root.vixen.parser.CpiGuardProto.encode(message.cpiGuard, writer.uint32(58).fork()).ldelim();
                if (message.confidentialTransferFeeAmount != null && Object.hasOwnProperty.call(message, "confidentialTransferFeeAmount"))
                    $root.vixen.parser.ConfidentialTransferFeeAmountProto.encode(message.confidentialTransferFeeAmount, writer.uint32(66).fork()).ldelim();
                if (message.transferFeeConfig != null && Object.hasOwnProperty.call(message, "transferFeeConfig"))
                    $root.vixen.parser.TransferFeeConfigProto.encode(message.transferFeeConfig, writer.uint32(74).fork()).ldelim();
                if (message.mintCloseAuthority != null && Object.hasOwnProperty.call(message, "mintCloseAuthority"))
                    $root.vixen.parser.MintCloseAuthorityProto.encode(message.mintCloseAuthority, writer.uint32(82).fork()).ldelim();
                if (message.confidentialTransferMint != null && Object.hasOwnProperty.call(message, "confidentialTransferMint"))
                    $root.vixen.parser.ConfidentialTransferMintProto.encode(message.confidentialTransferMint, writer.uint32(90).fork()).ldelim();
                if (message.defaultAccountState != null && Object.hasOwnProperty.call(message, "defaultAccountState"))
                    $root.vixen.parser.DefaultAccountStateProto.encode(message.defaultAccountState, writer.uint32(98).fork()).ldelim();
                if (message.nonTransferable != null && Object.hasOwnProperty.call(message, "nonTransferable"))
                    $root.vixen.parser.NonTransferableProto.encode(message.nonTransferable, writer.uint32(106).fork()).ldelim();
                if (message.interestBearingConfig != null && Object.hasOwnProperty.call(message, "interestBearingConfig"))
                    $root.vixen.parser.InterestBearingConfigProto.encode(message.interestBearingConfig, writer.uint32(114).fork()).ldelim();
                if (message.permanentDelegate != null && Object.hasOwnProperty.call(message, "permanentDelegate"))
                    $root.vixen.parser.PermanentDelegateProto.encode(message.permanentDelegate, writer.uint32(122).fork()).ldelim();
                if (message.transferHook != null && Object.hasOwnProperty.call(message, "transferHook"))
                    $root.vixen.parser.TransferHookProto.encode(message.transferHook, writer.uint32(130).fork()).ldelim();
                if (message.confidentialTransferFeeConfig != null && Object.hasOwnProperty.call(message, "confidentialTransferFeeConfig"))
                    $root.vixen.parser.ConfidentialTransferFeeConfigProto.encode(message.confidentialTransferFeeConfig, writer.uint32(138).fork()).ldelim();
                if (message.metadataPointer != null && Object.hasOwnProperty.call(message, "metadataPointer"))
                    $root.vixen.parser.MetadataPointerProto.encode(message.metadataPointer, writer.uint32(146).fork()).ldelim();
                if (message.tokenMetadata != null && Object.hasOwnProperty.call(message, "tokenMetadata"))
                    $root.vixen.parser.TokenMetadataProto.encode(message.tokenMetadata, writer.uint32(154).fork()).ldelim();
                if (message.groupPointer != null && Object.hasOwnProperty.call(message, "groupPointer"))
                    $root.vixen.parser.GroupPointerProto.encode(message.groupPointer, writer.uint32(162).fork()).ldelim();
                if (message.tokenGroup != null && Object.hasOwnProperty.call(message, "tokenGroup"))
                    $root.vixen.parser.TokenGroupProto.encode(message.tokenGroup, writer.uint32(170).fork()).ldelim();
                if (message.groupMemberPointer != null && Object.hasOwnProperty.call(message, "groupMemberPointer"))
                    $root.vixen.parser.GroupMemberPointerProto.encode(message.groupMemberPointer, writer.uint32(178).fork()).ldelim();
                if (message.tokenGroupMember != null && Object.hasOwnProperty.call(message, "tokenGroupMember"))
                    $root.vixen.parser.TokenGroupMemberProto.encode(message.tokenGroupMember, writer.uint32(186).fork()).ldelim();
                return writer;
            };

            ExtensionDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ExtensionDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ExtensionDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.immutableOwner = $root.vixen.parser.ImmutableOwnerProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.transferFeeAmount = $root.vixen.parser.TransferFeeAmountProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.confidentialTransferAccount = $root.vixen.parser.ConfidentialTransferAccountProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.memoTransfer = $root.vixen.parser.MemoTransferProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.nonTransferableAccount = $root.vixen.parser.NonTransferableAccountProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.transferHookAccount = $root.vixen.parser.TransferHookAccountProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.cpiGuard = $root.vixen.parser.CpiGuardProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.confidentialTransferFeeAmount = $root.vixen.parser.ConfidentialTransferFeeAmountProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.transferFeeConfig = $root.vixen.parser.TransferFeeConfigProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            message.mintCloseAuthority = $root.vixen.parser.MintCloseAuthorityProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.confidentialTransferMint = $root.vixen.parser.ConfidentialTransferMintProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.defaultAccountState = $root.vixen.parser.DefaultAccountStateProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 13: {
                            message.nonTransferable = $root.vixen.parser.NonTransferableProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 14: {
                            message.interestBearingConfig = $root.vixen.parser.InterestBearingConfigProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 15: {
                            message.permanentDelegate = $root.vixen.parser.PermanentDelegateProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 16: {
                            message.transferHook = $root.vixen.parser.TransferHookProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 17: {
                            message.confidentialTransferFeeConfig = $root.vixen.parser.ConfidentialTransferFeeConfigProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.metadataPointer = $root.vixen.parser.MetadataPointerProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 19: {
                            message.tokenMetadata = $root.vixen.parser.TokenMetadataProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 20: {
                            message.groupPointer = $root.vixen.parser.GroupPointerProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 21: {
                            message.tokenGroup = $root.vixen.parser.TokenGroupProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 22: {
                            message.groupMemberPointer = $root.vixen.parser.GroupMemberPointerProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 23: {
                            message.tokenGroupMember = $root.vixen.parser.TokenGroupMemberProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ExtensionDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ExtensionDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.immutableOwner != null && message.hasOwnProperty("immutableOwner")) {
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.ImmutableOwnerProto.verify(message.immutableOwner);
                        if (error)
                            return "immutableOwner." + error;
                    }
                }
                if (message.transferFeeAmount != null && message.hasOwnProperty("transferFeeAmount")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.TransferFeeAmountProto.verify(message.transferFeeAmount);
                        if (error)
                            return "transferFeeAmount." + error;
                    }
                }
                if (message.confidentialTransferAccount != null && message.hasOwnProperty("confidentialTransferAccount")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialTransferAccountProto.verify(message.confidentialTransferAccount);
                        if (error)
                            return "confidentialTransferAccount." + error;
                    }
                }
                if (message.memoTransfer != null && message.hasOwnProperty("memoTransfer")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.MemoTransferProto.verify(message.memoTransfer);
                        if (error)
                            return "memoTransfer." + error;
                    }
                }
                if (message.nonTransferableAccount != null && message.hasOwnProperty("nonTransferableAccount")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.NonTransferableAccountProto.verify(message.nonTransferableAccount);
                        if (error)
                            return "nonTransferableAccount." + error;
                    }
                }
                if (message.transferHookAccount != null && message.hasOwnProperty("transferHookAccount")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.TransferHookAccountProto.verify(message.transferHookAccount);
                        if (error)
                            return "transferHookAccount." + error;
                    }
                }
                if (message.cpiGuard != null && message.hasOwnProperty("cpiGuard")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.CpiGuardProto.verify(message.cpiGuard);
                        if (error)
                            return "cpiGuard." + error;
                    }
                }
                if (message.confidentialTransferFeeAmount != null && message.hasOwnProperty("confidentialTransferFeeAmount")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialTransferFeeAmountProto.verify(message.confidentialTransferFeeAmount);
                        if (error)
                            return "confidentialTransferFeeAmount." + error;
                    }
                }
                if (message.transferFeeConfig != null && message.hasOwnProperty("transferFeeConfig")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.TransferFeeConfigProto.verify(message.transferFeeConfig);
                        if (error)
                            return "transferFeeConfig." + error;
                    }
                }
                if (message.mintCloseAuthority != null && message.hasOwnProperty("mintCloseAuthority")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.MintCloseAuthorityProto.verify(message.mintCloseAuthority);
                        if (error)
                            return "mintCloseAuthority." + error;
                    }
                }
                if (message.confidentialTransferMint != null && message.hasOwnProperty("confidentialTransferMint")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialTransferMintProto.verify(message.confidentialTransferMint);
                        if (error)
                            return "confidentialTransferMint." + error;
                    }
                }
                if (message.defaultAccountState != null && message.hasOwnProperty("defaultAccountState")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.DefaultAccountStateProto.verify(message.defaultAccountState);
                        if (error)
                            return "defaultAccountState." + error;
                    }
                }
                if (message.nonTransferable != null && message.hasOwnProperty("nonTransferable")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.NonTransferableProto.verify(message.nonTransferable);
                        if (error)
                            return "nonTransferable." + error;
                    }
                }
                if (message.interestBearingConfig != null && message.hasOwnProperty("interestBearingConfig")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.InterestBearingConfigProto.verify(message.interestBearingConfig);
                        if (error)
                            return "interestBearingConfig." + error;
                    }
                }
                if (message.permanentDelegate != null && message.hasOwnProperty("permanentDelegate")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.PermanentDelegateProto.verify(message.permanentDelegate);
                        if (error)
                            return "permanentDelegate." + error;
                    }
                }
                if (message.transferHook != null && message.hasOwnProperty("transferHook")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.TransferHookProto.verify(message.transferHook);
                        if (error)
                            return "transferHook." + error;
                    }
                }
                if (message.confidentialTransferFeeConfig != null && message.hasOwnProperty("confidentialTransferFeeConfig")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialTransferFeeConfigProto.verify(message.confidentialTransferFeeConfig);
                        if (error)
                            return "confidentialTransferFeeConfig." + error;
                    }
                }
                if (message.metadataPointer != null && message.hasOwnProperty("metadataPointer")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.MetadataPointerProto.verify(message.metadataPointer);
                        if (error)
                            return "metadataPointer." + error;
                    }
                }
                if (message.tokenMetadata != null && message.hasOwnProperty("tokenMetadata")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.TokenMetadataProto.verify(message.tokenMetadata);
                        if (error)
                            return "tokenMetadata." + error;
                    }
                }
                if (message.groupPointer != null && message.hasOwnProperty("groupPointer")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.GroupPointerProto.verify(message.groupPointer);
                        if (error)
                            return "groupPointer." + error;
                    }
                }
                if (message.tokenGroup != null && message.hasOwnProperty("tokenGroup")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.TokenGroupProto.verify(message.tokenGroup);
                        if (error)
                            return "tokenGroup." + error;
                    }
                }
                if (message.groupMemberPointer != null && message.hasOwnProperty("groupMemberPointer")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.GroupMemberPointerProto.verify(message.groupMemberPointer);
                        if (error)
                            return "groupMemberPointer." + error;
                    }
                }
                if (message.tokenGroupMember != null && message.hasOwnProperty("tokenGroupMember")) {
                    if (properties.data === 1)
                        return "data: multiple values";
                    properties.data = 1;
                    {
                        var error = $root.vixen.parser.TokenGroupMemberProto.verify(message.tokenGroupMember);
                        if (error)
                            return "tokenGroupMember." + error;
                    }
                }
                return null;
            };

            ExtensionDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ExtensionDataProto)
                    return object;
                var message = new $root.vixen.parser.ExtensionDataProto();
                if (object.immutableOwner != null) {
                    if (typeof object.immutableOwner !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.immutableOwner: object expected");
                    message.immutableOwner = $root.vixen.parser.ImmutableOwnerProto.fromObject(object.immutableOwner);
                }
                if (object.transferFeeAmount != null) {
                    if (typeof object.transferFeeAmount !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.transferFeeAmount: object expected");
                    message.transferFeeAmount = $root.vixen.parser.TransferFeeAmountProto.fromObject(object.transferFeeAmount);
                }
                if (object.confidentialTransferAccount != null) {
                    if (typeof object.confidentialTransferAccount !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.confidentialTransferAccount: object expected");
                    message.confidentialTransferAccount = $root.vixen.parser.ConfidentialTransferAccountProto.fromObject(object.confidentialTransferAccount);
                }
                if (object.memoTransfer != null) {
                    if (typeof object.memoTransfer !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.memoTransfer: object expected");
                    message.memoTransfer = $root.vixen.parser.MemoTransferProto.fromObject(object.memoTransfer);
                }
                if (object.nonTransferableAccount != null) {
                    if (typeof object.nonTransferableAccount !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.nonTransferableAccount: object expected");
                    message.nonTransferableAccount = $root.vixen.parser.NonTransferableAccountProto.fromObject(object.nonTransferableAccount);
                }
                if (object.transferHookAccount != null) {
                    if (typeof object.transferHookAccount !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.transferHookAccount: object expected");
                    message.transferHookAccount = $root.vixen.parser.TransferHookAccountProto.fromObject(object.transferHookAccount);
                }
                if (object.cpiGuard != null) {
                    if (typeof object.cpiGuard !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.cpiGuard: object expected");
                    message.cpiGuard = $root.vixen.parser.CpiGuardProto.fromObject(object.cpiGuard);
                }
                if (object.confidentialTransferFeeAmount != null) {
                    if (typeof object.confidentialTransferFeeAmount !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.confidentialTransferFeeAmount: object expected");
                    message.confidentialTransferFeeAmount = $root.vixen.parser.ConfidentialTransferFeeAmountProto.fromObject(object.confidentialTransferFeeAmount);
                }
                if (object.transferFeeConfig != null) {
                    if (typeof object.transferFeeConfig !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.transferFeeConfig: object expected");
                    message.transferFeeConfig = $root.vixen.parser.TransferFeeConfigProto.fromObject(object.transferFeeConfig);
                }
                if (object.mintCloseAuthority != null) {
                    if (typeof object.mintCloseAuthority !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.mintCloseAuthority: object expected");
                    message.mintCloseAuthority = $root.vixen.parser.MintCloseAuthorityProto.fromObject(object.mintCloseAuthority);
                }
                if (object.confidentialTransferMint != null) {
                    if (typeof object.confidentialTransferMint !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.confidentialTransferMint: object expected");
                    message.confidentialTransferMint = $root.vixen.parser.ConfidentialTransferMintProto.fromObject(object.confidentialTransferMint);
                }
                if (object.defaultAccountState != null) {
                    if (typeof object.defaultAccountState !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.defaultAccountState: object expected");
                    message.defaultAccountState = $root.vixen.parser.DefaultAccountStateProto.fromObject(object.defaultAccountState);
                }
                if (object.nonTransferable != null) {
                    if (typeof object.nonTransferable !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.nonTransferable: object expected");
                    message.nonTransferable = $root.vixen.parser.NonTransferableProto.fromObject(object.nonTransferable);
                }
                if (object.interestBearingConfig != null) {
                    if (typeof object.interestBearingConfig !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.interestBearingConfig: object expected");
                    message.interestBearingConfig = $root.vixen.parser.InterestBearingConfigProto.fromObject(object.interestBearingConfig);
                }
                if (object.permanentDelegate != null) {
                    if (typeof object.permanentDelegate !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.permanentDelegate: object expected");
                    message.permanentDelegate = $root.vixen.parser.PermanentDelegateProto.fromObject(object.permanentDelegate);
                }
                if (object.transferHook != null) {
                    if (typeof object.transferHook !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.transferHook: object expected");
                    message.transferHook = $root.vixen.parser.TransferHookProto.fromObject(object.transferHook);
                }
                if (object.confidentialTransferFeeConfig != null) {
                    if (typeof object.confidentialTransferFeeConfig !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.confidentialTransferFeeConfig: object expected");
                    message.confidentialTransferFeeConfig = $root.vixen.parser.ConfidentialTransferFeeConfigProto.fromObject(object.confidentialTransferFeeConfig);
                }
                if (object.metadataPointer != null) {
                    if (typeof object.metadataPointer !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.metadataPointer: object expected");
                    message.metadataPointer = $root.vixen.parser.MetadataPointerProto.fromObject(object.metadataPointer);
                }
                if (object.tokenMetadata != null) {
                    if (typeof object.tokenMetadata !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.tokenMetadata: object expected");
                    message.tokenMetadata = $root.vixen.parser.TokenMetadataProto.fromObject(object.tokenMetadata);
                }
                if (object.groupPointer != null) {
                    if (typeof object.groupPointer !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.groupPointer: object expected");
                    message.groupPointer = $root.vixen.parser.GroupPointerProto.fromObject(object.groupPointer);
                }
                if (object.tokenGroup != null) {
                    if (typeof object.tokenGroup !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.tokenGroup: object expected");
                    message.tokenGroup = $root.vixen.parser.TokenGroupProto.fromObject(object.tokenGroup);
                }
                if (object.groupMemberPointer != null) {
                    if (typeof object.groupMemberPointer !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.groupMemberPointer: object expected");
                    message.groupMemberPointer = $root.vixen.parser.GroupMemberPointerProto.fromObject(object.groupMemberPointer);
                }
                if (object.tokenGroupMember != null) {
                    if (typeof object.tokenGroupMember !== "object")
                        throw TypeError(".vixen.parser.ExtensionDataProto.tokenGroupMember: object expected");
                    message.tokenGroupMember = $root.vixen.parser.TokenGroupMemberProto.fromObject(object.tokenGroupMember);
                }
                return message;
            };

            ExtensionDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.immutableOwner != null && message.hasOwnProperty("immutableOwner")) {
                    object.immutableOwner = $root.vixen.parser.ImmutableOwnerProto.toObject(message.immutableOwner, options);
                    if (options.oneofs)
                        object.data = "immutableOwner";
                }
                if (message.transferFeeAmount != null && message.hasOwnProperty("transferFeeAmount")) {
                    object.transferFeeAmount = $root.vixen.parser.TransferFeeAmountProto.toObject(message.transferFeeAmount, options);
                    if (options.oneofs)
                        object.data = "transferFeeAmount";
                }
                if (message.confidentialTransferAccount != null && message.hasOwnProperty("confidentialTransferAccount")) {
                    object.confidentialTransferAccount = $root.vixen.parser.ConfidentialTransferAccountProto.toObject(message.confidentialTransferAccount, options);
                    if (options.oneofs)
                        object.data = "confidentialTransferAccount";
                }
                if (message.memoTransfer != null && message.hasOwnProperty("memoTransfer")) {
                    object.memoTransfer = $root.vixen.parser.MemoTransferProto.toObject(message.memoTransfer, options);
                    if (options.oneofs)
                        object.data = "memoTransfer";
                }
                if (message.nonTransferableAccount != null && message.hasOwnProperty("nonTransferableAccount")) {
                    object.nonTransferableAccount = $root.vixen.parser.NonTransferableAccountProto.toObject(message.nonTransferableAccount, options);
                    if (options.oneofs)
                        object.data = "nonTransferableAccount";
                }
                if (message.transferHookAccount != null && message.hasOwnProperty("transferHookAccount")) {
                    object.transferHookAccount = $root.vixen.parser.TransferHookAccountProto.toObject(message.transferHookAccount, options);
                    if (options.oneofs)
                        object.data = "transferHookAccount";
                }
                if (message.cpiGuard != null && message.hasOwnProperty("cpiGuard")) {
                    object.cpiGuard = $root.vixen.parser.CpiGuardProto.toObject(message.cpiGuard, options);
                    if (options.oneofs)
                        object.data = "cpiGuard";
                }
                if (message.confidentialTransferFeeAmount != null && message.hasOwnProperty("confidentialTransferFeeAmount")) {
                    object.confidentialTransferFeeAmount = $root.vixen.parser.ConfidentialTransferFeeAmountProto.toObject(message.confidentialTransferFeeAmount, options);
                    if (options.oneofs)
                        object.data = "confidentialTransferFeeAmount";
                }
                if (message.transferFeeConfig != null && message.hasOwnProperty("transferFeeConfig")) {
                    object.transferFeeConfig = $root.vixen.parser.TransferFeeConfigProto.toObject(message.transferFeeConfig, options);
                    if (options.oneofs)
                        object.data = "transferFeeConfig";
                }
                if (message.mintCloseAuthority != null && message.hasOwnProperty("mintCloseAuthority")) {
                    object.mintCloseAuthority = $root.vixen.parser.MintCloseAuthorityProto.toObject(message.mintCloseAuthority, options);
                    if (options.oneofs)
                        object.data = "mintCloseAuthority";
                }
                if (message.confidentialTransferMint != null && message.hasOwnProperty("confidentialTransferMint")) {
                    object.confidentialTransferMint = $root.vixen.parser.ConfidentialTransferMintProto.toObject(message.confidentialTransferMint, options);
                    if (options.oneofs)
                        object.data = "confidentialTransferMint";
                }
                if (message.defaultAccountState != null && message.hasOwnProperty("defaultAccountState")) {
                    object.defaultAccountState = $root.vixen.parser.DefaultAccountStateProto.toObject(message.defaultAccountState, options);
                    if (options.oneofs)
                        object.data = "defaultAccountState";
                }
                if (message.nonTransferable != null && message.hasOwnProperty("nonTransferable")) {
                    object.nonTransferable = $root.vixen.parser.NonTransferableProto.toObject(message.nonTransferable, options);
                    if (options.oneofs)
                        object.data = "nonTransferable";
                }
                if (message.interestBearingConfig != null && message.hasOwnProperty("interestBearingConfig")) {
                    object.interestBearingConfig = $root.vixen.parser.InterestBearingConfigProto.toObject(message.interestBearingConfig, options);
                    if (options.oneofs)
                        object.data = "interestBearingConfig";
                }
                if (message.permanentDelegate != null && message.hasOwnProperty("permanentDelegate")) {
                    object.permanentDelegate = $root.vixen.parser.PermanentDelegateProto.toObject(message.permanentDelegate, options);
                    if (options.oneofs)
                        object.data = "permanentDelegate";
                }
                if (message.transferHook != null && message.hasOwnProperty("transferHook")) {
                    object.transferHook = $root.vixen.parser.TransferHookProto.toObject(message.transferHook, options);
                    if (options.oneofs)
                        object.data = "transferHook";
                }
                if (message.confidentialTransferFeeConfig != null && message.hasOwnProperty("confidentialTransferFeeConfig")) {
                    object.confidentialTransferFeeConfig = $root.vixen.parser.ConfidentialTransferFeeConfigProto.toObject(message.confidentialTransferFeeConfig, options);
                    if (options.oneofs)
                        object.data = "confidentialTransferFeeConfig";
                }
                if (message.metadataPointer != null && message.hasOwnProperty("metadataPointer")) {
                    object.metadataPointer = $root.vixen.parser.MetadataPointerProto.toObject(message.metadataPointer, options);
                    if (options.oneofs)
                        object.data = "metadataPointer";
                }
                if (message.tokenMetadata != null && message.hasOwnProperty("tokenMetadata")) {
                    object.tokenMetadata = $root.vixen.parser.TokenMetadataProto.toObject(message.tokenMetadata, options);
                    if (options.oneofs)
                        object.data = "tokenMetadata";
                }
                if (message.groupPointer != null && message.hasOwnProperty("groupPointer")) {
                    object.groupPointer = $root.vixen.parser.GroupPointerProto.toObject(message.groupPointer, options);
                    if (options.oneofs)
                        object.data = "groupPointer";
                }
                if (message.tokenGroup != null && message.hasOwnProperty("tokenGroup")) {
                    object.tokenGroup = $root.vixen.parser.TokenGroupProto.toObject(message.tokenGroup, options);
                    if (options.oneofs)
                        object.data = "tokenGroup";
                }
                if (message.groupMemberPointer != null && message.hasOwnProperty("groupMemberPointer")) {
                    object.groupMemberPointer = $root.vixen.parser.GroupMemberPointerProto.toObject(message.groupMemberPointer, options);
                    if (options.oneofs)
                        object.data = "groupMemberPointer";
                }
                if (message.tokenGroupMember != null && message.hasOwnProperty("tokenGroupMember")) {
                    object.tokenGroupMember = $root.vixen.parser.TokenGroupMemberProto.toObject(message.tokenGroupMember, options);
                    if (options.oneofs)
                        object.data = "tokenGroupMember";
                }
                return object;
            };

            ExtensionDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ExtensionDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ExtensionDataProto";
            };

            return ExtensionDataProto;
        })();

        parser.ExtendedTokenAccountProto = (function() {

            function ExtendedTokenAccountProto(properties) {
                this.extensionDataVec = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ExtendedTokenAccountProto.prototype.baseAccount = null;
            ExtendedTokenAccountProto.prototype.extensionDataVec = $util.emptyArray;

            ExtendedTokenAccountProto.create = function create(properties) {
                return new ExtendedTokenAccountProto(properties);
            };

            ExtendedTokenAccountProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.baseAccount != null && Object.hasOwnProperty.call(message, "baseAccount"))
                    $root.vixen.parser.TokenAccountProto.encode(message.baseAccount, writer.uint32(10).fork()).ldelim();
                if (message.extensionDataVec != null && message.extensionDataVec.length)
                    for (var i = 0; i < message.extensionDataVec.length; ++i)
                        $root.vixen.parser.ExtensionDataProto.encode(message.extensionDataVec[i], writer.uint32(18).fork()).ldelim();
                return writer;
            };

            ExtendedTokenAccountProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ExtendedTokenAccountProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ExtendedTokenAccountProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.baseAccount = $root.vixen.parser.TokenAccountProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            if (!(message.extensionDataVec && message.extensionDataVec.length))
                                message.extensionDataVec = [];
                            message.extensionDataVec.push($root.vixen.parser.ExtensionDataProto.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ExtendedTokenAccountProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ExtendedTokenAccountProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.baseAccount != null && message.hasOwnProperty("baseAccount")) {
                    var error = $root.vixen.parser.TokenAccountProto.verify(message.baseAccount);
                    if (error)
                        return "baseAccount." + error;
                }
                if (message.extensionDataVec != null && message.hasOwnProperty("extensionDataVec")) {
                    if (!Array.isArray(message.extensionDataVec))
                        return "extensionDataVec: array expected";
                    for (var i = 0; i < message.extensionDataVec.length; ++i) {
                        var error = $root.vixen.parser.ExtensionDataProto.verify(message.extensionDataVec[i]);
                        if (error)
                            return "extensionDataVec." + error;
                    }
                }
                return null;
            };

            ExtendedTokenAccountProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ExtendedTokenAccountProto)
                    return object;
                var message = new $root.vixen.parser.ExtendedTokenAccountProto();
                if (object.baseAccount != null) {
                    if (typeof object.baseAccount !== "object")
                        throw TypeError(".vixen.parser.ExtendedTokenAccountProto.baseAccount: object expected");
                    message.baseAccount = $root.vixen.parser.TokenAccountProto.fromObject(object.baseAccount);
                }
                if (object.extensionDataVec) {
                    if (!Array.isArray(object.extensionDataVec))
                        throw TypeError(".vixen.parser.ExtendedTokenAccountProto.extensionDataVec: array expected");
                    message.extensionDataVec = [];
                    for (var i = 0; i < object.extensionDataVec.length; ++i) {
                        if (typeof object.extensionDataVec[i] !== "object")
                            throw TypeError(".vixen.parser.ExtendedTokenAccountProto.extensionDataVec: object expected");
                        message.extensionDataVec[i] = $root.vixen.parser.ExtensionDataProto.fromObject(object.extensionDataVec[i]);
                    }
                }
                return message;
            };

            ExtendedTokenAccountProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.extensionDataVec = [];
                if (options.defaults)
                    object.baseAccount = null;
                if (message.baseAccount != null && message.hasOwnProperty("baseAccount"))
                    object.baseAccount = $root.vixen.parser.TokenAccountProto.toObject(message.baseAccount, options);
                if (message.extensionDataVec && message.extensionDataVec.length) {
                    object.extensionDataVec = [];
                    for (var j = 0; j < message.extensionDataVec.length; ++j)
                        object.extensionDataVec[j] = $root.vixen.parser.ExtensionDataProto.toObject(message.extensionDataVec[j], options);
                }
                return object;
            };

            ExtendedTokenAccountProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ExtendedTokenAccountProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ExtendedTokenAccountProto";
            };

            return ExtendedTokenAccountProto;
        })();

        parser.ExtendedMintProto = (function() {

            function ExtendedMintProto(properties) {
                this.extensionDataVec = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ExtendedMintProto.prototype.baseMint = null;
            ExtendedMintProto.prototype.extensionDataVec = $util.emptyArray;

            ExtendedMintProto.create = function create(properties) {
                return new ExtendedMintProto(properties);
            };

            ExtendedMintProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.baseMint != null && Object.hasOwnProperty.call(message, "baseMint"))
                    $root.vixen.parser.MintProto.encode(message.baseMint, writer.uint32(10).fork()).ldelim();
                if (message.extensionDataVec != null && message.extensionDataVec.length)
                    for (var i = 0; i < message.extensionDataVec.length; ++i)
                        $root.vixen.parser.ExtensionDataProto.encode(message.extensionDataVec[i], writer.uint32(18).fork()).ldelim();
                return writer;
            };

            ExtendedMintProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ExtendedMintProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ExtendedMintProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.baseMint = $root.vixen.parser.MintProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            if (!(message.extensionDataVec && message.extensionDataVec.length))
                                message.extensionDataVec = [];
                            message.extensionDataVec.push($root.vixen.parser.ExtensionDataProto.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ExtendedMintProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ExtendedMintProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.baseMint != null && message.hasOwnProperty("baseMint")) {
                    var error = $root.vixen.parser.MintProto.verify(message.baseMint);
                    if (error)
                        return "baseMint." + error;
                }
                if (message.extensionDataVec != null && message.hasOwnProperty("extensionDataVec")) {
                    if (!Array.isArray(message.extensionDataVec))
                        return "extensionDataVec: array expected";
                    for (var i = 0; i < message.extensionDataVec.length; ++i) {
                        var error = $root.vixen.parser.ExtensionDataProto.verify(message.extensionDataVec[i]);
                        if (error)
                            return "extensionDataVec." + error;
                    }
                }
                return null;
            };

            ExtendedMintProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ExtendedMintProto)
                    return object;
                var message = new $root.vixen.parser.ExtendedMintProto();
                if (object.baseMint != null) {
                    if (typeof object.baseMint !== "object")
                        throw TypeError(".vixen.parser.ExtendedMintProto.baseMint: object expected");
                    message.baseMint = $root.vixen.parser.MintProto.fromObject(object.baseMint);
                }
                if (object.extensionDataVec) {
                    if (!Array.isArray(object.extensionDataVec))
                        throw TypeError(".vixen.parser.ExtendedMintProto.extensionDataVec: array expected");
                    message.extensionDataVec = [];
                    for (var i = 0; i < object.extensionDataVec.length; ++i) {
                        if (typeof object.extensionDataVec[i] !== "object")
                            throw TypeError(".vixen.parser.ExtendedMintProto.extensionDataVec: object expected");
                        message.extensionDataVec[i] = $root.vixen.parser.ExtensionDataProto.fromObject(object.extensionDataVec[i]);
                    }
                }
                return message;
            };

            ExtendedMintProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.extensionDataVec = [];
                if (options.defaults)
                    object.baseMint = null;
                if (message.baseMint != null && message.hasOwnProperty("baseMint"))
                    object.baseMint = $root.vixen.parser.MintProto.toObject(message.baseMint, options);
                if (message.extensionDataVec && message.extensionDataVec.length) {
                    object.extensionDataVec = [];
                    for (var j = 0; j < message.extensionDataVec.length; ++j)
                        object.extensionDataVec[j] = $root.vixen.parser.ExtensionDataProto.toObject(message.extensionDataVec[j], options);
                }
                return object;
            };

            ExtendedMintProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ExtendedMintProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ExtendedMintProto";
            };

            return ExtendedMintProto;
        })();

        parser.AuthorityType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "MINT_TOKEN"] = 0;
            values[valuesById[1] = "FREEZE_ACCOUNT"] = 1;
            values[valuesById[2] = "ACCOUNT_OWNER"] = 2;
            values[valuesById[3] = "CLOSE_ACCOUNT"] = 3;
            return values;
        })();

        parser.TransferAccountsProto = (function() {

            function TransferAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferAccountsProto.prototype.source = "";
            TransferAccountsProto.prototype.destination = "";
            TransferAccountsProto.prototype.owner = "";
            TransferAccountsProto.prototype.multisigSigners = $util.emptyArray;

            TransferAccountsProto.create = function create(properties) {
                return new TransferAccountsProto(properties);
            };

            TransferAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                    writer.uint32(10).string(message.source);
                if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                    writer.uint32(18).string(message.destination);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            TransferAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.source = reader.string();
                            break;
                        }
                    case 2: {
                            message.destination = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.destination != null && message.hasOwnProperty("destination"))
                    if (!$util.isString(message.destination))
                        return "destination: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            TransferAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferAccountsProto)
                    return object;
                var message = new $root.vixen.parser.TransferAccountsProto();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.destination != null)
                    message.destination = String(object.destination);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.TransferAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            TransferAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.source = "";
                    object.destination = "";
                    object.owner = "";
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.destination != null && message.hasOwnProperty("destination"))
                    object.destination = message.destination;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            TransferAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferAccountsProto";
            };

            return TransferAccountsProto;
        })();

        parser.TransferDataProto = (function() {

            function TransferDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            TransferDataProto.create = function create(properties) {
                return new TransferDataProto(properties);
            };

            TransferDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                return writer;
            };

            TransferDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                return null;
            };

            TransferDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferDataProto)
                    return object;
                var message = new $root.vixen.parser.TransferDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                return message;
            };

            TransferDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                return object;
            };

            TransferDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferDataProto";
            };

            return TransferDataProto;
        })();

        parser.TransferIxProto = (function() {

            function TransferIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferIxProto.prototype.accounts = null;
            TransferIxProto.prototype.data = null;

            TransferIxProto.create = function create(properties) {
                return new TransferIxProto(properties);
            };

            TransferIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.TransferAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.TransferDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            TransferIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.TransferAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.TransferDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.TransferAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.TransferDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            TransferIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferIxProto)
                    return object;
                var message = new $root.vixen.parser.TransferIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.TransferIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.TransferAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.TransferIxProto.data: object expected");
                    message.data = $root.vixen.parser.TransferDataProto.fromObject(object.data);
                }
                return message;
            };

            TransferIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.TransferAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.TransferDataProto.toObject(message.data, options);
                return object;
            };

            TransferIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferIxProto";
            };

            return TransferIxProto;
        })();

        parser.InitializeMintAccountsProto = (function() {

            function InitializeMintAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMintAccountsProto.prototype.mint = "";

            InitializeMintAccountsProto.create = function create(properties) {
                return new InitializeMintAccountsProto(properties);
            };

            InitializeMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            InitializeMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            InitializeMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            InitializeMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            InitializeMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMintAccountsProto";
            };

            return InitializeMintAccountsProto;
        })();

        parser.InitializeMintDataProto = (function() {

            function InitializeMintDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMintDataProto.prototype.decimals = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            InitializeMintDataProto.prototype.mintAuthority = null;
            InitializeMintDataProto.prototype.freezeAuthority = null;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(InitializeMintDataProto.prototype, "_mintAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["mintAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(InitializeMintDataProto.prototype, "_freezeAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["freezeAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            InitializeMintDataProto.create = function create(properties) {
                return new InitializeMintDataProto(properties);
            };

            InitializeMintDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.decimals != null && Object.hasOwnProperty.call(message, "decimals"))
                    writer.uint32(8).uint64(message.decimals);
                if (message.mintAuthority != null && Object.hasOwnProperty.call(message, "mintAuthority"))
                    writer.uint32(18).string(message.mintAuthority);
                if (message.freezeAuthority != null && Object.hasOwnProperty.call(message, "freezeAuthority"))
                    writer.uint32(26).string(message.freezeAuthority);
                return writer;
            };

            InitializeMintDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMintDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMintDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.decimals = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.mintAuthority = reader.string();
                            break;
                        }
                    case 3: {
                            message.freezeAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMintDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMintDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (!$util.isInteger(message.decimals) && !(message.decimals && $util.isInteger(message.decimals.low) && $util.isInteger(message.decimals.high)))
                        return "decimals: integer|Long expected";
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority")) {
                    properties._mintAuthority = 1;
                    if (!$util.isString(message.mintAuthority))
                        return "mintAuthority: string expected";
                }
                if (message.freezeAuthority != null && message.hasOwnProperty("freezeAuthority")) {
                    properties._freezeAuthority = 1;
                    if (!$util.isString(message.freezeAuthority))
                        return "freezeAuthority: string expected";
                }
                return null;
            };

            InitializeMintDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMintDataProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMintDataProto();
                if (object.decimals != null)
                    if ($util.Long)
                        (message.decimals = $util.Long.fromValue(object.decimals)).unsigned = true;
                    else if (typeof object.decimals === "string")
                        message.decimals = parseInt(object.decimals, 10);
                    else if (typeof object.decimals === "number")
                        message.decimals = object.decimals;
                    else if (typeof object.decimals === "object")
                        message.decimals = new $util.LongBits(object.decimals.low >>> 0, object.decimals.high >>> 0).toNumber(true);
                if (object.mintAuthority != null)
                    message.mintAuthority = String(object.mintAuthority);
                if (object.freezeAuthority != null)
                    message.freezeAuthority = String(object.freezeAuthority);
                return message;
            };

            InitializeMintDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.decimals = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.decimals = options.longs === String ? "0" : 0;
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (typeof message.decimals === "number")
                        object.decimals = options.longs === String ? String(message.decimals) : message.decimals;
                    else
                        object.decimals = options.longs === String ? $util.Long.prototype.toString.call(message.decimals) : options.longs === Number ? new $util.LongBits(message.decimals.low >>> 0, message.decimals.high >>> 0).toNumber(true) : message.decimals;
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority")) {
                    object.mintAuthority = message.mintAuthority;
                    if (options.oneofs)
                        object._mintAuthority = "mintAuthority";
                }
                if (message.freezeAuthority != null && message.hasOwnProperty("freezeAuthority")) {
                    object.freezeAuthority = message.freezeAuthority;
                    if (options.oneofs)
                        object._freezeAuthority = "freezeAuthority";
                }
                return object;
            };

            InitializeMintDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMintDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMintDataProto";
            };

            return InitializeMintDataProto;
        })();

        parser.InitializeMintIxProto = (function() {

            function InitializeMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMintIxProto.prototype.accounts = null;
            InitializeMintIxProto.prototype.data = null;

            InitializeMintIxProto.create = function create(properties) {
                return new InitializeMintIxProto(properties);
            };

            InitializeMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializeMintDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializeMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializeMintDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializeMintDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializeMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMintIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeMintAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializeMintIxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializeMintDataProto.fromObject(object.data);
                }
                return message;
            };

            InitializeMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeMintAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializeMintDataProto.toObject(message.data, options);
                return object;
            };

            InitializeMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMintIxProto";
            };

            return InitializeMintIxProto;
        })();

        parser.InitializeAccountAccountsProto = (function() {

            function InitializeAccountAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeAccountAccountsProto.prototype.account = "";
            InitializeAccountAccountsProto.prototype.mint = "";
            InitializeAccountAccountsProto.prototype.owner = "";

            InitializeAccountAccountsProto.create = function create(properties) {
                return new InitializeAccountAccountsProto(properties);
            };

            InitializeAccountAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                return writer;
            };

            InitializeAccountAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeAccountAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeAccountAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeAccountAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeAccountAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                return null;
            };

            InitializeAccountAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeAccountAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeAccountAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.owner != null)
                    message.owner = String(object.owner);
                return message;
            };

            InitializeAccountAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.account = "";
                    object.mint = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                return object;
            };

            InitializeAccountAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeAccountAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeAccountAccountsProto";
            };

            return InitializeAccountAccountsProto;
        })();

        parser.InitializeAccountDataProto = (function() {

            function InitializeAccountDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeAccountDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            InitializeAccountDataProto.create = function create(properties) {
                return new InitializeAccountDataProto(properties);
            };

            InitializeAccountDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                return writer;
            };

            InitializeAccountDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeAccountDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeAccountDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeAccountDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeAccountDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                return null;
            };

            InitializeAccountDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeAccountDataProto)
                    return object;
                var message = new $root.vixen.parser.InitializeAccountDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                return message;
            };

            InitializeAccountDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                return object;
            };

            InitializeAccountDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeAccountDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeAccountDataProto";
            };

            return InitializeAccountDataProto;
        })();

        parser.InitializeAccountIxProto = (function() {

            function InitializeAccountIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeAccountIxProto.prototype.accounts = null;
            InitializeAccountIxProto.prototype.data = null;

            InitializeAccountIxProto.create = function create(properties) {
                return new InitializeAccountIxProto(properties);
            };

            InitializeAccountIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeAccountAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializeAccountDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializeAccountIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeAccountIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeAccountIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeAccountAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializeAccountDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeAccountIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeAccountIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeAccountAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializeAccountDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializeAccountIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeAccountIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeAccountIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeAccountIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeAccountAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializeAccountIxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializeAccountDataProto.fromObject(object.data);
                }
                return message;
            };

            InitializeAccountIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeAccountAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializeAccountDataProto.toObject(message.data, options);
                return object;
            };

            InitializeAccountIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeAccountIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeAccountIxProto";
            };

            return InitializeAccountIxProto;
        })();

        parser.InitializeAccount2AccountsProto = (function() {

            function InitializeAccount2AccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeAccount2AccountsProto.prototype.account = "";
            InitializeAccount2AccountsProto.prototype.mint = "";

            InitializeAccount2AccountsProto.create = function create(properties) {
                return new InitializeAccount2AccountsProto(properties);
            };

            InitializeAccount2AccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                return writer;
            };

            InitializeAccount2AccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeAccount2AccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeAccount2AccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeAccount2AccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeAccount2AccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            InitializeAccount2AccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeAccount2AccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeAccount2AccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            InitializeAccount2AccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.account = "";
                    object.mint = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            InitializeAccount2AccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeAccount2AccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeAccount2AccountsProto";
            };

            return InitializeAccount2AccountsProto;
        })();

        parser.InitializeAccountData2Proto = (function() {

            function InitializeAccountData2Proto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeAccountData2Proto.prototype.owner = "";

            InitializeAccountData2Proto.create = function create(properties) {
                return new InitializeAccountData2Proto(properties);
            };

            InitializeAccountData2Proto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(10).string(message.owner);
                return writer;
            };

            InitializeAccountData2Proto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeAccountData2Proto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeAccountData2Proto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.owner = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeAccountData2Proto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeAccountData2Proto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                return null;
            };

            InitializeAccountData2Proto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeAccountData2Proto)
                    return object;
                var message = new $root.vixen.parser.InitializeAccountData2Proto();
                if (object.owner != null)
                    message.owner = String(object.owner);
                return message;
            };

            InitializeAccountData2Proto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.owner = "";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                return object;
            };

            InitializeAccountData2Proto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeAccountData2Proto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeAccountData2Proto";
            };

            return InitializeAccountData2Proto;
        })();

        parser.InitializeAccount2IxProto = (function() {

            function InitializeAccount2IxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeAccount2IxProto.prototype.accounts = null;
            InitializeAccount2IxProto.prototype.data = null;

            InitializeAccount2IxProto.create = function create(properties) {
                return new InitializeAccount2IxProto(properties);
            };

            InitializeAccount2IxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeAccount2AccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializeAccountData2Proto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializeAccount2IxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeAccount2IxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeAccount2IxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeAccount2AccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializeAccountData2Proto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeAccount2IxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeAccount2IxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeAccount2AccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializeAccountData2Proto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializeAccount2IxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeAccount2IxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeAccount2IxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeAccount2IxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeAccount2AccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializeAccount2IxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializeAccountData2Proto.fromObject(object.data);
                }
                return message;
            };

            InitializeAccount2IxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeAccount2AccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializeAccountData2Proto.toObject(message.data, options);
                return object;
            };

            InitializeAccount2IxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeAccount2IxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeAccount2IxProto";
            };

            return InitializeAccount2IxProto;
        })();

        parser.InitializeAccount3IxProto = (function() {

            function InitializeAccount3IxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeAccount3IxProto.prototype.accounts = null;
            InitializeAccount3IxProto.prototype.data = null;

            InitializeAccount3IxProto.create = function create(properties) {
                return new InitializeAccount3IxProto(properties);
            };

            InitializeAccount3IxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeAccount2AccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializeAccountData2Proto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializeAccount3IxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeAccount3IxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeAccount3IxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeAccount2AccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializeAccountData2Proto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeAccount3IxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeAccount3IxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeAccount2AccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializeAccountData2Proto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializeAccount3IxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeAccount3IxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeAccount3IxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeAccount3IxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeAccount2AccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializeAccount3IxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializeAccountData2Proto.fromObject(object.data);
                }
                return message;
            };

            InitializeAccount3IxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeAccount2AccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializeAccountData2Proto.toObject(message.data, options);
                return object;
            };

            InitializeAccount3IxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeAccount3IxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeAccount3IxProto";
            };

            return InitializeAccount3IxProto;
        })();

        parser.InitializeMultisigAccountsProto = (function() {

            function InitializeMultisigAccountsProto(properties) {
                this.signers = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMultisigAccountsProto.prototype.multisig = "";
            InitializeMultisigAccountsProto.prototype.signers = $util.emptyArray;

            InitializeMultisigAccountsProto.create = function create(properties) {
                return new InitializeMultisigAccountsProto(properties);
            };

            InitializeMultisigAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.multisig != null && Object.hasOwnProperty.call(message, "multisig"))
                    writer.uint32(10).string(message.multisig);
                if (message.signers != null && message.signers.length)
                    for (var i = 0; i < message.signers.length; ++i)
                        writer.uint32(18).string(message.signers[i]);
                return writer;
            };

            InitializeMultisigAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMultisigAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMultisigAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.multisig = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.signers && message.signers.length))
                                message.signers = [];
                            message.signers.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMultisigAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMultisigAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.multisig != null && message.hasOwnProperty("multisig"))
                    if (!$util.isString(message.multisig))
                        return "multisig: string expected";
                if (message.signers != null && message.hasOwnProperty("signers")) {
                    if (!Array.isArray(message.signers))
                        return "signers: array expected";
                    for (var i = 0; i < message.signers.length; ++i)
                        if (!$util.isString(message.signers[i]))
                            return "signers: string[] expected";
                }
                return null;
            };

            InitializeMultisigAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMultisigAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMultisigAccountsProto();
                if (object.multisig != null)
                    message.multisig = String(object.multisig);
                if (object.signers) {
                    if (!Array.isArray(object.signers))
                        throw TypeError(".vixen.parser.InitializeMultisigAccountsProto.signers: array expected");
                    message.signers = [];
                    for (var i = 0; i < object.signers.length; ++i)
                        message.signers[i] = String(object.signers[i]);
                }
                return message;
            };

            InitializeMultisigAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.signers = [];
                if (options.defaults)
                    object.multisig = "";
                if (message.multisig != null && message.hasOwnProperty("multisig"))
                    object.multisig = message.multisig;
                if (message.signers && message.signers.length) {
                    object.signers = [];
                    for (var j = 0; j < message.signers.length; ++j)
                        object.signers[j] = message.signers[j];
                }
                return object;
            };

            InitializeMultisigAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMultisigAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMultisigAccountsProto";
            };

            return InitializeMultisigAccountsProto;
        })();

        parser.InitializeMultisigDataProto = (function() {

            function InitializeMultisigDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMultisigDataProto.prototype.m = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            InitializeMultisigDataProto.create = function create(properties) {
                return new InitializeMultisigDataProto(properties);
            };

            InitializeMultisigDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.m != null && Object.hasOwnProperty.call(message, "m"))
                    writer.uint32(8).uint64(message.m);
                return writer;
            };

            InitializeMultisigDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMultisigDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMultisigDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.m = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMultisigDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMultisigDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.m != null && message.hasOwnProperty("m"))
                    if (!$util.isInteger(message.m) && !(message.m && $util.isInteger(message.m.low) && $util.isInteger(message.m.high)))
                        return "m: integer|Long expected";
                return null;
            };

            InitializeMultisigDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMultisigDataProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMultisigDataProto();
                if (object.m != null)
                    if ($util.Long)
                        (message.m = $util.Long.fromValue(object.m)).unsigned = true;
                    else if (typeof object.m === "string")
                        message.m = parseInt(object.m, 10);
                    else if (typeof object.m === "number")
                        message.m = object.m;
                    else if (typeof object.m === "object")
                        message.m = new $util.LongBits(object.m.low >>> 0, object.m.high >>> 0).toNumber(true);
                return message;
            };

            InitializeMultisigDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.m = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.m = options.longs === String ? "0" : 0;
                if (message.m != null && message.hasOwnProperty("m"))
                    if (typeof message.m === "number")
                        object.m = options.longs === String ? String(message.m) : message.m;
                    else
                        object.m = options.longs === String ? $util.Long.prototype.toString.call(message.m) : options.longs === Number ? new $util.LongBits(message.m.low >>> 0, message.m.high >>> 0).toNumber(true) : message.m;
                return object;
            };

            InitializeMultisigDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMultisigDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMultisigDataProto";
            };

            return InitializeMultisigDataProto;
        })();

        parser.InitializeMultisigIxProto = (function() {

            function InitializeMultisigIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMultisigIxProto.prototype.accounts = null;
            InitializeMultisigIxProto.prototype.data = null;

            InitializeMultisigIxProto.create = function create(properties) {
                return new InitializeMultisigIxProto(properties);
            };

            InitializeMultisigIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeMultisigAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializeMultisigDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializeMultisigIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMultisigIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMultisigIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeMultisigAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializeMultisigDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMultisigIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMultisigIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeMultisigAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializeMultisigDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializeMultisigIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMultisigIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMultisigIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeMultisigIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeMultisigAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializeMultisigIxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializeMultisigDataProto.fromObject(object.data);
                }
                return message;
            };

            InitializeMultisigIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeMultisigAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializeMultisigDataProto.toObject(message.data, options);
                return object;
            };

            InitializeMultisigIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMultisigIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMultisigIxProto";
            };

            return InitializeMultisigIxProto;
        })();

        parser.ApproveAccountsProto = (function() {

            function ApproveAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApproveAccountsProto.prototype.source = "";
            ApproveAccountsProto.prototype.delegate = "";
            ApproveAccountsProto.prototype.owner = "";
            ApproveAccountsProto.prototype.multisigSigners = $util.emptyArray;

            ApproveAccountsProto.create = function create(properties) {
                return new ApproveAccountsProto(properties);
            };

            ApproveAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                    writer.uint32(10).string(message.source);
                if (message.delegate != null && Object.hasOwnProperty.call(message, "delegate"))
                    writer.uint32(18).string(message.delegate);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            ApproveAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApproveAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApproveAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.source = reader.string();
                            break;
                        }
                    case 2: {
                            message.delegate = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApproveAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApproveAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.delegate != null && message.hasOwnProperty("delegate"))
                    if (!$util.isString(message.delegate))
                        return "delegate: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            ApproveAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApproveAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ApproveAccountsProto();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.delegate != null)
                    message.delegate = String(object.delegate);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.ApproveAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            ApproveAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.source = "";
                    object.delegate = "";
                    object.owner = "";
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.delegate != null && message.hasOwnProperty("delegate"))
                    object.delegate = message.delegate;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            ApproveAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApproveAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApproveAccountsProto";
            };

            return ApproveAccountsProto;
        })();

        parser.ApproveDataProto = (function() {

            function ApproveDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApproveDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            ApproveDataProto.create = function create(properties) {
                return new ApproveDataProto(properties);
            };

            ApproveDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                return writer;
            };

            ApproveDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApproveDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApproveDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApproveDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApproveDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                return null;
            };

            ApproveDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApproveDataProto)
                    return object;
                var message = new $root.vixen.parser.ApproveDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                return message;
            };

            ApproveDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                return object;
            };

            ApproveDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApproveDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApproveDataProto";
            };

            return ApproveDataProto;
        })();

        parser.ApproveIxProto = (function() {

            function ApproveIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApproveIxProto.prototype.accounts = null;
            ApproveIxProto.prototype.data = null;

            ApproveIxProto.create = function create(properties) {
                return new ApproveIxProto(properties);
            };

            ApproveIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ApproveAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.ApproveDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            ApproveIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApproveIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApproveIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ApproveAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.ApproveDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApproveIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApproveIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ApproveAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.ApproveDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            ApproveIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApproveIxProto)
                    return object;
                var message = new $root.vixen.parser.ApproveIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ApproveIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ApproveAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.ApproveIxProto.data: object expected");
                    message.data = $root.vixen.parser.ApproveDataProto.fromObject(object.data);
                }
                return message;
            };

            ApproveIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ApproveAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.ApproveDataProto.toObject(message.data, options);
                return object;
            };

            ApproveIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApproveIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApproveIxProto";
            };

            return ApproveIxProto;
        })();

        parser.RevokeAccountsProto = (function() {

            function RevokeAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RevokeAccountsProto.prototype.source = "";
            RevokeAccountsProto.prototype.owner = "";
            RevokeAccountsProto.prototype.multisigSigners = $util.emptyArray;

            RevokeAccountsProto.create = function create(properties) {
                return new RevokeAccountsProto(properties);
            };

            RevokeAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                    writer.uint32(10).string(message.source);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(18).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            RevokeAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RevokeAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RevokeAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.source = reader.string();
                            break;
                        }
                    case 2: {
                            message.owner = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RevokeAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RevokeAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            RevokeAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RevokeAccountsProto)
                    return object;
                var message = new $root.vixen.parser.RevokeAccountsProto();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.RevokeAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            RevokeAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.source = "";
                    object.owner = "";
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            RevokeAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RevokeAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RevokeAccountsProto";
            };

            return RevokeAccountsProto;
        })();

        parser.RevokeIxProto = (function() {

            function RevokeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RevokeIxProto.prototype.accounts = null;

            RevokeIxProto.create = function create(properties) {
                return new RevokeIxProto(properties);
            };

            RevokeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.RevokeAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            RevokeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RevokeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RevokeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.RevokeAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RevokeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RevokeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.RevokeAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            RevokeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RevokeIxProto)
                    return object;
                var message = new $root.vixen.parser.RevokeIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.RevokeIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.RevokeAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            RevokeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.RevokeAccountsProto.toObject(message.accounts, options);
                return object;
            };

            RevokeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RevokeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RevokeIxProto";
            };

            return RevokeIxProto;
        })();

        parser.SetAuthorityAccountsProto = (function() {

            function SetAuthorityAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SetAuthorityAccountsProto.prototype.currentAuthority = "";
            SetAuthorityAccountsProto.prototype.account = "";
            SetAuthorityAccountsProto.prototype.multisigSigners = $util.emptyArray;

            SetAuthorityAccountsProto.create = function create(properties) {
                return new SetAuthorityAccountsProto(properties);
            };

            SetAuthorityAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.currentAuthority != null && Object.hasOwnProperty.call(message, "currentAuthority"))
                    writer.uint32(10).string(message.currentAuthority);
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(18).string(message.account);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            SetAuthorityAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SetAuthorityAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.SetAuthorityAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.currentAuthority = reader.string();
                            break;
                        }
                    case 2: {
                            message.account = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SetAuthorityAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SetAuthorityAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.currentAuthority != null && message.hasOwnProperty("currentAuthority"))
                    if (!$util.isString(message.currentAuthority))
                        return "currentAuthority: string expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            SetAuthorityAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.SetAuthorityAccountsProto)
                    return object;
                var message = new $root.vixen.parser.SetAuthorityAccountsProto();
                if (object.currentAuthority != null)
                    message.currentAuthority = String(object.currentAuthority);
                if (object.account != null)
                    message.account = String(object.account);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.SetAuthorityAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            SetAuthorityAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.currentAuthority = "";
                    object.account = "";
                }
                if (message.currentAuthority != null && message.hasOwnProperty("currentAuthority"))
                    object.currentAuthority = message.currentAuthority;
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            SetAuthorityAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SetAuthorityAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.SetAuthorityAccountsProto";
            };

            return SetAuthorityAccountsProto;
        })();

        parser.SetAuthorityDataProto = (function() {

            function SetAuthorityDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SetAuthorityDataProto.prototype.authorityType = 0;
            SetAuthorityDataProto.prototype.newAuthority = null;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(SetAuthorityDataProto.prototype, "_newAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["newAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            SetAuthorityDataProto.create = function create(properties) {
                return new SetAuthorityDataProto(properties);
            };

            SetAuthorityDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.authorityType != null && Object.hasOwnProperty.call(message, "authorityType"))
                    writer.uint32(8).int32(message.authorityType);
                if (message.newAuthority != null && Object.hasOwnProperty.call(message, "newAuthority"))
                    writer.uint32(18).string(message.newAuthority);
                return writer;
            };

            SetAuthorityDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SetAuthorityDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.SetAuthorityDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.authorityType = reader.int32();
                            break;
                        }
                    case 2: {
                            message.newAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SetAuthorityDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SetAuthorityDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.authorityType != null && message.hasOwnProperty("authorityType"))
                    switch (message.authorityType) {
                    default:
                        return "authorityType: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.newAuthority != null && message.hasOwnProperty("newAuthority")) {
                    properties._newAuthority = 1;
                    if (!$util.isString(message.newAuthority))
                        return "newAuthority: string expected";
                }
                return null;
            };

            SetAuthorityDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.SetAuthorityDataProto)
                    return object;
                var message = new $root.vixen.parser.SetAuthorityDataProto();
                switch (object.authorityType) {
                default:
                    if (typeof object.authorityType === "number") {
                        message.authorityType = object.authorityType;
                        break;
                    }
                    break;
                case "MINT_TOKEN":
                case 0:
                    message.authorityType = 0;
                    break;
                case "FREEZE_ACCOUNT":
                case 1:
                    message.authorityType = 1;
                    break;
                case "ACCOUNT_OWNER":
                case 2:
                    message.authorityType = 2;
                    break;
                case "CLOSE_ACCOUNT":
                case 3:
                    message.authorityType = 3;
                    break;
                }
                if (object.newAuthority != null)
                    message.newAuthority = String(object.newAuthority);
                return message;
            };

            SetAuthorityDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.authorityType = options.enums === String ? "MINT_TOKEN" : 0;
                if (message.authorityType != null && message.hasOwnProperty("authorityType"))
                    object.authorityType = options.enums === String ? $root.vixen.parser.AuthorityType[message.authorityType] === undefined ? message.authorityType : $root.vixen.parser.AuthorityType[message.authorityType] : message.authorityType;
                if (message.newAuthority != null && message.hasOwnProperty("newAuthority")) {
                    object.newAuthority = message.newAuthority;
                    if (options.oneofs)
                        object._newAuthority = "newAuthority";
                }
                return object;
            };

            SetAuthorityDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SetAuthorityDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.SetAuthorityDataProto";
            };

            return SetAuthorityDataProto;
        })();

        parser.SetAuthorityIxProto = (function() {

            function SetAuthorityIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SetAuthorityIxProto.prototype.accounts = null;
            SetAuthorityIxProto.prototype.data = null;

            SetAuthorityIxProto.create = function create(properties) {
                return new SetAuthorityIxProto(properties);
            };

            SetAuthorityIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.SetAuthorityAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.SetAuthorityDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            SetAuthorityIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SetAuthorityIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.SetAuthorityIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.SetAuthorityAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.SetAuthorityDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SetAuthorityIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SetAuthorityIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.SetAuthorityAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.SetAuthorityDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            SetAuthorityIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.SetAuthorityIxProto)
                    return object;
                var message = new $root.vixen.parser.SetAuthorityIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.SetAuthorityIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.SetAuthorityAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.SetAuthorityIxProto.data: object expected");
                    message.data = $root.vixen.parser.SetAuthorityDataProto.fromObject(object.data);
                }
                return message;
            };

            SetAuthorityIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.SetAuthorityAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.SetAuthorityDataProto.toObject(message.data, options);
                return object;
            };

            SetAuthorityIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SetAuthorityIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.SetAuthorityIxProto";
            };

            return SetAuthorityIxProto;
        })();

        parser.MintToAccountsProto = (function() {

            function MintToAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MintToAccountsProto.prototype.mint = "";
            MintToAccountsProto.prototype.account = "";
            MintToAccountsProto.prototype.mintAuthority = "";
            MintToAccountsProto.prototype.multisigSigners = $util.emptyArray;

            MintToAccountsProto.create = function create(properties) {
                return new MintToAccountsProto(properties);
            };

            MintToAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(18).string(message.account);
                if (message.mintAuthority != null && Object.hasOwnProperty.call(message, "mintAuthority"))
                    writer.uint32(26).string(message.mintAuthority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            MintToAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MintToAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MintToAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.account = reader.string();
                            break;
                        }
                    case 3: {
                            message.mintAuthority = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MintToAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MintToAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority"))
                    if (!$util.isString(message.mintAuthority))
                        return "mintAuthority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            MintToAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MintToAccountsProto)
                    return object;
                var message = new $root.vixen.parser.MintToAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mintAuthority != null)
                    message.mintAuthority = String(object.mintAuthority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.MintToAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            MintToAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.mint = "";
                    object.account = "";
                    object.mintAuthority = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority"))
                    object.mintAuthority = message.mintAuthority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            MintToAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MintToAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MintToAccountsProto";
            };

            return MintToAccountsProto;
        })();

        parser.MintToDataProto = (function() {

            function MintToDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MintToDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            MintToDataProto.create = function create(properties) {
                return new MintToDataProto(properties);
            };

            MintToDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                return writer;
            };

            MintToDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MintToDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MintToDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MintToDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MintToDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                return null;
            };

            MintToDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MintToDataProto)
                    return object;
                var message = new $root.vixen.parser.MintToDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                return message;
            };

            MintToDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                return object;
            };

            MintToDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MintToDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MintToDataProto";
            };

            return MintToDataProto;
        })();

        parser.MintToIxProto = (function() {

            function MintToIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MintToIxProto.prototype.accounts = null;
            MintToIxProto.prototype.data = null;

            MintToIxProto.create = function create(properties) {
                return new MintToIxProto(properties);
            };

            MintToIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.MintToAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.MintToDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            MintToIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MintToIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MintToIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.MintToAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.MintToDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MintToIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MintToIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.MintToAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.MintToDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            MintToIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MintToIxProto)
                    return object;
                var message = new $root.vixen.parser.MintToIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.MintToIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.MintToAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.MintToIxProto.data: object expected");
                    message.data = $root.vixen.parser.MintToDataProto.fromObject(object.data);
                }
                return message;
            };

            MintToIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.MintToAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.MintToDataProto.toObject(message.data, options);
                return object;
            };

            MintToIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MintToIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MintToIxProto";
            };

            return MintToIxProto;
        })();

        parser.BurnAccountsProto = (function() {

            function BurnAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            BurnAccountsProto.prototype.account = "";
            BurnAccountsProto.prototype.mint = "";
            BurnAccountsProto.prototype.owner = "";
            BurnAccountsProto.prototype.multisigSigners = $util.emptyArray;

            BurnAccountsProto.create = function create(properties) {
                return new BurnAccountsProto(properties);
            };

            BurnAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            BurnAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            BurnAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.BurnAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            BurnAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            BurnAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            BurnAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.BurnAccountsProto)
                    return object;
                var message = new $root.vixen.parser.BurnAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.BurnAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            BurnAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.mint = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            BurnAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            BurnAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.BurnAccountsProto";
            };

            return BurnAccountsProto;
        })();

        parser.BurnDataProto = (function() {

            function BurnDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            BurnDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            BurnDataProto.create = function create(properties) {
                return new BurnDataProto(properties);
            };

            BurnDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                return writer;
            };

            BurnDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            BurnDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.BurnDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            BurnDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            BurnDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                return null;
            };

            BurnDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.BurnDataProto)
                    return object;
                var message = new $root.vixen.parser.BurnDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                return message;
            };

            BurnDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                return object;
            };

            BurnDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            BurnDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.BurnDataProto";
            };

            return BurnDataProto;
        })();

        parser.BurnIxProto = (function() {

            function BurnIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            BurnIxProto.prototype.accounts = null;
            BurnIxProto.prototype.data = null;

            BurnIxProto.create = function create(properties) {
                return new BurnIxProto(properties);
            };

            BurnIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.BurnAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.BurnDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            BurnIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            BurnIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.BurnIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.BurnAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.BurnDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            BurnIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            BurnIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.BurnAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.BurnDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            BurnIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.BurnIxProto)
                    return object;
                var message = new $root.vixen.parser.BurnIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.BurnIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.BurnAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.BurnIxProto.data: object expected");
                    message.data = $root.vixen.parser.BurnDataProto.fromObject(object.data);
                }
                return message;
            };

            BurnIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.BurnAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.BurnDataProto.toObject(message.data, options);
                return object;
            };

            BurnIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            BurnIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.BurnIxProto";
            };

            return BurnIxProto;
        })();

        parser.CloseAccountAccountsProto = (function() {

            function CloseAccountAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            CloseAccountAccountsProto.prototype.account = "";
            CloseAccountAccountsProto.prototype.destination = "";
            CloseAccountAccountsProto.prototype.owner = "";
            CloseAccountAccountsProto.prototype.multisigSigners = $util.emptyArray;

            CloseAccountAccountsProto.create = function create(properties) {
                return new CloseAccountAccountsProto(properties);
            };

            CloseAccountAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                    writer.uint32(18).string(message.destination);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            CloseAccountAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            CloseAccountAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.CloseAccountAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.destination = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            CloseAccountAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            CloseAccountAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.destination != null && message.hasOwnProperty("destination"))
                    if (!$util.isString(message.destination))
                        return "destination: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            CloseAccountAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.CloseAccountAccountsProto)
                    return object;
                var message = new $root.vixen.parser.CloseAccountAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.destination != null)
                    message.destination = String(object.destination);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.CloseAccountAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            CloseAccountAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.destination = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.destination != null && message.hasOwnProperty("destination"))
                    object.destination = message.destination;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            CloseAccountAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            CloseAccountAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.CloseAccountAccountsProto";
            };

            return CloseAccountAccountsProto;
        })();

        parser.CloseAccountIxProto = (function() {

            function CloseAccountIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            CloseAccountIxProto.prototype.accounts = null;

            CloseAccountIxProto.create = function create(properties) {
                return new CloseAccountIxProto(properties);
            };

            CloseAccountIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.CloseAccountAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            CloseAccountIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            CloseAccountIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.CloseAccountIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.CloseAccountAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            CloseAccountIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            CloseAccountIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.CloseAccountAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            CloseAccountIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.CloseAccountIxProto)
                    return object;
                var message = new $root.vixen.parser.CloseAccountIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.CloseAccountIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.CloseAccountAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            CloseAccountIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.CloseAccountAccountsProto.toObject(message.accounts, options);
                return object;
            };

            CloseAccountIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            CloseAccountIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.CloseAccountIxProto";
            };

            return CloseAccountIxProto;
        })();

        parser.FreezeAccountAccountsProto = (function() {

            function FreezeAccountAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            FreezeAccountAccountsProto.prototype.account = "";
            FreezeAccountAccountsProto.prototype.mint = "";
            FreezeAccountAccountsProto.prototype.mintFreezeAuthority = "";
            FreezeAccountAccountsProto.prototype.multisigSigners = $util.emptyArray;

            FreezeAccountAccountsProto.create = function create(properties) {
                return new FreezeAccountAccountsProto(properties);
            };

            FreezeAccountAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.mintFreezeAuthority != null && Object.hasOwnProperty.call(message, "mintFreezeAuthority"))
                    writer.uint32(26).string(message.mintFreezeAuthority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            FreezeAccountAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            FreezeAccountAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.FreezeAccountAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.mintFreezeAuthority = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            FreezeAccountAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            FreezeAccountAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.mintFreezeAuthority != null && message.hasOwnProperty("mintFreezeAuthority"))
                    if (!$util.isString(message.mintFreezeAuthority))
                        return "mintFreezeAuthority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            FreezeAccountAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.FreezeAccountAccountsProto)
                    return object;
                var message = new $root.vixen.parser.FreezeAccountAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.mintFreezeAuthority != null)
                    message.mintFreezeAuthority = String(object.mintFreezeAuthority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.FreezeAccountAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            FreezeAccountAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.mint = "";
                    object.mintFreezeAuthority = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.mintFreezeAuthority != null && message.hasOwnProperty("mintFreezeAuthority"))
                    object.mintFreezeAuthority = message.mintFreezeAuthority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            FreezeAccountAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            FreezeAccountAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.FreezeAccountAccountsProto";
            };

            return FreezeAccountAccountsProto;
        })();

        parser.FreezeAccountIxProto = (function() {

            function FreezeAccountIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            FreezeAccountIxProto.prototype.accounts = null;

            FreezeAccountIxProto.create = function create(properties) {
                return new FreezeAccountIxProto(properties);
            };

            FreezeAccountIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.FreezeAccountAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            FreezeAccountIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            FreezeAccountIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.FreezeAccountIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.FreezeAccountAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            FreezeAccountIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            FreezeAccountIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.FreezeAccountAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            FreezeAccountIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.FreezeAccountIxProto)
                    return object;
                var message = new $root.vixen.parser.FreezeAccountIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.FreezeAccountIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.FreezeAccountAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            FreezeAccountIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.FreezeAccountAccountsProto.toObject(message.accounts, options);
                return object;
            };

            FreezeAccountIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            FreezeAccountIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.FreezeAccountIxProto";
            };

            return FreezeAccountIxProto;
        })();

        parser.ThawAccountAccountsProto = (function() {

            function ThawAccountAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ThawAccountAccountsProto.prototype.account = "";
            ThawAccountAccountsProto.prototype.mint = "";
            ThawAccountAccountsProto.prototype.mintFreezeAuthority = "";
            ThawAccountAccountsProto.prototype.multisigSigners = $util.emptyArray;

            ThawAccountAccountsProto.create = function create(properties) {
                return new ThawAccountAccountsProto(properties);
            };

            ThawAccountAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.mintFreezeAuthority != null && Object.hasOwnProperty.call(message, "mintFreezeAuthority"))
                    writer.uint32(26).string(message.mintFreezeAuthority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            ThawAccountAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ThawAccountAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ThawAccountAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.mintFreezeAuthority = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ThawAccountAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ThawAccountAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.mintFreezeAuthority != null && message.hasOwnProperty("mintFreezeAuthority"))
                    if (!$util.isString(message.mintFreezeAuthority))
                        return "mintFreezeAuthority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            ThawAccountAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ThawAccountAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ThawAccountAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.mintFreezeAuthority != null)
                    message.mintFreezeAuthority = String(object.mintFreezeAuthority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.ThawAccountAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            ThawAccountAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.mint = "";
                    object.mintFreezeAuthority = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.mintFreezeAuthority != null && message.hasOwnProperty("mintFreezeAuthority"))
                    object.mintFreezeAuthority = message.mintFreezeAuthority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            ThawAccountAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ThawAccountAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ThawAccountAccountsProto";
            };

            return ThawAccountAccountsProto;
        })();

        parser.ThawAccountIxProto = (function() {

            function ThawAccountIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ThawAccountIxProto.prototype.accounts = null;

            ThawAccountIxProto.create = function create(properties) {
                return new ThawAccountIxProto(properties);
            };

            ThawAccountIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ThawAccountAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            ThawAccountIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ThawAccountIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ThawAccountIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ThawAccountAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ThawAccountIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ThawAccountIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ThawAccountAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            ThawAccountIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ThawAccountIxProto)
                    return object;
                var message = new $root.vixen.parser.ThawAccountIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ThawAccountIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ThawAccountAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            ThawAccountIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ThawAccountAccountsProto.toObject(message.accounts, options);
                return object;
            };

            ThawAccountIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ThawAccountIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ThawAccountIxProto";
            };

            return ThawAccountIxProto;
        })();

        parser.TransferCheckedAccountsProto = (function() {

            function TransferCheckedAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferCheckedAccountsProto.prototype.source = "";
            TransferCheckedAccountsProto.prototype.mint = "";
            TransferCheckedAccountsProto.prototype.destination = "";
            TransferCheckedAccountsProto.prototype.owner = "";
            TransferCheckedAccountsProto.prototype.multisigSigners = $util.emptyArray;

            TransferCheckedAccountsProto.create = function create(properties) {
                return new TransferCheckedAccountsProto(properties);
            };

            TransferCheckedAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                    writer.uint32(10).string(message.source);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                    writer.uint32(26).string(message.destination);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(34).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(42).string(message.multisigSigners[i]);
                return writer;
            };

            TransferCheckedAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferCheckedAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferCheckedAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.source = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.destination = reader.string();
                            break;
                        }
                    case 4: {
                            message.owner = reader.string();
                            break;
                        }
                    case 5: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferCheckedAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferCheckedAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.destination != null && message.hasOwnProperty("destination"))
                    if (!$util.isString(message.destination))
                        return "destination: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            TransferCheckedAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferCheckedAccountsProto)
                    return object;
                var message = new $root.vixen.parser.TransferCheckedAccountsProto();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.destination != null)
                    message.destination = String(object.destination);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.TransferCheckedAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            TransferCheckedAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.source = "";
                    object.mint = "";
                    object.destination = "";
                    object.owner = "";
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.destination != null && message.hasOwnProperty("destination"))
                    object.destination = message.destination;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            TransferCheckedAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferCheckedAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferCheckedAccountsProto";
            };

            return TransferCheckedAccountsProto;
        })();

        parser.TransferCheckedDataProto = (function() {

            function TransferCheckedDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferCheckedDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            TransferCheckedDataProto.prototype.decimals = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            TransferCheckedDataProto.create = function create(properties) {
                return new TransferCheckedDataProto(properties);
            };

            TransferCheckedDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                if (message.decimals != null && Object.hasOwnProperty.call(message, "decimals"))
                    writer.uint32(16).uint64(message.decimals);
                return writer;
            };

            TransferCheckedDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferCheckedDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferCheckedDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.decimals = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferCheckedDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferCheckedDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (!$util.isInteger(message.decimals) && !(message.decimals && $util.isInteger(message.decimals.low) && $util.isInteger(message.decimals.high)))
                        return "decimals: integer|Long expected";
                return null;
            };

            TransferCheckedDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferCheckedDataProto)
                    return object;
                var message = new $root.vixen.parser.TransferCheckedDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                if (object.decimals != null)
                    if ($util.Long)
                        (message.decimals = $util.Long.fromValue(object.decimals)).unsigned = true;
                    else if (typeof object.decimals === "string")
                        message.decimals = parseInt(object.decimals, 10);
                    else if (typeof object.decimals === "number")
                        message.decimals = object.decimals;
                    else if (typeof object.decimals === "object")
                        message.decimals = new $util.LongBits(object.decimals.low >>> 0, object.decimals.high >>> 0).toNumber(true);
                return message;
            };

            TransferCheckedDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.decimals = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.decimals = options.longs === String ? "0" : 0;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (typeof message.decimals === "number")
                        object.decimals = options.longs === String ? String(message.decimals) : message.decimals;
                    else
                        object.decimals = options.longs === String ? $util.Long.prototype.toString.call(message.decimals) : options.longs === Number ? new $util.LongBits(message.decimals.low >>> 0, message.decimals.high >>> 0).toNumber(true) : message.decimals;
                return object;
            };

            TransferCheckedDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferCheckedDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferCheckedDataProto";
            };

            return TransferCheckedDataProto;
        })();

        parser.TransferCheckedIxProto = (function() {

            function TransferCheckedIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferCheckedIxProto.prototype.accounts = null;
            TransferCheckedIxProto.prototype.data = null;

            TransferCheckedIxProto.create = function create(properties) {
                return new TransferCheckedIxProto(properties);
            };

            TransferCheckedIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.TransferCheckedAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.TransferCheckedDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            TransferCheckedIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferCheckedIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferCheckedIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.TransferCheckedAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.TransferCheckedDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferCheckedIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferCheckedIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.TransferCheckedAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.TransferCheckedDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            TransferCheckedIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferCheckedIxProto)
                    return object;
                var message = new $root.vixen.parser.TransferCheckedIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.TransferCheckedIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.TransferCheckedAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.TransferCheckedIxProto.data: object expected");
                    message.data = $root.vixen.parser.TransferCheckedDataProto.fromObject(object.data);
                }
                return message;
            };

            TransferCheckedIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.TransferCheckedAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.TransferCheckedDataProto.toObject(message.data, options);
                return object;
            };

            TransferCheckedIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferCheckedIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferCheckedIxProto";
            };

            return TransferCheckedIxProto;
        })();

        parser.ApproveCheckedAccountsProto = (function() {

            function ApproveCheckedAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApproveCheckedAccountsProto.prototype.source = "";
            ApproveCheckedAccountsProto.prototype.mint = "";
            ApproveCheckedAccountsProto.prototype.delegate = "";
            ApproveCheckedAccountsProto.prototype.owner = "";
            ApproveCheckedAccountsProto.prototype.multisigSigners = $util.emptyArray;

            ApproveCheckedAccountsProto.create = function create(properties) {
                return new ApproveCheckedAccountsProto(properties);
            };

            ApproveCheckedAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                    writer.uint32(10).string(message.source);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.delegate != null && Object.hasOwnProperty.call(message, "delegate"))
                    writer.uint32(26).string(message.delegate);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(34).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(42).string(message.multisigSigners[i]);
                return writer;
            };

            ApproveCheckedAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApproveCheckedAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApproveCheckedAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.source = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.delegate = reader.string();
                            break;
                        }
                    case 4: {
                            message.owner = reader.string();
                            break;
                        }
                    case 5: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApproveCheckedAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApproveCheckedAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.delegate != null && message.hasOwnProperty("delegate"))
                    if (!$util.isString(message.delegate))
                        return "delegate: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            ApproveCheckedAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApproveCheckedAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ApproveCheckedAccountsProto();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.delegate != null)
                    message.delegate = String(object.delegate);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.ApproveCheckedAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            ApproveCheckedAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.source = "";
                    object.mint = "";
                    object.delegate = "";
                    object.owner = "";
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.delegate != null && message.hasOwnProperty("delegate"))
                    object.delegate = message.delegate;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            ApproveCheckedAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApproveCheckedAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApproveCheckedAccountsProto";
            };

            return ApproveCheckedAccountsProto;
        })();

        parser.ApproveCheckedDataProto = (function() {

            function ApproveCheckedDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApproveCheckedDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            ApproveCheckedDataProto.prototype.decimals = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            ApproveCheckedDataProto.create = function create(properties) {
                return new ApproveCheckedDataProto(properties);
            };

            ApproveCheckedDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                if (message.decimals != null && Object.hasOwnProperty.call(message, "decimals"))
                    writer.uint32(16).uint64(message.decimals);
                return writer;
            };

            ApproveCheckedDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApproveCheckedDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApproveCheckedDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.decimals = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApproveCheckedDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApproveCheckedDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (!$util.isInteger(message.decimals) && !(message.decimals && $util.isInteger(message.decimals.low) && $util.isInteger(message.decimals.high)))
                        return "decimals: integer|Long expected";
                return null;
            };

            ApproveCheckedDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApproveCheckedDataProto)
                    return object;
                var message = new $root.vixen.parser.ApproveCheckedDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                if (object.decimals != null)
                    if ($util.Long)
                        (message.decimals = $util.Long.fromValue(object.decimals)).unsigned = true;
                    else if (typeof object.decimals === "string")
                        message.decimals = parseInt(object.decimals, 10);
                    else if (typeof object.decimals === "number")
                        message.decimals = object.decimals;
                    else if (typeof object.decimals === "object")
                        message.decimals = new $util.LongBits(object.decimals.low >>> 0, object.decimals.high >>> 0).toNumber(true);
                return message;
            };

            ApproveCheckedDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.decimals = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.decimals = options.longs === String ? "0" : 0;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (typeof message.decimals === "number")
                        object.decimals = options.longs === String ? String(message.decimals) : message.decimals;
                    else
                        object.decimals = options.longs === String ? $util.Long.prototype.toString.call(message.decimals) : options.longs === Number ? new $util.LongBits(message.decimals.low >>> 0, message.decimals.high >>> 0).toNumber(true) : message.decimals;
                return object;
            };

            ApproveCheckedDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApproveCheckedDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApproveCheckedDataProto";
            };

            return ApproveCheckedDataProto;
        })();

        parser.ApproveCheckedIxProto = (function() {

            function ApproveCheckedIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApproveCheckedIxProto.prototype.accounts = null;
            ApproveCheckedIxProto.prototype.data = null;

            ApproveCheckedIxProto.create = function create(properties) {
                return new ApproveCheckedIxProto(properties);
            };

            ApproveCheckedIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ApproveCheckedAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.ApproveCheckedDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            ApproveCheckedIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApproveCheckedIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApproveCheckedIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ApproveCheckedAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.ApproveCheckedDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApproveCheckedIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApproveCheckedIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ApproveCheckedAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.ApproveCheckedDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            ApproveCheckedIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApproveCheckedIxProto)
                    return object;
                var message = new $root.vixen.parser.ApproveCheckedIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ApproveCheckedIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ApproveCheckedAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.ApproveCheckedIxProto.data: object expected");
                    message.data = $root.vixen.parser.ApproveCheckedDataProto.fromObject(object.data);
                }
                return message;
            };

            ApproveCheckedIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ApproveCheckedAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.ApproveCheckedDataProto.toObject(message.data, options);
                return object;
            };

            ApproveCheckedIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApproveCheckedIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApproveCheckedIxProto";
            };

            return ApproveCheckedIxProto;
        })();

        parser.MintToCheckedAccountsProto = (function() {

            function MintToCheckedAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MintToCheckedAccountsProto.prototype.mint = "";
            MintToCheckedAccountsProto.prototype.account = "";
            MintToCheckedAccountsProto.prototype.mintAuthority = "";
            MintToCheckedAccountsProto.prototype.multisigSigners = $util.emptyArray;

            MintToCheckedAccountsProto.create = function create(properties) {
                return new MintToCheckedAccountsProto(properties);
            };

            MintToCheckedAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(18).string(message.account);
                if (message.mintAuthority != null && Object.hasOwnProperty.call(message, "mintAuthority"))
                    writer.uint32(26).string(message.mintAuthority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            MintToCheckedAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MintToCheckedAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MintToCheckedAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.account = reader.string();
                            break;
                        }
                    case 3: {
                            message.mintAuthority = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MintToCheckedAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MintToCheckedAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority"))
                    if (!$util.isString(message.mintAuthority))
                        return "mintAuthority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            MintToCheckedAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MintToCheckedAccountsProto)
                    return object;
                var message = new $root.vixen.parser.MintToCheckedAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mintAuthority != null)
                    message.mintAuthority = String(object.mintAuthority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.MintToCheckedAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            MintToCheckedAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.mint = "";
                    object.account = "";
                    object.mintAuthority = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority"))
                    object.mintAuthority = message.mintAuthority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            MintToCheckedAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MintToCheckedAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MintToCheckedAccountsProto";
            };

            return MintToCheckedAccountsProto;
        })();

        parser.MintToCheckedDataProto = (function() {

            function MintToCheckedDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MintToCheckedDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            MintToCheckedDataProto.prototype.decimals = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            MintToCheckedDataProto.create = function create(properties) {
                return new MintToCheckedDataProto(properties);
            };

            MintToCheckedDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                if (message.decimals != null && Object.hasOwnProperty.call(message, "decimals"))
                    writer.uint32(16).uint64(message.decimals);
                return writer;
            };

            MintToCheckedDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MintToCheckedDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MintToCheckedDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.decimals = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MintToCheckedDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MintToCheckedDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (!$util.isInteger(message.decimals) && !(message.decimals && $util.isInteger(message.decimals.low) && $util.isInteger(message.decimals.high)))
                        return "decimals: integer|Long expected";
                return null;
            };

            MintToCheckedDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MintToCheckedDataProto)
                    return object;
                var message = new $root.vixen.parser.MintToCheckedDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                if (object.decimals != null)
                    if ($util.Long)
                        (message.decimals = $util.Long.fromValue(object.decimals)).unsigned = true;
                    else if (typeof object.decimals === "string")
                        message.decimals = parseInt(object.decimals, 10);
                    else if (typeof object.decimals === "number")
                        message.decimals = object.decimals;
                    else if (typeof object.decimals === "object")
                        message.decimals = new $util.LongBits(object.decimals.low >>> 0, object.decimals.high >>> 0).toNumber(true);
                return message;
            };

            MintToCheckedDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.decimals = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.decimals = options.longs === String ? "0" : 0;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (typeof message.decimals === "number")
                        object.decimals = options.longs === String ? String(message.decimals) : message.decimals;
                    else
                        object.decimals = options.longs === String ? $util.Long.prototype.toString.call(message.decimals) : options.longs === Number ? new $util.LongBits(message.decimals.low >>> 0, message.decimals.high >>> 0).toNumber(true) : message.decimals;
                return object;
            };

            MintToCheckedDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MintToCheckedDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MintToCheckedDataProto";
            };

            return MintToCheckedDataProto;
        })();

        parser.MintToCheckedIxProto = (function() {

            function MintToCheckedIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MintToCheckedIxProto.prototype.accounts = null;
            MintToCheckedIxProto.prototype.data = null;

            MintToCheckedIxProto.create = function create(properties) {
                return new MintToCheckedIxProto(properties);
            };

            MintToCheckedIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.MintToCheckedAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.MintToCheckedDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            MintToCheckedIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MintToCheckedIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MintToCheckedIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.MintToCheckedAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.MintToCheckedDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MintToCheckedIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MintToCheckedIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.MintToCheckedAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.MintToCheckedDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            MintToCheckedIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MintToCheckedIxProto)
                    return object;
                var message = new $root.vixen.parser.MintToCheckedIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.MintToCheckedIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.MintToCheckedAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.MintToCheckedIxProto.data: object expected");
                    message.data = $root.vixen.parser.MintToCheckedDataProto.fromObject(object.data);
                }
                return message;
            };

            MintToCheckedIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.MintToCheckedAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.MintToCheckedDataProto.toObject(message.data, options);
                return object;
            };

            MintToCheckedIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MintToCheckedIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MintToCheckedIxProto";
            };

            return MintToCheckedIxProto;
        })();

        parser.BurnCheckedAccountsProto = (function() {

            function BurnCheckedAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            BurnCheckedAccountsProto.prototype.account = "";
            BurnCheckedAccountsProto.prototype.mint = "";
            BurnCheckedAccountsProto.prototype.owner = "";
            BurnCheckedAccountsProto.prototype.multisigSigners = $util.emptyArray;

            BurnCheckedAccountsProto.create = function create(properties) {
                return new BurnCheckedAccountsProto(properties);
            };

            BurnCheckedAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            BurnCheckedAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            BurnCheckedAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.BurnCheckedAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            BurnCheckedAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            BurnCheckedAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            BurnCheckedAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.BurnCheckedAccountsProto)
                    return object;
                var message = new $root.vixen.parser.BurnCheckedAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.BurnCheckedAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            BurnCheckedAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.mint = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            BurnCheckedAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            BurnCheckedAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.BurnCheckedAccountsProto";
            };

            return BurnCheckedAccountsProto;
        })();

        parser.BurnCheckedDataProto = (function() {

            function BurnCheckedDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            BurnCheckedDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            BurnCheckedDataProto.prototype.decimals = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            BurnCheckedDataProto.create = function create(properties) {
                return new BurnCheckedDataProto(properties);
            };

            BurnCheckedDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                if (message.decimals != null && Object.hasOwnProperty.call(message, "decimals"))
                    writer.uint32(16).uint64(message.decimals);
                return writer;
            };

            BurnCheckedDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            BurnCheckedDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.BurnCheckedDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.decimals = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            BurnCheckedDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            BurnCheckedDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (!$util.isInteger(message.decimals) && !(message.decimals && $util.isInteger(message.decimals.low) && $util.isInteger(message.decimals.high)))
                        return "decimals: integer|Long expected";
                return null;
            };

            BurnCheckedDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.BurnCheckedDataProto)
                    return object;
                var message = new $root.vixen.parser.BurnCheckedDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                if (object.decimals != null)
                    if ($util.Long)
                        (message.decimals = $util.Long.fromValue(object.decimals)).unsigned = true;
                    else if (typeof object.decimals === "string")
                        message.decimals = parseInt(object.decimals, 10);
                    else if (typeof object.decimals === "number")
                        message.decimals = object.decimals;
                    else if (typeof object.decimals === "object")
                        message.decimals = new $util.LongBits(object.decimals.low >>> 0, object.decimals.high >>> 0).toNumber(true);
                return message;
            };

            BurnCheckedDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.decimals = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.decimals = options.longs === String ? "0" : 0;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (typeof message.decimals === "number")
                        object.decimals = options.longs === String ? String(message.decimals) : message.decimals;
                    else
                        object.decimals = options.longs === String ? $util.Long.prototype.toString.call(message.decimals) : options.longs === Number ? new $util.LongBits(message.decimals.low >>> 0, message.decimals.high >>> 0).toNumber(true) : message.decimals;
                return object;
            };

            BurnCheckedDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            BurnCheckedDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.BurnCheckedDataProto";
            };

            return BurnCheckedDataProto;
        })();

        parser.BurnCheckedIxProto = (function() {

            function BurnCheckedIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            BurnCheckedIxProto.prototype.accounts = null;
            BurnCheckedIxProto.prototype.data = null;

            BurnCheckedIxProto.create = function create(properties) {
                return new BurnCheckedIxProto(properties);
            };

            BurnCheckedIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.BurnCheckedAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.BurnCheckedDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            BurnCheckedIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            BurnCheckedIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.BurnCheckedIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.BurnCheckedAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.BurnCheckedDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            BurnCheckedIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            BurnCheckedIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.BurnCheckedAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.BurnCheckedDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            BurnCheckedIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.BurnCheckedIxProto)
                    return object;
                var message = new $root.vixen.parser.BurnCheckedIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.BurnCheckedIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.BurnCheckedAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.BurnCheckedIxProto.data: object expected");
                    message.data = $root.vixen.parser.BurnCheckedDataProto.fromObject(object.data);
                }
                return message;
            };

            BurnCheckedIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.BurnCheckedAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.BurnCheckedDataProto.toObject(message.data, options);
                return object;
            };

            BurnCheckedIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            BurnCheckedIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.BurnCheckedIxProto";
            };

            return BurnCheckedIxProto;
        })();

        parser.SyncNativeAccountsProto = (function() {

            function SyncNativeAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SyncNativeAccountsProto.prototype.account = "";

            SyncNativeAccountsProto.create = function create(properties) {
                return new SyncNativeAccountsProto(properties);
            };

            SyncNativeAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                return writer;
            };

            SyncNativeAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SyncNativeAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.SyncNativeAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SyncNativeAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SyncNativeAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                return null;
            };

            SyncNativeAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.SyncNativeAccountsProto)
                    return object;
                var message = new $root.vixen.parser.SyncNativeAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                return message;
            };

            SyncNativeAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.account = "";
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                return object;
            };

            SyncNativeAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SyncNativeAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.SyncNativeAccountsProto";
            };

            return SyncNativeAccountsProto;
        })();

        parser.SyncNativeIxProto = (function() {

            function SyncNativeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SyncNativeIxProto.prototype.accounts = null;

            SyncNativeIxProto.create = function create(properties) {
                return new SyncNativeIxProto(properties);
            };

            SyncNativeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.SyncNativeAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            SyncNativeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SyncNativeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.SyncNativeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.SyncNativeAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SyncNativeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SyncNativeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.SyncNativeAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            SyncNativeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.SyncNativeIxProto)
                    return object;
                var message = new $root.vixen.parser.SyncNativeIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.SyncNativeIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.SyncNativeAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            SyncNativeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.SyncNativeAccountsProto.toObject(message.accounts, options);
                return object;
            };

            SyncNativeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SyncNativeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.SyncNativeIxProto";
            };

            return SyncNativeIxProto;
        })();

        parser.GetAccountDataSizeAccountsProto = (function() {

            function GetAccountDataSizeAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            GetAccountDataSizeAccountsProto.prototype.mint = "";

            GetAccountDataSizeAccountsProto.create = function create(properties) {
                return new GetAccountDataSizeAccountsProto(properties);
            };

            GetAccountDataSizeAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            GetAccountDataSizeAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            GetAccountDataSizeAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.GetAccountDataSizeAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            GetAccountDataSizeAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            GetAccountDataSizeAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            GetAccountDataSizeAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.GetAccountDataSizeAccountsProto)
                    return object;
                var message = new $root.vixen.parser.GetAccountDataSizeAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            GetAccountDataSizeAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            GetAccountDataSizeAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GetAccountDataSizeAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.GetAccountDataSizeAccountsProto";
            };

            return GetAccountDataSizeAccountsProto;
        })();

        parser.GetAccountDataSizeIxProto = (function() {

            function GetAccountDataSizeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            GetAccountDataSizeIxProto.prototype.accounts = null;

            GetAccountDataSizeIxProto.create = function create(properties) {
                return new GetAccountDataSizeIxProto(properties);
            };

            GetAccountDataSizeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.GetAccountDataSizeAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            GetAccountDataSizeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            GetAccountDataSizeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.GetAccountDataSizeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.GetAccountDataSizeAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            GetAccountDataSizeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            GetAccountDataSizeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.GetAccountDataSizeAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            GetAccountDataSizeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.GetAccountDataSizeIxProto)
                    return object;
                var message = new $root.vixen.parser.GetAccountDataSizeIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.GetAccountDataSizeIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.GetAccountDataSizeAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            GetAccountDataSizeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.GetAccountDataSizeAccountsProto.toObject(message.accounts, options);
                return object;
            };

            GetAccountDataSizeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GetAccountDataSizeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.GetAccountDataSizeIxProto";
            };

            return GetAccountDataSizeIxProto;
        })();

        parser.InitializeImmutableOwnerAccountsProto = (function() {

            function InitializeImmutableOwnerAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeImmutableOwnerAccountsProto.prototype.account = "";

            InitializeImmutableOwnerAccountsProto.create = function create(properties) {
                return new InitializeImmutableOwnerAccountsProto(properties);
            };

            InitializeImmutableOwnerAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                return writer;
            };

            InitializeImmutableOwnerAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeImmutableOwnerAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeImmutableOwnerAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeImmutableOwnerAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeImmutableOwnerAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                return null;
            };

            InitializeImmutableOwnerAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeImmutableOwnerAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeImmutableOwnerAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                return message;
            };

            InitializeImmutableOwnerAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.account = "";
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                return object;
            };

            InitializeImmutableOwnerAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeImmutableOwnerAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeImmutableOwnerAccountsProto";
            };

            return InitializeImmutableOwnerAccountsProto;
        })();

        parser.InitializeImmutableOwnerIxProto = (function() {

            function InitializeImmutableOwnerIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeImmutableOwnerIxProto.prototype.accounts = null;

            InitializeImmutableOwnerIxProto.create = function create(properties) {
                return new InitializeImmutableOwnerIxProto(properties);
            };

            InitializeImmutableOwnerIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeImmutableOwnerAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            InitializeImmutableOwnerIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeImmutableOwnerIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeImmutableOwnerIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeImmutableOwnerAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeImmutableOwnerIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeImmutableOwnerIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeImmutableOwnerAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            InitializeImmutableOwnerIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeImmutableOwnerIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeImmutableOwnerIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeImmutableOwnerIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeImmutableOwnerAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            InitializeImmutableOwnerIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeImmutableOwnerAccountsProto.toObject(message.accounts, options);
                return object;
            };

            InitializeImmutableOwnerIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeImmutableOwnerIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeImmutableOwnerIxProto";
            };

            return InitializeImmutableOwnerIxProto;
        })();

        parser.AmountToUiAmountAccountsProto = (function() {

            function AmountToUiAmountAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            AmountToUiAmountAccountsProto.prototype.mint = "";

            AmountToUiAmountAccountsProto.create = function create(properties) {
                return new AmountToUiAmountAccountsProto(properties);
            };

            AmountToUiAmountAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            AmountToUiAmountAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            AmountToUiAmountAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.AmountToUiAmountAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            AmountToUiAmountAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            AmountToUiAmountAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            AmountToUiAmountAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.AmountToUiAmountAccountsProto)
                    return object;
                var message = new $root.vixen.parser.AmountToUiAmountAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            AmountToUiAmountAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            AmountToUiAmountAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            AmountToUiAmountAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.AmountToUiAmountAccountsProto";
            };

            return AmountToUiAmountAccountsProto;
        })();

        parser.AmountToUiAmountDataProto = (function() {

            function AmountToUiAmountDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            AmountToUiAmountDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            AmountToUiAmountDataProto.create = function create(properties) {
                return new AmountToUiAmountDataProto(properties);
            };

            AmountToUiAmountDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                return writer;
            };

            AmountToUiAmountDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            AmountToUiAmountDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.AmountToUiAmountDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            AmountToUiAmountDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            AmountToUiAmountDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                return null;
            };

            AmountToUiAmountDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.AmountToUiAmountDataProto)
                    return object;
                var message = new $root.vixen.parser.AmountToUiAmountDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                return message;
            };

            AmountToUiAmountDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                return object;
            };

            AmountToUiAmountDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            AmountToUiAmountDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.AmountToUiAmountDataProto";
            };

            return AmountToUiAmountDataProto;
        })();

        parser.AmountToUiAmountIxProto = (function() {

            function AmountToUiAmountIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            AmountToUiAmountIxProto.prototype.accounts = null;
            AmountToUiAmountIxProto.prototype.data = null;

            AmountToUiAmountIxProto.create = function create(properties) {
                return new AmountToUiAmountIxProto(properties);
            };

            AmountToUiAmountIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.AmountToUiAmountAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.AmountToUiAmountDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            AmountToUiAmountIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            AmountToUiAmountIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.AmountToUiAmountIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.AmountToUiAmountAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.AmountToUiAmountDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            AmountToUiAmountIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            AmountToUiAmountIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.AmountToUiAmountAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.AmountToUiAmountDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            AmountToUiAmountIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.AmountToUiAmountIxProto)
                    return object;
                var message = new $root.vixen.parser.AmountToUiAmountIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.AmountToUiAmountIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.AmountToUiAmountAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.AmountToUiAmountIxProto.data: object expected");
                    message.data = $root.vixen.parser.AmountToUiAmountDataProto.fromObject(object.data);
                }
                return message;
            };

            AmountToUiAmountIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.AmountToUiAmountAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.AmountToUiAmountDataProto.toObject(message.data, options);
                return object;
            };

            AmountToUiAmountIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            AmountToUiAmountIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.AmountToUiAmountIxProto";
            };

            return AmountToUiAmountIxProto;
        })();

        parser.UiAmountToAmountAccountsProto = (function() {

            function UiAmountToAmountAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UiAmountToAmountAccountsProto.prototype.mint = "";

            UiAmountToAmountAccountsProto.create = function create(properties) {
                return new UiAmountToAmountAccountsProto(properties);
            };

            UiAmountToAmountAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            UiAmountToAmountAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UiAmountToAmountAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UiAmountToAmountAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UiAmountToAmountAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UiAmountToAmountAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            UiAmountToAmountAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UiAmountToAmountAccountsProto)
                    return object;
                var message = new $root.vixen.parser.UiAmountToAmountAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            UiAmountToAmountAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            UiAmountToAmountAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UiAmountToAmountAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UiAmountToAmountAccountsProto";
            };

            return UiAmountToAmountAccountsProto;
        })();

        parser.UiAmountToAmountDataProto = (function() {

            function UiAmountToAmountDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UiAmountToAmountDataProto.prototype.uiAmount = "";

            UiAmountToAmountDataProto.create = function create(properties) {
                return new UiAmountToAmountDataProto(properties);
            };

            UiAmountToAmountDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uiAmount != null && Object.hasOwnProperty.call(message, "uiAmount"))
                    writer.uint32(10).string(message.uiAmount);
                return writer;
            };

            UiAmountToAmountDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UiAmountToAmountDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UiAmountToAmountDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.uiAmount = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UiAmountToAmountDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UiAmountToAmountDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uiAmount != null && message.hasOwnProperty("uiAmount"))
                    if (!$util.isString(message.uiAmount))
                        return "uiAmount: string expected";
                return null;
            };

            UiAmountToAmountDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UiAmountToAmountDataProto)
                    return object;
                var message = new $root.vixen.parser.UiAmountToAmountDataProto();
                if (object.uiAmount != null)
                    message.uiAmount = String(object.uiAmount);
                return message;
            };

            UiAmountToAmountDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.uiAmount = "";
                if (message.uiAmount != null && message.hasOwnProperty("uiAmount"))
                    object.uiAmount = message.uiAmount;
                return object;
            };

            UiAmountToAmountDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UiAmountToAmountDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UiAmountToAmountDataProto";
            };

            return UiAmountToAmountDataProto;
        })();

        parser.UiAmountToAmountIxProto = (function() {

            function UiAmountToAmountIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UiAmountToAmountIxProto.prototype.accounts = null;
            UiAmountToAmountIxProto.prototype.data = null;

            UiAmountToAmountIxProto.create = function create(properties) {
                return new UiAmountToAmountIxProto(properties);
            };

            UiAmountToAmountIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.UiAmountToAmountAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.UiAmountToAmountDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            UiAmountToAmountIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UiAmountToAmountIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UiAmountToAmountIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.UiAmountToAmountAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.UiAmountToAmountDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UiAmountToAmountIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UiAmountToAmountIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.UiAmountToAmountAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.UiAmountToAmountDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            UiAmountToAmountIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UiAmountToAmountIxProto)
                    return object;
                var message = new $root.vixen.parser.UiAmountToAmountIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.UiAmountToAmountIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.UiAmountToAmountAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.UiAmountToAmountIxProto.data: object expected");
                    message.data = $root.vixen.parser.UiAmountToAmountDataProto.fromObject(object.data);
                }
                return message;
            };

            UiAmountToAmountIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.UiAmountToAmountAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.UiAmountToAmountDataProto.toObject(message.data, options);
                return object;
            };

            UiAmountToAmountIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UiAmountToAmountIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UiAmountToAmountIxProto";
            };

            return UiAmountToAmountIxProto;
        })();

        parser.TransferCheckedWithFeeAccountsProto = (function() {

            function TransferCheckedWithFeeAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferCheckedWithFeeAccountsProto.prototype.source = "";
            TransferCheckedWithFeeAccountsProto.prototype.mint = "";
            TransferCheckedWithFeeAccountsProto.prototype.destination = "";
            TransferCheckedWithFeeAccountsProto.prototype.owner = "";
            TransferCheckedWithFeeAccountsProto.prototype.multisigSigners = $util.emptyArray;

            TransferCheckedWithFeeAccountsProto.create = function create(properties) {
                return new TransferCheckedWithFeeAccountsProto(properties);
            };

            TransferCheckedWithFeeAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                    writer.uint32(10).string(message.source);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                    writer.uint32(26).string(message.destination);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(34).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(42).string(message.multisigSigners[i]);
                return writer;
            };

            TransferCheckedWithFeeAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferCheckedWithFeeAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferCheckedWithFeeAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.source = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.destination = reader.string();
                            break;
                        }
                    case 4: {
                            message.owner = reader.string();
                            break;
                        }
                    case 5: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferCheckedWithFeeAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferCheckedWithFeeAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.source != null && message.hasOwnProperty("source"))
                    if (!$util.isString(message.source))
                        return "source: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.destination != null && message.hasOwnProperty("destination"))
                    if (!$util.isString(message.destination))
                        return "destination: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            TransferCheckedWithFeeAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferCheckedWithFeeAccountsProto)
                    return object;
                var message = new $root.vixen.parser.TransferCheckedWithFeeAccountsProto();
                if (object.source != null)
                    message.source = String(object.source);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.destination != null)
                    message.destination = String(object.destination);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.TransferCheckedWithFeeAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            TransferCheckedWithFeeAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.source = "";
                    object.mint = "";
                    object.destination = "";
                    object.owner = "";
                }
                if (message.source != null && message.hasOwnProperty("source"))
                    object.source = message.source;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.destination != null && message.hasOwnProperty("destination"))
                    object.destination = message.destination;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            TransferCheckedWithFeeAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferCheckedWithFeeAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferCheckedWithFeeAccountsProto";
            };

            return TransferCheckedWithFeeAccountsProto;
        })();

        parser.TransferCheckedWithFeeDataProto = (function() {

            function TransferCheckedWithFeeDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferCheckedWithFeeDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            TransferCheckedWithFeeDataProto.prototype.feeAmount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            TransferCheckedWithFeeDataProto.prototype.decimals = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            TransferCheckedWithFeeDataProto.create = function create(properties) {
                return new TransferCheckedWithFeeDataProto(properties);
            };

            TransferCheckedWithFeeDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                if (message.feeAmount != null && Object.hasOwnProperty.call(message, "feeAmount"))
                    writer.uint32(16).uint64(message.feeAmount);
                if (message.decimals != null && Object.hasOwnProperty.call(message, "decimals"))
                    writer.uint32(24).uint64(message.decimals);
                return writer;
            };

            TransferCheckedWithFeeDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferCheckedWithFeeDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferCheckedWithFeeDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.feeAmount = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.decimals = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferCheckedWithFeeDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferCheckedWithFeeDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                if (message.feeAmount != null && message.hasOwnProperty("feeAmount"))
                    if (!$util.isInteger(message.feeAmount) && !(message.feeAmount && $util.isInteger(message.feeAmount.low) && $util.isInteger(message.feeAmount.high)))
                        return "feeAmount: integer|Long expected";
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (!$util.isInteger(message.decimals) && !(message.decimals && $util.isInteger(message.decimals.low) && $util.isInteger(message.decimals.high)))
                        return "decimals: integer|Long expected";
                return null;
            };

            TransferCheckedWithFeeDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferCheckedWithFeeDataProto)
                    return object;
                var message = new $root.vixen.parser.TransferCheckedWithFeeDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                if (object.feeAmount != null)
                    if ($util.Long)
                        (message.feeAmount = $util.Long.fromValue(object.feeAmount)).unsigned = true;
                    else if (typeof object.feeAmount === "string")
                        message.feeAmount = parseInt(object.feeAmount, 10);
                    else if (typeof object.feeAmount === "number")
                        message.feeAmount = object.feeAmount;
                    else if (typeof object.feeAmount === "object")
                        message.feeAmount = new $util.LongBits(object.feeAmount.low >>> 0, object.feeAmount.high >>> 0).toNumber(true);
                if (object.decimals != null)
                    if ($util.Long)
                        (message.decimals = $util.Long.fromValue(object.decimals)).unsigned = true;
                    else if (typeof object.decimals === "string")
                        message.decimals = parseInt(object.decimals, 10);
                    else if (typeof object.decimals === "number")
                        message.decimals = object.decimals;
                    else if (typeof object.decimals === "object")
                        message.decimals = new $util.LongBits(object.decimals.low >>> 0, object.decimals.high >>> 0).toNumber(true);
                return message;
            };

            TransferCheckedWithFeeDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.feeAmount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.feeAmount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.decimals = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.decimals = options.longs === String ? "0" : 0;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                if (message.feeAmount != null && message.hasOwnProperty("feeAmount"))
                    if (typeof message.feeAmount === "number")
                        object.feeAmount = options.longs === String ? String(message.feeAmount) : message.feeAmount;
                    else
                        object.feeAmount = options.longs === String ? $util.Long.prototype.toString.call(message.feeAmount) : options.longs === Number ? new $util.LongBits(message.feeAmount.low >>> 0, message.feeAmount.high >>> 0).toNumber(true) : message.feeAmount;
                if (message.decimals != null && message.hasOwnProperty("decimals"))
                    if (typeof message.decimals === "number")
                        object.decimals = options.longs === String ? String(message.decimals) : message.decimals;
                    else
                        object.decimals = options.longs === String ? $util.Long.prototype.toString.call(message.decimals) : options.longs === Number ? new $util.LongBits(message.decimals.low >>> 0, message.decimals.high >>> 0).toNumber(true) : message.decimals;
                return object;
            };

            TransferCheckedWithFeeDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferCheckedWithFeeDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferCheckedWithFeeDataProto";
            };

            return TransferCheckedWithFeeDataProto;
        })();

        parser.TransferCheckedWithFeeIxProto = (function() {

            function TransferCheckedWithFeeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferCheckedWithFeeIxProto.prototype.accounts = null;
            TransferCheckedWithFeeIxProto.prototype.data = null;

            TransferCheckedWithFeeIxProto.create = function create(properties) {
                return new TransferCheckedWithFeeIxProto(properties);
            };

            TransferCheckedWithFeeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.TransferCheckedWithFeeAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.TransferCheckedWithFeeDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            TransferCheckedWithFeeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferCheckedWithFeeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferCheckedWithFeeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.TransferCheckedWithFeeAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.TransferCheckedWithFeeDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferCheckedWithFeeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferCheckedWithFeeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.TransferCheckedWithFeeAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.TransferCheckedWithFeeDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            TransferCheckedWithFeeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferCheckedWithFeeIxProto)
                    return object;
                var message = new $root.vixen.parser.TransferCheckedWithFeeIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.TransferCheckedWithFeeIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.TransferCheckedWithFeeAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.TransferCheckedWithFeeIxProto.data: object expected");
                    message.data = $root.vixen.parser.TransferCheckedWithFeeDataProto.fromObject(object.data);
                }
                return message;
            };

            TransferCheckedWithFeeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.TransferCheckedWithFeeAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.TransferCheckedWithFeeDataProto.toObject(message.data, options);
                return object;
            };

            TransferCheckedWithFeeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferCheckedWithFeeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferCheckedWithFeeIxProto";
            };

            return TransferCheckedWithFeeIxProto;
        })();

        parser.InitializeTransferFeeConfigAccountsProto = (function() {

            function InitializeTransferFeeConfigAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeTransferFeeConfigAccountsProto.prototype.mint = "";

            InitializeTransferFeeConfigAccountsProto.create = function create(properties) {
                return new InitializeTransferFeeConfigAccountsProto(properties);
            };

            InitializeTransferFeeConfigAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            InitializeTransferFeeConfigAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeTransferFeeConfigAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeTransferFeeConfigAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeTransferFeeConfigAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeTransferFeeConfigAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            InitializeTransferFeeConfigAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeTransferFeeConfigAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeTransferFeeConfigAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            InitializeTransferFeeConfigAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            InitializeTransferFeeConfigAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeTransferFeeConfigAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeTransferFeeConfigAccountsProto";
            };

            return InitializeTransferFeeConfigAccountsProto;
        })();

        parser.InitializeTransferFeeConfigDataProto = (function() {

            function InitializeTransferFeeConfigDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeTransferFeeConfigDataProto.prototype.transferFeeConfigAuthority = null;
            InitializeTransferFeeConfigDataProto.prototype.withdrawWithheldAuthority = null;
            InitializeTransferFeeConfigDataProto.prototype.transferFeeBasisPoints = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            InitializeTransferFeeConfigDataProto.prototype.maximumFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(InitializeTransferFeeConfigDataProto.prototype, "_transferFeeConfigAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["transferFeeConfigAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(InitializeTransferFeeConfigDataProto.prototype, "_withdrawWithheldAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["withdrawWithheldAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            InitializeTransferFeeConfigDataProto.create = function create(properties) {
                return new InitializeTransferFeeConfigDataProto(properties);
            };

            InitializeTransferFeeConfigDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.transferFeeConfigAuthority != null && Object.hasOwnProperty.call(message, "transferFeeConfigAuthority"))
                    writer.uint32(10).string(message.transferFeeConfigAuthority);
                if (message.withdrawWithheldAuthority != null && Object.hasOwnProperty.call(message, "withdrawWithheldAuthority"))
                    writer.uint32(18).string(message.withdrawWithheldAuthority);
                if (message.transferFeeBasisPoints != null && Object.hasOwnProperty.call(message, "transferFeeBasisPoints"))
                    writer.uint32(24).uint64(message.transferFeeBasisPoints);
                if (message.maximumFee != null && Object.hasOwnProperty.call(message, "maximumFee"))
                    writer.uint32(32).uint64(message.maximumFee);
                return writer;
            };

            InitializeTransferFeeConfigDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeTransferFeeConfigDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeTransferFeeConfigDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.transferFeeConfigAuthority = reader.string();
                            break;
                        }
                    case 2: {
                            message.withdrawWithheldAuthority = reader.string();
                            break;
                        }
                    case 3: {
                            message.transferFeeBasisPoints = reader.uint64();
                            break;
                        }
                    case 4: {
                            message.maximumFee = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeTransferFeeConfigDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeTransferFeeConfigDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.transferFeeConfigAuthority != null && message.hasOwnProperty("transferFeeConfigAuthority")) {
                    properties._transferFeeConfigAuthority = 1;
                    if (!$util.isString(message.transferFeeConfigAuthority))
                        return "transferFeeConfigAuthority: string expected";
                }
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority")) {
                    properties._withdrawWithheldAuthority = 1;
                    if (!$util.isString(message.withdrawWithheldAuthority))
                        return "withdrawWithheldAuthority: string expected";
                }
                if (message.transferFeeBasisPoints != null && message.hasOwnProperty("transferFeeBasisPoints"))
                    if (!$util.isInteger(message.transferFeeBasisPoints) && !(message.transferFeeBasisPoints && $util.isInteger(message.transferFeeBasisPoints.low) && $util.isInteger(message.transferFeeBasisPoints.high)))
                        return "transferFeeBasisPoints: integer|Long expected";
                if (message.maximumFee != null && message.hasOwnProperty("maximumFee"))
                    if (!$util.isInteger(message.maximumFee) && !(message.maximumFee && $util.isInteger(message.maximumFee.low) && $util.isInteger(message.maximumFee.high)))
                        return "maximumFee: integer|Long expected";
                return null;
            };

            InitializeTransferFeeConfigDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeTransferFeeConfigDataProto)
                    return object;
                var message = new $root.vixen.parser.InitializeTransferFeeConfigDataProto();
                if (object.transferFeeConfigAuthority != null)
                    message.transferFeeConfigAuthority = String(object.transferFeeConfigAuthority);
                if (object.withdrawWithheldAuthority != null)
                    message.withdrawWithheldAuthority = String(object.withdrawWithheldAuthority);
                if (object.transferFeeBasisPoints != null)
                    if ($util.Long)
                        (message.transferFeeBasisPoints = $util.Long.fromValue(object.transferFeeBasisPoints)).unsigned = true;
                    else if (typeof object.transferFeeBasisPoints === "string")
                        message.transferFeeBasisPoints = parseInt(object.transferFeeBasisPoints, 10);
                    else if (typeof object.transferFeeBasisPoints === "number")
                        message.transferFeeBasisPoints = object.transferFeeBasisPoints;
                    else if (typeof object.transferFeeBasisPoints === "object")
                        message.transferFeeBasisPoints = new $util.LongBits(object.transferFeeBasisPoints.low >>> 0, object.transferFeeBasisPoints.high >>> 0).toNumber(true);
                if (object.maximumFee != null)
                    if ($util.Long)
                        (message.maximumFee = $util.Long.fromValue(object.maximumFee)).unsigned = true;
                    else if (typeof object.maximumFee === "string")
                        message.maximumFee = parseInt(object.maximumFee, 10);
                    else if (typeof object.maximumFee === "number")
                        message.maximumFee = object.maximumFee;
                    else if (typeof object.maximumFee === "object")
                        message.maximumFee = new $util.LongBits(object.maximumFee.low >>> 0, object.maximumFee.high >>> 0).toNumber(true);
                return message;
            };

            InitializeTransferFeeConfigDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.transferFeeBasisPoints = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.transferFeeBasisPoints = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.maximumFee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.maximumFee = options.longs === String ? "0" : 0;
                }
                if (message.transferFeeConfigAuthority != null && message.hasOwnProperty("transferFeeConfigAuthority")) {
                    object.transferFeeConfigAuthority = message.transferFeeConfigAuthority;
                    if (options.oneofs)
                        object._transferFeeConfigAuthority = "transferFeeConfigAuthority";
                }
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority")) {
                    object.withdrawWithheldAuthority = message.withdrawWithheldAuthority;
                    if (options.oneofs)
                        object._withdrawWithheldAuthority = "withdrawWithheldAuthority";
                }
                if (message.transferFeeBasisPoints != null && message.hasOwnProperty("transferFeeBasisPoints"))
                    if (typeof message.transferFeeBasisPoints === "number")
                        object.transferFeeBasisPoints = options.longs === String ? String(message.transferFeeBasisPoints) : message.transferFeeBasisPoints;
                    else
                        object.transferFeeBasisPoints = options.longs === String ? $util.Long.prototype.toString.call(message.transferFeeBasisPoints) : options.longs === Number ? new $util.LongBits(message.transferFeeBasisPoints.low >>> 0, message.transferFeeBasisPoints.high >>> 0).toNumber(true) : message.transferFeeBasisPoints;
                if (message.maximumFee != null && message.hasOwnProperty("maximumFee"))
                    if (typeof message.maximumFee === "number")
                        object.maximumFee = options.longs === String ? String(message.maximumFee) : message.maximumFee;
                    else
                        object.maximumFee = options.longs === String ? $util.Long.prototype.toString.call(message.maximumFee) : options.longs === Number ? new $util.LongBits(message.maximumFee.low >>> 0, message.maximumFee.high >>> 0).toNumber(true) : message.maximumFee;
                return object;
            };

            InitializeTransferFeeConfigDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeTransferFeeConfigDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeTransferFeeConfigDataProto";
            };

            return InitializeTransferFeeConfigDataProto;
        })();

        parser.InitializeTransferFeeConfigIxProto = (function() {

            function InitializeTransferFeeConfigIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeTransferFeeConfigIxProto.prototype.accounts = null;
            InitializeTransferFeeConfigIxProto.prototype.data = null;

            InitializeTransferFeeConfigIxProto.create = function create(properties) {
                return new InitializeTransferFeeConfigIxProto(properties);
            };

            InitializeTransferFeeConfigIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeTransferFeeConfigAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializeTransferFeeConfigDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializeTransferFeeConfigIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeTransferFeeConfigIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeTransferFeeConfigIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeTransferFeeConfigAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializeTransferFeeConfigDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeTransferFeeConfigIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeTransferFeeConfigIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeTransferFeeConfigAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializeTransferFeeConfigDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializeTransferFeeConfigIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeTransferFeeConfigIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeTransferFeeConfigIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeTransferFeeConfigIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeTransferFeeConfigAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializeTransferFeeConfigIxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializeTransferFeeConfigDataProto.fromObject(object.data);
                }
                return message;
            };

            InitializeTransferFeeConfigIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeTransferFeeConfigAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializeTransferFeeConfigDataProto.toObject(message.data, options);
                return object;
            };

            InitializeTransferFeeConfigIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeTransferFeeConfigIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeTransferFeeConfigIxProto";
            };

            return InitializeTransferFeeConfigIxProto;
        })();

        parser.WithdrawWithheldTokensFromMintAccountsProto = (function() {

            function WithdrawWithheldTokensFromMintAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WithdrawWithheldTokensFromMintAccountsProto.prototype.mint = "";
            WithdrawWithheldTokensFromMintAccountsProto.prototype.feeRecipient = "";
            WithdrawWithheldTokensFromMintAccountsProto.prototype.withdrawWithheldAuthority = "";
            WithdrawWithheldTokensFromMintAccountsProto.prototype.multisigSigners = $util.emptyArray;

            WithdrawWithheldTokensFromMintAccountsProto.create = function create(properties) {
                return new WithdrawWithheldTokensFromMintAccountsProto(properties);
            };

            WithdrawWithheldTokensFromMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.feeRecipient != null && Object.hasOwnProperty.call(message, "feeRecipient"))
                    writer.uint32(18).string(message.feeRecipient);
                if (message.withdrawWithheldAuthority != null && Object.hasOwnProperty.call(message, "withdrawWithheldAuthority"))
                    writer.uint32(26).string(message.withdrawWithheldAuthority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            WithdrawWithheldTokensFromMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WithdrawWithheldTokensFromMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WithdrawWithheldTokensFromMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.feeRecipient = reader.string();
                            break;
                        }
                    case 3: {
                            message.withdrawWithheldAuthority = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WithdrawWithheldTokensFromMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WithdrawWithheldTokensFromMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.feeRecipient != null && message.hasOwnProperty("feeRecipient"))
                    if (!$util.isString(message.feeRecipient))
                        return "feeRecipient: string expected";
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    if (!$util.isString(message.withdrawWithheldAuthority))
                        return "withdrawWithheldAuthority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            WithdrawWithheldTokensFromMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WithdrawWithheldTokensFromMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.WithdrawWithheldTokensFromMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.feeRecipient != null)
                    message.feeRecipient = String(object.feeRecipient);
                if (object.withdrawWithheldAuthority != null)
                    message.withdrawWithheldAuthority = String(object.withdrawWithheldAuthority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.WithdrawWithheldTokensFromMintAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            WithdrawWithheldTokensFromMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.mint = "";
                    object.feeRecipient = "";
                    object.withdrawWithheldAuthority = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.feeRecipient != null && message.hasOwnProperty("feeRecipient"))
                    object.feeRecipient = message.feeRecipient;
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    object.withdrawWithheldAuthority = message.withdrawWithheldAuthority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            WithdrawWithheldTokensFromMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WithdrawWithheldTokensFromMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WithdrawWithheldTokensFromMintAccountsProto";
            };

            return WithdrawWithheldTokensFromMintAccountsProto;
        })();

        parser.WithdrawWithheldTokensFromMintIxProto = (function() {

            function WithdrawWithheldTokensFromMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WithdrawWithheldTokensFromMintIxProto.prototype.accounts = null;

            WithdrawWithheldTokensFromMintIxProto.create = function create(properties) {
                return new WithdrawWithheldTokensFromMintIxProto(properties);
            };

            WithdrawWithheldTokensFromMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.WithdrawWithheldTokensFromMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            WithdrawWithheldTokensFromMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WithdrawWithheldTokensFromMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WithdrawWithheldTokensFromMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.WithdrawWithheldTokensFromMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WithdrawWithheldTokensFromMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WithdrawWithheldTokensFromMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.WithdrawWithheldTokensFromMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            WithdrawWithheldTokensFromMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WithdrawWithheldTokensFromMintIxProto)
                    return object;
                var message = new $root.vixen.parser.WithdrawWithheldTokensFromMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.WithdrawWithheldTokensFromMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.WithdrawWithheldTokensFromMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            WithdrawWithheldTokensFromMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.WithdrawWithheldTokensFromMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            WithdrawWithheldTokensFromMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WithdrawWithheldTokensFromMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WithdrawWithheldTokensFromMintIxProto";
            };

            return WithdrawWithheldTokensFromMintIxProto;
        })();

        parser.WithdrawWithheldTokensFromAccountsAccountsProto = (function() {

            function WithdrawWithheldTokensFromAccountsAccountsProto(properties) {
                this.sourceAccounts = [];
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WithdrawWithheldTokensFromAccountsAccountsProto.prototype.mint = "";
            WithdrawWithheldTokensFromAccountsAccountsProto.prototype.feeRecipient = "";
            WithdrawWithheldTokensFromAccountsAccountsProto.prototype.withdrawWithheldAuthority = "";
            WithdrawWithheldTokensFromAccountsAccountsProto.prototype.sourceAccounts = $util.emptyArray;
            WithdrawWithheldTokensFromAccountsAccountsProto.prototype.multisigSigners = $util.emptyArray;

            WithdrawWithheldTokensFromAccountsAccountsProto.create = function create(properties) {
                return new WithdrawWithheldTokensFromAccountsAccountsProto(properties);
            };

            WithdrawWithheldTokensFromAccountsAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.feeRecipient != null && Object.hasOwnProperty.call(message, "feeRecipient"))
                    writer.uint32(18).string(message.feeRecipient);
                if (message.withdrawWithheldAuthority != null && Object.hasOwnProperty.call(message, "withdrawWithheldAuthority"))
                    writer.uint32(26).string(message.withdrawWithheldAuthority);
                if (message.sourceAccounts != null && message.sourceAccounts.length)
                    for (var i = 0; i < message.sourceAccounts.length; ++i)
                        writer.uint32(34).string(message.sourceAccounts[i]);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(42).string(message.multisigSigners[i]);
                return writer;
            };

            WithdrawWithheldTokensFromAccountsAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WithdrawWithheldTokensFromAccountsAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.feeRecipient = reader.string();
                            break;
                        }
                    case 3: {
                            message.withdrawWithheldAuthority = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.sourceAccounts && message.sourceAccounts.length))
                                message.sourceAccounts = [];
                            message.sourceAccounts.push(reader.string());
                            break;
                        }
                    case 5: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WithdrawWithheldTokensFromAccountsAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WithdrawWithheldTokensFromAccountsAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.feeRecipient != null && message.hasOwnProperty("feeRecipient"))
                    if (!$util.isString(message.feeRecipient))
                        return "feeRecipient: string expected";
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    if (!$util.isString(message.withdrawWithheldAuthority))
                        return "withdrawWithheldAuthority: string expected";
                if (message.sourceAccounts != null && message.hasOwnProperty("sourceAccounts")) {
                    if (!Array.isArray(message.sourceAccounts))
                        return "sourceAccounts: array expected";
                    for (var i = 0; i < message.sourceAccounts.length; ++i)
                        if (!$util.isString(message.sourceAccounts[i]))
                            return "sourceAccounts: string[] expected";
                }
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            WithdrawWithheldTokensFromAccountsAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto)
                    return object;
                var message = new $root.vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.feeRecipient != null)
                    message.feeRecipient = String(object.feeRecipient);
                if (object.withdrawWithheldAuthority != null)
                    message.withdrawWithheldAuthority = String(object.withdrawWithheldAuthority);
                if (object.sourceAccounts) {
                    if (!Array.isArray(object.sourceAccounts))
                        throw TypeError(".vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto.sourceAccounts: array expected");
                    message.sourceAccounts = [];
                    for (var i = 0; i < object.sourceAccounts.length; ++i)
                        message.sourceAccounts[i] = String(object.sourceAccounts[i]);
                }
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            WithdrawWithheldTokensFromAccountsAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.sourceAccounts = [];
                    object.multisigSigners = [];
                }
                if (options.defaults) {
                    object.mint = "";
                    object.feeRecipient = "";
                    object.withdrawWithheldAuthority = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.feeRecipient != null && message.hasOwnProperty("feeRecipient"))
                    object.feeRecipient = message.feeRecipient;
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    object.withdrawWithheldAuthority = message.withdrawWithheldAuthority;
                if (message.sourceAccounts && message.sourceAccounts.length) {
                    object.sourceAccounts = [];
                    for (var j = 0; j < message.sourceAccounts.length; ++j)
                        object.sourceAccounts[j] = message.sourceAccounts[j];
                }
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            WithdrawWithheldTokensFromAccountsAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WithdrawWithheldTokensFromAccountsAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto";
            };

            return WithdrawWithheldTokensFromAccountsAccountsProto;
        })();

        parser.WithdrawWithheldTokensFromAccountsDataProto = (function() {

            function WithdrawWithheldTokensFromAccountsDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WithdrawWithheldTokensFromAccountsDataProto.prototype.numTokenAccounts = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            WithdrawWithheldTokensFromAccountsDataProto.create = function create(properties) {
                return new WithdrawWithheldTokensFromAccountsDataProto(properties);
            };

            WithdrawWithheldTokensFromAccountsDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.numTokenAccounts != null && Object.hasOwnProperty.call(message, "numTokenAccounts"))
                    writer.uint32(8).uint64(message.numTokenAccounts);
                return writer;
            };

            WithdrawWithheldTokensFromAccountsDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WithdrawWithheldTokensFromAccountsDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WithdrawWithheldTokensFromAccountsDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.numTokenAccounts = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WithdrawWithheldTokensFromAccountsDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WithdrawWithheldTokensFromAccountsDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.numTokenAccounts != null && message.hasOwnProperty("numTokenAccounts"))
                    if (!$util.isInteger(message.numTokenAccounts) && !(message.numTokenAccounts && $util.isInteger(message.numTokenAccounts.low) && $util.isInteger(message.numTokenAccounts.high)))
                        return "numTokenAccounts: integer|Long expected";
                return null;
            };

            WithdrawWithheldTokensFromAccountsDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WithdrawWithheldTokensFromAccountsDataProto)
                    return object;
                var message = new $root.vixen.parser.WithdrawWithheldTokensFromAccountsDataProto();
                if (object.numTokenAccounts != null)
                    if ($util.Long)
                        (message.numTokenAccounts = $util.Long.fromValue(object.numTokenAccounts)).unsigned = true;
                    else if (typeof object.numTokenAccounts === "string")
                        message.numTokenAccounts = parseInt(object.numTokenAccounts, 10);
                    else if (typeof object.numTokenAccounts === "number")
                        message.numTokenAccounts = object.numTokenAccounts;
                    else if (typeof object.numTokenAccounts === "object")
                        message.numTokenAccounts = new $util.LongBits(object.numTokenAccounts.low >>> 0, object.numTokenAccounts.high >>> 0).toNumber(true);
                return message;
            };

            WithdrawWithheldTokensFromAccountsDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.numTokenAccounts = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.numTokenAccounts = options.longs === String ? "0" : 0;
                if (message.numTokenAccounts != null && message.hasOwnProperty("numTokenAccounts"))
                    if (typeof message.numTokenAccounts === "number")
                        object.numTokenAccounts = options.longs === String ? String(message.numTokenAccounts) : message.numTokenAccounts;
                    else
                        object.numTokenAccounts = options.longs === String ? $util.Long.prototype.toString.call(message.numTokenAccounts) : options.longs === Number ? new $util.LongBits(message.numTokenAccounts.low >>> 0, message.numTokenAccounts.high >>> 0).toNumber(true) : message.numTokenAccounts;
                return object;
            };

            WithdrawWithheldTokensFromAccountsDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WithdrawWithheldTokensFromAccountsDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WithdrawWithheldTokensFromAccountsDataProto";
            };

            return WithdrawWithheldTokensFromAccountsDataProto;
        })();

        parser.WithdrawWithheldTokensFromAccountsIxProto = (function() {

            function WithdrawWithheldTokensFromAccountsIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WithdrawWithheldTokensFromAccountsIxProto.prototype.accounts = null;
            WithdrawWithheldTokensFromAccountsIxProto.prototype.data = null;

            WithdrawWithheldTokensFromAccountsIxProto.create = function create(properties) {
                return new WithdrawWithheldTokensFromAccountsIxProto(properties);
            };

            WithdrawWithheldTokensFromAccountsIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.WithdrawWithheldTokensFromAccountsDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            WithdrawWithheldTokensFromAccountsIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WithdrawWithheldTokensFromAccountsIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WithdrawWithheldTokensFromAccountsIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.WithdrawWithheldTokensFromAccountsDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WithdrawWithheldTokensFromAccountsIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WithdrawWithheldTokensFromAccountsIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.WithdrawWithheldTokensFromAccountsDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            WithdrawWithheldTokensFromAccountsIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WithdrawWithheldTokensFromAccountsIxProto)
                    return object;
                var message = new $root.vixen.parser.WithdrawWithheldTokensFromAccountsIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.WithdrawWithheldTokensFromAccountsIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.WithdrawWithheldTokensFromAccountsIxProto.data: object expected");
                    message.data = $root.vixen.parser.WithdrawWithheldTokensFromAccountsDataProto.fromObject(object.data);
                }
                return message;
            };

            WithdrawWithheldTokensFromAccountsIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.WithdrawWithheldTokensFromAccountsAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.WithdrawWithheldTokensFromAccountsDataProto.toObject(message.data, options);
                return object;
            };

            WithdrawWithheldTokensFromAccountsIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WithdrawWithheldTokensFromAccountsIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WithdrawWithheldTokensFromAccountsIxProto";
            };

            return WithdrawWithheldTokensFromAccountsIxProto;
        })();

        parser.HarvestWithheldTokensToMintAccountsProto = (function() {

            function HarvestWithheldTokensToMintAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            HarvestWithheldTokensToMintAccountsProto.prototype.mint = "";
            HarvestWithheldTokensToMintAccountsProto.prototype.mintFeeOwner = "";

            HarvestWithheldTokensToMintAccountsProto.create = function create(properties) {
                return new HarvestWithheldTokensToMintAccountsProto(properties);
            };

            HarvestWithheldTokensToMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.mintFeeOwner != null && Object.hasOwnProperty.call(message, "mintFeeOwner"))
                    writer.uint32(18).string(message.mintFeeOwner);
                return writer;
            };

            HarvestWithheldTokensToMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            HarvestWithheldTokensToMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.HarvestWithheldTokensToMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.mintFeeOwner = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            HarvestWithheldTokensToMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            HarvestWithheldTokensToMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.mintFeeOwner != null && message.hasOwnProperty("mintFeeOwner"))
                    if (!$util.isString(message.mintFeeOwner))
                        return "mintFeeOwner: string expected";
                return null;
            };

            HarvestWithheldTokensToMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.HarvestWithheldTokensToMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.HarvestWithheldTokensToMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.mintFeeOwner != null)
                    message.mintFeeOwner = String(object.mintFeeOwner);
                return message;
            };

            HarvestWithheldTokensToMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.mint = "";
                    object.mintFeeOwner = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.mintFeeOwner != null && message.hasOwnProperty("mintFeeOwner"))
                    object.mintFeeOwner = message.mintFeeOwner;
                return object;
            };

            HarvestWithheldTokensToMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            HarvestWithheldTokensToMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.HarvestWithheldTokensToMintAccountsProto";
            };

            return HarvestWithheldTokensToMintAccountsProto;
        })();

        parser.HarvestWithheldTokensToMintIxProto = (function() {

            function HarvestWithheldTokensToMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            HarvestWithheldTokensToMintIxProto.prototype.accounts = null;

            HarvestWithheldTokensToMintIxProto.create = function create(properties) {
                return new HarvestWithheldTokensToMintIxProto(properties);
            };

            HarvestWithheldTokensToMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.HarvestWithheldTokensToMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            HarvestWithheldTokensToMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            HarvestWithheldTokensToMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.HarvestWithheldTokensToMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.HarvestWithheldTokensToMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            HarvestWithheldTokensToMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            HarvestWithheldTokensToMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.HarvestWithheldTokensToMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            HarvestWithheldTokensToMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.HarvestWithheldTokensToMintIxProto)
                    return object;
                var message = new $root.vixen.parser.HarvestWithheldTokensToMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.HarvestWithheldTokensToMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.HarvestWithheldTokensToMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            HarvestWithheldTokensToMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.HarvestWithheldTokensToMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            HarvestWithheldTokensToMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            HarvestWithheldTokensToMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.HarvestWithheldTokensToMintIxProto";
            };

            return HarvestWithheldTokensToMintIxProto;
        })();

        parser.SetTransferFeeAccountsProto = (function() {

            function SetTransferFeeAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SetTransferFeeAccountsProto.prototype.mint = "";
            SetTransferFeeAccountsProto.prototype.mintFeeAccOwner = "";
            SetTransferFeeAccountsProto.prototype.multisigSigners = $util.emptyArray;

            SetTransferFeeAccountsProto.create = function create(properties) {
                return new SetTransferFeeAccountsProto(properties);
            };

            SetTransferFeeAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.mintFeeAccOwner != null && Object.hasOwnProperty.call(message, "mintFeeAccOwner"))
                    writer.uint32(18).string(message.mintFeeAccOwner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            SetTransferFeeAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SetTransferFeeAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.SetTransferFeeAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.mintFeeAccOwner = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SetTransferFeeAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SetTransferFeeAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.mintFeeAccOwner != null && message.hasOwnProperty("mintFeeAccOwner"))
                    if (!$util.isString(message.mintFeeAccOwner))
                        return "mintFeeAccOwner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            SetTransferFeeAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.SetTransferFeeAccountsProto)
                    return object;
                var message = new $root.vixen.parser.SetTransferFeeAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.mintFeeAccOwner != null)
                    message.mintFeeAccOwner = String(object.mintFeeAccOwner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.SetTransferFeeAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            SetTransferFeeAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.mint = "";
                    object.mintFeeAccOwner = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.mintFeeAccOwner != null && message.hasOwnProperty("mintFeeAccOwner"))
                    object.mintFeeAccOwner = message.mintFeeAccOwner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            SetTransferFeeAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SetTransferFeeAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.SetTransferFeeAccountsProto";
            };

            return SetTransferFeeAccountsProto;
        })();

        parser.SetTransferFeeDataProto = (function() {

            function SetTransferFeeDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SetTransferFeeDataProto.prototype.transferFeeBasisPoints = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            SetTransferFeeDataProto.prototype.maximumFee = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            SetTransferFeeDataProto.create = function create(properties) {
                return new SetTransferFeeDataProto(properties);
            };

            SetTransferFeeDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.transferFeeBasisPoints != null && Object.hasOwnProperty.call(message, "transferFeeBasisPoints"))
                    writer.uint32(8).uint64(message.transferFeeBasisPoints);
                if (message.maximumFee != null && Object.hasOwnProperty.call(message, "maximumFee"))
                    writer.uint32(16).uint64(message.maximumFee);
                return writer;
            };

            SetTransferFeeDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SetTransferFeeDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.SetTransferFeeDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.transferFeeBasisPoints = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.maximumFee = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SetTransferFeeDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SetTransferFeeDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.transferFeeBasisPoints != null && message.hasOwnProperty("transferFeeBasisPoints"))
                    if (!$util.isInteger(message.transferFeeBasisPoints) && !(message.transferFeeBasisPoints && $util.isInteger(message.transferFeeBasisPoints.low) && $util.isInteger(message.transferFeeBasisPoints.high)))
                        return "transferFeeBasisPoints: integer|Long expected";
                if (message.maximumFee != null && message.hasOwnProperty("maximumFee"))
                    if (!$util.isInteger(message.maximumFee) && !(message.maximumFee && $util.isInteger(message.maximumFee.low) && $util.isInteger(message.maximumFee.high)))
                        return "maximumFee: integer|Long expected";
                return null;
            };

            SetTransferFeeDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.SetTransferFeeDataProto)
                    return object;
                var message = new $root.vixen.parser.SetTransferFeeDataProto();
                if (object.transferFeeBasisPoints != null)
                    if ($util.Long)
                        (message.transferFeeBasisPoints = $util.Long.fromValue(object.transferFeeBasisPoints)).unsigned = true;
                    else if (typeof object.transferFeeBasisPoints === "string")
                        message.transferFeeBasisPoints = parseInt(object.transferFeeBasisPoints, 10);
                    else if (typeof object.transferFeeBasisPoints === "number")
                        message.transferFeeBasisPoints = object.transferFeeBasisPoints;
                    else if (typeof object.transferFeeBasisPoints === "object")
                        message.transferFeeBasisPoints = new $util.LongBits(object.transferFeeBasisPoints.low >>> 0, object.transferFeeBasisPoints.high >>> 0).toNumber(true);
                if (object.maximumFee != null)
                    if ($util.Long)
                        (message.maximumFee = $util.Long.fromValue(object.maximumFee)).unsigned = true;
                    else if (typeof object.maximumFee === "string")
                        message.maximumFee = parseInt(object.maximumFee, 10);
                    else if (typeof object.maximumFee === "number")
                        message.maximumFee = object.maximumFee;
                    else if (typeof object.maximumFee === "object")
                        message.maximumFee = new $util.LongBits(object.maximumFee.low >>> 0, object.maximumFee.high >>> 0).toNumber(true);
                return message;
            };

            SetTransferFeeDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.transferFeeBasisPoints = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.transferFeeBasisPoints = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.maximumFee = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.maximumFee = options.longs === String ? "0" : 0;
                }
                if (message.transferFeeBasisPoints != null && message.hasOwnProperty("transferFeeBasisPoints"))
                    if (typeof message.transferFeeBasisPoints === "number")
                        object.transferFeeBasisPoints = options.longs === String ? String(message.transferFeeBasisPoints) : message.transferFeeBasisPoints;
                    else
                        object.transferFeeBasisPoints = options.longs === String ? $util.Long.prototype.toString.call(message.transferFeeBasisPoints) : options.longs === Number ? new $util.LongBits(message.transferFeeBasisPoints.low >>> 0, message.transferFeeBasisPoints.high >>> 0).toNumber(true) : message.transferFeeBasisPoints;
                if (message.maximumFee != null && message.hasOwnProperty("maximumFee"))
                    if (typeof message.maximumFee === "number")
                        object.maximumFee = options.longs === String ? String(message.maximumFee) : message.maximumFee;
                    else
                        object.maximumFee = options.longs === String ? $util.Long.prototype.toString.call(message.maximumFee) : options.longs === Number ? new $util.LongBits(message.maximumFee.low >>> 0, message.maximumFee.high >>> 0).toNumber(true) : message.maximumFee;
                return object;
            };

            SetTransferFeeDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SetTransferFeeDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.SetTransferFeeDataProto";
            };

            return SetTransferFeeDataProto;
        })();

        parser.SetTransferFeeIxProto = (function() {

            function SetTransferFeeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            SetTransferFeeIxProto.prototype.accounts = null;
            SetTransferFeeIxProto.prototype.data = null;

            SetTransferFeeIxProto.create = function create(properties) {
                return new SetTransferFeeIxProto(properties);
            };

            SetTransferFeeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.SetTransferFeeAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.SetTransferFeeDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            SetTransferFeeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            SetTransferFeeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.SetTransferFeeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.SetTransferFeeAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.SetTransferFeeDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            SetTransferFeeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            SetTransferFeeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.SetTransferFeeAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.SetTransferFeeDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            SetTransferFeeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.SetTransferFeeIxProto)
                    return object;
                var message = new $root.vixen.parser.SetTransferFeeIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.SetTransferFeeIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.SetTransferFeeAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.SetTransferFeeIxProto.data: object expected");
                    message.data = $root.vixen.parser.SetTransferFeeDataProto.fromObject(object.data);
                }
                return message;
            };

            SetTransferFeeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.SetTransferFeeAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.SetTransferFeeDataProto.toObject(message.data, options);
                return object;
            };

            SetTransferFeeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SetTransferFeeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.SetTransferFeeIxProto";
            };

            return SetTransferFeeIxProto;
        })();

        parser.TransferFeeIxProto = (function() {

            function TransferFeeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferFeeIxProto.prototype.transferCheckedWithFeeIx = null;
            TransferFeeIxProto.prototype.initializeTransferFeeConfigIx = null;
            TransferFeeIxProto.prototype.withdrawWithheldTokensFromMintIx = null;
            TransferFeeIxProto.prototype.withdrawWithheldTokensFromAccountsIx = null;
            TransferFeeIxProto.prototype.harvestWithheldTokensToMintIx = null;
            TransferFeeIxProto.prototype.setTransferFeeIx = null;

            var $oneOfFields;

            Object.defineProperty(TransferFeeIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["transferCheckedWithFeeIx", "initializeTransferFeeConfigIx", "withdrawWithheldTokensFromMintIx", "withdrawWithheldTokensFromAccountsIx", "harvestWithheldTokensToMintIx", "setTransferFeeIx"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TransferFeeIxProto.create = function create(properties) {
                return new TransferFeeIxProto(properties);
            };

            TransferFeeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.transferCheckedWithFeeIx != null && Object.hasOwnProperty.call(message, "transferCheckedWithFeeIx"))
                    $root.vixen.parser.TransferCheckedWithFeeIxProto.encode(message.transferCheckedWithFeeIx, writer.uint32(10).fork()).ldelim();
                if (message.initializeTransferFeeConfigIx != null && Object.hasOwnProperty.call(message, "initializeTransferFeeConfigIx"))
                    $root.vixen.parser.InitializeTransferFeeConfigIxProto.encode(message.initializeTransferFeeConfigIx, writer.uint32(18).fork()).ldelim();
                if (message.withdrawWithheldTokensFromMintIx != null && Object.hasOwnProperty.call(message, "withdrawWithheldTokensFromMintIx"))
                    $root.vixen.parser.WithdrawWithheldTokensFromMintIxProto.encode(message.withdrawWithheldTokensFromMintIx, writer.uint32(26).fork()).ldelim();
                if (message.withdrawWithheldTokensFromAccountsIx != null && Object.hasOwnProperty.call(message, "withdrawWithheldTokensFromAccountsIx"))
                    $root.vixen.parser.WithdrawWithheldTokensFromAccountsIxProto.encode(message.withdrawWithheldTokensFromAccountsIx, writer.uint32(34).fork()).ldelim();
                if (message.harvestWithheldTokensToMintIx != null && Object.hasOwnProperty.call(message, "harvestWithheldTokensToMintIx"))
                    $root.vixen.parser.HarvestWithheldTokensToMintIxProto.encode(message.harvestWithheldTokensToMintIx, writer.uint32(42).fork()).ldelim();
                if (message.setTransferFeeIx != null && Object.hasOwnProperty.call(message, "setTransferFeeIx"))
                    $root.vixen.parser.SetTransferFeeIxProto.encode(message.setTransferFeeIx, writer.uint32(50).fork()).ldelim();
                return writer;
            };

            TransferFeeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferFeeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferFeeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.transferCheckedWithFeeIx = $root.vixen.parser.TransferCheckedWithFeeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.initializeTransferFeeConfigIx = $root.vixen.parser.InitializeTransferFeeConfigIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.withdrawWithheldTokensFromMintIx = $root.vixen.parser.WithdrawWithheldTokensFromMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.withdrawWithheldTokensFromAccountsIx = $root.vixen.parser.WithdrawWithheldTokensFromAccountsIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.harvestWithheldTokensToMintIx = $root.vixen.parser.HarvestWithheldTokensToMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.setTransferFeeIx = $root.vixen.parser.SetTransferFeeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferFeeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferFeeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.transferCheckedWithFeeIx != null && message.hasOwnProperty("transferCheckedWithFeeIx")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.TransferCheckedWithFeeIxProto.verify(message.transferCheckedWithFeeIx);
                        if (error)
                            return "transferCheckedWithFeeIx." + error;
                    }
                }
                if (message.initializeTransferFeeConfigIx != null && message.hasOwnProperty("initializeTransferFeeConfigIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeTransferFeeConfigIxProto.verify(message.initializeTransferFeeConfigIx);
                        if (error)
                            return "initializeTransferFeeConfigIx." + error;
                    }
                }
                if (message.withdrawWithheldTokensFromMintIx != null && message.hasOwnProperty("withdrawWithheldTokensFromMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.WithdrawWithheldTokensFromMintIxProto.verify(message.withdrawWithheldTokensFromMintIx);
                        if (error)
                            return "withdrawWithheldTokensFromMintIx." + error;
                    }
                }
                if (message.withdrawWithheldTokensFromAccountsIx != null && message.hasOwnProperty("withdrawWithheldTokensFromAccountsIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.WithdrawWithheldTokensFromAccountsIxProto.verify(message.withdrawWithheldTokensFromAccountsIx);
                        if (error)
                            return "withdrawWithheldTokensFromAccountsIx." + error;
                    }
                }
                if (message.harvestWithheldTokensToMintIx != null && message.hasOwnProperty("harvestWithheldTokensToMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.HarvestWithheldTokensToMintIxProto.verify(message.harvestWithheldTokensToMintIx);
                        if (error)
                            return "harvestWithheldTokensToMintIx." + error;
                    }
                }
                if (message.setTransferFeeIx != null && message.hasOwnProperty("setTransferFeeIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.SetTransferFeeIxProto.verify(message.setTransferFeeIx);
                        if (error)
                            return "setTransferFeeIx." + error;
                    }
                }
                return null;
            };

            TransferFeeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferFeeIxProto)
                    return object;
                var message = new $root.vixen.parser.TransferFeeIxProto();
                if (object.transferCheckedWithFeeIx != null) {
                    if (typeof object.transferCheckedWithFeeIx !== "object")
                        throw TypeError(".vixen.parser.TransferFeeIxProto.transferCheckedWithFeeIx: object expected");
                    message.transferCheckedWithFeeIx = $root.vixen.parser.TransferCheckedWithFeeIxProto.fromObject(object.transferCheckedWithFeeIx);
                }
                if (object.initializeTransferFeeConfigIx != null) {
                    if (typeof object.initializeTransferFeeConfigIx !== "object")
                        throw TypeError(".vixen.parser.TransferFeeIxProto.initializeTransferFeeConfigIx: object expected");
                    message.initializeTransferFeeConfigIx = $root.vixen.parser.InitializeTransferFeeConfigIxProto.fromObject(object.initializeTransferFeeConfigIx);
                }
                if (object.withdrawWithheldTokensFromMintIx != null) {
                    if (typeof object.withdrawWithheldTokensFromMintIx !== "object")
                        throw TypeError(".vixen.parser.TransferFeeIxProto.withdrawWithheldTokensFromMintIx: object expected");
                    message.withdrawWithheldTokensFromMintIx = $root.vixen.parser.WithdrawWithheldTokensFromMintIxProto.fromObject(object.withdrawWithheldTokensFromMintIx);
                }
                if (object.withdrawWithheldTokensFromAccountsIx != null) {
                    if (typeof object.withdrawWithheldTokensFromAccountsIx !== "object")
                        throw TypeError(".vixen.parser.TransferFeeIxProto.withdrawWithheldTokensFromAccountsIx: object expected");
                    message.withdrawWithheldTokensFromAccountsIx = $root.vixen.parser.WithdrawWithheldTokensFromAccountsIxProto.fromObject(object.withdrawWithheldTokensFromAccountsIx);
                }
                if (object.harvestWithheldTokensToMintIx != null) {
                    if (typeof object.harvestWithheldTokensToMintIx !== "object")
                        throw TypeError(".vixen.parser.TransferFeeIxProto.harvestWithheldTokensToMintIx: object expected");
                    message.harvestWithheldTokensToMintIx = $root.vixen.parser.HarvestWithheldTokensToMintIxProto.fromObject(object.harvestWithheldTokensToMintIx);
                }
                if (object.setTransferFeeIx != null) {
                    if (typeof object.setTransferFeeIx !== "object")
                        throw TypeError(".vixen.parser.TransferFeeIxProto.setTransferFeeIx: object expected");
                    message.setTransferFeeIx = $root.vixen.parser.SetTransferFeeIxProto.fromObject(object.setTransferFeeIx);
                }
                return message;
            };

            TransferFeeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.transferCheckedWithFeeIx != null && message.hasOwnProperty("transferCheckedWithFeeIx")) {
                    object.transferCheckedWithFeeIx = $root.vixen.parser.TransferCheckedWithFeeIxProto.toObject(message.transferCheckedWithFeeIx, options);
                    if (options.oneofs)
                        object.ixOneof = "transferCheckedWithFeeIx";
                }
                if (message.initializeTransferFeeConfigIx != null && message.hasOwnProperty("initializeTransferFeeConfigIx")) {
                    object.initializeTransferFeeConfigIx = $root.vixen.parser.InitializeTransferFeeConfigIxProto.toObject(message.initializeTransferFeeConfigIx, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeTransferFeeConfigIx";
                }
                if (message.withdrawWithheldTokensFromMintIx != null && message.hasOwnProperty("withdrawWithheldTokensFromMintIx")) {
                    object.withdrawWithheldTokensFromMintIx = $root.vixen.parser.WithdrawWithheldTokensFromMintIxProto.toObject(message.withdrawWithheldTokensFromMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "withdrawWithheldTokensFromMintIx";
                }
                if (message.withdrawWithheldTokensFromAccountsIx != null && message.hasOwnProperty("withdrawWithheldTokensFromAccountsIx")) {
                    object.withdrawWithheldTokensFromAccountsIx = $root.vixen.parser.WithdrawWithheldTokensFromAccountsIxProto.toObject(message.withdrawWithheldTokensFromAccountsIx, options);
                    if (options.oneofs)
                        object.ixOneof = "withdrawWithheldTokensFromAccountsIx";
                }
                if (message.harvestWithheldTokensToMintIx != null && message.hasOwnProperty("harvestWithheldTokensToMintIx")) {
                    object.harvestWithheldTokensToMintIx = $root.vixen.parser.HarvestWithheldTokensToMintIxProto.toObject(message.harvestWithheldTokensToMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "harvestWithheldTokensToMintIx";
                }
                if (message.setTransferFeeIx != null && message.hasOwnProperty("setTransferFeeIx")) {
                    object.setTransferFeeIx = $root.vixen.parser.SetTransferFeeIxProto.toObject(message.setTransferFeeIx, options);
                    if (options.oneofs)
                        object.ixOneof = "setTransferFeeIx";
                }
                return object;
            };

            TransferFeeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferFeeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferFeeIxProto";
            };

            return TransferFeeIxProto;
        })();

        parser.InitializeAccountsProto = (function() {

            function InitializeAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeAccountsProto.prototype.metadata = "";
            InitializeAccountsProto.prototype.updateAuthority = "";
            InitializeAccountsProto.prototype.mint = "";
            InitializeAccountsProto.prototype.mintAuthority = "";

            InitializeAccountsProto.create = function create(properties) {
                return new InitializeAccountsProto(properties);
            };

            InitializeAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    writer.uint32(10).string(message.metadata);
                if (message.updateAuthority != null && Object.hasOwnProperty.call(message, "updateAuthority"))
                    writer.uint32(18).string(message.updateAuthority);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(26).string(message.mint);
                if (message.mintAuthority != null && Object.hasOwnProperty.call(message, "mintAuthority"))
                    writer.uint32(34).string(message.mintAuthority);
                return writer;
            };

            InitializeAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.metadata = reader.string();
                            break;
                        }
                    case 2: {
                            message.updateAuthority = reader.string();
                            break;
                        }
                    case 3: {
                            message.mint = reader.string();
                            break;
                        }
                    case 4: {
                            message.mintAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    if (!$util.isString(message.metadata))
                        return "metadata: string expected";
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    if (!$util.isString(message.updateAuthority))
                        return "updateAuthority: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority"))
                    if (!$util.isString(message.mintAuthority))
                        return "mintAuthority: string expected";
                return null;
            };

            InitializeAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeAccountsProto();
                if (object.metadata != null)
                    message.metadata = String(object.metadata);
                if (object.updateAuthority != null)
                    message.updateAuthority = String(object.updateAuthority);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.mintAuthority != null)
                    message.mintAuthority = String(object.mintAuthority);
                return message;
            };

            InitializeAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.metadata = "";
                    object.updateAuthority = "";
                    object.mint = "";
                    object.mintAuthority = "";
                }
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = message.metadata;
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    object.updateAuthority = message.updateAuthority;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority"))
                    object.mintAuthority = message.mintAuthority;
                return object;
            };

            InitializeAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeAccountsProto";
            };

            return InitializeAccountsProto;
        })();

        parser.InitializeDataProto = (function() {

            function InitializeDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeDataProto.prototype.name = "";
            InitializeDataProto.prototype.symbol = "";
            InitializeDataProto.prototype.uri = "";

            InitializeDataProto.create = function create(properties) {
                return new InitializeDataProto(properties);
            };

            InitializeDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(10).string(message.name);
                if (message.symbol != null && Object.hasOwnProperty.call(message, "symbol"))
                    writer.uint32(18).string(message.symbol);
                if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                    writer.uint32(26).string(message.uri);
                return writer;
            };

            InitializeDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.symbol = reader.string();
                            break;
                        }
                    case 3: {
                            message.uri = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.symbol != null && message.hasOwnProperty("symbol"))
                    if (!$util.isString(message.symbol))
                        return "symbol: string expected";
                if (message.uri != null && message.hasOwnProperty("uri"))
                    if (!$util.isString(message.uri))
                        return "uri: string expected";
                return null;
            };

            InitializeDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeDataProto)
                    return object;
                var message = new $root.vixen.parser.InitializeDataProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.symbol != null)
                    message.symbol = String(object.symbol);
                if (object.uri != null)
                    message.uri = String(object.uri);
                return message;
            };

            InitializeDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.symbol = "";
                    object.uri = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.symbol != null && message.hasOwnProperty("symbol"))
                    object.symbol = message.symbol;
                if (message.uri != null && message.hasOwnProperty("uri"))
                    object.uri = message.uri;
                return object;
            };

            InitializeDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeDataProto";
            };

            return InitializeDataProto;
        })();

        parser.InitializeIxProto = (function() {

            function InitializeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeIxProto.prototype.accounts = null;
            InitializeIxProto.prototype.data = null;

            InitializeIxProto.create = function create(properties) {
                return new InitializeIxProto(properties);
            };

            InitializeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializeDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializeDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializeDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializeIxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializeDataProto.fromObject(object.data);
                }
                return message;
            };

            InitializeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializeDataProto.toObject(message.data, options);
                return object;
            };

            InitializeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeIxProto";
            };

            return InitializeIxProto;
        })();

        parser.UpdateFieldAccountsProto = (function() {

            function UpdateFieldAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateFieldAccountsProto.prototype.metadata = "";
            UpdateFieldAccountsProto.prototype.updateAuthority = "";

            UpdateFieldAccountsProto.create = function create(properties) {
                return new UpdateFieldAccountsProto(properties);
            };

            UpdateFieldAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    writer.uint32(10).string(message.metadata);
                if (message.updateAuthority != null && Object.hasOwnProperty.call(message, "updateAuthority"))
                    writer.uint32(18).string(message.updateAuthority);
                return writer;
            };

            UpdateFieldAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateFieldAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateFieldAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.metadata = reader.string();
                            break;
                        }
                    case 2: {
                            message.updateAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateFieldAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateFieldAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    if (!$util.isString(message.metadata))
                        return "metadata: string expected";
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    if (!$util.isString(message.updateAuthority))
                        return "updateAuthority: string expected";
                return null;
            };

            UpdateFieldAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateFieldAccountsProto)
                    return object;
                var message = new $root.vixen.parser.UpdateFieldAccountsProto();
                if (object.metadata != null)
                    message.metadata = String(object.metadata);
                if (object.updateAuthority != null)
                    message.updateAuthority = String(object.updateAuthority);
                return message;
            };

            UpdateFieldAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.metadata = "";
                    object.updateAuthority = "";
                }
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = message.metadata;
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    object.updateAuthority = message.updateAuthority;
                return object;
            };

            UpdateFieldAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateFieldAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateFieldAccountsProto";
            };

            return UpdateFieldAccountsProto;
        })();

        parser.UpdateFieldDataProto = (function() {

            function UpdateFieldDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateFieldDataProto.prototype.key = "";
            UpdateFieldDataProto.prototype.value = "";

            UpdateFieldDataProto.create = function create(properties) {
                return new UpdateFieldDataProto(properties);
            };

            UpdateFieldDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(10).string(message.key);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(18).string(message.value);
                return writer;
            };

            UpdateFieldDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateFieldDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateFieldDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.key = reader.string();
                            break;
                        }
                    case 2: {
                            message.value = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateFieldDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateFieldDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };

            UpdateFieldDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateFieldDataProto)
                    return object;
                var message = new $root.vixen.parser.UpdateFieldDataProto();
                if (object.key != null)
                    message.key = String(object.key);
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };

            UpdateFieldDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.key = "";
                    object.value = "";
                }
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            UpdateFieldDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateFieldDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateFieldDataProto";
            };

            return UpdateFieldDataProto;
        })();

        parser.UpdateFieldIxProto = (function() {

            function UpdateFieldIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateFieldIxProto.prototype.accounts = null;
            UpdateFieldIxProto.prototype.data = null;

            UpdateFieldIxProto.create = function create(properties) {
                return new UpdateFieldIxProto(properties);
            };

            UpdateFieldIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.UpdateFieldAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.UpdateFieldDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            UpdateFieldIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateFieldIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateFieldIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.UpdateFieldAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.UpdateFieldDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateFieldIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateFieldIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.UpdateFieldAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.UpdateFieldDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            UpdateFieldIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateFieldIxProto)
                    return object;
                var message = new $root.vixen.parser.UpdateFieldIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.UpdateFieldIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.UpdateFieldAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.UpdateFieldIxProto.data: object expected");
                    message.data = $root.vixen.parser.UpdateFieldDataProto.fromObject(object.data);
                }
                return message;
            };

            UpdateFieldIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.UpdateFieldAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.UpdateFieldDataProto.toObject(message.data, options);
                return object;
            };

            UpdateFieldIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateFieldIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateFieldIxProto";
            };

            return UpdateFieldIxProto;
        })();

        parser.RmoveKeyAccountsProto = (function() {

            function RmoveKeyAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RmoveKeyAccountsProto.prototype.metadata = "";
            RmoveKeyAccountsProto.prototype.updateAuthority = "";

            RmoveKeyAccountsProto.create = function create(properties) {
                return new RmoveKeyAccountsProto(properties);
            };

            RmoveKeyAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    writer.uint32(10).string(message.metadata);
                if (message.updateAuthority != null && Object.hasOwnProperty.call(message, "updateAuthority"))
                    writer.uint32(18).string(message.updateAuthority);
                return writer;
            };

            RmoveKeyAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RmoveKeyAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RmoveKeyAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.metadata = reader.string();
                            break;
                        }
                    case 2: {
                            message.updateAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RmoveKeyAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RmoveKeyAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    if (!$util.isString(message.metadata))
                        return "metadata: string expected";
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    if (!$util.isString(message.updateAuthority))
                        return "updateAuthority: string expected";
                return null;
            };

            RmoveKeyAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RmoveKeyAccountsProto)
                    return object;
                var message = new $root.vixen.parser.RmoveKeyAccountsProto();
                if (object.metadata != null)
                    message.metadata = String(object.metadata);
                if (object.updateAuthority != null)
                    message.updateAuthority = String(object.updateAuthority);
                return message;
            };

            RmoveKeyAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.metadata = "";
                    object.updateAuthority = "";
                }
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = message.metadata;
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    object.updateAuthority = message.updateAuthority;
                return object;
            };

            RmoveKeyAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RmoveKeyAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RmoveKeyAccountsProto";
            };

            return RmoveKeyAccountsProto;
        })();

        parser.RemoveKeyDataProto = (function() {

            function RemoveKeyDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RemoveKeyDataProto.prototype.idempotent = false;
            RemoveKeyDataProto.prototype.key = "";

            RemoveKeyDataProto.create = function create(properties) {
                return new RemoveKeyDataProto(properties);
            };

            RemoveKeyDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.idempotent != null && Object.hasOwnProperty.call(message, "idempotent"))
                    writer.uint32(8).bool(message.idempotent);
                if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                    writer.uint32(18).string(message.key);
                return writer;
            };

            RemoveKeyDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RemoveKeyDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RemoveKeyDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.idempotent = reader.bool();
                            break;
                        }
                    case 2: {
                            message.key = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RemoveKeyDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RemoveKeyDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.idempotent != null && message.hasOwnProperty("idempotent"))
                    if (typeof message.idempotent !== "boolean")
                        return "idempotent: boolean expected";
                if (message.key != null && message.hasOwnProperty("key"))
                    if (!$util.isString(message.key))
                        return "key: string expected";
                return null;
            };

            RemoveKeyDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RemoveKeyDataProto)
                    return object;
                var message = new $root.vixen.parser.RemoveKeyDataProto();
                if (object.idempotent != null)
                    message.idempotent = Boolean(object.idempotent);
                if (object.key != null)
                    message.key = String(object.key);
                return message;
            };

            RemoveKeyDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.idempotent = false;
                    object.key = "";
                }
                if (message.idempotent != null && message.hasOwnProperty("idempotent"))
                    object.idempotent = message.idempotent;
                if (message.key != null && message.hasOwnProperty("key"))
                    object.key = message.key;
                return object;
            };

            RemoveKeyDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RemoveKeyDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RemoveKeyDataProto";
            };

            return RemoveKeyDataProto;
        })();

        parser.RemoveKeyIxProto = (function() {

            function RemoveKeyIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RemoveKeyIxProto.prototype.accounts = null;
            RemoveKeyIxProto.prototype.data = null;

            RemoveKeyIxProto.create = function create(properties) {
                return new RemoveKeyIxProto(properties);
            };

            RemoveKeyIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.RmoveKeyAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.RemoveKeyDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            RemoveKeyIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RemoveKeyIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RemoveKeyIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.RmoveKeyAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.RemoveKeyDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RemoveKeyIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RemoveKeyIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.RmoveKeyAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.RemoveKeyDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            RemoveKeyIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RemoveKeyIxProto)
                    return object;
                var message = new $root.vixen.parser.RemoveKeyIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.RemoveKeyIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.RmoveKeyAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.RemoveKeyIxProto.data: object expected");
                    message.data = $root.vixen.parser.RemoveKeyDataProto.fromObject(object.data);
                }
                return message;
            };

            RemoveKeyIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.RmoveKeyAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.RemoveKeyDataProto.toObject(message.data, options);
                return object;
            };

            RemoveKeyIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RemoveKeyIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RemoveKeyIxProto";
            };

            return RemoveKeyIxProto;
        })();

        parser.UpdateAuthorityAccountsProto = (function() {

            function UpdateAuthorityAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateAuthorityAccountsProto.prototype.metadata = "";
            UpdateAuthorityAccountsProto.prototype.currentUpdateAuthority = "";

            UpdateAuthorityAccountsProto.create = function create(properties) {
                return new UpdateAuthorityAccountsProto(properties);
            };

            UpdateAuthorityAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    writer.uint32(10).string(message.metadata);
                if (message.currentUpdateAuthority != null && Object.hasOwnProperty.call(message, "currentUpdateAuthority"))
                    writer.uint32(18).string(message.currentUpdateAuthority);
                return writer;
            };

            UpdateAuthorityAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateAuthorityAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateAuthorityAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.metadata = reader.string();
                            break;
                        }
                    case 2: {
                            message.currentUpdateAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateAuthorityAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateAuthorityAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    if (!$util.isString(message.metadata))
                        return "metadata: string expected";
                if (message.currentUpdateAuthority != null && message.hasOwnProperty("currentUpdateAuthority"))
                    if (!$util.isString(message.currentUpdateAuthority))
                        return "currentUpdateAuthority: string expected";
                return null;
            };

            UpdateAuthorityAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateAuthorityAccountsProto)
                    return object;
                var message = new $root.vixen.parser.UpdateAuthorityAccountsProto();
                if (object.metadata != null)
                    message.metadata = String(object.metadata);
                if (object.currentUpdateAuthority != null)
                    message.currentUpdateAuthority = String(object.currentUpdateAuthority);
                return message;
            };

            UpdateAuthorityAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.metadata = "";
                    object.currentUpdateAuthority = "";
                }
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = message.metadata;
                if (message.currentUpdateAuthority != null && message.hasOwnProperty("currentUpdateAuthority"))
                    object.currentUpdateAuthority = message.currentUpdateAuthority;
                return object;
            };

            UpdateAuthorityAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateAuthorityAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateAuthorityAccountsProto";
            };

            return UpdateAuthorityAccountsProto;
        })();

        parser.UpdateAuthorityDataProto = (function() {

            function UpdateAuthorityDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateAuthorityDataProto.prototype.newAuthority = "";

            UpdateAuthorityDataProto.create = function create(properties) {
                return new UpdateAuthorityDataProto(properties);
            };

            UpdateAuthorityDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.newAuthority != null && Object.hasOwnProperty.call(message, "newAuthority"))
                    writer.uint32(10).string(message.newAuthority);
                return writer;
            };

            UpdateAuthorityDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateAuthorityDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateAuthorityDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.newAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateAuthorityDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateAuthorityDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.newAuthority != null && message.hasOwnProperty("newAuthority"))
                    if (!$util.isString(message.newAuthority))
                        return "newAuthority: string expected";
                return null;
            };

            UpdateAuthorityDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateAuthorityDataProto)
                    return object;
                var message = new $root.vixen.parser.UpdateAuthorityDataProto();
                if (object.newAuthority != null)
                    message.newAuthority = String(object.newAuthority);
                return message;
            };

            UpdateAuthorityDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.newAuthority = "";
                if (message.newAuthority != null && message.hasOwnProperty("newAuthority"))
                    object.newAuthority = message.newAuthority;
                return object;
            };

            UpdateAuthorityDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateAuthorityDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateAuthorityDataProto";
            };

            return UpdateAuthorityDataProto;
        })();

        parser.UpdateAuthorityIxProto = (function() {

            function UpdateAuthorityIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateAuthorityIxProto.prototype.accounts = null;
            UpdateAuthorityIxProto.prototype.data = null;

            UpdateAuthorityIxProto.create = function create(properties) {
                return new UpdateAuthorityIxProto(properties);
            };

            UpdateAuthorityIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.UpdateAuthorityAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.UpdateAuthorityDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            UpdateAuthorityIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateAuthorityIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateAuthorityIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.UpdateAuthorityAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.UpdateAuthorityDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateAuthorityIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateAuthorityIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.UpdateAuthorityAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.UpdateAuthorityDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            UpdateAuthorityIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateAuthorityIxProto)
                    return object;
                var message = new $root.vixen.parser.UpdateAuthorityIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.UpdateAuthorityIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.UpdateAuthorityAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.UpdateAuthorityIxProto.data: object expected");
                    message.data = $root.vixen.parser.UpdateAuthorityDataProto.fromObject(object.data);
                }
                return message;
            };

            UpdateAuthorityIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.UpdateAuthorityAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.UpdateAuthorityDataProto.toObject(message.data, options);
                return object;
            };

            UpdateAuthorityIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateAuthorityIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateAuthorityIxProto";
            };

            return UpdateAuthorityIxProto;
        })();

        parser.EmitAccountsProto = (function() {

            function EmitAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EmitAccountsProto.prototype.metadata = "";

            EmitAccountsProto.create = function create(properties) {
                return new EmitAccountsProto(properties);
            };

            EmitAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                    writer.uint32(10).string(message.metadata);
                return writer;
            };

            EmitAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EmitAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EmitAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.metadata = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EmitAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EmitAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    if (!$util.isString(message.metadata))
                        return "metadata: string expected";
                return null;
            };

            EmitAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EmitAccountsProto)
                    return object;
                var message = new $root.vixen.parser.EmitAccountsProto();
                if (object.metadata != null)
                    message.metadata = String(object.metadata);
                return message;
            };

            EmitAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.metadata = "";
                if (message.metadata != null && message.hasOwnProperty("metadata"))
                    object.metadata = message.metadata;
                return object;
            };

            EmitAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EmitAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EmitAccountsProto";
            };

            return EmitAccountsProto;
        })();

        parser.EmitDataProto = (function() {

            function EmitDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EmitDataProto.prototype.start = null;
            EmitDataProto.prototype.end = null;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(EmitDataProto.prototype, "_start", {
                get: $util.oneOfGetter($oneOfFields = ["start"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(EmitDataProto.prototype, "_end", {
                get: $util.oneOfGetter($oneOfFields = ["end"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            EmitDataProto.create = function create(properties) {
                return new EmitDataProto(properties);
            };

            EmitDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                    writer.uint32(8).uint64(message.start);
                if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                    writer.uint32(16).uint64(message.end);
                return writer;
            };

            EmitDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EmitDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EmitDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.start = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.end = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EmitDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EmitDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.start != null && message.hasOwnProperty("start")) {
                    properties._start = 1;
                    if (!$util.isInteger(message.start) && !(message.start && $util.isInteger(message.start.low) && $util.isInteger(message.start.high)))
                        return "start: integer|Long expected";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                    properties._end = 1;
                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))
                        return "end: integer|Long expected";
                }
                return null;
            };

            EmitDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EmitDataProto)
                    return object;
                var message = new $root.vixen.parser.EmitDataProto();
                if (object.start != null)
                    if ($util.Long)
                        (message.start = $util.Long.fromValue(object.start)).unsigned = true;
                    else if (typeof object.start === "string")
                        message.start = parseInt(object.start, 10);
                    else if (typeof object.start === "number")
                        message.start = object.start;
                    else if (typeof object.start === "object")
                        message.start = new $util.LongBits(object.start.low >>> 0, object.start.high >>> 0).toNumber(true);
                if (object.end != null)
                    if ($util.Long)
                        (message.end = $util.Long.fromValue(object.end)).unsigned = true;
                    else if (typeof object.end === "string")
                        message.end = parseInt(object.end, 10);
                    else if (typeof object.end === "number")
                        message.end = object.end;
                    else if (typeof object.end === "object")
                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber(true);
                return message;
            };

            EmitDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.start != null && message.hasOwnProperty("start")) {
                    if (typeof message.start === "number")
                        object.start = options.longs === String ? String(message.start) : message.start;
                    else
                        object.start = options.longs === String ? $util.Long.prototype.toString.call(message.start) : options.longs === Number ? new $util.LongBits(message.start.low >>> 0, message.start.high >>> 0).toNumber(true) : message.start;
                    if (options.oneofs)
                        object._start = "start";
                }
                if (message.end != null && message.hasOwnProperty("end")) {
                    if (typeof message.end === "number")
                        object.end = options.longs === String ? String(message.end) : message.end;
                    else
                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber(true) : message.end;
                    if (options.oneofs)
                        object._end = "end";
                }
                return object;
            };

            EmitDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EmitDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EmitDataProto";
            };

            return EmitDataProto;
        })();

        parser.EmitIxProto = (function() {

            function EmitIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EmitIxProto.prototype.accounts = null;
            EmitIxProto.prototype.data = null;

            EmitIxProto.create = function create(properties) {
                return new EmitIxProto(properties);
            };

            EmitIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.EmitAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.EmitDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            EmitIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EmitIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EmitIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.EmitAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.EmitDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EmitIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EmitIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.EmitAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.EmitDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            EmitIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EmitIxProto)
                    return object;
                var message = new $root.vixen.parser.EmitIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.EmitIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.EmitAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.EmitIxProto.data: object expected");
                    message.data = $root.vixen.parser.EmitDataProto.fromObject(object.data);
                }
                return message;
            };

            EmitIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.EmitAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.EmitDataProto.toObject(message.data, options);
                return object;
            };

            EmitIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EmitIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EmitIxProto";
            };

            return EmitIxProto;
        })();

        parser.TokenMetadataIxProto = (function() {

            function TokenMetadataIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenMetadataIxProto.prototype.initializeIx = null;
            TokenMetadataIxProto.prototype.updateFieldsIx = null;
            TokenMetadataIxProto.prototype.removeKeyIx = null;
            TokenMetadataIxProto.prototype.updateAuthorityIx = null;
            TokenMetadataIxProto.prototype.emitIx = null;

            var $oneOfFields;

            Object.defineProperty(TokenMetadataIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["initializeIx", "updateFieldsIx", "removeKeyIx", "updateAuthorityIx", "emitIx"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TokenMetadataIxProto.create = function create(properties) {
                return new TokenMetadataIxProto(properties);
            };

            TokenMetadataIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.initializeIx != null && Object.hasOwnProperty.call(message, "initializeIx"))
                    $root.vixen.parser.InitializeIxProto.encode(message.initializeIx, writer.uint32(10).fork()).ldelim();
                if (message.updateFieldsIx != null && Object.hasOwnProperty.call(message, "updateFieldsIx"))
                    $root.vixen.parser.UpdateFieldIxProto.encode(message.updateFieldsIx, writer.uint32(18).fork()).ldelim();
                if (message.removeKeyIx != null && Object.hasOwnProperty.call(message, "removeKeyIx"))
                    $root.vixen.parser.RemoveKeyIxProto.encode(message.removeKeyIx, writer.uint32(26).fork()).ldelim();
                if (message.updateAuthorityIx != null && Object.hasOwnProperty.call(message, "updateAuthorityIx"))
                    $root.vixen.parser.UpdateAuthorityIxProto.encode(message.updateAuthorityIx, writer.uint32(34).fork()).ldelim();
                if (message.emitIx != null && Object.hasOwnProperty.call(message, "emitIx"))
                    $root.vixen.parser.EmitIxProto.encode(message.emitIx, writer.uint32(42).fork()).ldelim();
                return writer;
            };

            TokenMetadataIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenMetadataIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenMetadataIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.initializeIx = $root.vixen.parser.InitializeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.updateFieldsIx = $root.vixen.parser.UpdateFieldIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.removeKeyIx = $root.vixen.parser.RemoveKeyIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.updateAuthorityIx = $root.vixen.parser.UpdateAuthorityIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.emitIx = $root.vixen.parser.EmitIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenMetadataIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenMetadataIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.initializeIx != null && message.hasOwnProperty("initializeIx")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeIxProto.verify(message.initializeIx);
                        if (error)
                            return "initializeIx." + error;
                    }
                }
                if (message.updateFieldsIx != null && message.hasOwnProperty("updateFieldsIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.UpdateFieldIxProto.verify(message.updateFieldsIx);
                        if (error)
                            return "updateFieldsIx." + error;
                    }
                }
                if (message.removeKeyIx != null && message.hasOwnProperty("removeKeyIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.RemoveKeyIxProto.verify(message.removeKeyIx);
                        if (error)
                            return "removeKeyIx." + error;
                    }
                }
                if (message.updateAuthorityIx != null && message.hasOwnProperty("updateAuthorityIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.UpdateAuthorityIxProto.verify(message.updateAuthorityIx);
                        if (error)
                            return "updateAuthorityIx." + error;
                    }
                }
                if (message.emitIx != null && message.hasOwnProperty("emitIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.EmitIxProto.verify(message.emitIx);
                        if (error)
                            return "emitIx." + error;
                    }
                }
                return null;
            };

            TokenMetadataIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenMetadataIxProto)
                    return object;
                var message = new $root.vixen.parser.TokenMetadataIxProto();
                if (object.initializeIx != null) {
                    if (typeof object.initializeIx !== "object")
                        throw TypeError(".vixen.parser.TokenMetadataIxProto.initializeIx: object expected");
                    message.initializeIx = $root.vixen.parser.InitializeIxProto.fromObject(object.initializeIx);
                }
                if (object.updateFieldsIx != null) {
                    if (typeof object.updateFieldsIx !== "object")
                        throw TypeError(".vixen.parser.TokenMetadataIxProto.updateFieldsIx: object expected");
                    message.updateFieldsIx = $root.vixen.parser.UpdateFieldIxProto.fromObject(object.updateFieldsIx);
                }
                if (object.removeKeyIx != null) {
                    if (typeof object.removeKeyIx !== "object")
                        throw TypeError(".vixen.parser.TokenMetadataIxProto.removeKeyIx: object expected");
                    message.removeKeyIx = $root.vixen.parser.RemoveKeyIxProto.fromObject(object.removeKeyIx);
                }
                if (object.updateAuthorityIx != null) {
                    if (typeof object.updateAuthorityIx !== "object")
                        throw TypeError(".vixen.parser.TokenMetadataIxProto.updateAuthorityIx: object expected");
                    message.updateAuthorityIx = $root.vixen.parser.UpdateAuthorityIxProto.fromObject(object.updateAuthorityIx);
                }
                if (object.emitIx != null) {
                    if (typeof object.emitIx !== "object")
                        throw TypeError(".vixen.parser.TokenMetadataIxProto.emitIx: object expected");
                    message.emitIx = $root.vixen.parser.EmitIxProto.fromObject(object.emitIx);
                }
                return message;
            };

            TokenMetadataIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.initializeIx != null && message.hasOwnProperty("initializeIx")) {
                    object.initializeIx = $root.vixen.parser.InitializeIxProto.toObject(message.initializeIx, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeIx";
                }
                if (message.updateFieldsIx != null && message.hasOwnProperty("updateFieldsIx")) {
                    object.updateFieldsIx = $root.vixen.parser.UpdateFieldIxProto.toObject(message.updateFieldsIx, options);
                    if (options.oneofs)
                        object.ixOneof = "updateFieldsIx";
                }
                if (message.removeKeyIx != null && message.hasOwnProperty("removeKeyIx")) {
                    object.removeKeyIx = $root.vixen.parser.RemoveKeyIxProto.toObject(message.removeKeyIx, options);
                    if (options.oneofs)
                        object.ixOneof = "removeKeyIx";
                }
                if (message.updateAuthorityIx != null && message.hasOwnProperty("updateAuthorityIx")) {
                    object.updateAuthorityIx = $root.vixen.parser.UpdateAuthorityIxProto.toObject(message.updateAuthorityIx, options);
                    if (options.oneofs)
                        object.ixOneof = "updateAuthorityIx";
                }
                if (message.emitIx != null && message.hasOwnProperty("emitIx")) {
                    object.emitIx = $root.vixen.parser.EmitIxProto.toObject(message.emitIx, options);
                    if (options.oneofs)
                        object.ixOneof = "emitIx";
                }
                return object;
            };

            TokenMetadataIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenMetadataIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenMetadataIxProto";
            };

            return TokenMetadataIxProto;
        })();

        parser.InitializeGroupAccountsProto = (function() {

            function InitializeGroupAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeGroupAccountsProto.prototype.group = "";
            InitializeGroupAccountsProto.prototype.mint = "";
            InitializeGroupAccountsProto.prototype.mintAuthority = "";

            InitializeGroupAccountsProto.create = function create(properties) {
                return new InitializeGroupAccountsProto(properties);
            };

            InitializeGroupAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                    writer.uint32(10).string(message.group);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.mintAuthority != null && Object.hasOwnProperty.call(message, "mintAuthority"))
                    writer.uint32(26).string(message.mintAuthority);
                return writer;
            };

            InitializeGroupAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeGroupAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeGroupAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.group = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.mintAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeGroupAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeGroupAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.group != null && message.hasOwnProperty("group"))
                    if (!$util.isString(message.group))
                        return "group: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority"))
                    if (!$util.isString(message.mintAuthority))
                        return "mintAuthority: string expected";
                return null;
            };

            InitializeGroupAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeGroupAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeGroupAccountsProto();
                if (object.group != null)
                    message.group = String(object.group);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.mintAuthority != null)
                    message.mintAuthority = String(object.mintAuthority);
                return message;
            };

            InitializeGroupAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.group = "";
                    object.mint = "";
                    object.mintAuthority = "";
                }
                if (message.group != null && message.hasOwnProperty("group"))
                    object.group = message.group;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.mintAuthority != null && message.hasOwnProperty("mintAuthority"))
                    object.mintAuthority = message.mintAuthority;
                return object;
            };

            InitializeGroupAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeGroupAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeGroupAccountsProto";
            };

            return InitializeGroupAccountsProto;
        })();

        parser.InitializeGroupDataProto = (function() {

            function InitializeGroupDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeGroupDataProto.prototype.updateAuthority = null;
            InitializeGroupDataProto.prototype.maxSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(InitializeGroupDataProto.prototype, "_updateAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["updateAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            InitializeGroupDataProto.create = function create(properties) {
                return new InitializeGroupDataProto(properties);
            };

            InitializeGroupDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.updateAuthority != null && Object.hasOwnProperty.call(message, "updateAuthority"))
                    writer.uint32(10).string(message.updateAuthority);
                if (message.maxSize != null && Object.hasOwnProperty.call(message, "maxSize"))
                    writer.uint32(16).uint64(message.maxSize);
                return writer;
            };

            InitializeGroupDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeGroupDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeGroupDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.updateAuthority = reader.string();
                            break;
                        }
                    case 2: {
                            message.maxSize = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeGroupDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeGroupDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority")) {
                    properties._updateAuthority = 1;
                    if (!$util.isString(message.updateAuthority))
                        return "updateAuthority: string expected";
                }
                if (message.maxSize != null && message.hasOwnProperty("maxSize"))
                    if (!$util.isInteger(message.maxSize) && !(message.maxSize && $util.isInteger(message.maxSize.low) && $util.isInteger(message.maxSize.high)))
                        return "maxSize: integer|Long expected";
                return null;
            };

            InitializeGroupDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeGroupDataProto)
                    return object;
                var message = new $root.vixen.parser.InitializeGroupDataProto();
                if (object.updateAuthority != null)
                    message.updateAuthority = String(object.updateAuthority);
                if (object.maxSize != null)
                    if ($util.Long)
                        (message.maxSize = $util.Long.fromValue(object.maxSize)).unsigned = true;
                    else if (typeof object.maxSize === "string")
                        message.maxSize = parseInt(object.maxSize, 10);
                    else if (typeof object.maxSize === "number")
                        message.maxSize = object.maxSize;
                    else if (typeof object.maxSize === "object")
                        message.maxSize = new $util.LongBits(object.maxSize.low >>> 0, object.maxSize.high >>> 0).toNumber(true);
                return message;
            };

            InitializeGroupDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.maxSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.maxSize = options.longs === String ? "0" : 0;
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority")) {
                    object.updateAuthority = message.updateAuthority;
                    if (options.oneofs)
                        object._updateAuthority = "updateAuthority";
                }
                if (message.maxSize != null && message.hasOwnProperty("maxSize"))
                    if (typeof message.maxSize === "number")
                        object.maxSize = options.longs === String ? String(message.maxSize) : message.maxSize;
                    else
                        object.maxSize = options.longs === String ? $util.Long.prototype.toString.call(message.maxSize) : options.longs === Number ? new $util.LongBits(message.maxSize.low >>> 0, message.maxSize.high >>> 0).toNumber(true) : message.maxSize;
                return object;
            };

            InitializeGroupDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeGroupDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeGroupDataProto";
            };

            return InitializeGroupDataProto;
        })();

        parser.InitializeGroupIxProto = (function() {

            function InitializeGroupIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeGroupIxProto.prototype.accounts = null;
            InitializeGroupIxProto.prototype.data = null;

            InitializeGroupIxProto.create = function create(properties) {
                return new InitializeGroupIxProto(properties);
            };

            InitializeGroupIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeGroupAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializeGroupDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializeGroupIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeGroupIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeGroupIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeGroupAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializeGroupDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeGroupIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeGroupIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeGroupAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializeGroupDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializeGroupIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeGroupIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeGroupIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeGroupIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeGroupAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializeGroupIxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializeGroupDataProto.fromObject(object.data);
                }
                return message;
            };

            InitializeGroupIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeGroupAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializeGroupDataProto.toObject(message.data, options);
                return object;
            };

            InitializeGroupIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeGroupIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeGroupIxProto";
            };

            return InitializeGroupIxProto;
        })();

        parser.UpdateGroupMaxSizeAccountsProto = (function() {

            function UpdateGroupMaxSizeAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateGroupMaxSizeAccountsProto.prototype.group = "";
            UpdateGroupMaxSizeAccountsProto.prototype.updateAuthority = "";

            UpdateGroupMaxSizeAccountsProto.create = function create(properties) {
                return new UpdateGroupMaxSizeAccountsProto(properties);
            };

            UpdateGroupMaxSizeAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                    writer.uint32(10).string(message.group);
                if (message.updateAuthority != null && Object.hasOwnProperty.call(message, "updateAuthority"))
                    writer.uint32(18).string(message.updateAuthority);
                return writer;
            };

            UpdateGroupMaxSizeAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateGroupMaxSizeAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateGroupMaxSizeAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.group = reader.string();
                            break;
                        }
                    case 2: {
                            message.updateAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateGroupMaxSizeAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateGroupMaxSizeAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.group != null && message.hasOwnProperty("group"))
                    if (!$util.isString(message.group))
                        return "group: string expected";
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    if (!$util.isString(message.updateAuthority))
                        return "updateAuthority: string expected";
                return null;
            };

            UpdateGroupMaxSizeAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateGroupMaxSizeAccountsProto)
                    return object;
                var message = new $root.vixen.parser.UpdateGroupMaxSizeAccountsProto();
                if (object.group != null)
                    message.group = String(object.group);
                if (object.updateAuthority != null)
                    message.updateAuthority = String(object.updateAuthority);
                return message;
            };

            UpdateGroupMaxSizeAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.group = "";
                    object.updateAuthority = "";
                }
                if (message.group != null && message.hasOwnProperty("group"))
                    object.group = message.group;
                if (message.updateAuthority != null && message.hasOwnProperty("updateAuthority"))
                    object.updateAuthority = message.updateAuthority;
                return object;
            };

            UpdateGroupMaxSizeAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateGroupMaxSizeAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateGroupMaxSizeAccountsProto";
            };

            return UpdateGroupMaxSizeAccountsProto;
        })();

        parser.UpdateGroupMaxSizeDataProto = (function() {

            function UpdateGroupMaxSizeDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateGroupMaxSizeDataProto.prototype.maxSize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            UpdateGroupMaxSizeDataProto.create = function create(properties) {
                return new UpdateGroupMaxSizeDataProto(properties);
            };

            UpdateGroupMaxSizeDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.maxSize != null && Object.hasOwnProperty.call(message, "maxSize"))
                    writer.uint32(8).uint64(message.maxSize);
                return writer;
            };

            UpdateGroupMaxSizeDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateGroupMaxSizeDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateGroupMaxSizeDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.maxSize = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateGroupMaxSizeDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateGroupMaxSizeDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.maxSize != null && message.hasOwnProperty("maxSize"))
                    if (!$util.isInteger(message.maxSize) && !(message.maxSize && $util.isInteger(message.maxSize.low) && $util.isInteger(message.maxSize.high)))
                        return "maxSize: integer|Long expected";
                return null;
            };

            UpdateGroupMaxSizeDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateGroupMaxSizeDataProto)
                    return object;
                var message = new $root.vixen.parser.UpdateGroupMaxSizeDataProto();
                if (object.maxSize != null)
                    if ($util.Long)
                        (message.maxSize = $util.Long.fromValue(object.maxSize)).unsigned = true;
                    else if (typeof object.maxSize === "string")
                        message.maxSize = parseInt(object.maxSize, 10);
                    else if (typeof object.maxSize === "number")
                        message.maxSize = object.maxSize;
                    else if (typeof object.maxSize === "object")
                        message.maxSize = new $util.LongBits(object.maxSize.low >>> 0, object.maxSize.high >>> 0).toNumber(true);
                return message;
            };

            UpdateGroupMaxSizeDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.maxSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.maxSize = options.longs === String ? "0" : 0;
                if (message.maxSize != null && message.hasOwnProperty("maxSize"))
                    if (typeof message.maxSize === "number")
                        object.maxSize = options.longs === String ? String(message.maxSize) : message.maxSize;
                    else
                        object.maxSize = options.longs === String ? $util.Long.prototype.toString.call(message.maxSize) : options.longs === Number ? new $util.LongBits(message.maxSize.low >>> 0, message.maxSize.high >>> 0).toNumber(true) : message.maxSize;
                return object;
            };

            UpdateGroupMaxSizeDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateGroupMaxSizeDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateGroupMaxSizeDataProto";
            };

            return UpdateGroupMaxSizeDataProto;
        })();

        parser.UpdateGroupMaxSizeIxProto = (function() {

            function UpdateGroupMaxSizeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateGroupMaxSizeIxProto.prototype.accounts = null;
            UpdateGroupMaxSizeIxProto.prototype.data = null;

            UpdateGroupMaxSizeIxProto.create = function create(properties) {
                return new UpdateGroupMaxSizeIxProto(properties);
            };

            UpdateGroupMaxSizeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.UpdateGroupMaxSizeAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.UpdateGroupMaxSizeDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            UpdateGroupMaxSizeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateGroupMaxSizeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateGroupMaxSizeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.UpdateGroupMaxSizeAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.UpdateGroupMaxSizeDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateGroupMaxSizeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateGroupMaxSizeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.UpdateGroupMaxSizeAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.UpdateGroupMaxSizeDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            UpdateGroupMaxSizeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateGroupMaxSizeIxProto)
                    return object;
                var message = new $root.vixen.parser.UpdateGroupMaxSizeIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.UpdateGroupMaxSizeIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.UpdateGroupMaxSizeAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.UpdateGroupMaxSizeIxProto.data: object expected");
                    message.data = $root.vixen.parser.UpdateGroupMaxSizeDataProto.fromObject(object.data);
                }
                return message;
            };

            UpdateGroupMaxSizeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.UpdateGroupMaxSizeAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.UpdateGroupMaxSizeDataProto.toObject(message.data, options);
                return object;
            };

            UpdateGroupMaxSizeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateGroupMaxSizeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateGroupMaxSizeIxProto";
            };

            return UpdateGroupMaxSizeIxProto;
        })();

        parser.UpdateGroupAuthorityAccountsProto = (function() {

            function UpdateGroupAuthorityAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateGroupAuthorityAccountsProto.prototype.group = "";
            UpdateGroupAuthorityAccountsProto.prototype.currentAuthority = "";

            UpdateGroupAuthorityAccountsProto.create = function create(properties) {
                return new UpdateGroupAuthorityAccountsProto(properties);
            };

            UpdateGroupAuthorityAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                    writer.uint32(10).string(message.group);
                if (message.currentAuthority != null && Object.hasOwnProperty.call(message, "currentAuthority"))
                    writer.uint32(18).string(message.currentAuthority);
                return writer;
            };

            UpdateGroupAuthorityAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateGroupAuthorityAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateGroupAuthorityAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.group = reader.string();
                            break;
                        }
                    case 2: {
                            message.currentAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateGroupAuthorityAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateGroupAuthorityAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.group != null && message.hasOwnProperty("group"))
                    if (!$util.isString(message.group))
                        return "group: string expected";
                if (message.currentAuthority != null && message.hasOwnProperty("currentAuthority"))
                    if (!$util.isString(message.currentAuthority))
                        return "currentAuthority: string expected";
                return null;
            };

            UpdateGroupAuthorityAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateGroupAuthorityAccountsProto)
                    return object;
                var message = new $root.vixen.parser.UpdateGroupAuthorityAccountsProto();
                if (object.group != null)
                    message.group = String(object.group);
                if (object.currentAuthority != null)
                    message.currentAuthority = String(object.currentAuthority);
                return message;
            };

            UpdateGroupAuthorityAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.group = "";
                    object.currentAuthority = "";
                }
                if (message.group != null && message.hasOwnProperty("group"))
                    object.group = message.group;
                if (message.currentAuthority != null && message.hasOwnProperty("currentAuthority"))
                    object.currentAuthority = message.currentAuthority;
                return object;
            };

            UpdateGroupAuthorityAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateGroupAuthorityAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateGroupAuthorityAccountsProto";
            };

            return UpdateGroupAuthorityAccountsProto;
        })();

        parser.UpdateGroupAuthorityDataProto = (function() {

            function UpdateGroupAuthorityDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateGroupAuthorityDataProto.prototype.newAuthority = "";

            UpdateGroupAuthorityDataProto.create = function create(properties) {
                return new UpdateGroupAuthorityDataProto(properties);
            };

            UpdateGroupAuthorityDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.newAuthority != null && Object.hasOwnProperty.call(message, "newAuthority"))
                    writer.uint32(10).string(message.newAuthority);
                return writer;
            };

            UpdateGroupAuthorityDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateGroupAuthorityDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateGroupAuthorityDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.newAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateGroupAuthorityDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateGroupAuthorityDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.newAuthority != null && message.hasOwnProperty("newAuthority"))
                    if (!$util.isString(message.newAuthority))
                        return "newAuthority: string expected";
                return null;
            };

            UpdateGroupAuthorityDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateGroupAuthorityDataProto)
                    return object;
                var message = new $root.vixen.parser.UpdateGroupAuthorityDataProto();
                if (object.newAuthority != null)
                    message.newAuthority = String(object.newAuthority);
                return message;
            };

            UpdateGroupAuthorityDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.newAuthority = "";
                if (message.newAuthority != null && message.hasOwnProperty("newAuthority"))
                    object.newAuthority = message.newAuthority;
                return object;
            };

            UpdateGroupAuthorityDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateGroupAuthorityDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateGroupAuthorityDataProto";
            };

            return UpdateGroupAuthorityDataProto;
        })();

        parser.UpdateGroupAuthorityIxProto = (function() {

            function UpdateGroupAuthorityIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateGroupAuthorityIxProto.prototype.accounts = null;
            UpdateGroupAuthorityIxProto.prototype.data = null;

            UpdateGroupAuthorityIxProto.create = function create(properties) {
                return new UpdateGroupAuthorityIxProto(properties);
            };

            UpdateGroupAuthorityIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.UpdateGroupAuthorityAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.UpdateGroupAuthorityDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            UpdateGroupAuthorityIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateGroupAuthorityIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateGroupAuthorityIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.UpdateGroupAuthorityAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.UpdateGroupAuthorityDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateGroupAuthorityIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateGroupAuthorityIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.UpdateGroupAuthorityAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.UpdateGroupAuthorityDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            UpdateGroupAuthorityIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateGroupAuthorityIxProto)
                    return object;
                var message = new $root.vixen.parser.UpdateGroupAuthorityIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.UpdateGroupAuthorityIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.UpdateGroupAuthorityAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.UpdateGroupAuthorityIxProto.data: object expected");
                    message.data = $root.vixen.parser.UpdateGroupAuthorityDataProto.fromObject(object.data);
                }
                return message;
            };

            UpdateGroupAuthorityIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.UpdateGroupAuthorityAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.UpdateGroupAuthorityDataProto.toObject(message.data, options);
                return object;
            };

            UpdateGroupAuthorityIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateGroupAuthorityIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateGroupAuthorityIxProto";
            };

            return UpdateGroupAuthorityIxProto;
        })();

        parser.InitializeMemberAccountsProto = (function() {

            function InitializeMemberAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMemberAccountsProto.prototype.member = "";
            InitializeMemberAccountsProto.prototype.memberMint = "";
            InitializeMemberAccountsProto.prototype.memberMintAuthority = "";
            InitializeMemberAccountsProto.prototype.group = "";
            InitializeMemberAccountsProto.prototype.groupUpdateAuthority = "";

            InitializeMemberAccountsProto.create = function create(properties) {
                return new InitializeMemberAccountsProto(properties);
            };

            InitializeMemberAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.member != null && Object.hasOwnProperty.call(message, "member"))
                    writer.uint32(10).string(message.member);
                if (message.memberMint != null && Object.hasOwnProperty.call(message, "memberMint"))
                    writer.uint32(18).string(message.memberMint);
                if (message.memberMintAuthority != null && Object.hasOwnProperty.call(message, "memberMintAuthority"))
                    writer.uint32(26).string(message.memberMintAuthority);
                if (message.group != null && Object.hasOwnProperty.call(message, "group"))
                    writer.uint32(34).string(message.group);
                if (message.groupUpdateAuthority != null && Object.hasOwnProperty.call(message, "groupUpdateAuthority"))
                    writer.uint32(42).string(message.groupUpdateAuthority);
                return writer;
            };

            InitializeMemberAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMemberAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMemberAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.member = reader.string();
                            break;
                        }
                    case 2: {
                            message.memberMint = reader.string();
                            break;
                        }
                    case 3: {
                            message.memberMintAuthority = reader.string();
                            break;
                        }
                    case 4: {
                            message.group = reader.string();
                            break;
                        }
                    case 5: {
                            message.groupUpdateAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMemberAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMemberAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.member != null && message.hasOwnProperty("member"))
                    if (!$util.isString(message.member))
                        return "member: string expected";
                if (message.memberMint != null && message.hasOwnProperty("memberMint"))
                    if (!$util.isString(message.memberMint))
                        return "memberMint: string expected";
                if (message.memberMintAuthority != null && message.hasOwnProperty("memberMintAuthority"))
                    if (!$util.isString(message.memberMintAuthority))
                        return "memberMintAuthority: string expected";
                if (message.group != null && message.hasOwnProperty("group"))
                    if (!$util.isString(message.group))
                        return "group: string expected";
                if (message.groupUpdateAuthority != null && message.hasOwnProperty("groupUpdateAuthority"))
                    if (!$util.isString(message.groupUpdateAuthority))
                        return "groupUpdateAuthority: string expected";
                return null;
            };

            InitializeMemberAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMemberAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMemberAccountsProto();
                if (object.member != null)
                    message.member = String(object.member);
                if (object.memberMint != null)
                    message.memberMint = String(object.memberMint);
                if (object.memberMintAuthority != null)
                    message.memberMintAuthority = String(object.memberMintAuthority);
                if (object.group != null)
                    message.group = String(object.group);
                if (object.groupUpdateAuthority != null)
                    message.groupUpdateAuthority = String(object.groupUpdateAuthority);
                return message;
            };

            InitializeMemberAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.member = "";
                    object.memberMint = "";
                    object.memberMintAuthority = "";
                    object.group = "";
                    object.groupUpdateAuthority = "";
                }
                if (message.member != null && message.hasOwnProperty("member"))
                    object.member = message.member;
                if (message.memberMint != null && message.hasOwnProperty("memberMint"))
                    object.memberMint = message.memberMint;
                if (message.memberMintAuthority != null && message.hasOwnProperty("memberMintAuthority"))
                    object.memberMintAuthority = message.memberMintAuthority;
                if (message.group != null && message.hasOwnProperty("group"))
                    object.group = message.group;
                if (message.groupUpdateAuthority != null && message.hasOwnProperty("groupUpdateAuthority"))
                    object.groupUpdateAuthority = message.groupUpdateAuthority;
                return object;
            };

            InitializeMemberAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMemberAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMemberAccountsProto";
            };

            return InitializeMemberAccountsProto;
        })();

        parser.InitializeMemberIxProto = (function() {

            function InitializeMemberIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMemberIxProto.prototype.accounts = null;

            InitializeMemberIxProto.create = function create(properties) {
                return new InitializeMemberIxProto(properties);
            };

            InitializeMemberIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeMemberAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            InitializeMemberIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMemberIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMemberIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeMemberAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMemberIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMemberIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeMemberAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            InitializeMemberIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMemberIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMemberIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeMemberIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeMemberAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            InitializeMemberIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeMemberAccountsProto.toObject(message.accounts, options);
                return object;
            };

            InitializeMemberIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMemberIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMemberIxProto";
            };

            return InitializeMemberIxProto;
        })();

        parser.TokenGroupIxProto = (function() {

            function TokenGroupIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TokenGroupIxProto.prototype.initializeGroupIx = null;
            TokenGroupIxProto.prototype.updateGroupMaxSizeIx = null;
            TokenGroupIxProto.prototype.updateGroupAuthorityIx = null;
            TokenGroupIxProto.prototype.initializeMemberIx = null;

            var $oneOfFields;

            Object.defineProperty(TokenGroupIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["initializeGroupIx", "updateGroupMaxSizeIx", "updateGroupAuthorityIx", "initializeMemberIx"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TokenGroupIxProto.create = function create(properties) {
                return new TokenGroupIxProto(properties);
            };

            TokenGroupIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.initializeGroupIx != null && Object.hasOwnProperty.call(message, "initializeGroupIx"))
                    $root.vixen.parser.InitializeGroupIxProto.encode(message.initializeGroupIx, writer.uint32(10).fork()).ldelim();
                if (message.updateGroupMaxSizeIx != null && Object.hasOwnProperty.call(message, "updateGroupMaxSizeIx"))
                    $root.vixen.parser.UpdateGroupMaxSizeIxProto.encode(message.updateGroupMaxSizeIx, writer.uint32(18).fork()).ldelim();
                if (message.updateGroupAuthorityIx != null && Object.hasOwnProperty.call(message, "updateGroupAuthorityIx"))
                    $root.vixen.parser.UpdateGroupAuthorityIxProto.encode(message.updateGroupAuthorityIx, writer.uint32(26).fork()).ldelim();
                if (message.initializeMemberIx != null && Object.hasOwnProperty.call(message, "initializeMemberIx"))
                    $root.vixen.parser.InitializeMemberIxProto.encode(message.initializeMemberIx, writer.uint32(34).fork()).ldelim();
                return writer;
            };

            TokenGroupIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TokenGroupIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TokenGroupIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.initializeGroupIx = $root.vixen.parser.InitializeGroupIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.updateGroupMaxSizeIx = $root.vixen.parser.UpdateGroupMaxSizeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.updateGroupAuthorityIx = $root.vixen.parser.UpdateGroupAuthorityIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.initializeMemberIx = $root.vixen.parser.InitializeMemberIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TokenGroupIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TokenGroupIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.initializeGroupIx != null && message.hasOwnProperty("initializeGroupIx")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeGroupIxProto.verify(message.initializeGroupIx);
                        if (error)
                            return "initializeGroupIx." + error;
                    }
                }
                if (message.updateGroupMaxSizeIx != null && message.hasOwnProperty("updateGroupMaxSizeIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.UpdateGroupMaxSizeIxProto.verify(message.updateGroupMaxSizeIx);
                        if (error)
                            return "updateGroupMaxSizeIx." + error;
                    }
                }
                if (message.updateGroupAuthorityIx != null && message.hasOwnProperty("updateGroupAuthorityIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.UpdateGroupAuthorityIxProto.verify(message.updateGroupAuthorityIx);
                        if (error)
                            return "updateGroupAuthorityIx." + error;
                    }
                }
                if (message.initializeMemberIx != null && message.hasOwnProperty("initializeMemberIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeMemberIxProto.verify(message.initializeMemberIx);
                        if (error)
                            return "initializeMemberIx." + error;
                    }
                }
                return null;
            };

            TokenGroupIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TokenGroupIxProto)
                    return object;
                var message = new $root.vixen.parser.TokenGroupIxProto();
                if (object.initializeGroupIx != null) {
                    if (typeof object.initializeGroupIx !== "object")
                        throw TypeError(".vixen.parser.TokenGroupIxProto.initializeGroupIx: object expected");
                    message.initializeGroupIx = $root.vixen.parser.InitializeGroupIxProto.fromObject(object.initializeGroupIx);
                }
                if (object.updateGroupMaxSizeIx != null) {
                    if (typeof object.updateGroupMaxSizeIx !== "object")
                        throw TypeError(".vixen.parser.TokenGroupIxProto.updateGroupMaxSizeIx: object expected");
                    message.updateGroupMaxSizeIx = $root.vixen.parser.UpdateGroupMaxSizeIxProto.fromObject(object.updateGroupMaxSizeIx);
                }
                if (object.updateGroupAuthorityIx != null) {
                    if (typeof object.updateGroupAuthorityIx !== "object")
                        throw TypeError(".vixen.parser.TokenGroupIxProto.updateGroupAuthorityIx: object expected");
                    message.updateGroupAuthorityIx = $root.vixen.parser.UpdateGroupAuthorityIxProto.fromObject(object.updateGroupAuthorityIx);
                }
                if (object.initializeMemberIx != null) {
                    if (typeof object.initializeMemberIx !== "object")
                        throw TypeError(".vixen.parser.TokenGroupIxProto.initializeMemberIx: object expected");
                    message.initializeMemberIx = $root.vixen.parser.InitializeMemberIxProto.fromObject(object.initializeMemberIx);
                }
                return message;
            };

            TokenGroupIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.initializeGroupIx != null && message.hasOwnProperty("initializeGroupIx")) {
                    object.initializeGroupIx = $root.vixen.parser.InitializeGroupIxProto.toObject(message.initializeGroupIx, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeGroupIx";
                }
                if (message.updateGroupMaxSizeIx != null && message.hasOwnProperty("updateGroupMaxSizeIx")) {
                    object.updateGroupMaxSizeIx = $root.vixen.parser.UpdateGroupMaxSizeIxProto.toObject(message.updateGroupMaxSizeIx, options);
                    if (options.oneofs)
                        object.ixOneof = "updateGroupMaxSizeIx";
                }
                if (message.updateGroupAuthorityIx != null && message.hasOwnProperty("updateGroupAuthorityIx")) {
                    object.updateGroupAuthorityIx = $root.vixen.parser.UpdateGroupAuthorityIxProto.toObject(message.updateGroupAuthorityIx, options);
                    if (options.oneofs)
                        object.ixOneof = "updateGroupAuthorityIx";
                }
                if (message.initializeMemberIx != null && message.hasOwnProperty("initializeMemberIx")) {
                    object.initializeMemberIx = $root.vixen.parser.InitializeMemberIxProto.toObject(message.initializeMemberIx, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeMemberIx";
                }
                return object;
            };

            TokenGroupIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TokenGroupIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TokenGroupIxProto";
            };

            return TokenGroupIxProto;
        })();

        parser.InitializeConfidentialMintAccountsProto = (function() {

            function InitializeConfidentialMintAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeConfidentialMintAccountsProto.prototype.mint = "";

            InitializeConfidentialMintAccountsProto.create = function create(properties) {
                return new InitializeConfidentialMintAccountsProto(properties);
            };

            InitializeConfidentialMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            InitializeConfidentialMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeConfidentialMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeConfidentialMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeConfidentialMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeConfidentialMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            InitializeConfidentialMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeConfidentialMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeConfidentialMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            InitializeConfidentialMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            InitializeConfidentialMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeConfidentialMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeConfidentialMintAccountsProto";
            };

            return InitializeConfidentialMintAccountsProto;
        })();

        parser.InitializeConfidentialMintIxProto = (function() {

            function InitializeConfidentialMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeConfidentialMintIxProto.prototype.accounts = null;

            InitializeConfidentialMintIxProto.create = function create(properties) {
                return new InitializeConfidentialMintIxProto(properties);
            };

            InitializeConfidentialMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeConfidentialMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            InitializeConfidentialMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeConfidentialMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeConfidentialMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeConfidentialMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeConfidentialMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeConfidentialMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeConfidentialMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            InitializeConfidentialMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeConfidentialMintIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeConfidentialMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeConfidentialMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeConfidentialMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            InitializeConfidentialMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeConfidentialMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            InitializeConfidentialMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeConfidentialMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeConfidentialMintIxProto";
            };

            return InitializeConfidentialMintIxProto;
        })();

        parser.UpdateMintAccountsProto = (function() {

            function UpdateMintAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateMintAccountsProto.prototype.mint = "";
            UpdateMintAccountsProto.prototype.authority = "";

            UpdateMintAccountsProto.create = function create(properties) {
                return new UpdateMintAccountsProto(properties);
            };

            UpdateMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(18).string(message.authority);
                return writer;
            };

            UpdateMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.authority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                return null;
            };

            UpdateMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.UpdateMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.authority != null)
                    message.authority = String(object.authority);
                return message;
            };

            UpdateMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.mint = "";
                    object.authority = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                return object;
            };

            UpdateMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateMintAccountsProto";
            };

            return UpdateMintAccountsProto;
        })();

        parser.UpdateMintIxProto = (function() {

            function UpdateMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateMintIxProto.prototype.accounts = null;

            UpdateMintIxProto.create = function create(properties) {
                return new UpdateMintIxProto(properties);
            };

            UpdateMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.UpdateMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            UpdateMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.UpdateMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.UpdateMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            UpdateMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateMintIxProto)
                    return object;
                var message = new $root.vixen.parser.UpdateMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.UpdateMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.UpdateMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            UpdateMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.UpdateMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            UpdateMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateMintIxProto";
            };

            return UpdateMintIxProto;
        })();

        parser.ConfigureAccountAccountsProto = (function() {

            function ConfigureAccountAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfigureAccountAccountsProto.prototype.account = "";
            ConfigureAccountAccountsProto.prototype.mint = "";
            ConfigureAccountAccountsProto.prototype.sysvar = "";
            ConfigureAccountAccountsProto.prototype.owner = "";
            ConfigureAccountAccountsProto.prototype.multisigSigners = $util.emptyArray;

            ConfigureAccountAccountsProto.create = function create(properties) {
                return new ConfigureAccountAccountsProto(properties);
            };

            ConfigureAccountAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.sysvar != null && Object.hasOwnProperty.call(message, "sysvar"))
                    writer.uint32(26).string(message.sysvar);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(34).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(42).string(message.multisigSigners[i]);
                return writer;
            };

            ConfigureAccountAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfigureAccountAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfigureAccountAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.sysvar = reader.string();
                            break;
                        }
                    case 4: {
                            message.owner = reader.string();
                            break;
                        }
                    case 5: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfigureAccountAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfigureAccountAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.sysvar != null && message.hasOwnProperty("sysvar"))
                    if (!$util.isString(message.sysvar))
                        return "sysvar: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            ConfigureAccountAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfigureAccountAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ConfigureAccountAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.sysvar != null)
                    message.sysvar = String(object.sysvar);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.ConfigureAccountAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            ConfigureAccountAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.mint = "";
                    object.sysvar = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.sysvar != null && message.hasOwnProperty("sysvar"))
                    object.sysvar = message.sysvar;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            ConfigureAccountAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfigureAccountAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfigureAccountAccountsProto";
            };

            return ConfigureAccountAccountsProto;
        })();

        parser.ConfigureAccountIxProto = (function() {

            function ConfigureAccountIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfigureAccountIxProto.prototype.accounts = null;

            ConfigureAccountIxProto.create = function create(properties) {
                return new ConfigureAccountIxProto(properties);
            };

            ConfigureAccountIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ConfigureAccountAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            ConfigureAccountIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfigureAccountIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfigureAccountIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ConfigureAccountAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfigureAccountIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfigureAccountIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ConfigureAccountAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            ConfigureAccountIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfigureAccountIxProto)
                    return object;
                var message = new $root.vixen.parser.ConfigureAccountIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ConfigureAccountIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ConfigureAccountAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            ConfigureAccountIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ConfigureAccountAccountsProto.toObject(message.accounts, options);
                return object;
            };

            ConfigureAccountIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfigureAccountIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfigureAccountIxProto";
            };

            return ConfigureAccountIxProto;
        })();

        parser.ApproveAccountAccountsProto = (function() {

            function ApproveAccountAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApproveAccountAccountsProto.prototype.account = "";
            ApproveAccountAccountsProto.prototype.mint = "";
            ApproveAccountAccountsProto.prototype.authority = "";

            ApproveAccountAccountsProto.create = function create(properties) {
                return new ApproveAccountAccountsProto(properties);
            };

            ApproveAccountAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(26).string(message.authority);
                return writer;
            };

            ApproveAccountAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApproveAccountAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApproveAccountAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.authority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApproveAccountAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApproveAccountAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                return null;
            };

            ApproveAccountAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApproveAccountAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ApproveAccountAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.authority != null)
                    message.authority = String(object.authority);
                return message;
            };

            ApproveAccountAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.account = "";
                    object.mint = "";
                    object.authority = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                return object;
            };

            ApproveAccountAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApproveAccountAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApproveAccountAccountsProto";
            };

            return ApproveAccountAccountsProto;
        })();

        parser.ApproveAccountIxProto = (function() {

            function ApproveAccountIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApproveAccountIxProto.prototype.accounts = null;

            ApproveAccountIxProto.create = function create(properties) {
                return new ApproveAccountIxProto(properties);
            };

            ApproveAccountIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ApproveAccountAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            ApproveAccountIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApproveAccountIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApproveAccountIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ApproveAccountAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApproveAccountIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApproveAccountIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ApproveAccountAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            ApproveAccountIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApproveAccountIxProto)
                    return object;
                var message = new $root.vixen.parser.ApproveAccountIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ApproveAccountIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ApproveAccountAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            ApproveAccountIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ApproveAccountAccountsProto.toObject(message.accounts, options);
                return object;
            };

            ApproveAccountIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApproveAccountIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApproveAccountIxProto";
            };

            return ApproveAccountIxProto;
        })();

        parser.EmptyAccountAccountsProto = (function() {

            function EmptyAccountAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EmptyAccountAccountsProto.prototype.account = "";
            EmptyAccountAccountsProto.prototype.sysvar = "";
            EmptyAccountAccountsProto.prototype.owner = "";
            EmptyAccountAccountsProto.prototype.multisigSigners = $util.emptyArray;

            EmptyAccountAccountsProto.create = function create(properties) {
                return new EmptyAccountAccountsProto(properties);
            };

            EmptyAccountAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.sysvar != null && Object.hasOwnProperty.call(message, "sysvar"))
                    writer.uint32(18).string(message.sysvar);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            EmptyAccountAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EmptyAccountAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EmptyAccountAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.sysvar = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EmptyAccountAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EmptyAccountAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.sysvar != null && message.hasOwnProperty("sysvar"))
                    if (!$util.isString(message.sysvar))
                        return "sysvar: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            EmptyAccountAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EmptyAccountAccountsProto)
                    return object;
                var message = new $root.vixen.parser.EmptyAccountAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.sysvar != null)
                    message.sysvar = String(object.sysvar);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.EmptyAccountAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            EmptyAccountAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.sysvar = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.sysvar != null && message.hasOwnProperty("sysvar"))
                    object.sysvar = message.sysvar;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            EmptyAccountAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EmptyAccountAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EmptyAccountAccountsProto";
            };

            return EmptyAccountAccountsProto;
        })();

        parser.EmptyAccountIxProto = (function() {

            function EmptyAccountIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EmptyAccountIxProto.prototype.accounts = null;

            EmptyAccountIxProto.create = function create(properties) {
                return new EmptyAccountIxProto(properties);
            };

            EmptyAccountIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.EmptyAccountAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            EmptyAccountIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EmptyAccountIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EmptyAccountIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.EmptyAccountAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EmptyAccountIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EmptyAccountIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.EmptyAccountAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            EmptyAccountIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EmptyAccountIxProto)
                    return object;
                var message = new $root.vixen.parser.EmptyAccountIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.EmptyAccountIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.EmptyAccountAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            EmptyAccountIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.EmptyAccountAccountsProto.toObject(message.accounts, options);
                return object;
            };

            EmptyAccountIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EmptyAccountIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EmptyAccountIxProto";
            };

            return EmptyAccountIxProto;
        })();

        parser.DepositAccountsProto = (function() {

            function DepositAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DepositAccountsProto.prototype.account = "";
            DepositAccountsProto.prototype.mint = "";
            DepositAccountsProto.prototype.owner = "";
            DepositAccountsProto.prototype.multisigSigners = $util.emptyArray;

            DepositAccountsProto.create = function create(properties) {
                return new DepositAccountsProto(properties);
            };

            DepositAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            DepositAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DepositAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DepositAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DepositAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DepositAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            DepositAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DepositAccountsProto)
                    return object;
                var message = new $root.vixen.parser.DepositAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.DepositAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            DepositAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.mint = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            DepositAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DepositAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DepositAccountsProto";
            };

            return DepositAccountsProto;
        })();

        parser.DepositIxProto = (function() {

            function DepositIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DepositIxProto.prototype.accounts = null;

            DepositIxProto.create = function create(properties) {
                return new DepositIxProto(properties);
            };

            DepositIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.DepositAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            DepositIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DepositIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DepositIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.DepositAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DepositIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DepositIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.DepositAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            DepositIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DepositIxProto)
                    return object;
                var message = new $root.vixen.parser.DepositIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.DepositIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.DepositAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            DepositIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.DepositAccountsProto.toObject(message.accounts, options);
                return object;
            };

            DepositIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DepositIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DepositIxProto";
            };

            return DepositIxProto;
        })();

        parser.WithdrawAccountsProto = (function() {

            function WithdrawAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WithdrawAccountsProto.prototype.sourceAccount = "";
            WithdrawAccountsProto.prototype.mint = "";
            WithdrawAccountsProto.prototype.destination = "";
            WithdrawAccountsProto.prototype.owner = "";
            WithdrawAccountsProto.prototype.multisigSigners = $util.emptyArray;

            WithdrawAccountsProto.create = function create(properties) {
                return new WithdrawAccountsProto(properties);
            };

            WithdrawAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sourceAccount != null && Object.hasOwnProperty.call(message, "sourceAccount"))
                    writer.uint32(10).string(message.sourceAccount);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                    writer.uint32(26).string(message.destination);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(34).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(42).string(message.multisigSigners[i]);
                return writer;
            };

            WithdrawAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WithdrawAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WithdrawAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.sourceAccount = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.destination = reader.string();
                            break;
                        }
                    case 4: {
                            message.owner = reader.string();
                            break;
                        }
                    case 5: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WithdrawAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WithdrawAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sourceAccount != null && message.hasOwnProperty("sourceAccount"))
                    if (!$util.isString(message.sourceAccount))
                        return "sourceAccount: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.destination != null && message.hasOwnProperty("destination"))
                    if (!$util.isString(message.destination))
                        return "destination: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            WithdrawAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WithdrawAccountsProto)
                    return object;
                var message = new $root.vixen.parser.WithdrawAccountsProto();
                if (object.sourceAccount != null)
                    message.sourceAccount = String(object.sourceAccount);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.destination != null)
                    message.destination = String(object.destination);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.WithdrawAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            WithdrawAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.sourceAccount = "";
                    object.mint = "";
                    object.destination = "";
                    object.owner = "";
                }
                if (message.sourceAccount != null && message.hasOwnProperty("sourceAccount"))
                    object.sourceAccount = message.sourceAccount;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.destination != null && message.hasOwnProperty("destination"))
                    object.destination = message.destination;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            WithdrawAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WithdrawAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WithdrawAccountsProto";
            };

            return WithdrawAccountsProto;
        })();

        parser.WithdrawIxProto = (function() {

            function WithdrawIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WithdrawIxProto.prototype.accounts = null;

            WithdrawIxProto.create = function create(properties) {
                return new WithdrawIxProto(properties);
            };

            WithdrawIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.WithdrawAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            WithdrawIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WithdrawIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WithdrawIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.WithdrawAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WithdrawIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WithdrawIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.WithdrawAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            WithdrawIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WithdrawIxProto)
                    return object;
                var message = new $root.vixen.parser.WithdrawIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.WithdrawIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.WithdrawAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            WithdrawIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.WithdrawAccountsProto.toObject(message.accounts, options);
                return object;
            };

            WithdrawIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WithdrawIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WithdrawIxProto";
            };

            return WithdrawIxProto;
        })();

        parser.ConfidentialTransferAccountsProto = (function() {

            function ConfidentialTransferAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialTransferAccountsProto.prototype.sourceAccount = "";
            ConfidentialTransferAccountsProto.prototype.mint = "";
            ConfidentialTransferAccountsProto.prototype.destination = "";
            ConfidentialTransferAccountsProto.prototype.owner = "";
            ConfidentialTransferAccountsProto.prototype.contextAccount = "";
            ConfidentialTransferAccountsProto.prototype.multisigSigners = $util.emptyArray;

            ConfidentialTransferAccountsProto.create = function create(properties) {
                return new ConfidentialTransferAccountsProto(properties);
            };

            ConfidentialTransferAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sourceAccount != null && Object.hasOwnProperty.call(message, "sourceAccount"))
                    writer.uint32(10).string(message.sourceAccount);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                    writer.uint32(26).string(message.destination);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(34).string(message.owner);
                if (message.contextAccount != null && Object.hasOwnProperty.call(message, "contextAccount"))
                    writer.uint32(42).string(message.contextAccount);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(50).string(message.multisigSigners[i]);
                return writer;
            };

            ConfidentialTransferAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialTransferAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialTransferAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.sourceAccount = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.destination = reader.string();
                            break;
                        }
                    case 4: {
                            message.owner = reader.string();
                            break;
                        }
                    case 5: {
                            message.contextAccount = reader.string();
                            break;
                        }
                    case 6: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialTransferAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialTransferAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sourceAccount != null && message.hasOwnProperty("sourceAccount"))
                    if (!$util.isString(message.sourceAccount))
                        return "sourceAccount: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.destination != null && message.hasOwnProperty("destination"))
                    if (!$util.isString(message.destination))
                        return "destination: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.contextAccount != null && message.hasOwnProperty("contextAccount"))
                    if (!$util.isString(message.contextAccount))
                        return "contextAccount: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            ConfidentialTransferAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialTransferAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialTransferAccountsProto();
                if (object.sourceAccount != null)
                    message.sourceAccount = String(object.sourceAccount);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.destination != null)
                    message.destination = String(object.destination);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.contextAccount != null)
                    message.contextAccount = String(object.contextAccount);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.ConfidentialTransferAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            ConfidentialTransferAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.sourceAccount = "";
                    object.mint = "";
                    object.destination = "";
                    object.owner = "";
                    object.contextAccount = "";
                }
                if (message.sourceAccount != null && message.hasOwnProperty("sourceAccount"))
                    object.sourceAccount = message.sourceAccount;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.destination != null && message.hasOwnProperty("destination"))
                    object.destination = message.destination;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.contextAccount != null && message.hasOwnProperty("contextAccount"))
                    object.contextAccount = message.contextAccount;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            ConfidentialTransferAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialTransferAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialTransferAccountsProto";
            };

            return ConfidentialTransferAccountsProto;
        })();

        parser.ConfidentialTransferIxProto = (function() {

            function ConfidentialTransferIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialTransferIxProto.prototype.accounts = null;

            ConfidentialTransferIxProto.create = function create(properties) {
                return new ConfidentialTransferIxProto(properties);
            };

            ConfidentialTransferIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ConfidentialTransferAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            ConfidentialTransferIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialTransferIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialTransferIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ConfidentialTransferAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialTransferIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialTransferIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ConfidentialTransferAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            ConfidentialTransferIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialTransferIxProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialTransferIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ConfidentialTransferAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            ConfidentialTransferIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ConfidentialTransferAccountsProto.toObject(message.accounts, options);
                return object;
            };

            ConfidentialTransferIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialTransferIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialTransferIxProto";
            };

            return ConfidentialTransferIxProto;
        })();

        parser.ApplyPendingBalanceAccountsProto = (function() {

            function ApplyPendingBalanceAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApplyPendingBalanceAccountsProto.prototype.account = "";
            ApplyPendingBalanceAccountsProto.prototype.owner = "";
            ApplyPendingBalanceAccountsProto.prototype.multisigSigners = $util.emptyArray;

            ApplyPendingBalanceAccountsProto.create = function create(properties) {
                return new ApplyPendingBalanceAccountsProto(properties);
            };

            ApplyPendingBalanceAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(18).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            ApplyPendingBalanceAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApplyPendingBalanceAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApplyPendingBalanceAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.owner = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApplyPendingBalanceAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApplyPendingBalanceAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            ApplyPendingBalanceAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApplyPendingBalanceAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ApplyPendingBalanceAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.ApplyPendingBalanceAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            ApplyPendingBalanceAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            ApplyPendingBalanceAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApplyPendingBalanceAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApplyPendingBalanceAccountsProto";
            };

            return ApplyPendingBalanceAccountsProto;
        })();

        parser.ApplyPendingBalanceIxProto = (function() {

            function ApplyPendingBalanceIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ApplyPendingBalanceIxProto.prototype.accounts = null;

            ApplyPendingBalanceIxProto.create = function create(properties) {
                return new ApplyPendingBalanceIxProto(properties);
            };

            ApplyPendingBalanceIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ApplyPendingBalanceAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            ApplyPendingBalanceIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ApplyPendingBalanceIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ApplyPendingBalanceIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ApplyPendingBalanceAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ApplyPendingBalanceIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ApplyPendingBalanceIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ApplyPendingBalanceAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            ApplyPendingBalanceIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ApplyPendingBalanceIxProto)
                    return object;
                var message = new $root.vixen.parser.ApplyPendingBalanceIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ApplyPendingBalanceIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ApplyPendingBalanceAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            ApplyPendingBalanceIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ApplyPendingBalanceAccountsProto.toObject(message.accounts, options);
                return object;
            };

            ApplyPendingBalanceIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ApplyPendingBalanceIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ApplyPendingBalanceIxProto";
            };

            return ApplyPendingBalanceIxProto;
        })();

        parser.CreditsAccountsProto = (function() {

            function CreditsAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            CreditsAccountsProto.prototype.account = "";
            CreditsAccountsProto.prototype.owner = "";
            CreditsAccountsProto.prototype.multisigSigners = $util.emptyArray;

            CreditsAccountsProto.create = function create(properties) {
                return new CreditsAccountsProto(properties);
            };

            CreditsAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(18).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            CreditsAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            CreditsAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.CreditsAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.owner = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            CreditsAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            CreditsAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            CreditsAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.CreditsAccountsProto)
                    return object;
                var message = new $root.vixen.parser.CreditsAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.CreditsAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            CreditsAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            CreditsAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            CreditsAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.CreditsAccountsProto";
            };

            return CreditsAccountsProto;
        })();

        parser.EnableConfidentialCreditsIxProto = (function() {

            function EnableConfidentialCreditsIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EnableConfidentialCreditsIxProto.prototype.accounts = null;

            EnableConfidentialCreditsIxProto.create = function create(properties) {
                return new EnableConfidentialCreditsIxProto(properties);
            };

            EnableConfidentialCreditsIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.CreditsAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            EnableConfidentialCreditsIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EnableConfidentialCreditsIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EnableConfidentialCreditsIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.CreditsAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EnableConfidentialCreditsIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EnableConfidentialCreditsIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.CreditsAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            EnableConfidentialCreditsIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EnableConfidentialCreditsIxProto)
                    return object;
                var message = new $root.vixen.parser.EnableConfidentialCreditsIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.EnableConfidentialCreditsIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.CreditsAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            EnableConfidentialCreditsIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.CreditsAccountsProto.toObject(message.accounts, options);
                return object;
            };

            EnableConfidentialCreditsIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnableConfidentialCreditsIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EnableConfidentialCreditsIxProto";
            };

            return EnableConfidentialCreditsIxProto;
        })();

        parser.DisableConfidentialCreditsIxProto = (function() {

            function DisableConfidentialCreditsIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DisableConfidentialCreditsIxProto.prototype.accounts = null;

            DisableConfidentialCreditsIxProto.create = function create(properties) {
                return new DisableConfidentialCreditsIxProto(properties);
            };

            DisableConfidentialCreditsIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.CreditsAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            DisableConfidentialCreditsIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DisableConfidentialCreditsIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DisableConfidentialCreditsIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.CreditsAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DisableConfidentialCreditsIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DisableConfidentialCreditsIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.CreditsAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            DisableConfidentialCreditsIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DisableConfidentialCreditsIxProto)
                    return object;
                var message = new $root.vixen.parser.DisableConfidentialCreditsIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.DisableConfidentialCreditsIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.CreditsAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            DisableConfidentialCreditsIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.CreditsAccountsProto.toObject(message.accounts, options);
                return object;
            };

            DisableConfidentialCreditsIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DisableConfidentialCreditsIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DisableConfidentialCreditsIxProto";
            };

            return DisableConfidentialCreditsIxProto;
        })();

        parser.EnableNonConfidentialCreditsIxProto = (function() {

            function EnableNonConfidentialCreditsIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EnableNonConfidentialCreditsIxProto.prototype.accounts = null;

            EnableNonConfidentialCreditsIxProto.create = function create(properties) {
                return new EnableNonConfidentialCreditsIxProto(properties);
            };

            EnableNonConfidentialCreditsIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.CreditsAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            EnableNonConfidentialCreditsIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EnableNonConfidentialCreditsIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EnableNonConfidentialCreditsIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.CreditsAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EnableNonConfidentialCreditsIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EnableNonConfidentialCreditsIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.CreditsAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            EnableNonConfidentialCreditsIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EnableNonConfidentialCreditsIxProto)
                    return object;
                var message = new $root.vixen.parser.EnableNonConfidentialCreditsIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.EnableNonConfidentialCreditsIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.CreditsAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            EnableNonConfidentialCreditsIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.CreditsAccountsProto.toObject(message.accounts, options);
                return object;
            };

            EnableNonConfidentialCreditsIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnableNonConfidentialCreditsIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EnableNonConfidentialCreditsIxProto";
            };

            return EnableNonConfidentialCreditsIxProto;
        })();

        parser.DisableNonConfidentialCreditsIxProto = (function() {

            function DisableNonConfidentialCreditsIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DisableNonConfidentialCreditsIxProto.prototype.accounts = null;

            DisableNonConfidentialCreditsIxProto.create = function create(properties) {
                return new DisableNonConfidentialCreditsIxProto(properties);
            };

            DisableNonConfidentialCreditsIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.CreditsAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            DisableNonConfidentialCreditsIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DisableNonConfidentialCreditsIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DisableNonConfidentialCreditsIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.CreditsAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DisableNonConfidentialCreditsIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DisableNonConfidentialCreditsIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.CreditsAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            DisableNonConfidentialCreditsIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DisableNonConfidentialCreditsIxProto)
                    return object;
                var message = new $root.vixen.parser.DisableNonConfidentialCreditsIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.DisableNonConfidentialCreditsIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.CreditsAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            DisableNonConfidentialCreditsIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.CreditsAccountsProto.toObject(message.accounts, options);
                return object;
            };

            DisableNonConfidentialCreditsIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DisableNonConfidentialCreditsIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DisableNonConfidentialCreditsIxProto";
            };

            return DisableNonConfidentialCreditsIxProto;
        })();

        parser.TransferWithSplitProofsAccountsProto = (function() {

            function TransferWithSplitProofsAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferWithSplitProofsAccountsProto.prototype.sourceAccount = "";
            TransferWithSplitProofsAccountsProto.prototype.mint = "";
            TransferWithSplitProofsAccountsProto.prototype.destination = "";
            TransferWithSplitProofsAccountsProto.prototype.verifyCiphertextCommitmentEqualityProof = "";
            TransferWithSplitProofsAccountsProto.prototype.verifyBatchedGroupedCipherText_2HandlesValidityProof = "";
            TransferWithSplitProofsAccountsProto.prototype.verifyBatchedRangeProofU128 = null;
            TransferWithSplitProofsAccountsProto.prototype.verifyBatchedRangeProofU256 = null;
            TransferWithSplitProofsAccountsProto.prototype.verifyBatchedGroupedCipherText_2HandlesValidityProofNext = null;
            TransferWithSplitProofsAccountsProto.prototype.verifyFeeSigmaProof = null;
            TransferWithSplitProofsAccountsProto.prototype.destinationAccountForLamports = null;
            TransferWithSplitProofsAccountsProto.prototype.contextStateAccountOwner = null;
            TransferWithSplitProofsAccountsProto.prototype.zkTokenProofProgram = null;
            TransferWithSplitProofsAccountsProto.prototype.owner = null;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TransferWithSplitProofsAccountsProto.prototype, "_verifyBatchedRangeProofU128", {
                get: $util.oneOfGetter($oneOfFields = ["verifyBatchedRangeProofU128"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TransferWithSplitProofsAccountsProto.prototype, "_verifyBatchedRangeProofU256", {
                get: $util.oneOfGetter($oneOfFields = ["verifyBatchedRangeProofU256"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TransferWithSplitProofsAccountsProto.prototype, "_verifyBatchedGroupedCipherText_2HandlesValidityProofNext", {
                get: $util.oneOfGetter($oneOfFields = ["verifyBatchedGroupedCipherText_2HandlesValidityProofNext"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TransferWithSplitProofsAccountsProto.prototype, "_verifyFeeSigmaProof", {
                get: $util.oneOfGetter($oneOfFields = ["verifyFeeSigmaProof"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TransferWithSplitProofsAccountsProto.prototype, "_destinationAccountForLamports", {
                get: $util.oneOfGetter($oneOfFields = ["destinationAccountForLamports"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TransferWithSplitProofsAccountsProto.prototype, "_contextStateAccountOwner", {
                get: $util.oneOfGetter($oneOfFields = ["contextStateAccountOwner"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TransferWithSplitProofsAccountsProto.prototype, "_zkTokenProofProgram", {
                get: $util.oneOfGetter($oneOfFields = ["zkTokenProofProgram"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(TransferWithSplitProofsAccountsProto.prototype, "_owner", {
                get: $util.oneOfGetter($oneOfFields = ["owner"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            TransferWithSplitProofsAccountsProto.create = function create(properties) {
                return new TransferWithSplitProofsAccountsProto(properties);
            };

            TransferWithSplitProofsAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sourceAccount != null && Object.hasOwnProperty.call(message, "sourceAccount"))
                    writer.uint32(10).string(message.sourceAccount);
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(18).string(message.mint);
                if (message.destination != null && Object.hasOwnProperty.call(message, "destination"))
                    writer.uint32(26).string(message.destination);
                if (message.verifyCiphertextCommitmentEqualityProof != null && Object.hasOwnProperty.call(message, "verifyCiphertextCommitmentEqualityProof"))
                    writer.uint32(34).string(message.verifyCiphertextCommitmentEqualityProof);
                if (message.verifyBatchedGroupedCipherText_2HandlesValidityProof != null && Object.hasOwnProperty.call(message, "verifyBatchedGroupedCipherText_2HandlesValidityProof"))
                    writer.uint32(42).string(message.verifyBatchedGroupedCipherText_2HandlesValidityProof);
                if (message.verifyBatchedRangeProofU128 != null && Object.hasOwnProperty.call(message, "verifyBatchedRangeProofU128"))
                    writer.uint32(50).string(message.verifyBatchedRangeProofU128);
                if (message.verifyBatchedRangeProofU256 != null && Object.hasOwnProperty.call(message, "verifyBatchedRangeProofU256"))
                    writer.uint32(58).string(message.verifyBatchedRangeProofU256);
                if (message.verifyBatchedGroupedCipherText_2HandlesValidityProofNext != null && Object.hasOwnProperty.call(message, "verifyBatchedGroupedCipherText_2HandlesValidityProofNext"))
                    writer.uint32(66).string(message.verifyBatchedGroupedCipherText_2HandlesValidityProofNext);
                if (message.verifyFeeSigmaProof != null && Object.hasOwnProperty.call(message, "verifyFeeSigmaProof"))
                    writer.uint32(74).string(message.verifyFeeSigmaProof);
                if (message.destinationAccountForLamports != null && Object.hasOwnProperty.call(message, "destinationAccountForLamports"))
                    writer.uint32(82).string(message.destinationAccountForLamports);
                if (message.contextStateAccountOwner != null && Object.hasOwnProperty.call(message, "contextStateAccountOwner"))
                    writer.uint32(90).string(message.contextStateAccountOwner);
                if (message.zkTokenProofProgram != null && Object.hasOwnProperty.call(message, "zkTokenProofProgram"))
                    writer.uint32(98).string(message.zkTokenProofProgram);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(106).string(message.owner);
                return writer;
            };

            TransferWithSplitProofsAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferWithSplitProofsAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferWithSplitProofsAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.sourceAccount = reader.string();
                            break;
                        }
                    case 2: {
                            message.mint = reader.string();
                            break;
                        }
                    case 3: {
                            message.destination = reader.string();
                            break;
                        }
                    case 4: {
                            message.verifyCiphertextCommitmentEqualityProof = reader.string();
                            break;
                        }
                    case 5: {
                            message.verifyBatchedGroupedCipherText_2HandlesValidityProof = reader.string();
                            break;
                        }
                    case 6: {
                            message.verifyBatchedRangeProofU128 = reader.string();
                            break;
                        }
                    case 7: {
                            message.verifyBatchedRangeProofU256 = reader.string();
                            break;
                        }
                    case 8: {
                            message.verifyBatchedGroupedCipherText_2HandlesValidityProofNext = reader.string();
                            break;
                        }
                    case 9: {
                            message.verifyFeeSigmaProof = reader.string();
                            break;
                        }
                    case 10: {
                            message.destinationAccountForLamports = reader.string();
                            break;
                        }
                    case 11: {
                            message.contextStateAccountOwner = reader.string();
                            break;
                        }
                    case 12: {
                            message.zkTokenProofProgram = reader.string();
                            break;
                        }
                    case 13: {
                            message.owner = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferWithSplitProofsAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferWithSplitProofsAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.sourceAccount != null && message.hasOwnProperty("sourceAccount"))
                    if (!$util.isString(message.sourceAccount))
                        return "sourceAccount: string expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.destination != null && message.hasOwnProperty("destination"))
                    if (!$util.isString(message.destination))
                        return "destination: string expected";
                if (message.verifyCiphertextCommitmentEqualityProof != null && message.hasOwnProperty("verifyCiphertextCommitmentEqualityProof"))
                    if (!$util.isString(message.verifyCiphertextCommitmentEqualityProof))
                        return "verifyCiphertextCommitmentEqualityProof: string expected";
                if (message.verifyBatchedGroupedCipherText_2HandlesValidityProof != null && message.hasOwnProperty("verifyBatchedGroupedCipherText_2HandlesValidityProof"))
                    if (!$util.isString(message.verifyBatchedGroupedCipherText_2HandlesValidityProof))
                        return "verifyBatchedGroupedCipherText_2HandlesValidityProof: string expected";
                if (message.verifyBatchedRangeProofU128 != null && message.hasOwnProperty("verifyBatchedRangeProofU128")) {
                    properties._verifyBatchedRangeProofU128 = 1;
                    if (!$util.isString(message.verifyBatchedRangeProofU128))
                        return "verifyBatchedRangeProofU128: string expected";
                }
                if (message.verifyBatchedRangeProofU256 != null && message.hasOwnProperty("verifyBatchedRangeProofU256")) {
                    properties._verifyBatchedRangeProofU256 = 1;
                    if (!$util.isString(message.verifyBatchedRangeProofU256))
                        return "verifyBatchedRangeProofU256: string expected";
                }
                if (message.verifyBatchedGroupedCipherText_2HandlesValidityProofNext != null && message.hasOwnProperty("verifyBatchedGroupedCipherText_2HandlesValidityProofNext")) {
                    properties._verifyBatchedGroupedCipherText_2HandlesValidityProofNext = 1;
                    if (!$util.isString(message.verifyBatchedGroupedCipherText_2HandlesValidityProofNext))
                        return "verifyBatchedGroupedCipherText_2HandlesValidityProofNext: string expected";
                }
                if (message.verifyFeeSigmaProof != null && message.hasOwnProperty("verifyFeeSigmaProof")) {
                    properties._verifyFeeSigmaProof = 1;
                    if (!$util.isString(message.verifyFeeSigmaProof))
                        return "verifyFeeSigmaProof: string expected";
                }
                if (message.destinationAccountForLamports != null && message.hasOwnProperty("destinationAccountForLamports")) {
                    properties._destinationAccountForLamports = 1;
                    if (!$util.isString(message.destinationAccountForLamports))
                        return "destinationAccountForLamports: string expected";
                }
                if (message.contextStateAccountOwner != null && message.hasOwnProperty("contextStateAccountOwner")) {
                    properties._contextStateAccountOwner = 1;
                    if (!$util.isString(message.contextStateAccountOwner))
                        return "contextStateAccountOwner: string expected";
                }
                if (message.zkTokenProofProgram != null && message.hasOwnProperty("zkTokenProofProgram")) {
                    properties._zkTokenProofProgram = 1;
                    if (!$util.isString(message.zkTokenProofProgram))
                        return "zkTokenProofProgram: string expected";
                }
                if (message.owner != null && message.hasOwnProperty("owner")) {
                    properties._owner = 1;
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                }
                return null;
            };

            TransferWithSplitProofsAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferWithSplitProofsAccountsProto)
                    return object;
                var message = new $root.vixen.parser.TransferWithSplitProofsAccountsProto();
                if (object.sourceAccount != null)
                    message.sourceAccount = String(object.sourceAccount);
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.destination != null)
                    message.destination = String(object.destination);
                if (object.verifyCiphertextCommitmentEqualityProof != null)
                    message.verifyCiphertextCommitmentEqualityProof = String(object.verifyCiphertextCommitmentEqualityProof);
                if (object.verifyBatchedGroupedCipherText_2HandlesValidityProof != null)
                    message.verifyBatchedGroupedCipherText_2HandlesValidityProof = String(object.verifyBatchedGroupedCipherText_2HandlesValidityProof);
                if (object.verifyBatchedRangeProofU128 != null)
                    message.verifyBatchedRangeProofU128 = String(object.verifyBatchedRangeProofU128);
                if (object.verifyBatchedRangeProofU256 != null)
                    message.verifyBatchedRangeProofU256 = String(object.verifyBatchedRangeProofU256);
                if (object.verifyBatchedGroupedCipherText_2HandlesValidityProofNext != null)
                    message.verifyBatchedGroupedCipherText_2HandlesValidityProofNext = String(object.verifyBatchedGroupedCipherText_2HandlesValidityProofNext);
                if (object.verifyFeeSigmaProof != null)
                    message.verifyFeeSigmaProof = String(object.verifyFeeSigmaProof);
                if (object.destinationAccountForLamports != null)
                    message.destinationAccountForLamports = String(object.destinationAccountForLamports);
                if (object.contextStateAccountOwner != null)
                    message.contextStateAccountOwner = String(object.contextStateAccountOwner);
                if (object.zkTokenProofProgram != null)
                    message.zkTokenProofProgram = String(object.zkTokenProofProgram);
                if (object.owner != null)
                    message.owner = String(object.owner);
                return message;
            };

            TransferWithSplitProofsAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.sourceAccount = "";
                    object.mint = "";
                    object.destination = "";
                    object.verifyCiphertextCommitmentEqualityProof = "";
                    object.verifyBatchedGroupedCipherText_2HandlesValidityProof = "";
                }
                if (message.sourceAccount != null && message.hasOwnProperty("sourceAccount"))
                    object.sourceAccount = message.sourceAccount;
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.destination != null && message.hasOwnProperty("destination"))
                    object.destination = message.destination;
                if (message.verifyCiphertextCommitmentEqualityProof != null && message.hasOwnProperty("verifyCiphertextCommitmentEqualityProof"))
                    object.verifyCiphertextCommitmentEqualityProof = message.verifyCiphertextCommitmentEqualityProof;
                if (message.verifyBatchedGroupedCipherText_2HandlesValidityProof != null && message.hasOwnProperty("verifyBatchedGroupedCipherText_2HandlesValidityProof"))
                    object.verifyBatchedGroupedCipherText_2HandlesValidityProof = message.verifyBatchedGroupedCipherText_2HandlesValidityProof;
                if (message.verifyBatchedRangeProofU128 != null && message.hasOwnProperty("verifyBatchedRangeProofU128")) {
                    object.verifyBatchedRangeProofU128 = message.verifyBatchedRangeProofU128;
                    if (options.oneofs)
                        object._verifyBatchedRangeProofU128 = "verifyBatchedRangeProofU128";
                }
                if (message.verifyBatchedRangeProofU256 != null && message.hasOwnProperty("verifyBatchedRangeProofU256")) {
                    object.verifyBatchedRangeProofU256 = message.verifyBatchedRangeProofU256;
                    if (options.oneofs)
                        object._verifyBatchedRangeProofU256 = "verifyBatchedRangeProofU256";
                }
                if (message.verifyBatchedGroupedCipherText_2HandlesValidityProofNext != null && message.hasOwnProperty("verifyBatchedGroupedCipherText_2HandlesValidityProofNext")) {
                    object.verifyBatchedGroupedCipherText_2HandlesValidityProofNext = message.verifyBatchedGroupedCipherText_2HandlesValidityProofNext;
                    if (options.oneofs)
                        object._verifyBatchedGroupedCipherText_2HandlesValidityProofNext = "verifyBatchedGroupedCipherText_2HandlesValidityProofNext";
                }
                if (message.verifyFeeSigmaProof != null && message.hasOwnProperty("verifyFeeSigmaProof")) {
                    object.verifyFeeSigmaProof = message.verifyFeeSigmaProof;
                    if (options.oneofs)
                        object._verifyFeeSigmaProof = "verifyFeeSigmaProof";
                }
                if (message.destinationAccountForLamports != null && message.hasOwnProperty("destinationAccountForLamports")) {
                    object.destinationAccountForLamports = message.destinationAccountForLamports;
                    if (options.oneofs)
                        object._destinationAccountForLamports = "destinationAccountForLamports";
                }
                if (message.contextStateAccountOwner != null && message.hasOwnProperty("contextStateAccountOwner")) {
                    object.contextStateAccountOwner = message.contextStateAccountOwner;
                    if (options.oneofs)
                        object._contextStateAccountOwner = "contextStateAccountOwner";
                }
                if (message.zkTokenProofProgram != null && message.hasOwnProperty("zkTokenProofProgram")) {
                    object.zkTokenProofProgram = message.zkTokenProofProgram;
                    if (options.oneofs)
                        object._zkTokenProofProgram = "zkTokenProofProgram";
                }
                if (message.owner != null && message.hasOwnProperty("owner")) {
                    object.owner = message.owner;
                    if (options.oneofs)
                        object._owner = "owner";
                }
                return object;
            };

            TransferWithSplitProofsAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferWithSplitProofsAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferWithSplitProofsAccountsProto";
            };

            return TransferWithSplitProofsAccountsProto;
        })();

        parser.TransferWithSplitProofsIxProto = (function() {

            function TransferWithSplitProofsIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferWithSplitProofsIxProto.prototype.accounts = null;

            TransferWithSplitProofsIxProto.create = function create(properties) {
                return new TransferWithSplitProofsIxProto(properties);
            };

            TransferWithSplitProofsIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.TransferWithSplitProofsAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            TransferWithSplitProofsIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferWithSplitProofsIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferWithSplitProofsIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.TransferWithSplitProofsAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferWithSplitProofsIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferWithSplitProofsIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.TransferWithSplitProofsAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            TransferWithSplitProofsIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferWithSplitProofsIxProto)
                    return object;
                var message = new $root.vixen.parser.TransferWithSplitProofsIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.TransferWithSplitProofsIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.TransferWithSplitProofsAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            TransferWithSplitProofsIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.TransferWithSplitProofsAccountsProto.toObject(message.accounts, options);
                return object;
            };

            TransferWithSplitProofsIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferWithSplitProofsIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferWithSplitProofsIxProto";
            };

            return TransferWithSplitProofsIxProto;
        })();

        parser.ConfidentialTransferExtIxProto = (function() {

            function ConfidentialTransferExtIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialTransferExtIxProto.prototype.initializeMintIx = null;
            ConfidentialTransferExtIxProto.prototype.updateMintIx = null;
            ConfidentialTransferExtIxProto.prototype.configureAccountIx = null;
            ConfidentialTransferExtIxProto.prototype.approveAccountIx = null;
            ConfidentialTransferExtIxProto.prototype.emptyAccountIx = null;
            ConfidentialTransferExtIxProto.prototype.depositIx = null;
            ConfidentialTransferExtIxProto.prototype.withdrawIx = null;
            ConfidentialTransferExtIxProto.prototype.transferIx = null;
            ConfidentialTransferExtIxProto.prototype.applyPendingBalanceIx = null;
            ConfidentialTransferExtIxProto.prototype.enableConfidentialCreditsIx = null;
            ConfidentialTransferExtIxProto.prototype.disableConfidentialCreditsIx = null;
            ConfidentialTransferExtIxProto.prototype.enableNonConfidentialCreditsIx = null;
            ConfidentialTransferExtIxProto.prototype.disableNonConfidentialCreditsIx = null;
            ConfidentialTransferExtIxProto.prototype.transferWithSplitProofsIx = null;

            var $oneOfFields;

            Object.defineProperty(ConfidentialTransferExtIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["initializeMintIx", "updateMintIx", "configureAccountIx", "approveAccountIx", "emptyAccountIx", "depositIx", "withdrawIx", "transferIx", "applyPendingBalanceIx", "enableConfidentialCreditsIx", "disableConfidentialCreditsIx", "enableNonConfidentialCreditsIx", "disableNonConfidentialCreditsIx", "transferWithSplitProofsIx"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            ConfidentialTransferExtIxProto.create = function create(properties) {
                return new ConfidentialTransferExtIxProto(properties);
            };

            ConfidentialTransferExtIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.initializeMintIx != null && Object.hasOwnProperty.call(message, "initializeMintIx"))
                    $root.vixen.parser.InitializeConfidentialMintIxProto.encode(message.initializeMintIx, writer.uint32(10).fork()).ldelim();
                if (message.updateMintIx != null && Object.hasOwnProperty.call(message, "updateMintIx"))
                    $root.vixen.parser.UpdateMintIxProto.encode(message.updateMintIx, writer.uint32(18).fork()).ldelim();
                if (message.configureAccountIx != null && Object.hasOwnProperty.call(message, "configureAccountIx"))
                    $root.vixen.parser.ConfigureAccountIxProto.encode(message.configureAccountIx, writer.uint32(26).fork()).ldelim();
                if (message.approveAccountIx != null && Object.hasOwnProperty.call(message, "approveAccountIx"))
                    $root.vixen.parser.ApproveAccountIxProto.encode(message.approveAccountIx, writer.uint32(34).fork()).ldelim();
                if (message.emptyAccountIx != null && Object.hasOwnProperty.call(message, "emptyAccountIx"))
                    $root.vixen.parser.EmptyAccountIxProto.encode(message.emptyAccountIx, writer.uint32(42).fork()).ldelim();
                if (message.depositIx != null && Object.hasOwnProperty.call(message, "depositIx"))
                    $root.vixen.parser.DepositIxProto.encode(message.depositIx, writer.uint32(50).fork()).ldelim();
                if (message.withdrawIx != null && Object.hasOwnProperty.call(message, "withdrawIx"))
                    $root.vixen.parser.WithdrawIxProto.encode(message.withdrawIx, writer.uint32(58).fork()).ldelim();
                if (message.transferIx != null && Object.hasOwnProperty.call(message, "transferIx"))
                    $root.vixen.parser.ConfidentialTransferIxProto.encode(message.transferIx, writer.uint32(66).fork()).ldelim();
                if (message.applyPendingBalanceIx != null && Object.hasOwnProperty.call(message, "applyPendingBalanceIx"))
                    $root.vixen.parser.ApplyPendingBalanceIxProto.encode(message.applyPendingBalanceIx, writer.uint32(74).fork()).ldelim();
                if (message.enableConfidentialCreditsIx != null && Object.hasOwnProperty.call(message, "enableConfidentialCreditsIx"))
                    $root.vixen.parser.EnableConfidentialCreditsIxProto.encode(message.enableConfidentialCreditsIx, writer.uint32(82).fork()).ldelim();
                if (message.disableConfidentialCreditsIx != null && Object.hasOwnProperty.call(message, "disableConfidentialCreditsIx"))
                    $root.vixen.parser.DisableConfidentialCreditsIxProto.encode(message.disableConfidentialCreditsIx, writer.uint32(90).fork()).ldelim();
                if (message.enableNonConfidentialCreditsIx != null && Object.hasOwnProperty.call(message, "enableNonConfidentialCreditsIx"))
                    $root.vixen.parser.EnableNonConfidentialCreditsIxProto.encode(message.enableNonConfidentialCreditsIx, writer.uint32(98).fork()).ldelim();
                if (message.disableNonConfidentialCreditsIx != null && Object.hasOwnProperty.call(message, "disableNonConfidentialCreditsIx"))
                    $root.vixen.parser.DisableNonConfidentialCreditsIxProto.encode(message.disableNonConfidentialCreditsIx, writer.uint32(106).fork()).ldelim();
                if (message.transferWithSplitProofsIx != null && Object.hasOwnProperty.call(message, "transferWithSplitProofsIx"))
                    $root.vixen.parser.TransferWithSplitProofsIxProto.encode(message.transferWithSplitProofsIx, writer.uint32(114).fork()).ldelim();
                return writer;
            };

            ConfidentialTransferExtIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialTransferExtIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialTransferExtIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.initializeMintIx = $root.vixen.parser.InitializeConfidentialMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.updateMintIx = $root.vixen.parser.UpdateMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.configureAccountIx = $root.vixen.parser.ConfigureAccountIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.approveAccountIx = $root.vixen.parser.ApproveAccountIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.emptyAccountIx = $root.vixen.parser.EmptyAccountIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.depositIx = $root.vixen.parser.DepositIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.withdrawIx = $root.vixen.parser.WithdrawIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.transferIx = $root.vixen.parser.ConfidentialTransferIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.applyPendingBalanceIx = $root.vixen.parser.ApplyPendingBalanceIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            message.enableConfidentialCreditsIx = $root.vixen.parser.EnableConfidentialCreditsIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.disableConfidentialCreditsIx = $root.vixen.parser.DisableConfidentialCreditsIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.enableNonConfidentialCreditsIx = $root.vixen.parser.EnableNonConfidentialCreditsIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 13: {
                            message.disableNonConfidentialCreditsIx = $root.vixen.parser.DisableNonConfidentialCreditsIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 14: {
                            message.transferWithSplitProofsIx = $root.vixen.parser.TransferWithSplitProofsIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialTransferExtIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialTransferExtIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.initializeMintIx != null && message.hasOwnProperty("initializeMintIx")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeConfidentialMintIxProto.verify(message.initializeMintIx);
                        if (error)
                            return "initializeMintIx." + error;
                    }
                }
                if (message.updateMintIx != null && message.hasOwnProperty("updateMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.UpdateMintIxProto.verify(message.updateMintIx);
                        if (error)
                            return "updateMintIx." + error;
                    }
                }
                if (message.configureAccountIx != null && message.hasOwnProperty("configureAccountIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ConfigureAccountIxProto.verify(message.configureAccountIx);
                        if (error)
                            return "configureAccountIx." + error;
                    }
                }
                if (message.approveAccountIx != null && message.hasOwnProperty("approveAccountIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ApproveAccountIxProto.verify(message.approveAccountIx);
                        if (error)
                            return "approveAccountIx." + error;
                    }
                }
                if (message.emptyAccountIx != null && message.hasOwnProperty("emptyAccountIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.EmptyAccountIxProto.verify(message.emptyAccountIx);
                        if (error)
                            return "emptyAccountIx." + error;
                    }
                }
                if (message.depositIx != null && message.hasOwnProperty("depositIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.DepositIxProto.verify(message.depositIx);
                        if (error)
                            return "depositIx." + error;
                    }
                }
                if (message.withdrawIx != null && message.hasOwnProperty("withdrawIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.WithdrawIxProto.verify(message.withdrawIx);
                        if (error)
                            return "withdrawIx." + error;
                    }
                }
                if (message.transferIx != null && message.hasOwnProperty("transferIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialTransferIxProto.verify(message.transferIx);
                        if (error)
                            return "transferIx." + error;
                    }
                }
                if (message.applyPendingBalanceIx != null && message.hasOwnProperty("applyPendingBalanceIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ApplyPendingBalanceIxProto.verify(message.applyPendingBalanceIx);
                        if (error)
                            return "applyPendingBalanceIx." + error;
                    }
                }
                if (message.enableConfidentialCreditsIx != null && message.hasOwnProperty("enableConfidentialCreditsIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.EnableConfidentialCreditsIxProto.verify(message.enableConfidentialCreditsIx);
                        if (error)
                            return "enableConfidentialCreditsIx." + error;
                    }
                }
                if (message.disableConfidentialCreditsIx != null && message.hasOwnProperty("disableConfidentialCreditsIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.DisableConfidentialCreditsIxProto.verify(message.disableConfidentialCreditsIx);
                        if (error)
                            return "disableConfidentialCreditsIx." + error;
                    }
                }
                if (message.enableNonConfidentialCreditsIx != null && message.hasOwnProperty("enableNonConfidentialCreditsIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.EnableNonConfidentialCreditsIxProto.verify(message.enableNonConfidentialCreditsIx);
                        if (error)
                            return "enableNonConfidentialCreditsIx." + error;
                    }
                }
                if (message.disableNonConfidentialCreditsIx != null && message.hasOwnProperty("disableNonConfidentialCreditsIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.DisableNonConfidentialCreditsIxProto.verify(message.disableNonConfidentialCreditsIx);
                        if (error)
                            return "disableNonConfidentialCreditsIx." + error;
                    }
                }
                if (message.transferWithSplitProofsIx != null && message.hasOwnProperty("transferWithSplitProofsIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.TransferWithSplitProofsIxProto.verify(message.transferWithSplitProofsIx);
                        if (error)
                            return "transferWithSplitProofsIx." + error;
                    }
                }
                return null;
            };

            ConfidentialTransferExtIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialTransferExtIxProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialTransferExtIxProto();
                if (object.initializeMintIx != null) {
                    if (typeof object.initializeMintIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.initializeMintIx: object expected");
                    message.initializeMintIx = $root.vixen.parser.InitializeConfidentialMintIxProto.fromObject(object.initializeMintIx);
                }
                if (object.updateMintIx != null) {
                    if (typeof object.updateMintIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.updateMintIx: object expected");
                    message.updateMintIx = $root.vixen.parser.UpdateMintIxProto.fromObject(object.updateMintIx);
                }
                if (object.configureAccountIx != null) {
                    if (typeof object.configureAccountIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.configureAccountIx: object expected");
                    message.configureAccountIx = $root.vixen.parser.ConfigureAccountIxProto.fromObject(object.configureAccountIx);
                }
                if (object.approveAccountIx != null) {
                    if (typeof object.approveAccountIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.approveAccountIx: object expected");
                    message.approveAccountIx = $root.vixen.parser.ApproveAccountIxProto.fromObject(object.approveAccountIx);
                }
                if (object.emptyAccountIx != null) {
                    if (typeof object.emptyAccountIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.emptyAccountIx: object expected");
                    message.emptyAccountIx = $root.vixen.parser.EmptyAccountIxProto.fromObject(object.emptyAccountIx);
                }
                if (object.depositIx != null) {
                    if (typeof object.depositIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.depositIx: object expected");
                    message.depositIx = $root.vixen.parser.DepositIxProto.fromObject(object.depositIx);
                }
                if (object.withdrawIx != null) {
                    if (typeof object.withdrawIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.withdrawIx: object expected");
                    message.withdrawIx = $root.vixen.parser.WithdrawIxProto.fromObject(object.withdrawIx);
                }
                if (object.transferIx != null) {
                    if (typeof object.transferIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.transferIx: object expected");
                    message.transferIx = $root.vixen.parser.ConfidentialTransferIxProto.fromObject(object.transferIx);
                }
                if (object.applyPendingBalanceIx != null) {
                    if (typeof object.applyPendingBalanceIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.applyPendingBalanceIx: object expected");
                    message.applyPendingBalanceIx = $root.vixen.parser.ApplyPendingBalanceIxProto.fromObject(object.applyPendingBalanceIx);
                }
                if (object.enableConfidentialCreditsIx != null) {
                    if (typeof object.enableConfidentialCreditsIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.enableConfidentialCreditsIx: object expected");
                    message.enableConfidentialCreditsIx = $root.vixen.parser.EnableConfidentialCreditsIxProto.fromObject(object.enableConfidentialCreditsIx);
                }
                if (object.disableConfidentialCreditsIx != null) {
                    if (typeof object.disableConfidentialCreditsIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.disableConfidentialCreditsIx: object expected");
                    message.disableConfidentialCreditsIx = $root.vixen.parser.DisableConfidentialCreditsIxProto.fromObject(object.disableConfidentialCreditsIx);
                }
                if (object.enableNonConfidentialCreditsIx != null) {
                    if (typeof object.enableNonConfidentialCreditsIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.enableNonConfidentialCreditsIx: object expected");
                    message.enableNonConfidentialCreditsIx = $root.vixen.parser.EnableNonConfidentialCreditsIxProto.fromObject(object.enableNonConfidentialCreditsIx);
                }
                if (object.disableNonConfidentialCreditsIx != null) {
                    if (typeof object.disableNonConfidentialCreditsIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.disableNonConfidentialCreditsIx: object expected");
                    message.disableNonConfidentialCreditsIx = $root.vixen.parser.DisableNonConfidentialCreditsIxProto.fromObject(object.disableNonConfidentialCreditsIx);
                }
                if (object.transferWithSplitProofsIx != null) {
                    if (typeof object.transferWithSplitProofsIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferExtIxProto.transferWithSplitProofsIx: object expected");
                    message.transferWithSplitProofsIx = $root.vixen.parser.TransferWithSplitProofsIxProto.fromObject(object.transferWithSplitProofsIx);
                }
                return message;
            };

            ConfidentialTransferExtIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.initializeMintIx != null && message.hasOwnProperty("initializeMintIx")) {
                    object.initializeMintIx = $root.vixen.parser.InitializeConfidentialMintIxProto.toObject(message.initializeMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeMintIx";
                }
                if (message.updateMintIx != null && message.hasOwnProperty("updateMintIx")) {
                    object.updateMintIx = $root.vixen.parser.UpdateMintIxProto.toObject(message.updateMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "updateMintIx";
                }
                if (message.configureAccountIx != null && message.hasOwnProperty("configureAccountIx")) {
                    object.configureAccountIx = $root.vixen.parser.ConfigureAccountIxProto.toObject(message.configureAccountIx, options);
                    if (options.oneofs)
                        object.ixOneof = "configureAccountIx";
                }
                if (message.approveAccountIx != null && message.hasOwnProperty("approveAccountIx")) {
                    object.approveAccountIx = $root.vixen.parser.ApproveAccountIxProto.toObject(message.approveAccountIx, options);
                    if (options.oneofs)
                        object.ixOneof = "approveAccountIx";
                }
                if (message.emptyAccountIx != null && message.hasOwnProperty("emptyAccountIx")) {
                    object.emptyAccountIx = $root.vixen.parser.EmptyAccountIxProto.toObject(message.emptyAccountIx, options);
                    if (options.oneofs)
                        object.ixOneof = "emptyAccountIx";
                }
                if (message.depositIx != null && message.hasOwnProperty("depositIx")) {
                    object.depositIx = $root.vixen.parser.DepositIxProto.toObject(message.depositIx, options);
                    if (options.oneofs)
                        object.ixOneof = "depositIx";
                }
                if (message.withdrawIx != null && message.hasOwnProperty("withdrawIx")) {
                    object.withdrawIx = $root.vixen.parser.WithdrawIxProto.toObject(message.withdrawIx, options);
                    if (options.oneofs)
                        object.ixOneof = "withdrawIx";
                }
                if (message.transferIx != null && message.hasOwnProperty("transferIx")) {
                    object.transferIx = $root.vixen.parser.ConfidentialTransferIxProto.toObject(message.transferIx, options);
                    if (options.oneofs)
                        object.ixOneof = "transferIx";
                }
                if (message.applyPendingBalanceIx != null && message.hasOwnProperty("applyPendingBalanceIx")) {
                    object.applyPendingBalanceIx = $root.vixen.parser.ApplyPendingBalanceIxProto.toObject(message.applyPendingBalanceIx, options);
                    if (options.oneofs)
                        object.ixOneof = "applyPendingBalanceIx";
                }
                if (message.enableConfidentialCreditsIx != null && message.hasOwnProperty("enableConfidentialCreditsIx")) {
                    object.enableConfidentialCreditsIx = $root.vixen.parser.EnableConfidentialCreditsIxProto.toObject(message.enableConfidentialCreditsIx, options);
                    if (options.oneofs)
                        object.ixOneof = "enableConfidentialCreditsIx";
                }
                if (message.disableConfidentialCreditsIx != null && message.hasOwnProperty("disableConfidentialCreditsIx")) {
                    object.disableConfidentialCreditsIx = $root.vixen.parser.DisableConfidentialCreditsIxProto.toObject(message.disableConfidentialCreditsIx, options);
                    if (options.oneofs)
                        object.ixOneof = "disableConfidentialCreditsIx";
                }
                if (message.enableNonConfidentialCreditsIx != null && message.hasOwnProperty("enableNonConfidentialCreditsIx")) {
                    object.enableNonConfidentialCreditsIx = $root.vixen.parser.EnableNonConfidentialCreditsIxProto.toObject(message.enableNonConfidentialCreditsIx, options);
                    if (options.oneofs)
                        object.ixOneof = "enableNonConfidentialCreditsIx";
                }
                if (message.disableNonConfidentialCreditsIx != null && message.hasOwnProperty("disableNonConfidentialCreditsIx")) {
                    object.disableNonConfidentialCreditsIx = $root.vixen.parser.DisableNonConfidentialCreditsIxProto.toObject(message.disableNonConfidentialCreditsIx, options);
                    if (options.oneofs)
                        object.ixOneof = "disableNonConfidentialCreditsIx";
                }
                if (message.transferWithSplitProofsIx != null && message.hasOwnProperty("transferWithSplitProofsIx")) {
                    object.transferWithSplitProofsIx = $root.vixen.parser.TransferWithSplitProofsIxProto.toObject(message.transferWithSplitProofsIx, options);
                    if (options.oneofs)
                        object.ixOneof = "transferWithSplitProofsIx";
                }
                return object;
            };

            ConfidentialTransferExtIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialTransferExtIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialTransferExtIxProto";
            };

            return ConfidentialTransferExtIxProto;
        })();

        parser.InitializeConfidentialTransferFeeConfigAccountsProto = (function() {

            function InitializeConfidentialTransferFeeConfigAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeConfidentialTransferFeeConfigAccountsProto.prototype.mint = "";

            InitializeConfidentialTransferFeeConfigAccountsProto.create = function create(properties) {
                return new InitializeConfidentialTransferFeeConfigAccountsProto(properties);
            };

            InitializeConfidentialTransferFeeConfigAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            InitializeConfidentialTransferFeeConfigAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeConfidentialTransferFeeConfigAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeConfidentialTransferFeeConfigAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeConfidentialTransferFeeConfigAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeConfidentialTransferFeeConfigAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            InitializeConfidentialTransferFeeConfigAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeConfidentialTransferFeeConfigAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeConfidentialTransferFeeConfigAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            InitializeConfidentialTransferFeeConfigAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            InitializeConfidentialTransferFeeConfigAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeConfidentialTransferFeeConfigAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeConfidentialTransferFeeConfigAccountsProto";
            };

            return InitializeConfidentialTransferFeeConfigAccountsProto;
        })();

        parser.InitializeConfidentialTransferFeeConfigIxProto = (function() {

            function InitializeConfidentialTransferFeeConfigIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeConfidentialTransferFeeConfigIxProto.prototype.accounts = null;

            InitializeConfidentialTransferFeeConfigIxProto.create = function create(properties) {
                return new InitializeConfidentialTransferFeeConfigIxProto(properties);
            };

            InitializeConfidentialTransferFeeConfigIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeConfidentialTransferFeeConfigAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            InitializeConfidentialTransferFeeConfigIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeConfidentialTransferFeeConfigIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeConfidentialTransferFeeConfigIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeConfidentialTransferFeeConfigAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeConfidentialTransferFeeConfigIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeConfidentialTransferFeeConfigIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeConfidentialTransferFeeConfigAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            InitializeConfidentialTransferFeeConfigIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeConfidentialTransferFeeConfigIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeConfidentialTransferFeeConfigIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeConfidentialTransferFeeConfigIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeConfidentialTransferFeeConfigAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            InitializeConfidentialTransferFeeConfigIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeConfidentialTransferFeeConfigAccountsProto.toObject(message.accounts, options);
                return object;
            };

            InitializeConfidentialTransferFeeConfigIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeConfidentialTransferFeeConfigIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeConfidentialTransferFeeConfigIxProto";
            };

            return InitializeConfidentialTransferFeeConfigIxProto;
        })();

        parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto = (function() {

            function ConfidentialWithdrawWithheldTokensFromMintAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.prototype.mint = "";
            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.prototype.feeRecipient = "";
            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.prototype.sysvar = "";
            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.prototype.withdrawWithheldAuthority = "";
            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.prototype.multisigSigners = $util.emptyArray;

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.create = function create(properties) {
                return new ConfidentialWithdrawWithheldTokensFromMintAccountsProto(properties);
            };

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.feeRecipient != null && Object.hasOwnProperty.call(message, "feeRecipient"))
                    writer.uint32(18).string(message.feeRecipient);
                if (message.sysvar != null && Object.hasOwnProperty.call(message, "sysvar"))
                    writer.uint32(26).string(message.sysvar);
                if (message.withdrawWithheldAuthority != null && Object.hasOwnProperty.call(message, "withdrawWithheldAuthority"))
                    writer.uint32(34).string(message.withdrawWithheldAuthority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(42).string(message.multisigSigners[i]);
                return writer;
            };

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.feeRecipient = reader.string();
                            break;
                        }
                    case 3: {
                            message.sysvar = reader.string();
                            break;
                        }
                    case 4: {
                            message.withdrawWithheldAuthority = reader.string();
                            break;
                        }
                    case 5: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.feeRecipient != null && message.hasOwnProperty("feeRecipient"))
                    if (!$util.isString(message.feeRecipient))
                        return "feeRecipient: string expected";
                if (message.sysvar != null && message.hasOwnProperty("sysvar"))
                    if (!$util.isString(message.sysvar))
                        return "sysvar: string expected";
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    if (!$util.isString(message.withdrawWithheldAuthority))
                        return "withdrawWithheldAuthority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.feeRecipient != null)
                    message.feeRecipient = String(object.feeRecipient);
                if (object.sysvar != null)
                    message.sysvar = String(object.sysvar);
                if (object.withdrawWithheldAuthority != null)
                    message.withdrawWithheldAuthority = String(object.withdrawWithheldAuthority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.mint = "";
                    object.feeRecipient = "";
                    object.sysvar = "";
                    object.withdrawWithheldAuthority = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.feeRecipient != null && message.hasOwnProperty("feeRecipient"))
                    object.feeRecipient = message.feeRecipient;
                if (message.sysvar != null && message.hasOwnProperty("sysvar"))
                    object.sysvar = message.sysvar;
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    object.withdrawWithheldAuthority = message.withdrawWithheldAuthority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialWithdrawWithheldTokensFromMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto";
            };

            return ConfidentialWithdrawWithheldTokensFromMintAccountsProto;
        })();

        parser.ConfidentialWithdrawWithheldTokensFromMintIxProto = (function() {

            function ConfidentialWithdrawWithheldTokensFromMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialWithdrawWithheldTokensFromMintIxProto.prototype.accounts = null;

            ConfidentialWithdrawWithheldTokensFromMintIxProto.create = function create(properties) {
                return new ConfidentialWithdrawWithheldTokensFromMintIxProto(properties);
            };

            ConfidentialWithdrawWithheldTokensFromMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            ConfidentialWithdrawWithheldTokensFromMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialWithdrawWithheldTokensFromMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialWithdrawWithheldTokensFromMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialWithdrawWithheldTokensFromMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            ConfidentialWithdrawWithheldTokensFromMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            ConfidentialWithdrawWithheldTokensFromMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            ConfidentialWithdrawWithheldTokensFromMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialWithdrawWithheldTokensFromMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto";
            };

            return ConfidentialWithdrawWithheldTokensFromMintIxProto;
        })();

        parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto = (function() {

            function ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto(properties) {
                this.sourceAccounts = [];
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.prototype.mint = "";
            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.prototype.feeRecipient = "";
            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.prototype.withdrawWithheldAuthority = "";
            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.prototype.sourceAccounts = $util.emptyArray;
            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.prototype.multisigSigners = $util.emptyArray;

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.create = function create(properties) {
                return new ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto(properties);
            };

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.feeRecipient != null && Object.hasOwnProperty.call(message, "feeRecipient"))
                    writer.uint32(18).string(message.feeRecipient);
                if (message.withdrawWithheldAuthority != null && Object.hasOwnProperty.call(message, "withdrawWithheldAuthority"))
                    writer.uint32(26).string(message.withdrawWithheldAuthority);
                if (message.sourceAccounts != null && message.sourceAccounts.length)
                    for (var i = 0; i < message.sourceAccounts.length; ++i)
                        writer.uint32(34).string(message.sourceAccounts[i]);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(42).string(message.multisigSigners[i]);
                return writer;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.feeRecipient = reader.string();
                            break;
                        }
                    case 3: {
                            message.withdrawWithheldAuthority = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.sourceAccounts && message.sourceAccounts.length))
                                message.sourceAccounts = [];
                            message.sourceAccounts.push(reader.string());
                            break;
                        }
                    case 5: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.feeRecipient != null && message.hasOwnProperty("feeRecipient"))
                    if (!$util.isString(message.feeRecipient))
                        return "feeRecipient: string expected";
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    if (!$util.isString(message.withdrawWithheldAuthority))
                        return "withdrawWithheldAuthority: string expected";
                if (message.sourceAccounts != null && message.hasOwnProperty("sourceAccounts")) {
                    if (!Array.isArray(message.sourceAccounts))
                        return "sourceAccounts: array expected";
                    for (var i = 0; i < message.sourceAccounts.length; ++i)
                        if (!$util.isString(message.sourceAccounts[i]))
                            return "sourceAccounts: string[] expected";
                }
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.feeRecipient != null)
                    message.feeRecipient = String(object.feeRecipient);
                if (object.withdrawWithheldAuthority != null)
                    message.withdrawWithheldAuthority = String(object.withdrawWithheldAuthority);
                if (object.sourceAccounts) {
                    if (!Array.isArray(object.sourceAccounts))
                        throw TypeError(".vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.sourceAccounts: array expected");
                    message.sourceAccounts = [];
                    for (var i = 0; i < object.sourceAccounts.length; ++i)
                        message.sourceAccounts[i] = String(object.sourceAccounts[i]);
                }
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.sourceAccounts = [];
                    object.multisigSigners = [];
                }
                if (options.defaults) {
                    object.mint = "";
                    object.feeRecipient = "";
                    object.withdrawWithheldAuthority = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.feeRecipient != null && message.hasOwnProperty("feeRecipient"))
                    object.feeRecipient = message.feeRecipient;
                if (message.withdrawWithheldAuthority != null && message.hasOwnProperty("withdrawWithheldAuthority"))
                    object.withdrawWithheldAuthority = message.withdrawWithheldAuthority;
                if (message.sourceAccounts && message.sourceAccounts.length) {
                    object.sourceAccounts = [];
                    for (var j = 0; j < message.sourceAccounts.length; ++j)
                        object.sourceAccounts[j] = message.sourceAccounts[j];
                }
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto";
            };

            return ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto;
        })();

        parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto = (function() {

            function ConfidentialWithdrawWithheldTokensFromAccountsIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.prototype.accounts = null;

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.create = function create(properties) {
                return new ConfidentialWithdrawWithheldTokensFromAccountsIxProto(properties);
            };

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsAccountsProto.toObject(message.accounts, options);
                return object;
            };

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialWithdrawWithheldTokensFromAccountsIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto";
            };

            return ConfidentialWithdrawWithheldTokensFromAccountsIxProto;
        })();

        parser.ConfidentialHarvestWithheldTokensToMintAccountsProto = (function() {

            function ConfidentialHarvestWithheldTokensToMintAccountsProto(properties) {
                this.sourceAccounts = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialHarvestWithheldTokensToMintAccountsProto.prototype.mint = "";
            ConfidentialHarvestWithheldTokensToMintAccountsProto.prototype.sourceAccounts = $util.emptyArray;

            ConfidentialHarvestWithheldTokensToMintAccountsProto.create = function create(properties) {
                return new ConfidentialHarvestWithheldTokensToMintAccountsProto(properties);
            };

            ConfidentialHarvestWithheldTokensToMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.sourceAccounts != null && message.sourceAccounts.length)
                    for (var i = 0; i < message.sourceAccounts.length; ++i)
                        writer.uint32(18).string(message.sourceAccounts[i]);
                return writer;
            };

            ConfidentialHarvestWithheldTokensToMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialHarvestWithheldTokensToMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.sourceAccounts && message.sourceAccounts.length))
                                message.sourceAccounts = [];
                            message.sourceAccounts.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialHarvestWithheldTokensToMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialHarvestWithheldTokensToMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.sourceAccounts != null && message.hasOwnProperty("sourceAccounts")) {
                    if (!Array.isArray(message.sourceAccounts))
                        return "sourceAccounts: array expected";
                    for (var i = 0; i < message.sourceAccounts.length; ++i)
                        if (!$util.isString(message.sourceAccounts[i]))
                            return "sourceAccounts: string[] expected";
                }
                return null;
            };

            ConfidentialHarvestWithheldTokensToMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.sourceAccounts) {
                    if (!Array.isArray(object.sourceAccounts))
                        throw TypeError(".vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto.sourceAccounts: array expected");
                    message.sourceAccounts = [];
                    for (var i = 0; i < object.sourceAccounts.length; ++i)
                        message.sourceAccounts[i] = String(object.sourceAccounts[i]);
                }
                return message;
            };

            ConfidentialHarvestWithheldTokensToMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.sourceAccounts = [];
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.sourceAccounts && message.sourceAccounts.length) {
                    object.sourceAccounts = [];
                    for (var j = 0; j < message.sourceAccounts.length; ++j)
                        object.sourceAccounts[j] = message.sourceAccounts[j];
                }
                return object;
            };

            ConfidentialHarvestWithheldTokensToMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialHarvestWithheldTokensToMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto";
            };

            return ConfidentialHarvestWithheldTokensToMintAccountsProto;
        })();

        parser.ConfidentialHarvestWithheldTokensToMintIxProto = (function() {

            function ConfidentialHarvestWithheldTokensToMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialHarvestWithheldTokensToMintIxProto.prototype.accounts = null;

            ConfidentialHarvestWithheldTokensToMintIxProto.create = function create(properties) {
                return new ConfidentialHarvestWithheldTokensToMintIxProto(properties);
            };

            ConfidentialHarvestWithheldTokensToMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            ConfidentialHarvestWithheldTokensToMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialHarvestWithheldTokensToMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialHarvestWithheldTokensToMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialHarvestWithheldTokensToMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            ConfidentialHarvestWithheldTokensToMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            ConfidentialHarvestWithheldTokensToMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            ConfidentialHarvestWithheldTokensToMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialHarvestWithheldTokensToMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto";
            };

            return ConfidentialHarvestWithheldTokensToMintIxProto;
        })();

        parser.EnableHarvestToMintAccountsProto = (function() {

            function EnableHarvestToMintAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EnableHarvestToMintAccountsProto.prototype.mint = "";
            EnableHarvestToMintAccountsProto.prototype.confidentialTransferFeeAuthority = "";
            EnableHarvestToMintAccountsProto.prototype.multisigSigners = $util.emptyArray;

            EnableHarvestToMintAccountsProto.create = function create(properties) {
                return new EnableHarvestToMintAccountsProto(properties);
            };

            EnableHarvestToMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.confidentialTransferFeeAuthority != null && Object.hasOwnProperty.call(message, "confidentialTransferFeeAuthority"))
                    writer.uint32(18).string(message.confidentialTransferFeeAuthority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            EnableHarvestToMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EnableHarvestToMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EnableHarvestToMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.confidentialTransferFeeAuthority = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EnableHarvestToMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EnableHarvestToMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.confidentialTransferFeeAuthority != null && message.hasOwnProperty("confidentialTransferFeeAuthority"))
                    if (!$util.isString(message.confidentialTransferFeeAuthority))
                        return "confidentialTransferFeeAuthority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            EnableHarvestToMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EnableHarvestToMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.EnableHarvestToMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.confidentialTransferFeeAuthority != null)
                    message.confidentialTransferFeeAuthority = String(object.confidentialTransferFeeAuthority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.EnableHarvestToMintAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            EnableHarvestToMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.mint = "";
                    object.confidentialTransferFeeAuthority = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.confidentialTransferFeeAuthority != null && message.hasOwnProperty("confidentialTransferFeeAuthority"))
                    object.confidentialTransferFeeAuthority = message.confidentialTransferFeeAuthority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            EnableHarvestToMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnableHarvestToMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EnableHarvestToMintAccountsProto";
            };

            return EnableHarvestToMintAccountsProto;
        })();

        parser.DisableHarvestToMintAccountsProto = (function() {

            function DisableHarvestToMintAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DisableHarvestToMintAccountsProto.prototype.account = "";
            DisableHarvestToMintAccountsProto.prototype.confidentialTransferFeeAuthority = "";
            DisableHarvestToMintAccountsProto.prototype.multisigSigners = $util.emptyArray;

            DisableHarvestToMintAccountsProto.create = function create(properties) {
                return new DisableHarvestToMintAccountsProto(properties);
            };

            DisableHarvestToMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.confidentialTransferFeeAuthority != null && Object.hasOwnProperty.call(message, "confidentialTransferFeeAuthority"))
                    writer.uint32(18).string(message.confidentialTransferFeeAuthority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            DisableHarvestToMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DisableHarvestToMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DisableHarvestToMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.confidentialTransferFeeAuthority = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DisableHarvestToMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DisableHarvestToMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.confidentialTransferFeeAuthority != null && message.hasOwnProperty("confidentialTransferFeeAuthority"))
                    if (!$util.isString(message.confidentialTransferFeeAuthority))
                        return "confidentialTransferFeeAuthority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            DisableHarvestToMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DisableHarvestToMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.DisableHarvestToMintAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.confidentialTransferFeeAuthority != null)
                    message.confidentialTransferFeeAuthority = String(object.confidentialTransferFeeAuthority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.DisableHarvestToMintAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            DisableHarvestToMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.confidentialTransferFeeAuthority = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.confidentialTransferFeeAuthority != null && message.hasOwnProperty("confidentialTransferFeeAuthority"))
                    object.confidentialTransferFeeAuthority = message.confidentialTransferFeeAuthority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            DisableHarvestToMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DisableHarvestToMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DisableHarvestToMintAccountsProto";
            };

            return DisableHarvestToMintAccountsProto;
        })();

        parser.EnableHarvestToMintIxProto = (function() {

            function EnableHarvestToMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EnableHarvestToMintIxProto.prototype.accounts = null;

            EnableHarvestToMintIxProto.create = function create(properties) {
                return new EnableHarvestToMintIxProto(properties);
            };

            EnableHarvestToMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.EnableHarvestToMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            EnableHarvestToMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EnableHarvestToMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EnableHarvestToMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.EnableHarvestToMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EnableHarvestToMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EnableHarvestToMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.EnableHarvestToMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            EnableHarvestToMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EnableHarvestToMintIxProto)
                    return object;
                var message = new $root.vixen.parser.EnableHarvestToMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.EnableHarvestToMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.EnableHarvestToMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            EnableHarvestToMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.EnableHarvestToMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            EnableHarvestToMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnableHarvestToMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EnableHarvestToMintIxProto";
            };

            return EnableHarvestToMintIxProto;
        })();

        parser.DisableHarvestToMintIxProto = (function() {

            function DisableHarvestToMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DisableHarvestToMintIxProto.prototype.accounts = null;

            DisableHarvestToMintIxProto.create = function create(properties) {
                return new DisableHarvestToMintIxProto(properties);
            };

            DisableHarvestToMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.DisableHarvestToMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            DisableHarvestToMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DisableHarvestToMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DisableHarvestToMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.DisableHarvestToMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DisableHarvestToMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DisableHarvestToMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.DisableHarvestToMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            DisableHarvestToMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DisableHarvestToMintIxProto)
                    return object;
                var message = new $root.vixen.parser.DisableHarvestToMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.DisableHarvestToMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.DisableHarvestToMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            DisableHarvestToMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.DisableHarvestToMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            DisableHarvestToMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DisableHarvestToMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DisableHarvestToMintIxProto";
            };

            return DisableHarvestToMintIxProto;
        })();

        parser.ConfidentialTransferFeeIxProto = (function() {

            function ConfidentialTransferFeeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ConfidentialTransferFeeIxProto.prototype.initializeConfidentialTransferFeeConfigIx = null;
            ConfidentialTransferFeeIxProto.prototype.withdrawWithheldTokensFromMintIx = null;
            ConfidentialTransferFeeIxProto.prototype.withdrawWithheldTokensFromAccountsIx = null;
            ConfidentialTransferFeeIxProto.prototype.harvestWithheldTokensToMintIx = null;
            ConfidentialTransferFeeIxProto.prototype.enableHarvestToMintIx = null;
            ConfidentialTransferFeeIxProto.prototype.disableHarvestToMintIx = null;

            var $oneOfFields;

            Object.defineProperty(ConfidentialTransferFeeIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["initializeConfidentialTransferFeeConfigIx", "withdrawWithheldTokensFromMintIx", "withdrawWithheldTokensFromAccountsIx", "harvestWithheldTokensToMintIx", "enableHarvestToMintIx", "disableHarvestToMintIx"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            ConfidentialTransferFeeIxProto.create = function create(properties) {
                return new ConfidentialTransferFeeIxProto(properties);
            };

            ConfidentialTransferFeeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.initializeConfidentialTransferFeeConfigIx != null && Object.hasOwnProperty.call(message, "initializeConfidentialTransferFeeConfigIx"))
                    $root.vixen.parser.InitializeConfidentialTransferFeeConfigIxProto.encode(message.initializeConfidentialTransferFeeConfigIx, writer.uint32(10).fork()).ldelim();
                if (message.withdrawWithheldTokensFromMintIx != null && Object.hasOwnProperty.call(message, "withdrawWithheldTokensFromMintIx"))
                    $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto.encode(message.withdrawWithheldTokensFromMintIx, writer.uint32(18).fork()).ldelim();
                if (message.withdrawWithheldTokensFromAccountsIx != null && Object.hasOwnProperty.call(message, "withdrawWithheldTokensFromAccountsIx"))
                    $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto.encode(message.withdrawWithheldTokensFromAccountsIx, writer.uint32(26).fork()).ldelim();
                if (message.harvestWithheldTokensToMintIx != null && Object.hasOwnProperty.call(message, "harvestWithheldTokensToMintIx"))
                    $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto.encode(message.harvestWithheldTokensToMintIx, writer.uint32(34).fork()).ldelim();
                if (message.enableHarvestToMintIx != null && Object.hasOwnProperty.call(message, "enableHarvestToMintIx"))
                    $root.vixen.parser.EnableHarvestToMintIxProto.encode(message.enableHarvestToMintIx, writer.uint32(42).fork()).ldelim();
                if (message.disableHarvestToMintIx != null && Object.hasOwnProperty.call(message, "disableHarvestToMintIx"))
                    $root.vixen.parser.DisableHarvestToMintIxProto.encode(message.disableHarvestToMintIx, writer.uint32(50).fork()).ldelim();
                return writer;
            };

            ConfidentialTransferFeeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ConfidentialTransferFeeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ConfidentialTransferFeeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.initializeConfidentialTransferFeeConfigIx = $root.vixen.parser.InitializeConfidentialTransferFeeConfigIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.withdrawWithheldTokensFromMintIx = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.withdrawWithheldTokensFromAccountsIx = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.harvestWithheldTokensToMintIx = $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.enableHarvestToMintIx = $root.vixen.parser.EnableHarvestToMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.disableHarvestToMintIx = $root.vixen.parser.DisableHarvestToMintIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ConfidentialTransferFeeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ConfidentialTransferFeeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.initializeConfidentialTransferFeeConfigIx != null && message.hasOwnProperty("initializeConfidentialTransferFeeConfigIx")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.InitializeConfidentialTransferFeeConfigIxProto.verify(message.initializeConfidentialTransferFeeConfigIx);
                        if (error)
                            return "initializeConfidentialTransferFeeConfigIx." + error;
                    }
                }
                if (message.withdrawWithheldTokensFromMintIx != null && message.hasOwnProperty("withdrawWithheldTokensFromMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto.verify(message.withdrawWithheldTokensFromMintIx);
                        if (error)
                            return "withdrawWithheldTokensFromMintIx." + error;
                    }
                }
                if (message.withdrawWithheldTokensFromAccountsIx != null && message.hasOwnProperty("withdrawWithheldTokensFromAccountsIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto.verify(message.withdrawWithheldTokensFromAccountsIx);
                        if (error)
                            return "withdrawWithheldTokensFromAccountsIx." + error;
                    }
                }
                if (message.harvestWithheldTokensToMintIx != null && message.hasOwnProperty("harvestWithheldTokensToMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto.verify(message.harvestWithheldTokensToMintIx);
                        if (error)
                            return "harvestWithheldTokensToMintIx." + error;
                    }
                }
                if (message.enableHarvestToMintIx != null && message.hasOwnProperty("enableHarvestToMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.EnableHarvestToMintIxProto.verify(message.enableHarvestToMintIx);
                        if (error)
                            return "enableHarvestToMintIx." + error;
                    }
                }
                if (message.disableHarvestToMintIx != null && message.hasOwnProperty("disableHarvestToMintIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.DisableHarvestToMintIxProto.verify(message.disableHarvestToMintIx);
                        if (error)
                            return "disableHarvestToMintIx." + error;
                    }
                }
                return null;
            };

            ConfidentialTransferFeeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ConfidentialTransferFeeIxProto)
                    return object;
                var message = new $root.vixen.parser.ConfidentialTransferFeeIxProto();
                if (object.initializeConfidentialTransferFeeConfigIx != null) {
                    if (typeof object.initializeConfidentialTransferFeeConfigIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferFeeIxProto.initializeConfidentialTransferFeeConfigIx: object expected");
                    message.initializeConfidentialTransferFeeConfigIx = $root.vixen.parser.InitializeConfidentialTransferFeeConfigIxProto.fromObject(object.initializeConfidentialTransferFeeConfigIx);
                }
                if (object.withdrawWithheldTokensFromMintIx != null) {
                    if (typeof object.withdrawWithheldTokensFromMintIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferFeeIxProto.withdrawWithheldTokensFromMintIx: object expected");
                    message.withdrawWithheldTokensFromMintIx = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto.fromObject(object.withdrawWithheldTokensFromMintIx);
                }
                if (object.withdrawWithheldTokensFromAccountsIx != null) {
                    if (typeof object.withdrawWithheldTokensFromAccountsIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferFeeIxProto.withdrawWithheldTokensFromAccountsIx: object expected");
                    message.withdrawWithheldTokensFromAccountsIx = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto.fromObject(object.withdrawWithheldTokensFromAccountsIx);
                }
                if (object.harvestWithheldTokensToMintIx != null) {
                    if (typeof object.harvestWithheldTokensToMintIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferFeeIxProto.harvestWithheldTokensToMintIx: object expected");
                    message.harvestWithheldTokensToMintIx = $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto.fromObject(object.harvestWithheldTokensToMintIx);
                }
                if (object.enableHarvestToMintIx != null) {
                    if (typeof object.enableHarvestToMintIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferFeeIxProto.enableHarvestToMintIx: object expected");
                    message.enableHarvestToMintIx = $root.vixen.parser.EnableHarvestToMintIxProto.fromObject(object.enableHarvestToMintIx);
                }
                if (object.disableHarvestToMintIx != null) {
                    if (typeof object.disableHarvestToMintIx !== "object")
                        throw TypeError(".vixen.parser.ConfidentialTransferFeeIxProto.disableHarvestToMintIx: object expected");
                    message.disableHarvestToMintIx = $root.vixen.parser.DisableHarvestToMintIxProto.fromObject(object.disableHarvestToMintIx);
                }
                return message;
            };

            ConfidentialTransferFeeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.initializeConfidentialTransferFeeConfigIx != null && message.hasOwnProperty("initializeConfidentialTransferFeeConfigIx")) {
                    object.initializeConfidentialTransferFeeConfigIx = $root.vixen.parser.InitializeConfidentialTransferFeeConfigIxProto.toObject(message.initializeConfidentialTransferFeeConfigIx, options);
                    if (options.oneofs)
                        object.ixOneof = "initializeConfidentialTransferFeeConfigIx";
                }
                if (message.withdrawWithheldTokensFromMintIx != null && message.hasOwnProperty("withdrawWithheldTokensFromMintIx")) {
                    object.withdrawWithheldTokensFromMintIx = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromMintIxProto.toObject(message.withdrawWithheldTokensFromMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "withdrawWithheldTokensFromMintIx";
                }
                if (message.withdrawWithheldTokensFromAccountsIx != null && message.hasOwnProperty("withdrawWithheldTokensFromAccountsIx")) {
                    object.withdrawWithheldTokensFromAccountsIx = $root.vixen.parser.ConfidentialWithdrawWithheldTokensFromAccountsIxProto.toObject(message.withdrawWithheldTokensFromAccountsIx, options);
                    if (options.oneofs)
                        object.ixOneof = "withdrawWithheldTokensFromAccountsIx";
                }
                if (message.harvestWithheldTokensToMintIx != null && message.hasOwnProperty("harvestWithheldTokensToMintIx")) {
                    object.harvestWithheldTokensToMintIx = $root.vixen.parser.ConfidentialHarvestWithheldTokensToMintIxProto.toObject(message.harvestWithheldTokensToMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "harvestWithheldTokensToMintIx";
                }
                if (message.enableHarvestToMintIx != null && message.hasOwnProperty("enableHarvestToMintIx")) {
                    object.enableHarvestToMintIx = $root.vixen.parser.EnableHarvestToMintIxProto.toObject(message.enableHarvestToMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "enableHarvestToMintIx";
                }
                if (message.disableHarvestToMintIx != null && message.hasOwnProperty("disableHarvestToMintIx")) {
                    object.disableHarvestToMintIx = $root.vixen.parser.DisableHarvestToMintIxProto.toObject(message.disableHarvestToMintIx, options);
                    if (options.oneofs)
                        object.ixOneof = "disableHarvestToMintIx";
                }
                return object;
            };

            ConfidentialTransferFeeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ConfidentialTransferFeeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ConfidentialTransferFeeIxProto";
            };

            return ConfidentialTransferFeeIxProto;
        })();

        parser.ExtInitializeAccountsProto = (function() {

            function ExtInitializeAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ExtInitializeAccountsProto.prototype.mint = "";

            ExtInitializeAccountsProto.create = function create(properties) {
                return new ExtInitializeAccountsProto(properties);
            };

            ExtInitializeAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            ExtInitializeAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ExtInitializeAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ExtInitializeAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ExtInitializeAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ExtInitializeAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            ExtInitializeAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ExtInitializeAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ExtInitializeAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            ExtInitializeAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            ExtInitializeAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ExtInitializeAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ExtInitializeAccountsProto";
            };

            return ExtInitializeAccountsProto;
        })();

        parser.ExtInitializeIxProto = (function() {

            function ExtInitializeIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ExtInitializeIxProto.prototype.accounts = null;

            ExtInitializeIxProto.create = function create(properties) {
                return new ExtInitializeIxProto(properties);
            };

            ExtInitializeIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ExtInitializeAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            ExtInitializeIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ExtInitializeIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ExtInitializeIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ExtInitializeAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ExtInitializeIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ExtInitializeIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ExtInitializeAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            ExtInitializeIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ExtInitializeIxProto)
                    return object;
                var message = new $root.vixen.parser.ExtInitializeIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ExtInitializeIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ExtInitializeAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            ExtInitializeIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ExtInitializeAccountsProto.toObject(message.accounts, options);
                return object;
            };

            ExtInitializeIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ExtInitializeIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ExtInitializeIxProto";
            };

            return ExtInitializeIxProto;
        })();

        parser.UpdateAccountsProto = (function() {

            function UpdateAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateAccountsProto.prototype.mint = "";
            UpdateAccountsProto.prototype.extensionAuthority = "";
            UpdateAccountsProto.prototype.multisigSigners = $util.emptyArray;

            UpdateAccountsProto.create = function create(properties) {
                return new UpdateAccountsProto(properties);
            };

            UpdateAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.extensionAuthority != null && Object.hasOwnProperty.call(message, "extensionAuthority"))
                    writer.uint32(18).string(message.extensionAuthority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            UpdateAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.extensionAuthority = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.extensionAuthority != null && message.hasOwnProperty("extensionAuthority"))
                    if (!$util.isString(message.extensionAuthority))
                        return "extensionAuthority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            UpdateAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateAccountsProto)
                    return object;
                var message = new $root.vixen.parser.UpdateAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.extensionAuthority != null)
                    message.extensionAuthority = String(object.extensionAuthority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.UpdateAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            UpdateAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.mint = "";
                    object.extensionAuthority = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.extensionAuthority != null && message.hasOwnProperty("extensionAuthority"))
                    object.extensionAuthority = message.extensionAuthority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            UpdateAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateAccountsProto";
            };

            return UpdateAccountsProto;
        })();

        parser.UpdateIxProto = (function() {

            function UpdateIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            UpdateIxProto.prototype.accounts = null;

            UpdateIxProto.create = function create(properties) {
                return new UpdateIxProto(properties);
            };

            UpdateIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.UpdateAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            UpdateIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            UpdateIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.UpdateIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.UpdateAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            UpdateIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            UpdateIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.UpdateAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            UpdateIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.UpdateIxProto)
                    return object;
                var message = new $root.vixen.parser.UpdateIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.UpdateIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.UpdateAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            UpdateIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.UpdateAccountsProto.toObject(message.accounts, options);
                return object;
            };

            UpdateIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UpdateIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.UpdateIxProto";
            };

            return UpdateIxProto;
        })();

        parser.EnableAccountsProto = (function() {

            function EnableAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EnableAccountsProto.prototype.account = "";
            EnableAccountsProto.prototype.owner = "";
            EnableAccountsProto.prototype.multisigSigners = $util.emptyArray;

            EnableAccountsProto.create = function create(properties) {
                return new EnableAccountsProto(properties);
            };

            EnableAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(18).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            EnableAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EnableAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EnableAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.owner = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EnableAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EnableAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            EnableAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EnableAccountsProto)
                    return object;
                var message = new $root.vixen.parser.EnableAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.EnableAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            EnableAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            EnableAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnableAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EnableAccountsProto";
            };

            return EnableAccountsProto;
        })();

        parser.EnableIxProto = (function() {

            function EnableIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            EnableIxProto.prototype.accounts = null;

            EnableIxProto.create = function create(properties) {
                return new EnableIxProto(properties);
            };

            EnableIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.EnableAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            EnableIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            EnableIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.EnableIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.EnableAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            EnableIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            EnableIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.EnableAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            EnableIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.EnableIxProto)
                    return object;
                var message = new $root.vixen.parser.EnableIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.EnableIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.EnableAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            EnableIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.EnableAccountsProto.toObject(message.accounts, options);
                return object;
            };

            EnableIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnableIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.EnableIxProto";
            };

            return EnableIxProto;
        })();

        parser.DisableAccountsProto = (function() {

            function DisableAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DisableAccountsProto.prototype.account = "";
            DisableAccountsProto.prototype.owner = "";
            DisableAccountsProto.prototype.multisigSigners = $util.emptyArray;

            DisableAccountsProto.create = function create(properties) {
                return new DisableAccountsProto(properties);
            };

            DisableAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(18).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(26).string(message.multisigSigners[i]);
                return writer;
            };

            DisableAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DisableAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DisableAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.owner = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DisableAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DisableAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            DisableAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DisableAccountsProto)
                    return object;
                var message = new $root.vixen.parser.DisableAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.DisableAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            DisableAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            DisableAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DisableAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DisableAccountsProto";
            };

            return DisableAccountsProto;
        })();

        parser.DisableIxProto = (function() {

            function DisableIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DisableIxProto.prototype.accounts = null;

            DisableIxProto.create = function create(properties) {
                return new DisableIxProto(properties);
            };

            DisableIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.DisableAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            DisableIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DisableIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DisableIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.DisableAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DisableIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DisableIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.DisableAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            DisableIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DisableIxProto)
                    return object;
                var message = new $root.vixen.parser.DisableIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.DisableIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.DisableAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            DisableIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.DisableAccountsProto.toObject(message.accounts, options);
                return object;
            };

            DisableIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DisableIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DisableIxProto";
            };

            return DisableIxProto;
        })();

        parser.CommonExtensionIxProto = (function() {

            function CommonExtensionIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            CommonExtensionIxProto.prototype.extInitializeIx = null;
            CommonExtensionIxProto.prototype.updateIx = null;
            CommonExtensionIxProto.prototype.enableIx = null;
            CommonExtensionIxProto.prototype.disableIx = null;

            var $oneOfFields;

            Object.defineProperty(CommonExtensionIxProto.prototype, "ixOneof", {
                get: $util.oneOfGetter($oneOfFields = ["extInitializeIx", "updateIx", "enableIx", "disableIx"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            CommonExtensionIxProto.create = function create(properties) {
                return new CommonExtensionIxProto(properties);
            };

            CommonExtensionIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.extInitializeIx != null && Object.hasOwnProperty.call(message, "extInitializeIx"))
                    $root.vixen.parser.ExtInitializeIxProto.encode(message.extInitializeIx, writer.uint32(10).fork()).ldelim();
                if (message.updateIx != null && Object.hasOwnProperty.call(message, "updateIx"))
                    $root.vixen.parser.UpdateIxProto.encode(message.updateIx, writer.uint32(18).fork()).ldelim();
                if (message.enableIx != null && Object.hasOwnProperty.call(message, "enableIx"))
                    $root.vixen.parser.EnableIxProto.encode(message.enableIx, writer.uint32(26).fork()).ldelim();
                if (message.disableIx != null && Object.hasOwnProperty.call(message, "disableIx"))
                    $root.vixen.parser.DisableIxProto.encode(message.disableIx, writer.uint32(34).fork()).ldelim();
                return writer;
            };

            CommonExtensionIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            CommonExtensionIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.CommonExtensionIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.extInitializeIx = $root.vixen.parser.ExtInitializeIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.updateIx = $root.vixen.parser.UpdateIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.enableIx = $root.vixen.parser.EnableIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.disableIx = $root.vixen.parser.DisableIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            CommonExtensionIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            CommonExtensionIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.extInitializeIx != null && message.hasOwnProperty("extInitializeIx")) {
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.ExtInitializeIxProto.verify(message.extInitializeIx);
                        if (error)
                            return "extInitializeIx." + error;
                    }
                }
                if (message.updateIx != null && message.hasOwnProperty("updateIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.UpdateIxProto.verify(message.updateIx);
                        if (error)
                            return "updateIx." + error;
                    }
                }
                if (message.enableIx != null && message.hasOwnProperty("enableIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.EnableIxProto.verify(message.enableIx);
                        if (error)
                            return "enableIx." + error;
                    }
                }
                if (message.disableIx != null && message.hasOwnProperty("disableIx")) {
                    if (properties.ixOneof === 1)
                        return "ixOneof: multiple values";
                    properties.ixOneof = 1;
                    {
                        var error = $root.vixen.parser.DisableIxProto.verify(message.disableIx);
                        if (error)
                            return "disableIx." + error;
                    }
                }
                return null;
            };

            CommonExtensionIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.CommonExtensionIxProto)
                    return object;
                var message = new $root.vixen.parser.CommonExtensionIxProto();
                if (object.extInitializeIx != null) {
                    if (typeof object.extInitializeIx !== "object")
                        throw TypeError(".vixen.parser.CommonExtensionIxProto.extInitializeIx: object expected");
                    message.extInitializeIx = $root.vixen.parser.ExtInitializeIxProto.fromObject(object.extInitializeIx);
                }
                if (object.updateIx != null) {
                    if (typeof object.updateIx !== "object")
                        throw TypeError(".vixen.parser.CommonExtensionIxProto.updateIx: object expected");
                    message.updateIx = $root.vixen.parser.UpdateIxProto.fromObject(object.updateIx);
                }
                if (object.enableIx != null) {
                    if (typeof object.enableIx !== "object")
                        throw TypeError(".vixen.parser.CommonExtensionIxProto.enableIx: object expected");
                    message.enableIx = $root.vixen.parser.EnableIxProto.fromObject(object.enableIx);
                }
                if (object.disableIx != null) {
                    if (typeof object.disableIx !== "object")
                        throw TypeError(".vixen.parser.CommonExtensionIxProto.disableIx: object expected");
                    message.disableIx = $root.vixen.parser.DisableIxProto.fromObject(object.disableIx);
                }
                return message;
            };

            CommonExtensionIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.extInitializeIx != null && message.hasOwnProperty("extInitializeIx")) {
                    object.extInitializeIx = $root.vixen.parser.ExtInitializeIxProto.toObject(message.extInitializeIx, options);
                    if (options.oneofs)
                        object.ixOneof = "extInitializeIx";
                }
                if (message.updateIx != null && message.hasOwnProperty("updateIx")) {
                    object.updateIx = $root.vixen.parser.UpdateIxProto.toObject(message.updateIx, options);
                    if (options.oneofs)
                        object.ixOneof = "updateIx";
                }
                if (message.enableIx != null && message.hasOwnProperty("enableIx")) {
                    object.enableIx = $root.vixen.parser.EnableIxProto.toObject(message.enableIx, options);
                    if (options.oneofs)
                        object.ixOneof = "enableIx";
                }
                if (message.disableIx != null && message.hasOwnProperty("disableIx")) {
                    object.disableIx = $root.vixen.parser.DisableIxProto.toObject(message.disableIx, options);
                    if (options.oneofs)
                        object.ixOneof = "disableIx";
                }
                return object;
            };

            CommonExtensionIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            CommonExtensionIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.CommonExtensionIxProto";
            };

            return CommonExtensionIxProto;
        })();

        parser.ExtensionWithCommonIxsProto = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "CPI_GUARD"] = 0;
            values[valuesById[1] = "DEFAULT_ACCOUNT_STATE"] = 1;
            values[valuesById[2] = "INTEREST_BEARING_MINT"] = 2;
            values[valuesById[3] = "MEMO_TRANSFER"] = 3;
            values[valuesById[4] = "GROUP_MEMBER_POINTER"] = 4;
            values[valuesById[5] = "GROUP_POINTER"] = 5;
            values[valuesById[6] = "METADATA_POINTER"] = 6;
            values[valuesById[7] = "TRANSFER_HOOK"] = 7;
            return values;
        })();

        parser.CommonExtensionIxsProto = (function() {

            function CommonExtensionIxsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            CommonExtensionIxsProto.prototype.extension = 0;
            CommonExtensionIxsProto.prototype.ix = null;

            CommonExtensionIxsProto.create = function create(properties) {
                return new CommonExtensionIxsProto(properties);
            };

            CommonExtensionIxsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.extension != null && Object.hasOwnProperty.call(message, "extension"))
                    writer.uint32(8).int32(message.extension);
                if (message.ix != null && Object.hasOwnProperty.call(message, "ix"))
                    $root.vixen.parser.CommonExtensionIxProto.encode(message.ix, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            CommonExtensionIxsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            CommonExtensionIxsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.CommonExtensionIxsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.extension = reader.int32();
                            break;
                        }
                    case 2: {
                            message.ix = $root.vixen.parser.CommonExtensionIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            CommonExtensionIxsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            CommonExtensionIxsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.extension != null && message.hasOwnProperty("extension"))
                    switch (message.extension) {
                    default:
                        return "extension: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                        break;
                    }
                if (message.ix != null && message.hasOwnProperty("ix")) {
                    var error = $root.vixen.parser.CommonExtensionIxProto.verify(message.ix);
                    if (error)
                        return "ix." + error;
                }
                return null;
            };

            CommonExtensionIxsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.CommonExtensionIxsProto)
                    return object;
                var message = new $root.vixen.parser.CommonExtensionIxsProto();
                switch (object.extension) {
                default:
                    if (typeof object.extension === "number") {
                        message.extension = object.extension;
                        break;
                    }
                    break;
                case "CPI_GUARD":
                case 0:
                    message.extension = 0;
                    break;
                case "DEFAULT_ACCOUNT_STATE":
                case 1:
                    message.extension = 1;
                    break;
                case "INTEREST_BEARING_MINT":
                case 2:
                    message.extension = 2;
                    break;
                case "MEMO_TRANSFER":
                case 3:
                    message.extension = 3;
                    break;
                case "GROUP_MEMBER_POINTER":
                case 4:
                    message.extension = 4;
                    break;
                case "GROUP_POINTER":
                case 5:
                    message.extension = 5;
                    break;
                case "METADATA_POINTER":
                case 6:
                    message.extension = 6;
                    break;
                case "TRANSFER_HOOK":
                case 7:
                    message.extension = 7;
                    break;
                }
                if (object.ix != null) {
                    if (typeof object.ix !== "object")
                        throw TypeError(".vixen.parser.CommonExtensionIxsProto.ix: object expected");
                    message.ix = $root.vixen.parser.CommonExtensionIxProto.fromObject(object.ix);
                }
                return message;
            };

            CommonExtensionIxsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.extension = options.enums === String ? "CPI_GUARD" : 0;
                    object.ix = null;
                }
                if (message.extension != null && message.hasOwnProperty("extension"))
                    object.extension = options.enums === String ? $root.vixen.parser.ExtensionWithCommonIxsProto[message.extension] === undefined ? message.extension : $root.vixen.parser.ExtensionWithCommonIxsProto[message.extension] : message.extension;
                if (message.ix != null && message.hasOwnProperty("ix"))
                    object.ix = $root.vixen.parser.CommonExtensionIxProto.toObject(message.ix, options);
                return object;
            };

            CommonExtensionIxsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            CommonExtensionIxsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.CommonExtensionIxsProto";
            };

            return CommonExtensionIxsProto;
        })();

        parser.CpiGuardIxProto = (function() {

            function CpiGuardIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            CpiGuardIxProto.prototype.ix = null;

            CpiGuardIxProto.create = function create(properties) {
                return new CpiGuardIxProto(properties);
            };

            CpiGuardIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ix != null && Object.hasOwnProperty.call(message, "ix"))
                    $root.vixen.parser.CommonExtensionIxProto.encode(message.ix, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            CpiGuardIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            CpiGuardIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.CpiGuardIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ix = $root.vixen.parser.CommonExtensionIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            CpiGuardIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            CpiGuardIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ix != null && message.hasOwnProperty("ix")) {
                    var error = $root.vixen.parser.CommonExtensionIxProto.verify(message.ix);
                    if (error)
                        return "ix." + error;
                }
                return null;
            };

            CpiGuardIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.CpiGuardIxProto)
                    return object;
                var message = new $root.vixen.parser.CpiGuardIxProto();
                if (object.ix != null) {
                    if (typeof object.ix !== "object")
                        throw TypeError(".vixen.parser.CpiGuardIxProto.ix: object expected");
                    message.ix = $root.vixen.parser.CommonExtensionIxProto.fromObject(object.ix);
                }
                return message;
            };

            CpiGuardIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ix = null;
                if (message.ix != null && message.hasOwnProperty("ix"))
                    object.ix = $root.vixen.parser.CommonExtensionIxProto.toObject(message.ix, options);
                return object;
            };

            CpiGuardIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            CpiGuardIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.CpiGuardIxProto";
            };

            return CpiGuardIxProto;
        })();

        parser.DefaultAccountStateIxProto = (function() {

            function DefaultAccountStateIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            DefaultAccountStateIxProto.prototype.ix = null;

            DefaultAccountStateIxProto.create = function create(properties) {
                return new DefaultAccountStateIxProto(properties);
            };

            DefaultAccountStateIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ix != null && Object.hasOwnProperty.call(message, "ix"))
                    $root.vixen.parser.CommonExtensionIxProto.encode(message.ix, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            DefaultAccountStateIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            DefaultAccountStateIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.DefaultAccountStateIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ix = $root.vixen.parser.CommonExtensionIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            DefaultAccountStateIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            DefaultAccountStateIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ix != null && message.hasOwnProperty("ix")) {
                    var error = $root.vixen.parser.CommonExtensionIxProto.verify(message.ix);
                    if (error)
                        return "ix." + error;
                }
                return null;
            };

            DefaultAccountStateIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.DefaultAccountStateIxProto)
                    return object;
                var message = new $root.vixen.parser.DefaultAccountStateIxProto();
                if (object.ix != null) {
                    if (typeof object.ix !== "object")
                        throw TypeError(".vixen.parser.DefaultAccountStateIxProto.ix: object expected");
                    message.ix = $root.vixen.parser.CommonExtensionIxProto.fromObject(object.ix);
                }
                return message;
            };

            DefaultAccountStateIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ix = null;
                if (message.ix != null && message.hasOwnProperty("ix"))
                    object.ix = $root.vixen.parser.CommonExtensionIxProto.toObject(message.ix, options);
                return object;
            };

            DefaultAccountStateIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DefaultAccountStateIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.DefaultAccountStateIxProto";
            };

            return DefaultAccountStateIxProto;
        })();

        parser.InterestBearingMintIxProto = (function() {

            function InterestBearingMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InterestBearingMintIxProto.prototype.ix = null;

            InterestBearingMintIxProto.create = function create(properties) {
                return new InterestBearingMintIxProto(properties);
            };

            InterestBearingMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ix != null && Object.hasOwnProperty.call(message, "ix"))
                    $root.vixen.parser.CommonExtensionIxProto.encode(message.ix, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            InterestBearingMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InterestBearingMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InterestBearingMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ix = $root.vixen.parser.CommonExtensionIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InterestBearingMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InterestBearingMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ix != null && message.hasOwnProperty("ix")) {
                    var error = $root.vixen.parser.CommonExtensionIxProto.verify(message.ix);
                    if (error)
                        return "ix." + error;
                }
                return null;
            };

            InterestBearingMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InterestBearingMintIxProto)
                    return object;
                var message = new $root.vixen.parser.InterestBearingMintIxProto();
                if (object.ix != null) {
                    if (typeof object.ix !== "object")
                        throw TypeError(".vixen.parser.InterestBearingMintIxProto.ix: object expected");
                    message.ix = $root.vixen.parser.CommonExtensionIxProto.fromObject(object.ix);
                }
                return message;
            };

            InterestBearingMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ix = null;
                if (message.ix != null && message.hasOwnProperty("ix"))
                    object.ix = $root.vixen.parser.CommonExtensionIxProto.toObject(message.ix, options);
                return object;
            };

            InterestBearingMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InterestBearingMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InterestBearingMintIxProto";
            };

            return InterestBearingMintIxProto;
        })();

        parser.MemoTransferIxProto = (function() {

            function MemoTransferIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MemoTransferIxProto.prototype.ix = null;

            MemoTransferIxProto.create = function create(properties) {
                return new MemoTransferIxProto(properties);
            };

            MemoTransferIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ix != null && Object.hasOwnProperty.call(message, "ix"))
                    $root.vixen.parser.CommonExtensionIxProto.encode(message.ix, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            MemoTransferIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MemoTransferIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MemoTransferIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ix = $root.vixen.parser.CommonExtensionIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MemoTransferIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MemoTransferIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ix != null && message.hasOwnProperty("ix")) {
                    var error = $root.vixen.parser.CommonExtensionIxProto.verify(message.ix);
                    if (error)
                        return "ix." + error;
                }
                return null;
            };

            MemoTransferIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MemoTransferIxProto)
                    return object;
                var message = new $root.vixen.parser.MemoTransferIxProto();
                if (object.ix != null) {
                    if (typeof object.ix !== "object")
                        throw TypeError(".vixen.parser.MemoTransferIxProto.ix: object expected");
                    message.ix = $root.vixen.parser.CommonExtensionIxProto.fromObject(object.ix);
                }
                return message;
            };

            MemoTransferIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ix = null;
                if (message.ix != null && message.hasOwnProperty("ix"))
                    object.ix = $root.vixen.parser.CommonExtensionIxProto.toObject(message.ix, options);
                return object;
            };

            MemoTransferIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MemoTransferIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MemoTransferIxProto";
            };

            return MemoTransferIxProto;
        })();

        parser.GroupMemberPointerIxProto = (function() {

            function GroupMemberPointerIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            GroupMemberPointerIxProto.prototype.ix = null;

            GroupMemberPointerIxProto.create = function create(properties) {
                return new GroupMemberPointerIxProto(properties);
            };

            GroupMemberPointerIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ix != null && Object.hasOwnProperty.call(message, "ix"))
                    $root.vixen.parser.CommonExtensionIxProto.encode(message.ix, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            GroupMemberPointerIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            GroupMemberPointerIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.GroupMemberPointerIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ix = $root.vixen.parser.CommonExtensionIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            GroupMemberPointerIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            GroupMemberPointerIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ix != null && message.hasOwnProperty("ix")) {
                    var error = $root.vixen.parser.CommonExtensionIxProto.verify(message.ix);
                    if (error)
                        return "ix." + error;
                }
                return null;
            };

            GroupMemberPointerIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.GroupMemberPointerIxProto)
                    return object;
                var message = new $root.vixen.parser.GroupMemberPointerIxProto();
                if (object.ix != null) {
                    if (typeof object.ix !== "object")
                        throw TypeError(".vixen.parser.GroupMemberPointerIxProto.ix: object expected");
                    message.ix = $root.vixen.parser.CommonExtensionIxProto.fromObject(object.ix);
                }
                return message;
            };

            GroupMemberPointerIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ix = null;
                if (message.ix != null && message.hasOwnProperty("ix"))
                    object.ix = $root.vixen.parser.CommonExtensionIxProto.toObject(message.ix, options);
                return object;
            };

            GroupMemberPointerIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GroupMemberPointerIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.GroupMemberPointerIxProto";
            };

            return GroupMemberPointerIxProto;
        })();

        parser.GroupPointerIxProto = (function() {

            function GroupPointerIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            GroupPointerIxProto.prototype.ix = null;

            GroupPointerIxProto.create = function create(properties) {
                return new GroupPointerIxProto(properties);
            };

            GroupPointerIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ix != null && Object.hasOwnProperty.call(message, "ix"))
                    $root.vixen.parser.CommonExtensionIxProto.encode(message.ix, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            GroupPointerIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            GroupPointerIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.GroupPointerIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ix = $root.vixen.parser.CommonExtensionIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            GroupPointerIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            GroupPointerIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ix != null && message.hasOwnProperty("ix")) {
                    var error = $root.vixen.parser.CommonExtensionIxProto.verify(message.ix);
                    if (error)
                        return "ix." + error;
                }
                return null;
            };

            GroupPointerIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.GroupPointerIxProto)
                    return object;
                var message = new $root.vixen.parser.GroupPointerIxProto();
                if (object.ix != null) {
                    if (typeof object.ix !== "object")
                        throw TypeError(".vixen.parser.GroupPointerIxProto.ix: object expected");
                    message.ix = $root.vixen.parser.CommonExtensionIxProto.fromObject(object.ix);
                }
                return message;
            };

            GroupPointerIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ix = null;
                if (message.ix != null && message.hasOwnProperty("ix"))
                    object.ix = $root.vixen.parser.CommonExtensionIxProto.toObject(message.ix, options);
                return object;
            };

            GroupPointerIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GroupPointerIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.GroupPointerIxProto";
            };

            return GroupPointerIxProto;
        })();

        parser.MetadataPointerIxProto = (function() {

            function MetadataPointerIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            MetadataPointerIxProto.prototype.ix = null;

            MetadataPointerIxProto.create = function create(properties) {
                return new MetadataPointerIxProto(properties);
            };

            MetadataPointerIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ix != null && Object.hasOwnProperty.call(message, "ix"))
                    $root.vixen.parser.CommonExtensionIxProto.encode(message.ix, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            MetadataPointerIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            MetadataPointerIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.MetadataPointerIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ix = $root.vixen.parser.CommonExtensionIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            MetadataPointerIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            MetadataPointerIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ix != null && message.hasOwnProperty("ix")) {
                    var error = $root.vixen.parser.CommonExtensionIxProto.verify(message.ix);
                    if (error)
                        return "ix." + error;
                }
                return null;
            };

            MetadataPointerIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.MetadataPointerIxProto)
                    return object;
                var message = new $root.vixen.parser.MetadataPointerIxProto();
                if (object.ix != null) {
                    if (typeof object.ix !== "object")
                        throw TypeError(".vixen.parser.MetadataPointerIxProto.ix: object expected");
                    message.ix = $root.vixen.parser.CommonExtensionIxProto.fromObject(object.ix);
                }
                return message;
            };

            MetadataPointerIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ix = null;
                if (message.ix != null && message.hasOwnProperty("ix"))
                    object.ix = $root.vixen.parser.CommonExtensionIxProto.toObject(message.ix, options);
                return object;
            };

            MetadataPointerIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            MetadataPointerIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.MetadataPointerIxProto";
            };

            return MetadataPointerIxProto;
        })();

        parser.TransferHookIxProto = (function() {

            function TransferHookIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TransferHookIxProto.prototype.ix = null;

            TransferHookIxProto.create = function create(properties) {
                return new TransferHookIxProto(properties);
            };

            TransferHookIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ix != null && Object.hasOwnProperty.call(message, "ix"))
                    $root.vixen.parser.CommonExtensionIxProto.encode(message.ix, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            TransferHookIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TransferHookIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TransferHookIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ix = $root.vixen.parser.CommonExtensionIxProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TransferHookIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TransferHookIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ix != null && message.hasOwnProperty("ix")) {
                    var error = $root.vixen.parser.CommonExtensionIxProto.verify(message.ix);
                    if (error)
                        return "ix." + error;
                }
                return null;
            };

            TransferHookIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TransferHookIxProto)
                    return object;
                var message = new $root.vixen.parser.TransferHookIxProto();
                if (object.ix != null) {
                    if (typeof object.ix !== "object")
                        throw TypeError(".vixen.parser.TransferHookIxProto.ix: object expected");
                    message.ix = $root.vixen.parser.CommonExtensionIxProto.fromObject(object.ix);
                }
                return message;
            };

            TransferHookIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.ix = null;
                if (message.ix != null && message.hasOwnProperty("ix"))
                    object.ix = $root.vixen.parser.CommonExtensionIxProto.toObject(message.ix, options);
                return object;
            };

            TransferHookIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TransferHookIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TransferHookIxProto";
            };

            return TransferHookIxProto;
        })();

        parser.WithdrawExcessLamportsAccountsProto = (function() {

            function WithdrawExcessLamportsAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WithdrawExcessLamportsAccountsProto.prototype.sourceAccount = "";
            WithdrawExcessLamportsAccountsProto.prototype.destinationAccount = "";
            WithdrawExcessLamportsAccountsProto.prototype.authority = "";
            WithdrawExcessLamportsAccountsProto.prototype.multisigSigners = $util.emptyArray;

            WithdrawExcessLamportsAccountsProto.create = function create(properties) {
                return new WithdrawExcessLamportsAccountsProto(properties);
            };

            WithdrawExcessLamportsAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.sourceAccount != null && Object.hasOwnProperty.call(message, "sourceAccount"))
                    writer.uint32(10).string(message.sourceAccount);
                if (message.destinationAccount != null && Object.hasOwnProperty.call(message, "destinationAccount"))
                    writer.uint32(18).string(message.destinationAccount);
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(26).string(message.authority);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            WithdrawExcessLamportsAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WithdrawExcessLamportsAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WithdrawExcessLamportsAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.sourceAccount = reader.string();
                            break;
                        }
                    case 2: {
                            message.destinationAccount = reader.string();
                            break;
                        }
                    case 3: {
                            message.authority = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WithdrawExcessLamportsAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WithdrawExcessLamportsAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.sourceAccount != null && message.hasOwnProperty("sourceAccount"))
                    if (!$util.isString(message.sourceAccount))
                        return "sourceAccount: string expected";
                if (message.destinationAccount != null && message.hasOwnProperty("destinationAccount"))
                    if (!$util.isString(message.destinationAccount))
                        return "destinationAccount: string expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            WithdrawExcessLamportsAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WithdrawExcessLamportsAccountsProto)
                    return object;
                var message = new $root.vixen.parser.WithdrawExcessLamportsAccountsProto();
                if (object.sourceAccount != null)
                    message.sourceAccount = String(object.sourceAccount);
                if (object.destinationAccount != null)
                    message.destinationAccount = String(object.destinationAccount);
                if (object.authority != null)
                    message.authority = String(object.authority);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.WithdrawExcessLamportsAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            WithdrawExcessLamportsAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.sourceAccount = "";
                    object.destinationAccount = "";
                    object.authority = "";
                }
                if (message.sourceAccount != null && message.hasOwnProperty("sourceAccount"))
                    object.sourceAccount = message.sourceAccount;
                if (message.destinationAccount != null && message.hasOwnProperty("destinationAccount"))
                    object.destinationAccount = message.destinationAccount;
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            WithdrawExcessLamportsAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WithdrawExcessLamportsAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WithdrawExcessLamportsAccountsProto";
            };

            return WithdrawExcessLamportsAccountsProto;
        })();

        parser.WithdrawExcessLamportsIxProto = (function() {

            function WithdrawExcessLamportsIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WithdrawExcessLamportsIxProto.prototype.accounts = null;

            WithdrawExcessLamportsIxProto.create = function create(properties) {
                return new WithdrawExcessLamportsIxProto(properties);
            };

            WithdrawExcessLamportsIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.WithdrawExcessLamportsAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            WithdrawExcessLamportsIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WithdrawExcessLamportsIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WithdrawExcessLamportsIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.WithdrawExcessLamportsAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WithdrawExcessLamportsIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WithdrawExcessLamportsIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.WithdrawExcessLamportsAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            WithdrawExcessLamportsIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WithdrawExcessLamportsIxProto)
                    return object;
                var message = new $root.vixen.parser.WithdrawExcessLamportsIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.WithdrawExcessLamportsIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.WithdrawExcessLamportsAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            WithdrawExcessLamportsIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.WithdrawExcessLamportsAccountsProto.toObject(message.accounts, options);
                return object;
            };

            WithdrawExcessLamportsIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WithdrawExcessLamportsIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WithdrawExcessLamportsIxProto";
            };

            return WithdrawExcessLamportsIxProto;
        })();

        parser.InitializePermanentDelegateAccountsProto = (function() {

            function InitializePermanentDelegateAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializePermanentDelegateAccountsProto.prototype.account = "";

            InitializePermanentDelegateAccountsProto.create = function create(properties) {
                return new InitializePermanentDelegateAccountsProto(properties);
            };

            InitializePermanentDelegateAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                return writer;
            };

            InitializePermanentDelegateAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializePermanentDelegateAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializePermanentDelegateAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializePermanentDelegateAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializePermanentDelegateAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                return null;
            };

            InitializePermanentDelegateAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializePermanentDelegateAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializePermanentDelegateAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                return message;
            };

            InitializePermanentDelegateAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.account = "";
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                return object;
            };

            InitializePermanentDelegateAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializePermanentDelegateAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializePermanentDelegateAccountsProto";
            };

            return InitializePermanentDelegateAccountsProto;
        })();

        parser.InitializePermanentDelegateDataProto = (function() {

            function InitializePermanentDelegateDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializePermanentDelegateDataProto.prototype.delegate = "";

            InitializePermanentDelegateDataProto.create = function create(properties) {
                return new InitializePermanentDelegateDataProto(properties);
            };

            InitializePermanentDelegateDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.delegate != null && Object.hasOwnProperty.call(message, "delegate"))
                    writer.uint32(10).string(message.delegate);
                return writer;
            };

            InitializePermanentDelegateDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializePermanentDelegateDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializePermanentDelegateDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.delegate = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializePermanentDelegateDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializePermanentDelegateDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.delegate != null && message.hasOwnProperty("delegate"))
                    if (!$util.isString(message.delegate))
                        return "delegate: string expected";
                return null;
            };

            InitializePermanentDelegateDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializePermanentDelegateDataProto)
                    return object;
                var message = new $root.vixen.parser.InitializePermanentDelegateDataProto();
                if (object.delegate != null)
                    message.delegate = String(object.delegate);
                return message;
            };

            InitializePermanentDelegateDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.delegate = "";
                if (message.delegate != null && message.hasOwnProperty("delegate"))
                    object.delegate = message.delegate;
                return object;
            };

            InitializePermanentDelegateDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializePermanentDelegateDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializePermanentDelegateDataProto";
            };

            return InitializePermanentDelegateDataProto;
        })();

        parser.InitializePermanentDelegateIxProto = (function() {

            function InitializePermanentDelegateIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializePermanentDelegateIxProto.prototype.accounts = null;
            InitializePermanentDelegateIxProto.prototype.data = null;

            InitializePermanentDelegateIxProto.create = function create(properties) {
                return new InitializePermanentDelegateIxProto(properties);
            };

            InitializePermanentDelegateIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializePermanentDelegateAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializePermanentDelegateDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializePermanentDelegateIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializePermanentDelegateIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializePermanentDelegateIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializePermanentDelegateAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializePermanentDelegateDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializePermanentDelegateIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializePermanentDelegateIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializePermanentDelegateAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializePermanentDelegateDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializePermanentDelegateIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializePermanentDelegateIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializePermanentDelegateIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializePermanentDelegateIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializePermanentDelegateAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializePermanentDelegateIxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializePermanentDelegateDataProto.fromObject(object.data);
                }
                return message;
            };

            InitializePermanentDelegateIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializePermanentDelegateAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializePermanentDelegateDataProto.toObject(message.data, options);
                return object;
            };

            InitializePermanentDelegateIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializePermanentDelegateIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializePermanentDelegateIxProto";
            };

            return InitializePermanentDelegateIxProto;
        })();

        parser.ReallocateAccountsProto = (function() {

            function ReallocateAccountsProto(properties) {
                this.multisigSigners = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ReallocateAccountsProto.prototype.account = "";
            ReallocateAccountsProto.prototype.payerAccount = "";
            ReallocateAccountsProto.prototype.owner = "";
            ReallocateAccountsProto.prototype.multisigSigners = $util.emptyArray;

            ReallocateAccountsProto.create = function create(properties) {
                return new ReallocateAccountsProto(properties);
            };

            ReallocateAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                    writer.uint32(10).string(message.account);
                if (message.payerAccount != null && Object.hasOwnProperty.call(message, "payerAccount"))
                    writer.uint32(18).string(message.payerAccount);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.multisigSigners != null && message.multisigSigners.length)
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        writer.uint32(34).string(message.multisigSigners[i]);
                return writer;
            };

            ReallocateAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ReallocateAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ReallocateAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.account = reader.string();
                            break;
                        }
                    case 2: {
                            message.payerAccount = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            if (!(message.multisigSigners && message.multisigSigners.length))
                                message.multisigSigners = [];
                            message.multisigSigners.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ReallocateAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ReallocateAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.account != null && message.hasOwnProperty("account"))
                    if (!$util.isString(message.account))
                        return "account: string expected";
                if (message.payerAccount != null && message.hasOwnProperty("payerAccount"))
                    if (!$util.isString(message.payerAccount))
                        return "payerAccount: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.multisigSigners != null && message.hasOwnProperty("multisigSigners")) {
                    if (!Array.isArray(message.multisigSigners))
                        return "multisigSigners: array expected";
                    for (var i = 0; i < message.multisigSigners.length; ++i)
                        if (!$util.isString(message.multisigSigners[i]))
                            return "multisigSigners: string[] expected";
                }
                return null;
            };

            ReallocateAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ReallocateAccountsProto)
                    return object;
                var message = new $root.vixen.parser.ReallocateAccountsProto();
                if (object.account != null)
                    message.account = String(object.account);
                if (object.payerAccount != null)
                    message.payerAccount = String(object.payerAccount);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.multisigSigners) {
                    if (!Array.isArray(object.multisigSigners))
                        throw TypeError(".vixen.parser.ReallocateAccountsProto.multisigSigners: array expected");
                    message.multisigSigners = [];
                    for (var i = 0; i < object.multisigSigners.length; ++i)
                        message.multisigSigners[i] = String(object.multisigSigners[i]);
                }
                return message;
            };

            ReallocateAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.multisigSigners = [];
                if (options.defaults) {
                    object.account = "";
                    object.payerAccount = "";
                    object.owner = "";
                }
                if (message.account != null && message.hasOwnProperty("account"))
                    object.account = message.account;
                if (message.payerAccount != null && message.hasOwnProperty("payerAccount"))
                    object.payerAccount = message.payerAccount;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.multisigSigners && message.multisigSigners.length) {
                    object.multisigSigners = [];
                    for (var j = 0; j < message.multisigSigners.length; ++j)
                        object.multisigSigners[j] = message.multisigSigners[j];
                }
                return object;
            };

            ReallocateAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ReallocateAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ReallocateAccountsProto";
            };

            return ReallocateAccountsProto;
        })();

        parser.ExtensionType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "UNINITIALIZED_EXT"] = 0;
            values[valuesById[1] = "TRANSFER_FEE_CONFIG_EXT"] = 1;
            values[valuesById[2] = "TRANSFER_FEE_AMOUNT_EXT"] = 2;
            values[valuesById[3] = "MINT_CLOSE_AUTHORITY_EXT"] = 3;
            values[valuesById[4] = "CONFIDENTIAL_TRANSFER_MINT_EXT"] = 4;
            values[valuesById[5] = "CONFIDENTIAL_TRANSFER_ACCOUNT_EXT"] = 5;
            values[valuesById[6] = "DEFAULT_ACCOUNT_STATE_EXT"] = 6;
            values[valuesById[7] = "IMMUTABLE_OWNER_EXT"] = 7;
            values[valuesById[8] = "MEMO_TRANSFER_EXT"] = 8;
            values[valuesById[9] = "NON_TRANSFERABLE_EXT"] = 9;
            values[valuesById[10] = "INTEREST_BEARING_CONFIG_EXT"] = 10;
            values[valuesById[11] = "CPI_GUARD_EXT"] = 11;
            values[valuesById[12] = "PERMANENT_DELEGATE_EXT"] = 12;
            values[valuesById[13] = "NON_TRANSFERABLE_ACCOUNT_EXT"] = 13;
            values[valuesById[14] = "TRANSFER_HOOK_EXT"] = 14;
            values[valuesById[15] = "TRANSFER_HOOK_ACCOUNT_EXT"] = 15;
            values[valuesById[16] = "CONFIDENTIAL_TRANSFER_FEE_CONFIG_EXT"] = 16;
            values[valuesById[17] = "CONFIDENTIAL_TRANSFER_FEE_AMOUNT_EXT"] = 17;
            values[valuesById[18] = "METADATA_POINTER_EXT"] = 18;
            values[valuesById[19] = "TOKEN_METADATA_EXT"] = 19;
            values[valuesById[20] = "GROUP_POINTER_EXT"] = 20;
            values[valuesById[21] = "TOKEN_GROUP_EXT"] = 21;
            values[valuesById[22] = "GROUP_MEMBER_POINTER_EXT"] = 22;
            values[valuesById[23] = "TOKEN_GROUP_MEMBER_EXT"] = 23;
            return values;
        })();

        parser.ReallocateDataProto = (function() {

            function ReallocateDataProto(properties) {
                this.extensionsTypes = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ReallocateDataProto.prototype.extensionsTypes = $util.emptyArray;

            ReallocateDataProto.create = function create(properties) {
                return new ReallocateDataProto(properties);
            };

            ReallocateDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.extensionsTypes != null && message.extensionsTypes.length) {
                    writer.uint32(10).fork();
                    for (var i = 0; i < message.extensionsTypes.length; ++i)
                        writer.int32(message.extensionsTypes[i]);
                    writer.ldelim();
                }
                return writer;
            };

            ReallocateDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ReallocateDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ReallocateDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.extensionsTypes && message.extensionsTypes.length))
                                message.extensionsTypes = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.extensionsTypes.push(reader.int32());
                            } else
                                message.extensionsTypes.push(reader.int32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ReallocateDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ReallocateDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.extensionsTypes != null && message.hasOwnProperty("extensionsTypes")) {
                    if (!Array.isArray(message.extensionsTypes))
                        return "extensionsTypes: array expected";
                    for (var i = 0; i < message.extensionsTypes.length; ++i)
                        switch (message.extensionsTypes[i]) {
                        default:
                            return "extensionsTypes: enum value[] expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                            break;
                        }
                }
                return null;
            };

            ReallocateDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ReallocateDataProto)
                    return object;
                var message = new $root.vixen.parser.ReallocateDataProto();
                if (object.extensionsTypes) {
                    if (!Array.isArray(object.extensionsTypes))
                        throw TypeError(".vixen.parser.ReallocateDataProto.extensionsTypes: array expected");
                    message.extensionsTypes = [];
                    for (var i = 0; i < object.extensionsTypes.length; ++i)
                        switch (object.extensionsTypes[i]) {
                        default:
                            if (typeof object.extensionsTypes[i] === "number") {
                                message.extensionsTypes[i] = object.extensionsTypes[i];
                                break;
                            }
                        case "UNINITIALIZED_EXT":
                        case 0:
                            message.extensionsTypes[i] = 0;
                            break;
                        case "TRANSFER_FEE_CONFIG_EXT":
                        case 1:
                            message.extensionsTypes[i] = 1;
                            break;
                        case "TRANSFER_FEE_AMOUNT_EXT":
                        case 2:
                            message.extensionsTypes[i] = 2;
                            break;
                        case "MINT_CLOSE_AUTHORITY_EXT":
                        case 3:
                            message.extensionsTypes[i] = 3;
                            break;
                        case "CONFIDENTIAL_TRANSFER_MINT_EXT":
                        case 4:
                            message.extensionsTypes[i] = 4;
                            break;
                        case "CONFIDENTIAL_TRANSFER_ACCOUNT_EXT":
                        case 5:
                            message.extensionsTypes[i] = 5;
                            break;
                        case "DEFAULT_ACCOUNT_STATE_EXT":
                        case 6:
                            message.extensionsTypes[i] = 6;
                            break;
                        case "IMMUTABLE_OWNER_EXT":
                        case 7:
                            message.extensionsTypes[i] = 7;
                            break;
                        case "MEMO_TRANSFER_EXT":
                        case 8:
                            message.extensionsTypes[i] = 8;
                            break;
                        case "NON_TRANSFERABLE_EXT":
                        case 9:
                            message.extensionsTypes[i] = 9;
                            break;
                        case "INTEREST_BEARING_CONFIG_EXT":
                        case 10:
                            message.extensionsTypes[i] = 10;
                            break;
                        case "CPI_GUARD_EXT":
                        case 11:
                            message.extensionsTypes[i] = 11;
                            break;
                        case "PERMANENT_DELEGATE_EXT":
                        case 12:
                            message.extensionsTypes[i] = 12;
                            break;
                        case "NON_TRANSFERABLE_ACCOUNT_EXT":
                        case 13:
                            message.extensionsTypes[i] = 13;
                            break;
                        case "TRANSFER_HOOK_EXT":
                        case 14:
                            message.extensionsTypes[i] = 14;
                            break;
                        case "TRANSFER_HOOK_ACCOUNT_EXT":
                        case 15:
                            message.extensionsTypes[i] = 15;
                            break;
                        case "CONFIDENTIAL_TRANSFER_FEE_CONFIG_EXT":
                        case 16:
                            message.extensionsTypes[i] = 16;
                            break;
                        case "CONFIDENTIAL_TRANSFER_FEE_AMOUNT_EXT":
                        case 17:
                            message.extensionsTypes[i] = 17;
                            break;
                        case "METADATA_POINTER_EXT":
                        case 18:
                            message.extensionsTypes[i] = 18;
                            break;
                        case "TOKEN_METADATA_EXT":
                        case 19:
                            message.extensionsTypes[i] = 19;
                            break;
                        case "GROUP_POINTER_EXT":
                        case 20:
                            message.extensionsTypes[i] = 20;
                            break;
                        case "TOKEN_GROUP_EXT":
                        case 21:
                            message.extensionsTypes[i] = 21;
                            break;
                        case "GROUP_MEMBER_POINTER_EXT":
                        case 22:
                            message.extensionsTypes[i] = 22;
                            break;
                        case "TOKEN_GROUP_MEMBER_EXT":
                        case 23:
                            message.extensionsTypes[i] = 23;
                            break;
                        }
                }
                return message;
            };

            ReallocateDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.extensionsTypes = [];
                if (message.extensionsTypes && message.extensionsTypes.length) {
                    object.extensionsTypes = [];
                    for (var j = 0; j < message.extensionsTypes.length; ++j)
                        object.extensionsTypes[j] = options.enums === String ? $root.vixen.parser.ExtensionType[message.extensionsTypes[j]] === undefined ? message.extensionsTypes[j] : $root.vixen.parser.ExtensionType[message.extensionsTypes[j]] : message.extensionsTypes[j];
                }
                return object;
            };

            ReallocateDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ReallocateDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ReallocateDataProto";
            };

            return ReallocateDataProto;
        })();

        parser.ReallocateIxProto = (function() {

            function ReallocateIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ReallocateIxProto.prototype.accounts = null;
            ReallocateIxProto.prototype.data = null;

            ReallocateIxProto.create = function create(properties) {
                return new ReallocateIxProto(properties);
            };

            ReallocateIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.ReallocateAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.ReallocateDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            ReallocateIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ReallocateIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ReallocateIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.ReallocateAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.ReallocateDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ReallocateIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ReallocateIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.ReallocateAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.ReallocateDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            ReallocateIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ReallocateIxProto)
                    return object;
                var message = new $root.vixen.parser.ReallocateIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.ReallocateIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.ReallocateAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.ReallocateIxProto.data: object expected");
                    message.data = $root.vixen.parser.ReallocateDataProto.fromObject(object.data);
                }
                return message;
            };

            ReallocateIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.ReallocateAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.ReallocateDataProto.toObject(message.data, options);
                return object;
            };

            ReallocateIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ReallocateIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ReallocateIxProto";
            };

            return ReallocateIxProto;
        })();

        parser.InitializeNonTransferableMintAccountsProto = (function() {

            function InitializeNonTransferableMintAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeNonTransferableMintAccountsProto.prototype.mint = "";

            InitializeNonTransferableMintAccountsProto.create = function create(properties) {
                return new InitializeNonTransferableMintAccountsProto(properties);
            };

            InitializeNonTransferableMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            InitializeNonTransferableMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeNonTransferableMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeNonTransferableMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeNonTransferableMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeNonTransferableMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            InitializeNonTransferableMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeNonTransferableMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeNonTransferableMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            InitializeNonTransferableMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            InitializeNonTransferableMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeNonTransferableMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeNonTransferableMintAccountsProto";
            };

            return InitializeNonTransferableMintAccountsProto;
        })();

        parser.InitializeNonTransferableMintIxProto = (function() {

            function InitializeNonTransferableMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeNonTransferableMintIxProto.prototype.accounts = null;

            InitializeNonTransferableMintIxProto.create = function create(properties) {
                return new InitializeNonTransferableMintIxProto(properties);
            };

            InitializeNonTransferableMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeNonTransferableMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            InitializeNonTransferableMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeNonTransferableMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeNonTransferableMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeNonTransferableMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeNonTransferableMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeNonTransferableMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeNonTransferableMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            InitializeNonTransferableMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeNonTransferableMintIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeNonTransferableMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeNonTransferableMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeNonTransferableMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            InitializeNonTransferableMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeNonTransferableMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            InitializeNonTransferableMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeNonTransferableMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeNonTransferableMintIxProto";
            };

            return InitializeNonTransferableMintIxProto;
        })();

        parser.InitializeMintCloseAuthorityAccountsProto = (function() {

            function InitializeMintCloseAuthorityAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMintCloseAuthorityAccountsProto.prototype.mint = "";

            InitializeMintCloseAuthorityAccountsProto.create = function create(properties) {
                return new InitializeMintCloseAuthorityAccountsProto(properties);
            };

            InitializeMintCloseAuthorityAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                return writer;
            };

            InitializeMintCloseAuthorityAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMintCloseAuthorityAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMintCloseAuthorityAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMintCloseAuthorityAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMintCloseAuthorityAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                return null;
            };

            InitializeMintCloseAuthorityAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMintCloseAuthorityAccountsProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMintCloseAuthorityAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                return message;
            };

            InitializeMintCloseAuthorityAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.mint = "";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                return object;
            };

            InitializeMintCloseAuthorityAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMintCloseAuthorityAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMintCloseAuthorityAccountsProto";
            };

            return InitializeMintCloseAuthorityAccountsProto;
        })();

        parser.InitializeMintCloseAuthorityDataProto = (function() {

            function InitializeMintCloseAuthorityDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMintCloseAuthorityDataProto.prototype.closeAuthority = null;

            var $oneOfFields;

            // Virtual OneOf for proto3 optional field
            Object.defineProperty(InitializeMintCloseAuthorityDataProto.prototype, "_closeAuthority", {
                get: $util.oneOfGetter($oneOfFields = ["closeAuthority"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            InitializeMintCloseAuthorityDataProto.create = function create(properties) {
                return new InitializeMintCloseAuthorityDataProto(properties);
            };

            InitializeMintCloseAuthorityDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.closeAuthority != null && Object.hasOwnProperty.call(message, "closeAuthority"))
                    writer.uint32(10).string(message.closeAuthority);
                return writer;
            };

            InitializeMintCloseAuthorityDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMintCloseAuthorityDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMintCloseAuthorityDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.closeAuthority = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMintCloseAuthorityDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMintCloseAuthorityDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                var properties = {};
                if (message.closeAuthority != null && message.hasOwnProperty("closeAuthority")) {
                    properties._closeAuthority = 1;
                    if (!$util.isString(message.closeAuthority))
                        return "closeAuthority: string expected";
                }
                return null;
            };

            InitializeMintCloseAuthorityDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMintCloseAuthorityDataProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMintCloseAuthorityDataProto();
                if (object.closeAuthority != null)
                    message.closeAuthority = String(object.closeAuthority);
                return message;
            };

            InitializeMintCloseAuthorityDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (message.closeAuthority != null && message.hasOwnProperty("closeAuthority")) {
                    object.closeAuthority = message.closeAuthority;
                    if (options.oneofs)
                        object._closeAuthority = "closeAuthority";
                }
                return object;
            };

            InitializeMintCloseAuthorityDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMintCloseAuthorityDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMintCloseAuthorityDataProto";
            };

            return InitializeMintCloseAuthorityDataProto;
        })();

        parser.InitializeMintCloseAuthorityIxProto = (function() {

            function InitializeMintCloseAuthorityIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            InitializeMintCloseAuthorityIxProto.prototype.accounts = null;
            InitializeMintCloseAuthorityIxProto.prototype.data = null;

            InitializeMintCloseAuthorityIxProto.create = function create(properties) {
                return new InitializeMintCloseAuthorityIxProto(properties);
            };

            InitializeMintCloseAuthorityIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.InitializeMintCloseAuthorityAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.InitializeMintCloseAuthorityDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            InitializeMintCloseAuthorityIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            InitializeMintCloseAuthorityIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.InitializeMintCloseAuthorityIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.InitializeMintCloseAuthorityAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.InitializeMintCloseAuthorityDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            InitializeMintCloseAuthorityIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            InitializeMintCloseAuthorityIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.InitializeMintCloseAuthorityAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.InitializeMintCloseAuthorityDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            InitializeMintCloseAuthorityIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.InitializeMintCloseAuthorityIxProto)
                    return object;
                var message = new $root.vixen.parser.InitializeMintCloseAuthorityIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.InitializeMintCloseAuthorityIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.InitializeMintCloseAuthorityAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.InitializeMintCloseAuthorityIxProto.data: object expected");
                    message.data = $root.vixen.parser.InitializeMintCloseAuthorityDataProto.fromObject(object.data);
                }
                return message;
            };

            InitializeMintCloseAuthorityIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.InitializeMintCloseAuthorityAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.InitializeMintCloseAuthorityDataProto.toObject(message.data, options);
                return object;
            };

            InitializeMintCloseAuthorityIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            InitializeMintCloseAuthorityIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.InitializeMintCloseAuthorityIxProto";
            };

            return InitializeMintCloseAuthorityIxProto;
        })();

        parser.CreateNativeMintAccountsProto = (function() {

            function CreateNativeMintAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            CreateNativeMintAccountsProto.prototype.mint = "";
            CreateNativeMintAccountsProto.prototype.fundingAccount = "";

            CreateNativeMintAccountsProto.create = function create(properties) {
                return new CreateNativeMintAccountsProto(properties);
            };

            CreateNativeMintAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.fundingAccount != null && Object.hasOwnProperty.call(message, "fundingAccount"))
                    writer.uint32(18).string(message.fundingAccount);
                return writer;
            };

            CreateNativeMintAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            CreateNativeMintAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.CreateNativeMintAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.fundingAccount = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            CreateNativeMintAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            CreateNativeMintAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.fundingAccount != null && message.hasOwnProperty("fundingAccount"))
                    if (!$util.isString(message.fundingAccount))
                        return "fundingAccount: string expected";
                return null;
            };

            CreateNativeMintAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.CreateNativeMintAccountsProto)
                    return object;
                var message = new $root.vixen.parser.CreateNativeMintAccountsProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.fundingAccount != null)
                    message.fundingAccount = String(object.fundingAccount);
                return message;
            };

            CreateNativeMintAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.mint = "";
                    object.fundingAccount = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.fundingAccount != null && message.hasOwnProperty("fundingAccount"))
                    object.fundingAccount = message.fundingAccount;
                return object;
            };

            CreateNativeMintAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            CreateNativeMintAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.CreateNativeMintAccountsProto";
            };

            return CreateNativeMintAccountsProto;
        })();

        parser.CreateNativeMintIxProto = (function() {

            function CreateNativeMintIxProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            CreateNativeMintIxProto.prototype.accounts = null;

            CreateNativeMintIxProto.create = function create(properties) {
                return new CreateNativeMintIxProto(properties);
            };

            CreateNativeMintIxProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.CreateNativeMintAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                return writer;
            };

            CreateNativeMintIxProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            CreateNativeMintIxProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.CreateNativeMintIxProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.CreateNativeMintAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            CreateNativeMintIxProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            CreateNativeMintIxProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.CreateNativeMintAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                return null;
            };

            CreateNativeMintIxProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.CreateNativeMintIxProto)
                    return object;
                var message = new $root.vixen.parser.CreateNativeMintIxProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.CreateNativeMintIxProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.CreateNativeMintAccountsProto.fromObject(object.accounts);
                }
                return message;
            };

            CreateNativeMintIxProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.accounts = null;
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.CreateNativeMintAccountsProto.toObject(message.accounts, options);
                return object;
            };

            CreateNativeMintIxProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            CreateNativeMintIxProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.CreateNativeMintIxProto";
            };

            return CreateNativeMintIxProto;
        })();

        parser.WhirlpoolRewardInfoProto = (function() {

            function WhirlpoolRewardInfoProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WhirlpoolRewardInfoProto.prototype.mint = "";
            WhirlpoolRewardInfoProto.prototype.vault = "";
            WhirlpoolRewardInfoProto.prototype.authority = "";
            WhirlpoolRewardInfoProto.prototype.emissionsPerSecondX64 = "";
            WhirlpoolRewardInfoProto.prototype.growthGlobalX64 = "";

            WhirlpoolRewardInfoProto.create = function create(properties) {
                return new WhirlpoolRewardInfoProto(properties);
            };

            WhirlpoolRewardInfoProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                    writer.uint32(10).string(message.mint);
                if (message.vault != null && Object.hasOwnProperty.call(message, "vault"))
                    writer.uint32(18).string(message.vault);
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(26).string(message.authority);
                if (message.emissionsPerSecondX64 != null && Object.hasOwnProperty.call(message, "emissionsPerSecondX64"))
                    writer.uint32(34).string(message.emissionsPerSecondX64);
                if (message.growthGlobalX64 != null && Object.hasOwnProperty.call(message, "growthGlobalX64"))
                    writer.uint32(42).string(message.growthGlobalX64);
                return writer;
            };

            WhirlpoolRewardInfoProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WhirlpoolRewardInfoProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WhirlpoolRewardInfoProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.mint = reader.string();
                            break;
                        }
                    case 2: {
                            message.vault = reader.string();
                            break;
                        }
                    case 3: {
                            message.authority = reader.string();
                            break;
                        }
                    case 4: {
                            message.emissionsPerSecondX64 = reader.string();
                            break;
                        }
                    case 5: {
                            message.growthGlobalX64 = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WhirlpoolRewardInfoProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WhirlpoolRewardInfoProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.mint != null && message.hasOwnProperty("mint"))
                    if (!$util.isString(message.mint))
                        return "mint: string expected";
                if (message.vault != null && message.hasOwnProperty("vault"))
                    if (!$util.isString(message.vault))
                        return "vault: string expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                if (message.emissionsPerSecondX64 != null && message.hasOwnProperty("emissionsPerSecondX64"))
                    if (!$util.isString(message.emissionsPerSecondX64))
                        return "emissionsPerSecondX64: string expected";
                if (message.growthGlobalX64 != null && message.hasOwnProperty("growthGlobalX64"))
                    if (!$util.isString(message.growthGlobalX64))
                        return "growthGlobalX64: string expected";
                return null;
            };

            WhirlpoolRewardInfoProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WhirlpoolRewardInfoProto)
                    return object;
                var message = new $root.vixen.parser.WhirlpoolRewardInfoProto();
                if (object.mint != null)
                    message.mint = String(object.mint);
                if (object.vault != null)
                    message.vault = String(object.vault);
                if (object.authority != null)
                    message.authority = String(object.authority);
                if (object.emissionsPerSecondX64 != null)
                    message.emissionsPerSecondX64 = String(object.emissionsPerSecondX64);
                if (object.growthGlobalX64 != null)
                    message.growthGlobalX64 = String(object.growthGlobalX64);
                return message;
            };

            WhirlpoolRewardInfoProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.mint = "";
                    object.vault = "";
                    object.authority = "";
                    object.emissionsPerSecondX64 = "";
                    object.growthGlobalX64 = "";
                }
                if (message.mint != null && message.hasOwnProperty("mint"))
                    object.mint = message.mint;
                if (message.vault != null && message.hasOwnProperty("vault"))
                    object.vault = message.vault;
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                if (message.emissionsPerSecondX64 != null && message.hasOwnProperty("emissionsPerSecondX64"))
                    object.emissionsPerSecondX64 = message.emissionsPerSecondX64;
                if (message.growthGlobalX64 != null && message.hasOwnProperty("growthGlobalX64"))
                    object.growthGlobalX64 = message.growthGlobalX64;
                return object;
            };

            WhirlpoolRewardInfoProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WhirlpoolRewardInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WhirlpoolRewardInfoProto";
            };

            return WhirlpoolRewardInfoProto;
        })();

        parser.WhirlpoolProto = (function() {

            function WhirlpoolProto(properties) {
                this.rewardInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WhirlpoolProto.prototype.discriminator = $util.newBuffer([]);
            WhirlpoolProto.prototype.whirlpoolsConfig = "";
            WhirlpoolProto.prototype.whirlpoolBump = 0;
            WhirlpoolProto.prototype.tickSpacing = 0;
            WhirlpoolProto.prototype.tickSpacingSeed = $util.newBuffer([]);
            WhirlpoolProto.prototype.feeRate = 0;
            WhirlpoolProto.prototype.protocolFeeRate = 0;
            WhirlpoolProto.prototype.liquidity = "";
            WhirlpoolProto.prototype.sqrtPrice = "";
            WhirlpoolProto.prototype.tickCurrentIndex = 0;
            WhirlpoolProto.prototype.protocolFeeOwedA = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            WhirlpoolProto.prototype.protocolFeeOwedB = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            WhirlpoolProto.prototype.tokenMintA = "";
            WhirlpoolProto.prototype.tokenVaultA = "";
            WhirlpoolProto.prototype.feeGrowthGlobalA = "";
            WhirlpoolProto.prototype.tokenMintB = "";
            WhirlpoolProto.prototype.tokenVaultB = "";
            WhirlpoolProto.prototype.feeGrowthGlobalB = "";
            WhirlpoolProto.prototype.rewardLastUpdatedTimestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            WhirlpoolProto.prototype.rewardInfos = $util.emptyArray;

            WhirlpoolProto.create = function create(properties) {
                return new WhirlpoolProto(properties);
            };

            WhirlpoolProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.discriminator != null && Object.hasOwnProperty.call(message, "discriminator"))
                    writer.uint32(10).bytes(message.discriminator);
                if (message.whirlpoolsConfig != null && Object.hasOwnProperty.call(message, "whirlpoolsConfig"))
                    writer.uint32(18).string(message.whirlpoolsConfig);
                if (message.whirlpoolBump != null && Object.hasOwnProperty.call(message, "whirlpoolBump"))
                    writer.uint32(24).uint32(message.whirlpoolBump);
                if (message.tickSpacing != null && Object.hasOwnProperty.call(message, "tickSpacing"))
                    writer.uint32(32).uint32(message.tickSpacing);
                if (message.tickSpacingSeed != null && Object.hasOwnProperty.call(message, "tickSpacingSeed"))
                    writer.uint32(42).bytes(message.tickSpacingSeed);
                if (message.feeRate != null && Object.hasOwnProperty.call(message, "feeRate"))
                    writer.uint32(48).uint32(message.feeRate);
                if (message.protocolFeeRate != null && Object.hasOwnProperty.call(message, "protocolFeeRate"))
                    writer.uint32(56).uint32(message.protocolFeeRate);
                if (message.liquidity != null && Object.hasOwnProperty.call(message, "liquidity"))
                    writer.uint32(66).string(message.liquidity);
                if (message.sqrtPrice != null && Object.hasOwnProperty.call(message, "sqrtPrice"))
                    writer.uint32(74).string(message.sqrtPrice);
                if (message.tickCurrentIndex != null && Object.hasOwnProperty.call(message, "tickCurrentIndex"))
                    writer.uint32(80).int32(message.tickCurrentIndex);
                if (message.protocolFeeOwedA != null && Object.hasOwnProperty.call(message, "protocolFeeOwedA"))
                    writer.uint32(88).uint64(message.protocolFeeOwedA);
                if (message.protocolFeeOwedB != null && Object.hasOwnProperty.call(message, "protocolFeeOwedB"))
                    writer.uint32(96).uint64(message.protocolFeeOwedB);
                if (message.tokenMintA != null && Object.hasOwnProperty.call(message, "tokenMintA"))
                    writer.uint32(106).string(message.tokenMintA);
                if (message.tokenVaultA != null && Object.hasOwnProperty.call(message, "tokenVaultA"))
                    writer.uint32(114).string(message.tokenVaultA);
                if (message.feeGrowthGlobalA != null && Object.hasOwnProperty.call(message, "feeGrowthGlobalA"))
                    writer.uint32(122).string(message.feeGrowthGlobalA);
                if (message.tokenMintB != null && Object.hasOwnProperty.call(message, "tokenMintB"))
                    writer.uint32(130).string(message.tokenMintB);
                if (message.tokenVaultB != null && Object.hasOwnProperty.call(message, "tokenVaultB"))
                    writer.uint32(138).string(message.tokenVaultB);
                if (message.feeGrowthGlobalB != null && Object.hasOwnProperty.call(message, "feeGrowthGlobalB"))
                    writer.uint32(146).string(message.feeGrowthGlobalB);
                if (message.rewardLastUpdatedTimestamp != null && Object.hasOwnProperty.call(message, "rewardLastUpdatedTimestamp"))
                    writer.uint32(152).uint64(message.rewardLastUpdatedTimestamp);
                if (message.rewardInfos != null && message.rewardInfos.length)
                    for (var i = 0; i < message.rewardInfos.length; ++i)
                        $root.vixen.parser.WhirlpoolRewardInfoProto.encode(message.rewardInfos[i], writer.uint32(162).fork()).ldelim();
                return writer;
            };

            WhirlpoolProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WhirlpoolProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WhirlpoolProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.discriminator = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.whirlpoolsConfig = reader.string();
                            break;
                        }
                    case 3: {
                            message.whirlpoolBump = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.tickSpacing = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.tickSpacingSeed = reader.bytes();
                            break;
                        }
                    case 6: {
                            message.feeRate = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.protocolFeeRate = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.liquidity = reader.string();
                            break;
                        }
                    case 9: {
                            message.sqrtPrice = reader.string();
                            break;
                        }
                    case 10: {
                            message.tickCurrentIndex = reader.int32();
                            break;
                        }
                    case 11: {
                            message.protocolFeeOwedA = reader.uint64();
                            break;
                        }
                    case 12: {
                            message.protocolFeeOwedB = reader.uint64();
                            break;
                        }
                    case 13: {
                            message.tokenMintA = reader.string();
                            break;
                        }
                    case 14: {
                            message.tokenVaultA = reader.string();
                            break;
                        }
                    case 15: {
                            message.feeGrowthGlobalA = reader.string();
                            break;
                        }
                    case 16: {
                            message.tokenMintB = reader.string();
                            break;
                        }
                    case 17: {
                            message.tokenVaultB = reader.string();
                            break;
                        }
                    case 18: {
                            message.feeGrowthGlobalB = reader.string();
                            break;
                        }
                    case 19: {
                            message.rewardLastUpdatedTimestamp = reader.uint64();
                            break;
                        }
                    case 20: {
                            if (!(message.rewardInfos && message.rewardInfos.length))
                                message.rewardInfos = [];
                            message.rewardInfos.push($root.vixen.parser.WhirlpoolRewardInfoProto.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WhirlpoolProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WhirlpoolProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    if (!(message.discriminator && typeof message.discriminator.length === "number" || $util.isString(message.discriminator)))
                        return "discriminator: buffer expected";
                if (message.whirlpoolsConfig != null && message.hasOwnProperty("whirlpoolsConfig"))
                    if (!$util.isString(message.whirlpoolsConfig))
                        return "whirlpoolsConfig: string expected";
                if (message.whirlpoolBump != null && message.hasOwnProperty("whirlpoolBump"))
                    if (!$util.isInteger(message.whirlpoolBump))
                        return "whirlpoolBump: integer expected";
                if (message.tickSpacing != null && message.hasOwnProperty("tickSpacing"))
                    if (!$util.isInteger(message.tickSpacing))
                        return "tickSpacing: integer expected";
                if (message.tickSpacingSeed != null && message.hasOwnProperty("tickSpacingSeed"))
                    if (!(message.tickSpacingSeed && typeof message.tickSpacingSeed.length === "number" || $util.isString(message.tickSpacingSeed)))
                        return "tickSpacingSeed: buffer expected";
                if (message.feeRate != null && message.hasOwnProperty("feeRate"))
                    if (!$util.isInteger(message.feeRate))
                        return "feeRate: integer expected";
                if (message.protocolFeeRate != null && message.hasOwnProperty("protocolFeeRate"))
                    if (!$util.isInteger(message.protocolFeeRate))
                        return "protocolFeeRate: integer expected";
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    if (!$util.isString(message.liquidity))
                        return "liquidity: string expected";
                if (message.sqrtPrice != null && message.hasOwnProperty("sqrtPrice"))
                    if (!$util.isString(message.sqrtPrice))
                        return "sqrtPrice: string expected";
                if (message.tickCurrentIndex != null && message.hasOwnProperty("tickCurrentIndex"))
                    if (!$util.isInteger(message.tickCurrentIndex))
                        return "tickCurrentIndex: integer expected";
                if (message.protocolFeeOwedA != null && message.hasOwnProperty("protocolFeeOwedA"))
                    if (!$util.isInteger(message.protocolFeeOwedA) && !(message.protocolFeeOwedA && $util.isInteger(message.protocolFeeOwedA.low) && $util.isInteger(message.protocolFeeOwedA.high)))
                        return "protocolFeeOwedA: integer|Long expected";
                if (message.protocolFeeOwedB != null && message.hasOwnProperty("protocolFeeOwedB"))
                    if (!$util.isInteger(message.protocolFeeOwedB) && !(message.protocolFeeOwedB && $util.isInteger(message.protocolFeeOwedB.low) && $util.isInteger(message.protocolFeeOwedB.high)))
                        return "protocolFeeOwedB: integer|Long expected";
                if (message.tokenMintA != null && message.hasOwnProperty("tokenMintA"))
                    if (!$util.isString(message.tokenMintA))
                        return "tokenMintA: string expected";
                if (message.tokenVaultA != null && message.hasOwnProperty("tokenVaultA"))
                    if (!$util.isString(message.tokenVaultA))
                        return "tokenVaultA: string expected";
                if (message.feeGrowthGlobalA != null && message.hasOwnProperty("feeGrowthGlobalA"))
                    if (!$util.isString(message.feeGrowthGlobalA))
                        return "feeGrowthGlobalA: string expected";
                if (message.tokenMintB != null && message.hasOwnProperty("tokenMintB"))
                    if (!$util.isString(message.tokenMintB))
                        return "tokenMintB: string expected";
                if (message.tokenVaultB != null && message.hasOwnProperty("tokenVaultB"))
                    if (!$util.isString(message.tokenVaultB))
                        return "tokenVaultB: string expected";
                if (message.feeGrowthGlobalB != null && message.hasOwnProperty("feeGrowthGlobalB"))
                    if (!$util.isString(message.feeGrowthGlobalB))
                        return "feeGrowthGlobalB: string expected";
                if (message.rewardLastUpdatedTimestamp != null && message.hasOwnProperty("rewardLastUpdatedTimestamp"))
                    if (!$util.isInteger(message.rewardLastUpdatedTimestamp) && !(message.rewardLastUpdatedTimestamp && $util.isInteger(message.rewardLastUpdatedTimestamp.low) && $util.isInteger(message.rewardLastUpdatedTimestamp.high)))
                        return "rewardLastUpdatedTimestamp: integer|Long expected";
                if (message.rewardInfos != null && message.hasOwnProperty("rewardInfos")) {
                    if (!Array.isArray(message.rewardInfos))
                        return "rewardInfos: array expected";
                    for (var i = 0; i < message.rewardInfos.length; ++i) {
                        var error = $root.vixen.parser.WhirlpoolRewardInfoProto.verify(message.rewardInfos[i]);
                        if (error)
                            return "rewardInfos." + error;
                    }
                }
                return null;
            };

            WhirlpoolProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WhirlpoolProto)
                    return object;
                var message = new $root.vixen.parser.WhirlpoolProto();
                if (object.discriminator != null)
                    if (typeof object.discriminator === "string")
                        $util.base64.decode(object.discriminator, message.discriminator = $util.newBuffer($util.base64.length(object.discriminator)), 0);
                    else if (object.discriminator.length >= 0)
                        message.discriminator = object.discriminator;
                if (object.whirlpoolsConfig != null)
                    message.whirlpoolsConfig = String(object.whirlpoolsConfig);
                if (object.whirlpoolBump != null)
                    message.whirlpoolBump = object.whirlpoolBump >>> 0;
                if (object.tickSpacing != null)
                    message.tickSpacing = object.tickSpacing >>> 0;
                if (object.tickSpacingSeed != null)
                    if (typeof object.tickSpacingSeed === "string")
                        $util.base64.decode(object.tickSpacingSeed, message.tickSpacingSeed = $util.newBuffer($util.base64.length(object.tickSpacingSeed)), 0);
                    else if (object.tickSpacingSeed.length >= 0)
                        message.tickSpacingSeed = object.tickSpacingSeed;
                if (object.feeRate != null)
                    message.feeRate = object.feeRate >>> 0;
                if (object.protocolFeeRate != null)
                    message.protocolFeeRate = object.protocolFeeRate >>> 0;
                if (object.liquidity != null)
                    message.liquidity = String(object.liquidity);
                if (object.sqrtPrice != null)
                    message.sqrtPrice = String(object.sqrtPrice);
                if (object.tickCurrentIndex != null)
                    message.tickCurrentIndex = object.tickCurrentIndex | 0;
                if (object.protocolFeeOwedA != null)
                    if ($util.Long)
                        (message.protocolFeeOwedA = $util.Long.fromValue(object.protocolFeeOwedA)).unsigned = true;
                    else if (typeof object.protocolFeeOwedA === "string")
                        message.protocolFeeOwedA = parseInt(object.protocolFeeOwedA, 10);
                    else if (typeof object.protocolFeeOwedA === "number")
                        message.protocolFeeOwedA = object.protocolFeeOwedA;
                    else if (typeof object.protocolFeeOwedA === "object")
                        message.protocolFeeOwedA = new $util.LongBits(object.protocolFeeOwedA.low >>> 0, object.protocolFeeOwedA.high >>> 0).toNumber(true);
                if (object.protocolFeeOwedB != null)
                    if ($util.Long)
                        (message.protocolFeeOwedB = $util.Long.fromValue(object.protocolFeeOwedB)).unsigned = true;
                    else if (typeof object.protocolFeeOwedB === "string")
                        message.protocolFeeOwedB = parseInt(object.protocolFeeOwedB, 10);
                    else if (typeof object.protocolFeeOwedB === "number")
                        message.protocolFeeOwedB = object.protocolFeeOwedB;
                    else if (typeof object.protocolFeeOwedB === "object")
                        message.protocolFeeOwedB = new $util.LongBits(object.protocolFeeOwedB.low >>> 0, object.protocolFeeOwedB.high >>> 0).toNumber(true);
                if (object.tokenMintA != null)
                    message.tokenMintA = String(object.tokenMintA);
                if (object.tokenVaultA != null)
                    message.tokenVaultA = String(object.tokenVaultA);
                if (object.feeGrowthGlobalA != null)
                    message.feeGrowthGlobalA = String(object.feeGrowthGlobalA);
                if (object.tokenMintB != null)
                    message.tokenMintB = String(object.tokenMintB);
                if (object.tokenVaultB != null)
                    message.tokenVaultB = String(object.tokenVaultB);
                if (object.feeGrowthGlobalB != null)
                    message.feeGrowthGlobalB = String(object.feeGrowthGlobalB);
                if (object.rewardLastUpdatedTimestamp != null)
                    if ($util.Long)
                        (message.rewardLastUpdatedTimestamp = $util.Long.fromValue(object.rewardLastUpdatedTimestamp)).unsigned = true;
                    else if (typeof object.rewardLastUpdatedTimestamp === "string")
                        message.rewardLastUpdatedTimestamp = parseInt(object.rewardLastUpdatedTimestamp, 10);
                    else if (typeof object.rewardLastUpdatedTimestamp === "number")
                        message.rewardLastUpdatedTimestamp = object.rewardLastUpdatedTimestamp;
                    else if (typeof object.rewardLastUpdatedTimestamp === "object")
                        message.rewardLastUpdatedTimestamp = new $util.LongBits(object.rewardLastUpdatedTimestamp.low >>> 0, object.rewardLastUpdatedTimestamp.high >>> 0).toNumber(true);
                if (object.rewardInfos) {
                    if (!Array.isArray(object.rewardInfos))
                        throw TypeError(".vixen.parser.WhirlpoolProto.rewardInfos: array expected");
                    message.rewardInfos = [];
                    for (var i = 0; i < object.rewardInfos.length; ++i) {
                        if (typeof object.rewardInfos[i] !== "object")
                            throw TypeError(".vixen.parser.WhirlpoolProto.rewardInfos: object expected");
                        message.rewardInfos[i] = $root.vixen.parser.WhirlpoolRewardInfoProto.fromObject(object.rewardInfos[i]);
                    }
                }
                return message;
            };

            WhirlpoolProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.rewardInfos = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.discriminator = "";
                    else {
                        object.discriminator = [];
                        if (options.bytes !== Array)
                            object.discriminator = $util.newBuffer(object.discriminator);
                    }
                    object.whirlpoolsConfig = "";
                    object.whirlpoolBump = 0;
                    object.tickSpacing = 0;
                    if (options.bytes === String)
                        object.tickSpacingSeed = "";
                    else {
                        object.tickSpacingSeed = [];
                        if (options.bytes !== Array)
                            object.tickSpacingSeed = $util.newBuffer(object.tickSpacingSeed);
                    }
                    object.feeRate = 0;
                    object.protocolFeeRate = 0;
                    object.liquidity = "";
                    object.sqrtPrice = "";
                    object.tickCurrentIndex = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.protocolFeeOwedA = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.protocolFeeOwedA = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.protocolFeeOwedB = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.protocolFeeOwedB = options.longs === String ? "0" : 0;
                    object.tokenMintA = "";
                    object.tokenVaultA = "";
                    object.feeGrowthGlobalA = "";
                    object.tokenMintB = "";
                    object.tokenVaultB = "";
                    object.feeGrowthGlobalB = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.rewardLastUpdatedTimestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.rewardLastUpdatedTimestamp = options.longs === String ? "0" : 0;
                }
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    object.discriminator = options.bytes === String ? $util.base64.encode(message.discriminator, 0, message.discriminator.length) : options.bytes === Array ? Array.prototype.slice.call(message.discriminator) : message.discriminator;
                if (message.whirlpoolsConfig != null && message.hasOwnProperty("whirlpoolsConfig"))
                    object.whirlpoolsConfig = message.whirlpoolsConfig;
                if (message.whirlpoolBump != null && message.hasOwnProperty("whirlpoolBump"))
                    object.whirlpoolBump = message.whirlpoolBump;
                if (message.tickSpacing != null && message.hasOwnProperty("tickSpacing"))
                    object.tickSpacing = message.tickSpacing;
                if (message.tickSpacingSeed != null && message.hasOwnProperty("tickSpacingSeed"))
                    object.tickSpacingSeed = options.bytes === String ? $util.base64.encode(message.tickSpacingSeed, 0, message.tickSpacingSeed.length) : options.bytes === Array ? Array.prototype.slice.call(message.tickSpacingSeed) : message.tickSpacingSeed;
                if (message.feeRate != null && message.hasOwnProperty("feeRate"))
                    object.feeRate = message.feeRate;
                if (message.protocolFeeRate != null && message.hasOwnProperty("protocolFeeRate"))
                    object.protocolFeeRate = message.protocolFeeRate;
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    object.liquidity = message.liquidity;
                if (message.sqrtPrice != null && message.hasOwnProperty("sqrtPrice"))
                    object.sqrtPrice = message.sqrtPrice;
                if (message.tickCurrentIndex != null && message.hasOwnProperty("tickCurrentIndex"))
                    object.tickCurrentIndex = message.tickCurrentIndex;
                if (message.protocolFeeOwedA != null && message.hasOwnProperty("protocolFeeOwedA"))
                    if (typeof message.protocolFeeOwedA === "number")
                        object.protocolFeeOwedA = options.longs === String ? String(message.protocolFeeOwedA) : message.protocolFeeOwedA;
                    else
                        object.protocolFeeOwedA = options.longs === String ? $util.Long.prototype.toString.call(message.protocolFeeOwedA) : options.longs === Number ? new $util.LongBits(message.protocolFeeOwedA.low >>> 0, message.protocolFeeOwedA.high >>> 0).toNumber(true) : message.protocolFeeOwedA;
                if (message.protocolFeeOwedB != null && message.hasOwnProperty("protocolFeeOwedB"))
                    if (typeof message.protocolFeeOwedB === "number")
                        object.protocolFeeOwedB = options.longs === String ? String(message.protocolFeeOwedB) : message.protocolFeeOwedB;
                    else
                        object.protocolFeeOwedB = options.longs === String ? $util.Long.prototype.toString.call(message.protocolFeeOwedB) : options.longs === Number ? new $util.LongBits(message.protocolFeeOwedB.low >>> 0, message.protocolFeeOwedB.high >>> 0).toNumber(true) : message.protocolFeeOwedB;
                if (message.tokenMintA != null && message.hasOwnProperty("tokenMintA"))
                    object.tokenMintA = message.tokenMintA;
                if (message.tokenVaultA != null && message.hasOwnProperty("tokenVaultA"))
                    object.tokenVaultA = message.tokenVaultA;
                if (message.feeGrowthGlobalA != null && message.hasOwnProperty("feeGrowthGlobalA"))
                    object.feeGrowthGlobalA = message.feeGrowthGlobalA;
                if (message.tokenMintB != null && message.hasOwnProperty("tokenMintB"))
                    object.tokenMintB = message.tokenMintB;
                if (message.tokenVaultB != null && message.hasOwnProperty("tokenVaultB"))
                    object.tokenVaultB = message.tokenVaultB;
                if (message.feeGrowthGlobalB != null && message.hasOwnProperty("feeGrowthGlobalB"))
                    object.feeGrowthGlobalB = message.feeGrowthGlobalB;
                if (message.rewardLastUpdatedTimestamp != null && message.hasOwnProperty("rewardLastUpdatedTimestamp"))
                    if (typeof message.rewardLastUpdatedTimestamp === "number")
                        object.rewardLastUpdatedTimestamp = options.longs === String ? String(message.rewardLastUpdatedTimestamp) : message.rewardLastUpdatedTimestamp;
                    else
                        object.rewardLastUpdatedTimestamp = options.longs === String ? $util.Long.prototype.toString.call(message.rewardLastUpdatedTimestamp) : options.longs === Number ? new $util.LongBits(message.rewardLastUpdatedTimestamp.low >>> 0, message.rewardLastUpdatedTimestamp.high >>> 0).toNumber(true) : message.rewardLastUpdatedTimestamp;
                if (message.rewardInfos && message.rewardInfos.length) {
                    object.rewardInfos = [];
                    for (var j = 0; j < message.rewardInfos.length; ++j)
                        object.rewardInfos[j] = $root.vixen.parser.WhirlpoolRewardInfoProto.toObject(message.rewardInfos[j], options);
                }
                return object;
            };

            WhirlpoolProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WhirlpoolProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WhirlpoolProto";
            };

            return WhirlpoolProto;
        })();

        parser.WhirlpoolsConfigProto = (function() {

            function WhirlpoolsConfigProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            WhirlpoolsConfigProto.prototype.discriminator = $util.newBuffer([]);
            WhirlpoolsConfigProto.prototype.feeAuthority = "";
            WhirlpoolsConfigProto.prototype.collectProtocolFeesAuthority = "";
            WhirlpoolsConfigProto.prototype.rewardEmissionsSuperAuthority = "";
            WhirlpoolsConfigProto.prototype.defaultProtocolFeeRate = 0;

            WhirlpoolsConfigProto.create = function create(properties) {
                return new WhirlpoolsConfigProto(properties);
            };

            WhirlpoolsConfigProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.discriminator != null && Object.hasOwnProperty.call(message, "discriminator"))
                    writer.uint32(10).bytes(message.discriminator);
                if (message.feeAuthority != null && Object.hasOwnProperty.call(message, "feeAuthority"))
                    writer.uint32(18).string(message.feeAuthority);
                if (message.collectProtocolFeesAuthority != null && Object.hasOwnProperty.call(message, "collectProtocolFeesAuthority"))
                    writer.uint32(26).string(message.collectProtocolFeesAuthority);
                if (message.rewardEmissionsSuperAuthority != null && Object.hasOwnProperty.call(message, "rewardEmissionsSuperAuthority"))
                    writer.uint32(34).string(message.rewardEmissionsSuperAuthority);
                if (message.defaultProtocolFeeRate != null && Object.hasOwnProperty.call(message, "defaultProtocolFeeRate"))
                    writer.uint32(40).uint32(message.defaultProtocolFeeRate);
                return writer;
            };

            WhirlpoolsConfigProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            WhirlpoolsConfigProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.WhirlpoolsConfigProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.discriminator = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.feeAuthority = reader.string();
                            break;
                        }
                    case 3: {
                            message.collectProtocolFeesAuthority = reader.string();
                            break;
                        }
                    case 4: {
                            message.rewardEmissionsSuperAuthority = reader.string();
                            break;
                        }
                    case 5: {
                            message.defaultProtocolFeeRate = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            WhirlpoolsConfigProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            WhirlpoolsConfigProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    if (!(message.discriminator && typeof message.discriminator.length === "number" || $util.isString(message.discriminator)))
                        return "discriminator: buffer expected";
                if (message.feeAuthority != null && message.hasOwnProperty("feeAuthority"))
                    if (!$util.isString(message.feeAuthority))
                        return "feeAuthority: string expected";
                if (message.collectProtocolFeesAuthority != null && message.hasOwnProperty("collectProtocolFeesAuthority"))
                    if (!$util.isString(message.collectProtocolFeesAuthority))
                        return "collectProtocolFeesAuthority: string expected";
                if (message.rewardEmissionsSuperAuthority != null && message.hasOwnProperty("rewardEmissionsSuperAuthority"))
                    if (!$util.isString(message.rewardEmissionsSuperAuthority))
                        return "rewardEmissionsSuperAuthority: string expected";
                if (message.defaultProtocolFeeRate != null && message.hasOwnProperty("defaultProtocolFeeRate"))
                    if (!$util.isInteger(message.defaultProtocolFeeRate))
                        return "defaultProtocolFeeRate: integer expected";
                return null;
            };

            WhirlpoolsConfigProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.WhirlpoolsConfigProto)
                    return object;
                var message = new $root.vixen.parser.WhirlpoolsConfigProto();
                if (object.discriminator != null)
                    if (typeof object.discriminator === "string")
                        $util.base64.decode(object.discriminator, message.discriminator = $util.newBuffer($util.base64.length(object.discriminator)), 0);
                    else if (object.discriminator.length >= 0)
                        message.discriminator = object.discriminator;
                if (object.feeAuthority != null)
                    message.feeAuthority = String(object.feeAuthority);
                if (object.collectProtocolFeesAuthority != null)
                    message.collectProtocolFeesAuthority = String(object.collectProtocolFeesAuthority);
                if (object.rewardEmissionsSuperAuthority != null)
                    message.rewardEmissionsSuperAuthority = String(object.rewardEmissionsSuperAuthority);
                if (object.defaultProtocolFeeRate != null)
                    message.defaultProtocolFeeRate = object.defaultProtocolFeeRate >>> 0;
                return message;
            };

            WhirlpoolsConfigProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.discriminator = "";
                    else {
                        object.discriminator = [];
                        if (options.bytes !== Array)
                            object.discriminator = $util.newBuffer(object.discriminator);
                    }
                    object.feeAuthority = "";
                    object.collectProtocolFeesAuthority = "";
                    object.rewardEmissionsSuperAuthority = "";
                    object.defaultProtocolFeeRate = 0;
                }
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    object.discriminator = options.bytes === String ? $util.base64.encode(message.discriminator, 0, message.discriminator.length) : options.bytes === Array ? Array.prototype.slice.call(message.discriminator) : message.discriminator;
                if (message.feeAuthority != null && message.hasOwnProperty("feeAuthority"))
                    object.feeAuthority = message.feeAuthority;
                if (message.collectProtocolFeesAuthority != null && message.hasOwnProperty("collectProtocolFeesAuthority"))
                    object.collectProtocolFeesAuthority = message.collectProtocolFeesAuthority;
                if (message.rewardEmissionsSuperAuthority != null && message.hasOwnProperty("rewardEmissionsSuperAuthority"))
                    object.rewardEmissionsSuperAuthority = message.rewardEmissionsSuperAuthority;
                if (message.defaultProtocolFeeRate != null && message.hasOwnProperty("defaultProtocolFeeRate"))
                    object.defaultProtocolFeeRate = message.defaultProtocolFeeRate;
                return object;
            };

            WhirlpoolsConfigProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            WhirlpoolsConfigProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.WhirlpoolsConfigProto";
            };

            return WhirlpoolsConfigProto;
        })();

        parser.FeeTierProto = (function() {

            function FeeTierProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            FeeTierProto.prototype.discriminator = $util.newBuffer([]);
            FeeTierProto.prototype.whirlpoolsConfig = "";
            FeeTierProto.prototype.tickSpacing = 0;
            FeeTierProto.prototype.defaultFeeRate = 0;

            FeeTierProto.create = function create(properties) {
                return new FeeTierProto(properties);
            };

            FeeTierProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.discriminator != null && Object.hasOwnProperty.call(message, "discriminator"))
                    writer.uint32(10).bytes(message.discriminator);
                if (message.whirlpoolsConfig != null && Object.hasOwnProperty.call(message, "whirlpoolsConfig"))
                    writer.uint32(18).string(message.whirlpoolsConfig);
                if (message.tickSpacing != null && Object.hasOwnProperty.call(message, "tickSpacing"))
                    writer.uint32(24).uint32(message.tickSpacing);
                if (message.defaultFeeRate != null && Object.hasOwnProperty.call(message, "defaultFeeRate"))
                    writer.uint32(32).uint32(message.defaultFeeRate);
                return writer;
            };

            FeeTierProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            FeeTierProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.FeeTierProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.discriminator = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.whirlpoolsConfig = reader.string();
                            break;
                        }
                    case 3: {
                            message.tickSpacing = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.defaultFeeRate = reader.uint32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            FeeTierProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            FeeTierProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    if (!(message.discriminator && typeof message.discriminator.length === "number" || $util.isString(message.discriminator)))
                        return "discriminator: buffer expected";
                if (message.whirlpoolsConfig != null && message.hasOwnProperty("whirlpoolsConfig"))
                    if (!$util.isString(message.whirlpoolsConfig))
                        return "whirlpoolsConfig: string expected";
                if (message.tickSpacing != null && message.hasOwnProperty("tickSpacing"))
                    if (!$util.isInteger(message.tickSpacing))
                        return "tickSpacing: integer expected";
                if (message.defaultFeeRate != null && message.hasOwnProperty("defaultFeeRate"))
                    if (!$util.isInteger(message.defaultFeeRate))
                        return "defaultFeeRate: integer expected";
                return null;
            };

            FeeTierProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.FeeTierProto)
                    return object;
                var message = new $root.vixen.parser.FeeTierProto();
                if (object.discriminator != null)
                    if (typeof object.discriminator === "string")
                        $util.base64.decode(object.discriminator, message.discriminator = $util.newBuffer($util.base64.length(object.discriminator)), 0);
                    else if (object.discriminator.length >= 0)
                        message.discriminator = object.discriminator;
                if (object.whirlpoolsConfig != null)
                    message.whirlpoolsConfig = String(object.whirlpoolsConfig);
                if (object.tickSpacing != null)
                    message.tickSpacing = object.tickSpacing >>> 0;
                if (object.defaultFeeRate != null)
                    message.defaultFeeRate = object.defaultFeeRate >>> 0;
                return message;
            };

            FeeTierProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if (options.bytes === String)
                        object.discriminator = "";
                    else {
                        object.discriminator = [];
                        if (options.bytes !== Array)
                            object.discriminator = $util.newBuffer(object.discriminator);
                    }
                    object.whirlpoolsConfig = "";
                    object.tickSpacing = 0;
                    object.defaultFeeRate = 0;
                }
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    object.discriminator = options.bytes === String ? $util.base64.encode(message.discriminator, 0, message.discriminator.length) : options.bytes === Array ? Array.prototype.slice.call(message.discriminator) : message.discriminator;
                if (message.whirlpoolsConfig != null && message.hasOwnProperty("whirlpoolsConfig"))
                    object.whirlpoolsConfig = message.whirlpoolsConfig;
                if (message.tickSpacing != null && message.hasOwnProperty("tickSpacing"))
                    object.tickSpacing = message.tickSpacing;
                if (message.defaultFeeRate != null && message.hasOwnProperty("defaultFeeRate"))
                    object.defaultFeeRate = message.defaultFeeRate;
                return object;
            };

            FeeTierProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            FeeTierProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.FeeTierProto";
            };

            return FeeTierProto;
        })();

        parser.PositionProto = (function() {

            function PositionProto(properties) {
                this.rewardInfos = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            PositionProto.prototype.discriminator = $util.newBuffer([]);
            PositionProto.prototype.whirlpool = "";
            PositionProto.prototype.positionMint = "";
            PositionProto.prototype.liquidity = "";
            PositionProto.prototype.tickLowerIndex = 0;
            PositionProto.prototype.tickUpperIndex = 0;
            PositionProto.prototype.feeGrowthCheckpointA = "";
            PositionProto.prototype.feeOwedA = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PositionProto.prototype.feeGrowthCheckpointB = "";
            PositionProto.prototype.feeOwedB = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PositionProto.prototype.rewardInfos = $util.emptyArray;

            PositionProto.create = function create(properties) {
                return new PositionProto(properties);
            };

            PositionProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.discriminator != null && Object.hasOwnProperty.call(message, "discriminator"))
                    writer.uint32(10).bytes(message.discriminator);
                if (message.whirlpool != null && Object.hasOwnProperty.call(message, "whirlpool"))
                    writer.uint32(18).string(message.whirlpool);
                if (message.positionMint != null && Object.hasOwnProperty.call(message, "positionMint"))
                    writer.uint32(26).string(message.positionMint);
                if (message.liquidity != null && Object.hasOwnProperty.call(message, "liquidity"))
                    writer.uint32(34).string(message.liquidity);
                if (message.tickLowerIndex != null && Object.hasOwnProperty.call(message, "tickLowerIndex"))
                    writer.uint32(40).int32(message.tickLowerIndex);
                if (message.tickUpperIndex != null && Object.hasOwnProperty.call(message, "tickUpperIndex"))
                    writer.uint32(48).int32(message.tickUpperIndex);
                if (message.feeGrowthCheckpointA != null && Object.hasOwnProperty.call(message, "feeGrowthCheckpointA"))
                    writer.uint32(58).string(message.feeGrowthCheckpointA);
                if (message.feeOwedA != null && Object.hasOwnProperty.call(message, "feeOwedA"))
                    writer.uint32(64).uint64(message.feeOwedA);
                if (message.feeGrowthCheckpointB != null && Object.hasOwnProperty.call(message, "feeGrowthCheckpointB"))
                    writer.uint32(74).string(message.feeGrowthCheckpointB);
                if (message.feeOwedB != null && Object.hasOwnProperty.call(message, "feeOwedB"))
                    writer.uint32(80).uint64(message.feeOwedB);
                if (message.rewardInfos != null && message.rewardInfos.length)
                    for (var i = 0; i < message.rewardInfos.length; ++i)
                        $root.vixen.parser.OrcaPositionRewardInfoProto.encode(message.rewardInfos[i], writer.uint32(90).fork()).ldelim();
                return writer;
            };

            PositionProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            PositionProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.PositionProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.discriminator = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.whirlpool = reader.string();
                            break;
                        }
                    case 3: {
                            message.positionMint = reader.string();
                            break;
                        }
                    case 4: {
                            message.liquidity = reader.string();
                            break;
                        }
                    case 5: {
                            message.tickLowerIndex = reader.int32();
                            break;
                        }
                    case 6: {
                            message.tickUpperIndex = reader.int32();
                            break;
                        }
                    case 7: {
                            message.feeGrowthCheckpointA = reader.string();
                            break;
                        }
                    case 8: {
                            message.feeOwedA = reader.uint64();
                            break;
                        }
                    case 9: {
                            message.feeGrowthCheckpointB = reader.string();
                            break;
                        }
                    case 10: {
                            message.feeOwedB = reader.uint64();
                            break;
                        }
                    case 11: {
                            if (!(message.rewardInfos && message.rewardInfos.length))
                                message.rewardInfos = [];
                            message.rewardInfos.push($root.vixen.parser.OrcaPositionRewardInfoProto.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            PositionProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            PositionProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    if (!(message.discriminator && typeof message.discriminator.length === "number" || $util.isString(message.discriminator)))
                        return "discriminator: buffer expected";
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool"))
                    if (!$util.isString(message.whirlpool))
                        return "whirlpool: string expected";
                if (message.positionMint != null && message.hasOwnProperty("positionMint"))
                    if (!$util.isString(message.positionMint))
                        return "positionMint: string expected";
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    if (!$util.isString(message.liquidity))
                        return "liquidity: string expected";
                if (message.tickLowerIndex != null && message.hasOwnProperty("tickLowerIndex"))
                    if (!$util.isInteger(message.tickLowerIndex))
                        return "tickLowerIndex: integer expected";
                if (message.tickUpperIndex != null && message.hasOwnProperty("tickUpperIndex"))
                    if (!$util.isInteger(message.tickUpperIndex))
                        return "tickUpperIndex: integer expected";
                if (message.feeGrowthCheckpointA != null && message.hasOwnProperty("feeGrowthCheckpointA"))
                    if (!$util.isString(message.feeGrowthCheckpointA))
                        return "feeGrowthCheckpointA: string expected";
                if (message.feeOwedA != null && message.hasOwnProperty("feeOwedA"))
                    if (!$util.isInteger(message.feeOwedA) && !(message.feeOwedA && $util.isInteger(message.feeOwedA.low) && $util.isInteger(message.feeOwedA.high)))
                        return "feeOwedA: integer|Long expected";
                if (message.feeGrowthCheckpointB != null && message.hasOwnProperty("feeGrowthCheckpointB"))
                    if (!$util.isString(message.feeGrowthCheckpointB))
                        return "feeGrowthCheckpointB: string expected";
                if (message.feeOwedB != null && message.hasOwnProperty("feeOwedB"))
                    if (!$util.isInteger(message.feeOwedB) && !(message.feeOwedB && $util.isInteger(message.feeOwedB.low) && $util.isInteger(message.feeOwedB.high)))
                        return "feeOwedB: integer|Long expected";
                if (message.rewardInfos != null && message.hasOwnProperty("rewardInfos")) {
                    if (!Array.isArray(message.rewardInfos))
                        return "rewardInfos: array expected";
                    for (var i = 0; i < message.rewardInfos.length; ++i) {
                        var error = $root.vixen.parser.OrcaPositionRewardInfoProto.verify(message.rewardInfos[i]);
                        if (error)
                            return "rewardInfos." + error;
                    }
                }
                return null;
            };

            PositionProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.PositionProto)
                    return object;
                var message = new $root.vixen.parser.PositionProto();
                if (object.discriminator != null)
                    if (typeof object.discriminator === "string")
                        $util.base64.decode(object.discriminator, message.discriminator = $util.newBuffer($util.base64.length(object.discriminator)), 0);
                    else if (object.discriminator.length >= 0)
                        message.discriminator = object.discriminator;
                if (object.whirlpool != null)
                    message.whirlpool = String(object.whirlpool);
                if (object.positionMint != null)
                    message.positionMint = String(object.positionMint);
                if (object.liquidity != null)
                    message.liquidity = String(object.liquidity);
                if (object.tickLowerIndex != null)
                    message.tickLowerIndex = object.tickLowerIndex | 0;
                if (object.tickUpperIndex != null)
                    message.tickUpperIndex = object.tickUpperIndex | 0;
                if (object.feeGrowthCheckpointA != null)
                    message.feeGrowthCheckpointA = String(object.feeGrowthCheckpointA);
                if (object.feeOwedA != null)
                    if ($util.Long)
                        (message.feeOwedA = $util.Long.fromValue(object.feeOwedA)).unsigned = true;
                    else if (typeof object.feeOwedA === "string")
                        message.feeOwedA = parseInt(object.feeOwedA, 10);
                    else if (typeof object.feeOwedA === "number")
                        message.feeOwedA = object.feeOwedA;
                    else if (typeof object.feeOwedA === "object")
                        message.feeOwedA = new $util.LongBits(object.feeOwedA.low >>> 0, object.feeOwedA.high >>> 0).toNumber(true);
                if (object.feeGrowthCheckpointB != null)
                    message.feeGrowthCheckpointB = String(object.feeGrowthCheckpointB);
                if (object.feeOwedB != null)
                    if ($util.Long)
                        (message.feeOwedB = $util.Long.fromValue(object.feeOwedB)).unsigned = true;
                    else if (typeof object.feeOwedB === "string")
                        message.feeOwedB = parseInt(object.feeOwedB, 10);
                    else if (typeof object.feeOwedB === "number")
                        message.feeOwedB = object.feeOwedB;
                    else if (typeof object.feeOwedB === "object")
                        message.feeOwedB = new $util.LongBits(object.feeOwedB.low >>> 0, object.feeOwedB.high >>> 0).toNumber(true);
                if (object.rewardInfos) {
                    if (!Array.isArray(object.rewardInfos))
                        throw TypeError(".vixen.parser.PositionProto.rewardInfos: array expected");
                    message.rewardInfos = [];
                    for (var i = 0; i < object.rewardInfos.length; ++i) {
                        if (typeof object.rewardInfos[i] !== "object")
                            throw TypeError(".vixen.parser.PositionProto.rewardInfos: object expected");
                        message.rewardInfos[i] = $root.vixen.parser.OrcaPositionRewardInfoProto.fromObject(object.rewardInfos[i]);
                    }
                }
                return message;
            };

            PositionProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.rewardInfos = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.discriminator = "";
                    else {
                        object.discriminator = [];
                        if (options.bytes !== Array)
                            object.discriminator = $util.newBuffer(object.discriminator);
                    }
                    object.whirlpool = "";
                    object.positionMint = "";
                    object.liquidity = "";
                    object.tickLowerIndex = 0;
                    object.tickUpperIndex = 0;
                    object.feeGrowthCheckpointA = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.feeOwedA = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.feeOwedA = options.longs === String ? "0" : 0;
                    object.feeGrowthCheckpointB = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.feeOwedB = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.feeOwedB = options.longs === String ? "0" : 0;
                }
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    object.discriminator = options.bytes === String ? $util.base64.encode(message.discriminator, 0, message.discriminator.length) : options.bytes === Array ? Array.prototype.slice.call(message.discriminator) : message.discriminator;
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool"))
                    object.whirlpool = message.whirlpool;
                if (message.positionMint != null && message.hasOwnProperty("positionMint"))
                    object.positionMint = message.positionMint;
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    object.liquidity = message.liquidity;
                if (message.tickLowerIndex != null && message.hasOwnProperty("tickLowerIndex"))
                    object.tickLowerIndex = message.tickLowerIndex;
                if (message.tickUpperIndex != null && message.hasOwnProperty("tickUpperIndex"))
                    object.tickUpperIndex = message.tickUpperIndex;
                if (message.feeGrowthCheckpointA != null && message.hasOwnProperty("feeGrowthCheckpointA"))
                    object.feeGrowthCheckpointA = message.feeGrowthCheckpointA;
                if (message.feeOwedA != null && message.hasOwnProperty("feeOwedA"))
                    if (typeof message.feeOwedA === "number")
                        object.feeOwedA = options.longs === String ? String(message.feeOwedA) : message.feeOwedA;
                    else
                        object.feeOwedA = options.longs === String ? $util.Long.prototype.toString.call(message.feeOwedA) : options.longs === Number ? new $util.LongBits(message.feeOwedA.low >>> 0, message.feeOwedA.high >>> 0).toNumber(true) : message.feeOwedA;
                if (message.feeGrowthCheckpointB != null && message.hasOwnProperty("feeGrowthCheckpointB"))
                    object.feeGrowthCheckpointB = message.feeGrowthCheckpointB;
                if (message.feeOwedB != null && message.hasOwnProperty("feeOwedB"))
                    if (typeof message.feeOwedB === "number")
                        object.feeOwedB = options.longs === String ? String(message.feeOwedB) : message.feeOwedB;
                    else
                        object.feeOwedB = options.longs === String ? $util.Long.prototype.toString.call(message.feeOwedB) : options.longs === Number ? new $util.LongBits(message.feeOwedB.low >>> 0, message.feeOwedB.high >>> 0).toNumber(true) : message.feeOwedB;
                if (message.rewardInfos && message.rewardInfos.length) {
                    object.rewardInfos = [];
                    for (var j = 0; j < message.rewardInfos.length; ++j)
                        object.rewardInfos[j] = $root.vixen.parser.OrcaPositionRewardInfoProto.toObject(message.rewardInfos[j], options);
                }
                return object;
            };

            PositionProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            PositionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.PositionProto";
            };

            return PositionProto;
        })();

        parser.OrcaPositionRewardInfoProto = (function() {

            function OrcaPositionRewardInfoProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaPositionRewardInfoProto.prototype.growthInsideCheckpoint = "";
            OrcaPositionRewardInfoProto.prototype.amountOwed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            OrcaPositionRewardInfoProto.create = function create(properties) {
                return new OrcaPositionRewardInfoProto(properties);
            };

            OrcaPositionRewardInfoProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.growthInsideCheckpoint != null && Object.hasOwnProperty.call(message, "growthInsideCheckpoint"))
                    writer.uint32(10).string(message.growthInsideCheckpoint);
                if (message.amountOwed != null && Object.hasOwnProperty.call(message, "amountOwed"))
                    writer.uint32(16).uint64(message.amountOwed);
                return writer;
            };

            OrcaPositionRewardInfoProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaPositionRewardInfoProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaPositionRewardInfoProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.growthInsideCheckpoint = reader.string();
                            break;
                        }
                    case 2: {
                            message.amountOwed = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaPositionRewardInfoProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaPositionRewardInfoProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.growthInsideCheckpoint != null && message.hasOwnProperty("growthInsideCheckpoint"))
                    if (!$util.isString(message.growthInsideCheckpoint))
                        return "growthInsideCheckpoint: string expected";
                if (message.amountOwed != null && message.hasOwnProperty("amountOwed"))
                    if (!$util.isInteger(message.amountOwed) && !(message.amountOwed && $util.isInteger(message.amountOwed.low) && $util.isInteger(message.amountOwed.high)))
                        return "amountOwed: integer|Long expected";
                return null;
            };

            OrcaPositionRewardInfoProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaPositionRewardInfoProto)
                    return object;
                var message = new $root.vixen.parser.OrcaPositionRewardInfoProto();
                if (object.growthInsideCheckpoint != null)
                    message.growthInsideCheckpoint = String(object.growthInsideCheckpoint);
                if (object.amountOwed != null)
                    if ($util.Long)
                        (message.amountOwed = $util.Long.fromValue(object.amountOwed)).unsigned = true;
                    else if (typeof object.amountOwed === "string")
                        message.amountOwed = parseInt(object.amountOwed, 10);
                    else if (typeof object.amountOwed === "number")
                        message.amountOwed = object.amountOwed;
                    else if (typeof object.amountOwed === "object")
                        message.amountOwed = new $util.LongBits(object.amountOwed.low >>> 0, object.amountOwed.high >>> 0).toNumber(true);
                return message;
            };

            OrcaPositionRewardInfoProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.growthInsideCheckpoint = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amountOwed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amountOwed = options.longs === String ? "0" : 0;
                }
                if (message.growthInsideCheckpoint != null && message.hasOwnProperty("growthInsideCheckpoint"))
                    object.growthInsideCheckpoint = message.growthInsideCheckpoint;
                if (message.amountOwed != null && message.hasOwnProperty("amountOwed"))
                    if (typeof message.amountOwed === "number")
                        object.amountOwed = options.longs === String ? String(message.amountOwed) : message.amountOwed;
                    else
                        object.amountOwed = options.longs === String ? $util.Long.prototype.toString.call(message.amountOwed) : options.longs === Number ? new $util.LongBits(message.amountOwed.low >>> 0, message.amountOwed.high >>> 0).toNumber(true) : message.amountOwed;
                return object;
            };

            OrcaPositionRewardInfoProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaPositionRewardInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaPositionRewardInfoProto";
            };

            return OrcaPositionRewardInfoProto;
        })();

        parser.OrcaTickProto = (function() {

            function OrcaTickProto(properties) {
                this.rewardGrowthsOutside = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaTickProto.prototype.initialized = false;
            OrcaTickProto.prototype.liquidityNet = "";
            OrcaTickProto.prototype.liquidityGross = "";
            OrcaTickProto.prototype.feeGrowthOutsideA = "";
            OrcaTickProto.prototype.feeGrowthOutsideB = "";
            OrcaTickProto.prototype.rewardGrowthsOutside = $util.emptyArray;

            OrcaTickProto.create = function create(properties) {
                return new OrcaTickProto(properties);
            };

            OrcaTickProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.initialized != null && Object.hasOwnProperty.call(message, "initialized"))
                    writer.uint32(8).bool(message.initialized);
                if (message.liquidityNet != null && Object.hasOwnProperty.call(message, "liquidityNet"))
                    writer.uint32(18).string(message.liquidityNet);
                if (message.liquidityGross != null && Object.hasOwnProperty.call(message, "liquidityGross"))
                    writer.uint32(26).string(message.liquidityGross);
                if (message.feeGrowthOutsideA != null && Object.hasOwnProperty.call(message, "feeGrowthOutsideA"))
                    writer.uint32(34).string(message.feeGrowthOutsideA);
                if (message.feeGrowthOutsideB != null && Object.hasOwnProperty.call(message, "feeGrowthOutsideB"))
                    writer.uint32(42).string(message.feeGrowthOutsideB);
                if (message.rewardGrowthsOutside != null && message.rewardGrowthsOutside.length)
                    for (var i = 0; i < message.rewardGrowthsOutside.length; ++i)
                        writer.uint32(50).string(message.rewardGrowthsOutside[i]);
                return writer;
            };

            OrcaTickProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaTickProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaTickProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.initialized = reader.bool();
                            break;
                        }
                    case 2: {
                            message.liquidityNet = reader.string();
                            break;
                        }
                    case 3: {
                            message.liquidityGross = reader.string();
                            break;
                        }
                    case 4: {
                            message.feeGrowthOutsideA = reader.string();
                            break;
                        }
                    case 5: {
                            message.feeGrowthOutsideB = reader.string();
                            break;
                        }
                    case 6: {
                            if (!(message.rewardGrowthsOutside && message.rewardGrowthsOutside.length))
                                message.rewardGrowthsOutside = [];
                            message.rewardGrowthsOutside.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaTickProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaTickProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.initialized != null && message.hasOwnProperty("initialized"))
                    if (typeof message.initialized !== "boolean")
                        return "initialized: boolean expected";
                if (message.liquidityNet != null && message.hasOwnProperty("liquidityNet"))
                    if (!$util.isString(message.liquidityNet))
                        return "liquidityNet: string expected";
                if (message.liquidityGross != null && message.hasOwnProperty("liquidityGross"))
                    if (!$util.isString(message.liquidityGross))
                        return "liquidityGross: string expected";
                if (message.feeGrowthOutsideA != null && message.hasOwnProperty("feeGrowthOutsideA"))
                    if (!$util.isString(message.feeGrowthOutsideA))
                        return "feeGrowthOutsideA: string expected";
                if (message.feeGrowthOutsideB != null && message.hasOwnProperty("feeGrowthOutsideB"))
                    if (!$util.isString(message.feeGrowthOutsideB))
                        return "feeGrowthOutsideB: string expected";
                if (message.rewardGrowthsOutside != null && message.hasOwnProperty("rewardGrowthsOutside")) {
                    if (!Array.isArray(message.rewardGrowthsOutside))
                        return "rewardGrowthsOutside: array expected";
                    for (var i = 0; i < message.rewardGrowthsOutside.length; ++i)
                        if (!$util.isString(message.rewardGrowthsOutside[i]))
                            return "rewardGrowthsOutside: string[] expected";
                }
                return null;
            };

            OrcaTickProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaTickProto)
                    return object;
                var message = new $root.vixen.parser.OrcaTickProto();
                if (object.initialized != null)
                    message.initialized = Boolean(object.initialized);
                if (object.liquidityNet != null)
                    message.liquidityNet = String(object.liquidityNet);
                if (object.liquidityGross != null)
                    message.liquidityGross = String(object.liquidityGross);
                if (object.feeGrowthOutsideA != null)
                    message.feeGrowthOutsideA = String(object.feeGrowthOutsideA);
                if (object.feeGrowthOutsideB != null)
                    message.feeGrowthOutsideB = String(object.feeGrowthOutsideB);
                if (object.rewardGrowthsOutside) {
                    if (!Array.isArray(object.rewardGrowthsOutside))
                        throw TypeError(".vixen.parser.OrcaTickProto.rewardGrowthsOutside: array expected");
                    message.rewardGrowthsOutside = [];
                    for (var i = 0; i < object.rewardGrowthsOutside.length; ++i)
                        message.rewardGrowthsOutside[i] = String(object.rewardGrowthsOutside[i]);
                }
                return message;
            };

            OrcaTickProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.rewardGrowthsOutside = [];
                if (options.defaults) {
                    object.initialized = false;
                    object.liquidityNet = "";
                    object.liquidityGross = "";
                    object.feeGrowthOutsideA = "";
                    object.feeGrowthOutsideB = "";
                }
                if (message.initialized != null && message.hasOwnProperty("initialized"))
                    object.initialized = message.initialized;
                if (message.liquidityNet != null && message.hasOwnProperty("liquidityNet"))
                    object.liquidityNet = message.liquidityNet;
                if (message.liquidityGross != null && message.hasOwnProperty("liquidityGross"))
                    object.liquidityGross = message.liquidityGross;
                if (message.feeGrowthOutsideA != null && message.hasOwnProperty("feeGrowthOutsideA"))
                    object.feeGrowthOutsideA = message.feeGrowthOutsideA;
                if (message.feeGrowthOutsideB != null && message.hasOwnProperty("feeGrowthOutsideB"))
                    object.feeGrowthOutsideB = message.feeGrowthOutsideB;
                if (message.rewardGrowthsOutside && message.rewardGrowthsOutside.length) {
                    object.rewardGrowthsOutside = [];
                    for (var j = 0; j < message.rewardGrowthsOutside.length; ++j)
                        object.rewardGrowthsOutside[j] = message.rewardGrowthsOutside[j];
                }
                return object;
            };

            OrcaTickProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaTickProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaTickProto";
            };

            return OrcaTickProto;
        })();

        parser.OrcaTickArrayProto = (function() {

            function OrcaTickArrayProto(properties) {
                this.ticks = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaTickArrayProto.prototype.discriminator = $util.newBuffer([]);
            OrcaTickArrayProto.prototype.startTickIndex = 0;
            OrcaTickArrayProto.prototype.ticks = $util.emptyArray;
            OrcaTickArrayProto.prototype.whirlpool = "";

            OrcaTickArrayProto.create = function create(properties) {
                return new OrcaTickArrayProto(properties);
            };

            OrcaTickArrayProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.discriminator != null && Object.hasOwnProperty.call(message, "discriminator"))
                    writer.uint32(10).bytes(message.discriminator);
                if (message.startTickIndex != null && Object.hasOwnProperty.call(message, "startTickIndex"))
                    writer.uint32(16).int32(message.startTickIndex);
                if (message.ticks != null && message.ticks.length)
                    for (var i = 0; i < message.ticks.length; ++i)
                        $root.vixen.parser.OrcaTickProto.encode(message.ticks[i], writer.uint32(26).fork()).ldelim();
                if (message.whirlpool != null && Object.hasOwnProperty.call(message, "whirlpool"))
                    writer.uint32(34).string(message.whirlpool);
                return writer;
            };

            OrcaTickArrayProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaTickArrayProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaTickArrayProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.discriminator = reader.bytes();
                            break;
                        }
                    case 2: {
                            message.startTickIndex = reader.int32();
                            break;
                        }
                    case 3: {
                            if (!(message.ticks && message.ticks.length))
                                message.ticks = [];
                            message.ticks.push($root.vixen.parser.OrcaTickProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            message.whirlpool = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaTickArrayProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaTickArrayProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    if (!(message.discriminator && typeof message.discriminator.length === "number" || $util.isString(message.discriminator)))
                        return "discriminator: buffer expected";
                if (message.startTickIndex != null && message.hasOwnProperty("startTickIndex"))
                    if (!$util.isInteger(message.startTickIndex))
                        return "startTickIndex: integer expected";
                if (message.ticks != null && message.hasOwnProperty("ticks")) {
                    if (!Array.isArray(message.ticks))
                        return "ticks: array expected";
                    for (var i = 0; i < message.ticks.length; ++i) {
                        var error = $root.vixen.parser.OrcaTickProto.verify(message.ticks[i]);
                        if (error)
                            return "ticks." + error;
                    }
                }
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool"))
                    if (!$util.isString(message.whirlpool))
                        return "whirlpool: string expected";
                return null;
            };

            OrcaTickArrayProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaTickArrayProto)
                    return object;
                var message = new $root.vixen.parser.OrcaTickArrayProto();
                if (object.discriminator != null)
                    if (typeof object.discriminator === "string")
                        $util.base64.decode(object.discriminator, message.discriminator = $util.newBuffer($util.base64.length(object.discriminator)), 0);
                    else if (object.discriminator.length >= 0)
                        message.discriminator = object.discriminator;
                if (object.startTickIndex != null)
                    message.startTickIndex = object.startTickIndex | 0;
                if (object.ticks) {
                    if (!Array.isArray(object.ticks))
                        throw TypeError(".vixen.parser.OrcaTickArrayProto.ticks: array expected");
                    message.ticks = [];
                    for (var i = 0; i < object.ticks.length; ++i) {
                        if (typeof object.ticks[i] !== "object")
                            throw TypeError(".vixen.parser.OrcaTickArrayProto.ticks: object expected");
                        message.ticks[i] = $root.vixen.parser.OrcaTickProto.fromObject(object.ticks[i]);
                    }
                }
                if (object.whirlpool != null)
                    message.whirlpool = String(object.whirlpool);
                return message;
            };

            OrcaTickArrayProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.ticks = [];
                if (options.defaults) {
                    if (options.bytes === String)
                        object.discriminator = "";
                    else {
                        object.discriminator = [];
                        if (options.bytes !== Array)
                            object.discriminator = $util.newBuffer(object.discriminator);
                    }
                    object.startTickIndex = 0;
                    object.whirlpool = "";
                }
                if (message.discriminator != null && message.hasOwnProperty("discriminator"))
                    object.discriminator = options.bytes === String ? $util.base64.encode(message.discriminator, 0, message.discriminator.length) : options.bytes === Array ? Array.prototype.slice.call(message.discriminator) : message.discriminator;
                if (message.startTickIndex != null && message.hasOwnProperty("startTickIndex"))
                    object.startTickIndex = message.startTickIndex;
                if (message.ticks && message.ticks.length) {
                    object.ticks = [];
                    for (var j = 0; j < message.ticks.length; ++j)
                        object.ticks[j] = $root.vixen.parser.OrcaTickProto.toObject(message.ticks[j], options);
                }
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool"))
                    object.whirlpool = message.whirlpool;
                return object;
            };

            OrcaTickArrayProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaTickArrayProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaTickArrayProto";
            };

            return OrcaTickArrayProto;
        })();

        parser.OrcaSwapAccountsProto = (function() {

            function OrcaSwapAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaSwapAccountsProto.prototype.tokenProgram = "";
            OrcaSwapAccountsProto.prototype.tokenAuthority = "";
            OrcaSwapAccountsProto.prototype.whirlpool = "";
            OrcaSwapAccountsProto.prototype.tokenOwnerAccountA = "";
            OrcaSwapAccountsProto.prototype.tokenVaultA = "";
            OrcaSwapAccountsProto.prototype.tokenOwnerAccountB = "";
            OrcaSwapAccountsProto.prototype.tokenVaultB = "";
            OrcaSwapAccountsProto.prototype.tickArray0 = "";
            OrcaSwapAccountsProto.prototype.tickArray1 = "";
            OrcaSwapAccountsProto.prototype.tickArray2 = "";
            OrcaSwapAccountsProto.prototype.oracle = "";

            OrcaSwapAccountsProto.create = function create(properties) {
                return new OrcaSwapAccountsProto(properties);
            };

            OrcaSwapAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tokenProgram != null && Object.hasOwnProperty.call(message, "tokenProgram"))
                    writer.uint32(10).string(message.tokenProgram);
                if (message.tokenAuthority != null && Object.hasOwnProperty.call(message, "tokenAuthority"))
                    writer.uint32(18).string(message.tokenAuthority);
                if (message.whirlpool != null && Object.hasOwnProperty.call(message, "whirlpool"))
                    writer.uint32(26).string(message.whirlpool);
                if (message.tokenOwnerAccountA != null && Object.hasOwnProperty.call(message, "tokenOwnerAccountA"))
                    writer.uint32(34).string(message.tokenOwnerAccountA);
                if (message.tokenVaultA != null && Object.hasOwnProperty.call(message, "tokenVaultA"))
                    writer.uint32(42).string(message.tokenVaultA);
                if (message.tokenOwnerAccountB != null && Object.hasOwnProperty.call(message, "tokenOwnerAccountB"))
                    writer.uint32(50).string(message.tokenOwnerAccountB);
                if (message.tokenVaultB != null && Object.hasOwnProperty.call(message, "tokenVaultB"))
                    writer.uint32(58).string(message.tokenVaultB);
                if (message.tickArray0 != null && Object.hasOwnProperty.call(message, "tickArray0"))
                    writer.uint32(66).string(message.tickArray0);
                if (message.tickArray1 != null && Object.hasOwnProperty.call(message, "tickArray1"))
                    writer.uint32(74).string(message.tickArray1);
                if (message.tickArray2 != null && Object.hasOwnProperty.call(message, "tickArray2"))
                    writer.uint32(82).string(message.tickArray2);
                if (message.oracle != null && Object.hasOwnProperty.call(message, "oracle"))
                    writer.uint32(90).string(message.oracle);
                return writer;
            };

            OrcaSwapAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaSwapAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaSwapAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.tokenProgram = reader.string();
                            break;
                        }
                    case 2: {
                            message.tokenAuthority = reader.string();
                            break;
                        }
                    case 3: {
                            message.whirlpool = reader.string();
                            break;
                        }
                    case 4: {
                            message.tokenOwnerAccountA = reader.string();
                            break;
                        }
                    case 5: {
                            message.tokenVaultA = reader.string();
                            break;
                        }
                    case 6: {
                            message.tokenOwnerAccountB = reader.string();
                            break;
                        }
                    case 7: {
                            message.tokenVaultB = reader.string();
                            break;
                        }
                    case 8: {
                            message.tickArray0 = reader.string();
                            break;
                        }
                    case 9: {
                            message.tickArray1 = reader.string();
                            break;
                        }
                    case 10: {
                            message.tickArray2 = reader.string();
                            break;
                        }
                    case 11: {
                            message.oracle = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaSwapAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaSwapAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tokenProgram != null && message.hasOwnProperty("tokenProgram"))
                    if (!$util.isString(message.tokenProgram))
                        return "tokenProgram: string expected";
                if (message.tokenAuthority != null && message.hasOwnProperty("tokenAuthority"))
                    if (!$util.isString(message.tokenAuthority))
                        return "tokenAuthority: string expected";
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool"))
                    if (!$util.isString(message.whirlpool))
                        return "whirlpool: string expected";
                if (message.tokenOwnerAccountA != null && message.hasOwnProperty("tokenOwnerAccountA"))
                    if (!$util.isString(message.tokenOwnerAccountA))
                        return "tokenOwnerAccountA: string expected";
                if (message.tokenVaultA != null && message.hasOwnProperty("tokenVaultA"))
                    if (!$util.isString(message.tokenVaultA))
                        return "tokenVaultA: string expected";
                if (message.tokenOwnerAccountB != null && message.hasOwnProperty("tokenOwnerAccountB"))
                    if (!$util.isString(message.tokenOwnerAccountB))
                        return "tokenOwnerAccountB: string expected";
                if (message.tokenVaultB != null && message.hasOwnProperty("tokenVaultB"))
                    if (!$util.isString(message.tokenVaultB))
                        return "tokenVaultB: string expected";
                if (message.tickArray0 != null && message.hasOwnProperty("tickArray0"))
                    if (!$util.isString(message.tickArray0))
                        return "tickArray0: string expected";
                if (message.tickArray1 != null && message.hasOwnProperty("tickArray1"))
                    if (!$util.isString(message.tickArray1))
                        return "tickArray1: string expected";
                if (message.tickArray2 != null && message.hasOwnProperty("tickArray2"))
                    if (!$util.isString(message.tickArray2))
                        return "tickArray2: string expected";
                if (message.oracle != null && message.hasOwnProperty("oracle"))
                    if (!$util.isString(message.oracle))
                        return "oracle: string expected";
                return null;
            };

            OrcaSwapAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaSwapAccountsProto)
                    return object;
                var message = new $root.vixen.parser.OrcaSwapAccountsProto();
                if (object.tokenProgram != null)
                    message.tokenProgram = String(object.tokenProgram);
                if (object.tokenAuthority != null)
                    message.tokenAuthority = String(object.tokenAuthority);
                if (object.whirlpool != null)
                    message.whirlpool = String(object.whirlpool);
                if (object.tokenOwnerAccountA != null)
                    message.tokenOwnerAccountA = String(object.tokenOwnerAccountA);
                if (object.tokenVaultA != null)
                    message.tokenVaultA = String(object.tokenVaultA);
                if (object.tokenOwnerAccountB != null)
                    message.tokenOwnerAccountB = String(object.tokenOwnerAccountB);
                if (object.tokenVaultB != null)
                    message.tokenVaultB = String(object.tokenVaultB);
                if (object.tickArray0 != null)
                    message.tickArray0 = String(object.tickArray0);
                if (object.tickArray1 != null)
                    message.tickArray1 = String(object.tickArray1);
                if (object.tickArray2 != null)
                    message.tickArray2 = String(object.tickArray2);
                if (object.oracle != null)
                    message.oracle = String(object.oracle);
                return message;
            };

            OrcaSwapAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.tokenProgram = "";
                    object.tokenAuthority = "";
                    object.whirlpool = "";
                    object.tokenOwnerAccountA = "";
                    object.tokenVaultA = "";
                    object.tokenOwnerAccountB = "";
                    object.tokenVaultB = "";
                    object.tickArray0 = "";
                    object.tickArray1 = "";
                    object.tickArray2 = "";
                    object.oracle = "";
                }
                if (message.tokenProgram != null && message.hasOwnProperty("tokenProgram"))
                    object.tokenProgram = message.tokenProgram;
                if (message.tokenAuthority != null && message.hasOwnProperty("tokenAuthority"))
                    object.tokenAuthority = message.tokenAuthority;
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool"))
                    object.whirlpool = message.whirlpool;
                if (message.tokenOwnerAccountA != null && message.hasOwnProperty("tokenOwnerAccountA"))
                    object.tokenOwnerAccountA = message.tokenOwnerAccountA;
                if (message.tokenVaultA != null && message.hasOwnProperty("tokenVaultA"))
                    object.tokenVaultA = message.tokenVaultA;
                if (message.tokenOwnerAccountB != null && message.hasOwnProperty("tokenOwnerAccountB"))
                    object.tokenOwnerAccountB = message.tokenOwnerAccountB;
                if (message.tokenVaultB != null && message.hasOwnProperty("tokenVaultB"))
                    object.tokenVaultB = message.tokenVaultB;
                if (message.tickArray0 != null && message.hasOwnProperty("tickArray0"))
                    object.tickArray0 = message.tickArray0;
                if (message.tickArray1 != null && message.hasOwnProperty("tickArray1"))
                    object.tickArray1 = message.tickArray1;
                if (message.tickArray2 != null && message.hasOwnProperty("tickArray2"))
                    object.tickArray2 = message.tickArray2;
                if (message.oracle != null && message.hasOwnProperty("oracle"))
                    object.oracle = message.oracle;
                return object;
            };

            OrcaSwapAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaSwapAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaSwapAccountsProto";
            };

            return OrcaSwapAccountsProto;
        })();

        parser.OrcaSwapIxDataProto = (function() {

            function OrcaSwapIxDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaSwapIxDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            OrcaSwapIxDataProto.prototype.otherAmountThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            OrcaSwapIxDataProto.prototype.sqrtPriceLimit = "";
            OrcaSwapIxDataProto.prototype.amountSpecifiedIsInput = false;
            OrcaSwapIxDataProto.prototype.aToB = false;

            OrcaSwapIxDataProto.create = function create(properties) {
                return new OrcaSwapIxDataProto(properties);
            };

            OrcaSwapIxDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                if (message.otherAmountThreshold != null && Object.hasOwnProperty.call(message, "otherAmountThreshold"))
                    writer.uint32(16).uint64(message.otherAmountThreshold);
                if (message.sqrtPriceLimit != null && Object.hasOwnProperty.call(message, "sqrtPriceLimit"))
                    writer.uint32(26).string(message.sqrtPriceLimit);
                if (message.amountSpecifiedIsInput != null && Object.hasOwnProperty.call(message, "amountSpecifiedIsInput"))
                    writer.uint32(32).bool(message.amountSpecifiedIsInput);
                if (message.aToB != null && Object.hasOwnProperty.call(message, "aToB"))
                    writer.uint32(40).bool(message.aToB);
                return writer;
            };

            OrcaSwapIxDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaSwapIxDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaSwapIxDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.otherAmountThreshold = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.sqrtPriceLimit = reader.string();
                            break;
                        }
                    case 4: {
                            message.amountSpecifiedIsInput = reader.bool();
                            break;
                        }
                    case 5: {
                            message.aToB = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaSwapIxDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaSwapIxDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                if (message.otherAmountThreshold != null && message.hasOwnProperty("otherAmountThreshold"))
                    if (!$util.isInteger(message.otherAmountThreshold) && !(message.otherAmountThreshold && $util.isInteger(message.otherAmountThreshold.low) && $util.isInteger(message.otherAmountThreshold.high)))
                        return "otherAmountThreshold: integer|Long expected";
                if (message.sqrtPriceLimit != null && message.hasOwnProperty("sqrtPriceLimit"))
                    if (!$util.isString(message.sqrtPriceLimit))
                        return "sqrtPriceLimit: string expected";
                if (message.amountSpecifiedIsInput != null && message.hasOwnProperty("amountSpecifiedIsInput"))
                    if (typeof message.amountSpecifiedIsInput !== "boolean")
                        return "amountSpecifiedIsInput: boolean expected";
                if (message.aToB != null && message.hasOwnProperty("aToB"))
                    if (typeof message.aToB !== "boolean")
                        return "aToB: boolean expected";
                return null;
            };

            OrcaSwapIxDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaSwapIxDataProto)
                    return object;
                var message = new $root.vixen.parser.OrcaSwapIxDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                if (object.otherAmountThreshold != null)
                    if ($util.Long)
                        (message.otherAmountThreshold = $util.Long.fromValue(object.otherAmountThreshold)).unsigned = true;
                    else if (typeof object.otherAmountThreshold === "string")
                        message.otherAmountThreshold = parseInt(object.otherAmountThreshold, 10);
                    else if (typeof object.otherAmountThreshold === "number")
                        message.otherAmountThreshold = object.otherAmountThreshold;
                    else if (typeof object.otherAmountThreshold === "object")
                        message.otherAmountThreshold = new $util.LongBits(object.otherAmountThreshold.low >>> 0, object.otherAmountThreshold.high >>> 0).toNumber(true);
                if (object.sqrtPriceLimit != null)
                    message.sqrtPriceLimit = String(object.sqrtPriceLimit);
                if (object.amountSpecifiedIsInput != null)
                    message.amountSpecifiedIsInput = Boolean(object.amountSpecifiedIsInput);
                if (object.aToB != null)
                    message.aToB = Boolean(object.aToB);
                return message;
            };

            OrcaSwapIxDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.otherAmountThreshold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.otherAmountThreshold = options.longs === String ? "0" : 0;
                    object.sqrtPriceLimit = "";
                    object.amountSpecifiedIsInput = false;
                    object.aToB = false;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                if (message.otherAmountThreshold != null && message.hasOwnProperty("otherAmountThreshold"))
                    if (typeof message.otherAmountThreshold === "number")
                        object.otherAmountThreshold = options.longs === String ? String(message.otherAmountThreshold) : message.otherAmountThreshold;
                    else
                        object.otherAmountThreshold = options.longs === String ? $util.Long.prototype.toString.call(message.otherAmountThreshold) : options.longs === Number ? new $util.LongBits(message.otherAmountThreshold.low >>> 0, message.otherAmountThreshold.high >>> 0).toNumber(true) : message.otherAmountThreshold;
                if (message.sqrtPriceLimit != null && message.hasOwnProperty("sqrtPriceLimit"))
                    object.sqrtPriceLimit = message.sqrtPriceLimit;
                if (message.amountSpecifiedIsInput != null && message.hasOwnProperty("amountSpecifiedIsInput"))
                    object.amountSpecifiedIsInput = message.amountSpecifiedIsInput;
                if (message.aToB != null && message.hasOwnProperty("aToB"))
                    object.aToB = message.aToB;
                return object;
            };

            OrcaSwapIxDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaSwapIxDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaSwapIxDataProto";
            };

            return OrcaSwapIxDataProto;
        })();

        parser.OrcaSwapV2AccountsProto = (function() {

            function OrcaSwapV2AccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaSwapV2AccountsProto.prototype.tokenProgramA = "";
            OrcaSwapV2AccountsProto.prototype.tokenProgramB = "";
            OrcaSwapV2AccountsProto.prototype.memoProgram = "";
            OrcaSwapV2AccountsProto.prototype.tokenAuthority = "";
            OrcaSwapV2AccountsProto.prototype.whirlpool = "";
            OrcaSwapV2AccountsProto.prototype.tokenMintA = "";
            OrcaSwapV2AccountsProto.prototype.tokenMintB = "";
            OrcaSwapV2AccountsProto.prototype.tokenOwnerAccountA = "";
            OrcaSwapV2AccountsProto.prototype.tokenVaultA = "";
            OrcaSwapV2AccountsProto.prototype.tokenOwnerAccountB = "";
            OrcaSwapV2AccountsProto.prototype.tokenVaultB = "";
            OrcaSwapV2AccountsProto.prototype.tickArray0 = "";
            OrcaSwapV2AccountsProto.prototype.tickArray1 = "";
            OrcaSwapV2AccountsProto.prototype.tickArray2 = "";
            OrcaSwapV2AccountsProto.prototype.oracle = "";

            OrcaSwapV2AccountsProto.create = function create(properties) {
                return new OrcaSwapV2AccountsProto(properties);
            };

            OrcaSwapV2AccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tokenProgramA != null && Object.hasOwnProperty.call(message, "tokenProgramA"))
                    writer.uint32(10).string(message.tokenProgramA);
                if (message.tokenProgramB != null && Object.hasOwnProperty.call(message, "tokenProgramB"))
                    writer.uint32(18).string(message.tokenProgramB);
                if (message.memoProgram != null && Object.hasOwnProperty.call(message, "memoProgram"))
                    writer.uint32(26).string(message.memoProgram);
                if (message.tokenAuthority != null && Object.hasOwnProperty.call(message, "tokenAuthority"))
                    writer.uint32(34).string(message.tokenAuthority);
                if (message.whirlpool != null && Object.hasOwnProperty.call(message, "whirlpool"))
                    writer.uint32(42).string(message.whirlpool);
                if (message.tokenMintA != null && Object.hasOwnProperty.call(message, "tokenMintA"))
                    writer.uint32(50).string(message.tokenMintA);
                if (message.tokenMintB != null && Object.hasOwnProperty.call(message, "tokenMintB"))
                    writer.uint32(58).string(message.tokenMintB);
                if (message.tokenOwnerAccountA != null && Object.hasOwnProperty.call(message, "tokenOwnerAccountA"))
                    writer.uint32(66).string(message.tokenOwnerAccountA);
                if (message.tokenVaultA != null && Object.hasOwnProperty.call(message, "tokenVaultA"))
                    writer.uint32(74).string(message.tokenVaultA);
                if (message.tokenOwnerAccountB != null && Object.hasOwnProperty.call(message, "tokenOwnerAccountB"))
                    writer.uint32(82).string(message.tokenOwnerAccountB);
                if (message.tokenVaultB != null && Object.hasOwnProperty.call(message, "tokenVaultB"))
                    writer.uint32(90).string(message.tokenVaultB);
                if (message.tickArray0 != null && Object.hasOwnProperty.call(message, "tickArray0"))
                    writer.uint32(98).string(message.tickArray0);
                if (message.tickArray1 != null && Object.hasOwnProperty.call(message, "tickArray1"))
                    writer.uint32(106).string(message.tickArray1);
                if (message.tickArray2 != null && Object.hasOwnProperty.call(message, "tickArray2"))
                    writer.uint32(114).string(message.tickArray2);
                if (message.oracle != null && Object.hasOwnProperty.call(message, "oracle"))
                    writer.uint32(122).string(message.oracle);
                return writer;
            };

            OrcaSwapV2AccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaSwapV2AccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaSwapV2AccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.tokenProgramA = reader.string();
                            break;
                        }
                    case 2: {
                            message.tokenProgramB = reader.string();
                            break;
                        }
                    case 3: {
                            message.memoProgram = reader.string();
                            break;
                        }
                    case 4: {
                            message.tokenAuthority = reader.string();
                            break;
                        }
                    case 5: {
                            message.whirlpool = reader.string();
                            break;
                        }
                    case 6: {
                            message.tokenMintA = reader.string();
                            break;
                        }
                    case 7: {
                            message.tokenMintB = reader.string();
                            break;
                        }
                    case 8: {
                            message.tokenOwnerAccountA = reader.string();
                            break;
                        }
                    case 9: {
                            message.tokenVaultA = reader.string();
                            break;
                        }
                    case 10: {
                            message.tokenOwnerAccountB = reader.string();
                            break;
                        }
                    case 11: {
                            message.tokenVaultB = reader.string();
                            break;
                        }
                    case 12: {
                            message.tickArray0 = reader.string();
                            break;
                        }
                    case 13: {
                            message.tickArray1 = reader.string();
                            break;
                        }
                    case 14: {
                            message.tickArray2 = reader.string();
                            break;
                        }
                    case 15: {
                            message.oracle = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaSwapV2AccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaSwapV2AccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tokenProgramA != null && message.hasOwnProperty("tokenProgramA"))
                    if (!$util.isString(message.tokenProgramA))
                        return "tokenProgramA: string expected";
                if (message.tokenProgramB != null && message.hasOwnProperty("tokenProgramB"))
                    if (!$util.isString(message.tokenProgramB))
                        return "tokenProgramB: string expected";
                if (message.memoProgram != null && message.hasOwnProperty("memoProgram"))
                    if (!$util.isString(message.memoProgram))
                        return "memoProgram: string expected";
                if (message.tokenAuthority != null && message.hasOwnProperty("tokenAuthority"))
                    if (!$util.isString(message.tokenAuthority))
                        return "tokenAuthority: string expected";
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool"))
                    if (!$util.isString(message.whirlpool))
                        return "whirlpool: string expected";
                if (message.tokenMintA != null && message.hasOwnProperty("tokenMintA"))
                    if (!$util.isString(message.tokenMintA))
                        return "tokenMintA: string expected";
                if (message.tokenMintB != null && message.hasOwnProperty("tokenMintB"))
                    if (!$util.isString(message.tokenMintB))
                        return "tokenMintB: string expected";
                if (message.tokenOwnerAccountA != null && message.hasOwnProperty("tokenOwnerAccountA"))
                    if (!$util.isString(message.tokenOwnerAccountA))
                        return "tokenOwnerAccountA: string expected";
                if (message.tokenVaultA != null && message.hasOwnProperty("tokenVaultA"))
                    if (!$util.isString(message.tokenVaultA))
                        return "tokenVaultA: string expected";
                if (message.tokenOwnerAccountB != null && message.hasOwnProperty("tokenOwnerAccountB"))
                    if (!$util.isString(message.tokenOwnerAccountB))
                        return "tokenOwnerAccountB: string expected";
                if (message.tokenVaultB != null && message.hasOwnProperty("tokenVaultB"))
                    if (!$util.isString(message.tokenVaultB))
                        return "tokenVaultB: string expected";
                if (message.tickArray0 != null && message.hasOwnProperty("tickArray0"))
                    if (!$util.isString(message.tickArray0))
                        return "tickArray0: string expected";
                if (message.tickArray1 != null && message.hasOwnProperty("tickArray1"))
                    if (!$util.isString(message.tickArray1))
                        return "tickArray1: string expected";
                if (message.tickArray2 != null && message.hasOwnProperty("tickArray2"))
                    if (!$util.isString(message.tickArray2))
                        return "tickArray2: string expected";
                if (message.oracle != null && message.hasOwnProperty("oracle"))
                    if (!$util.isString(message.oracle))
                        return "oracle: string expected";
                return null;
            };

            OrcaSwapV2AccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaSwapV2AccountsProto)
                    return object;
                var message = new $root.vixen.parser.OrcaSwapV2AccountsProto();
                if (object.tokenProgramA != null)
                    message.tokenProgramA = String(object.tokenProgramA);
                if (object.tokenProgramB != null)
                    message.tokenProgramB = String(object.tokenProgramB);
                if (object.memoProgram != null)
                    message.memoProgram = String(object.memoProgram);
                if (object.tokenAuthority != null)
                    message.tokenAuthority = String(object.tokenAuthority);
                if (object.whirlpool != null)
                    message.whirlpool = String(object.whirlpool);
                if (object.tokenMintA != null)
                    message.tokenMintA = String(object.tokenMintA);
                if (object.tokenMintB != null)
                    message.tokenMintB = String(object.tokenMintB);
                if (object.tokenOwnerAccountA != null)
                    message.tokenOwnerAccountA = String(object.tokenOwnerAccountA);
                if (object.tokenVaultA != null)
                    message.tokenVaultA = String(object.tokenVaultA);
                if (object.tokenOwnerAccountB != null)
                    message.tokenOwnerAccountB = String(object.tokenOwnerAccountB);
                if (object.tokenVaultB != null)
                    message.tokenVaultB = String(object.tokenVaultB);
                if (object.tickArray0 != null)
                    message.tickArray0 = String(object.tickArray0);
                if (object.tickArray1 != null)
                    message.tickArray1 = String(object.tickArray1);
                if (object.tickArray2 != null)
                    message.tickArray2 = String(object.tickArray2);
                if (object.oracle != null)
                    message.oracle = String(object.oracle);
                return message;
            };

            OrcaSwapV2AccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.tokenProgramA = "";
                    object.tokenProgramB = "";
                    object.memoProgram = "";
                    object.tokenAuthority = "";
                    object.whirlpool = "";
                    object.tokenMintA = "";
                    object.tokenMintB = "";
                    object.tokenOwnerAccountA = "";
                    object.tokenVaultA = "";
                    object.tokenOwnerAccountB = "";
                    object.tokenVaultB = "";
                    object.tickArray0 = "";
                    object.tickArray1 = "";
                    object.tickArray2 = "";
                    object.oracle = "";
                }
                if (message.tokenProgramA != null && message.hasOwnProperty("tokenProgramA"))
                    object.tokenProgramA = message.tokenProgramA;
                if (message.tokenProgramB != null && message.hasOwnProperty("tokenProgramB"))
                    object.tokenProgramB = message.tokenProgramB;
                if (message.memoProgram != null && message.hasOwnProperty("memoProgram"))
                    object.memoProgram = message.memoProgram;
                if (message.tokenAuthority != null && message.hasOwnProperty("tokenAuthority"))
                    object.tokenAuthority = message.tokenAuthority;
                if (message.whirlpool != null && message.hasOwnProperty("whirlpool"))
                    object.whirlpool = message.whirlpool;
                if (message.tokenMintA != null && message.hasOwnProperty("tokenMintA"))
                    object.tokenMintA = message.tokenMintA;
                if (message.tokenMintB != null && message.hasOwnProperty("tokenMintB"))
                    object.tokenMintB = message.tokenMintB;
                if (message.tokenOwnerAccountA != null && message.hasOwnProperty("tokenOwnerAccountA"))
                    object.tokenOwnerAccountA = message.tokenOwnerAccountA;
                if (message.tokenVaultA != null && message.hasOwnProperty("tokenVaultA"))
                    object.tokenVaultA = message.tokenVaultA;
                if (message.tokenOwnerAccountB != null && message.hasOwnProperty("tokenOwnerAccountB"))
                    object.tokenOwnerAccountB = message.tokenOwnerAccountB;
                if (message.tokenVaultB != null && message.hasOwnProperty("tokenVaultB"))
                    object.tokenVaultB = message.tokenVaultB;
                if (message.tickArray0 != null && message.hasOwnProperty("tickArray0"))
                    object.tickArray0 = message.tickArray0;
                if (message.tickArray1 != null && message.hasOwnProperty("tickArray1"))
                    object.tickArray1 = message.tickArray1;
                if (message.tickArray2 != null && message.hasOwnProperty("tickArray2"))
                    object.tickArray2 = message.tickArray2;
                if (message.oracle != null && message.hasOwnProperty("oracle"))
                    object.oracle = message.oracle;
                return object;
            };

            OrcaSwapV2AccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaSwapV2AccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaSwapV2AccountsProto";
            };

            return OrcaSwapV2AccountsProto;
        })();

        parser.OrcaSwapV2IxDataProto = (function() {

            function OrcaSwapV2IxDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaSwapV2IxDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            OrcaSwapV2IxDataProto.prototype.otherAmountThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            OrcaSwapV2IxDataProto.prototype.sqrtPriceLimit = "";
            OrcaSwapV2IxDataProto.prototype.amountSpecifiedIsInput = false;
            OrcaSwapV2IxDataProto.prototype.aToB = false;

            OrcaSwapV2IxDataProto.create = function create(properties) {
                return new OrcaSwapV2IxDataProto(properties);
            };

            OrcaSwapV2IxDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                if (message.otherAmountThreshold != null && Object.hasOwnProperty.call(message, "otherAmountThreshold"))
                    writer.uint32(16).uint64(message.otherAmountThreshold);
                if (message.sqrtPriceLimit != null && Object.hasOwnProperty.call(message, "sqrtPriceLimit"))
                    writer.uint32(26).string(message.sqrtPriceLimit);
                if (message.amountSpecifiedIsInput != null && Object.hasOwnProperty.call(message, "amountSpecifiedIsInput"))
                    writer.uint32(32).bool(message.amountSpecifiedIsInput);
                if (message.aToB != null && Object.hasOwnProperty.call(message, "aToB"))
                    writer.uint32(40).bool(message.aToB);
                return writer;
            };

            OrcaSwapV2IxDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaSwapV2IxDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaSwapV2IxDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.otherAmountThreshold = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.sqrtPriceLimit = reader.string();
                            break;
                        }
                    case 4: {
                            message.amountSpecifiedIsInput = reader.bool();
                            break;
                        }
                    case 5: {
                            message.aToB = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaSwapV2IxDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaSwapV2IxDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                if (message.otherAmountThreshold != null && message.hasOwnProperty("otherAmountThreshold"))
                    if (!$util.isInteger(message.otherAmountThreshold) && !(message.otherAmountThreshold && $util.isInteger(message.otherAmountThreshold.low) && $util.isInteger(message.otherAmountThreshold.high)))
                        return "otherAmountThreshold: integer|Long expected";
                if (message.sqrtPriceLimit != null && message.hasOwnProperty("sqrtPriceLimit"))
                    if (!$util.isString(message.sqrtPriceLimit))
                        return "sqrtPriceLimit: string expected";
                if (message.amountSpecifiedIsInput != null && message.hasOwnProperty("amountSpecifiedIsInput"))
                    if (typeof message.amountSpecifiedIsInput !== "boolean")
                        return "amountSpecifiedIsInput: boolean expected";
                if (message.aToB != null && message.hasOwnProperty("aToB"))
                    if (typeof message.aToB !== "boolean")
                        return "aToB: boolean expected";
                return null;
            };

            OrcaSwapV2IxDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaSwapV2IxDataProto)
                    return object;
                var message = new $root.vixen.parser.OrcaSwapV2IxDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                if (object.otherAmountThreshold != null)
                    if ($util.Long)
                        (message.otherAmountThreshold = $util.Long.fromValue(object.otherAmountThreshold)).unsigned = true;
                    else if (typeof object.otherAmountThreshold === "string")
                        message.otherAmountThreshold = parseInt(object.otherAmountThreshold, 10);
                    else if (typeof object.otherAmountThreshold === "number")
                        message.otherAmountThreshold = object.otherAmountThreshold;
                    else if (typeof object.otherAmountThreshold === "object")
                        message.otherAmountThreshold = new $util.LongBits(object.otherAmountThreshold.low >>> 0, object.otherAmountThreshold.high >>> 0).toNumber(true);
                if (object.sqrtPriceLimit != null)
                    message.sqrtPriceLimit = String(object.sqrtPriceLimit);
                if (object.amountSpecifiedIsInput != null)
                    message.amountSpecifiedIsInput = Boolean(object.amountSpecifiedIsInput);
                if (object.aToB != null)
                    message.aToB = Boolean(object.aToB);
                return message;
            };

            OrcaSwapV2IxDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.otherAmountThreshold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.otherAmountThreshold = options.longs === String ? "0" : 0;
                    object.sqrtPriceLimit = "";
                    object.amountSpecifiedIsInput = false;
                    object.aToB = false;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                if (message.otherAmountThreshold != null && message.hasOwnProperty("otherAmountThreshold"))
                    if (typeof message.otherAmountThreshold === "number")
                        object.otherAmountThreshold = options.longs === String ? String(message.otherAmountThreshold) : message.otherAmountThreshold;
                    else
                        object.otherAmountThreshold = options.longs === String ? $util.Long.prototype.toString.call(message.otherAmountThreshold) : options.longs === Number ? new $util.LongBits(message.otherAmountThreshold.low >>> 0, message.otherAmountThreshold.high >>> 0).toNumber(true) : message.otherAmountThreshold;
                if (message.sqrtPriceLimit != null && message.hasOwnProperty("sqrtPriceLimit"))
                    object.sqrtPriceLimit = message.sqrtPriceLimit;
                if (message.amountSpecifiedIsInput != null && message.hasOwnProperty("amountSpecifiedIsInput"))
                    object.amountSpecifiedIsInput = message.amountSpecifiedIsInput;
                if (message.aToB != null && message.hasOwnProperty("aToB"))
                    object.aToB = message.aToB;
                return object;
            };

            OrcaSwapV2IxDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaSwapV2IxDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaSwapV2IxDataProto";
            };

            return OrcaSwapV2IxDataProto;
        })();

        parser.OrcaSwapInstructionProto = (function() {

            function OrcaSwapInstructionProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaSwapInstructionProto.prototype.accounts = null;
            OrcaSwapInstructionProto.prototype.data = null;

            OrcaSwapInstructionProto.create = function create(properties) {
                return new OrcaSwapInstructionProto(properties);
            };

            OrcaSwapInstructionProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.OrcaSwapAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.OrcaSwapIxDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            OrcaSwapInstructionProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaSwapInstructionProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaSwapInstructionProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.OrcaSwapAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.OrcaSwapIxDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaSwapInstructionProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaSwapInstructionProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.OrcaSwapAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.OrcaSwapIxDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            OrcaSwapInstructionProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaSwapInstructionProto)
                    return object;
                var message = new $root.vixen.parser.OrcaSwapInstructionProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.OrcaSwapInstructionProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.OrcaSwapAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.OrcaSwapInstructionProto.data: object expected");
                    message.data = $root.vixen.parser.OrcaSwapIxDataProto.fromObject(object.data);
                }
                return message;
            };

            OrcaSwapInstructionProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.OrcaSwapAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.OrcaSwapIxDataProto.toObject(message.data, options);
                return object;
            };

            OrcaSwapInstructionProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaSwapInstructionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaSwapInstructionProto";
            };

            return OrcaSwapInstructionProto;
        })();

        parser.OrcaSwapV2InstructionProto = (function() {

            function OrcaSwapV2InstructionProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OrcaSwapV2InstructionProto.prototype.accounts = null;
            OrcaSwapV2InstructionProto.prototype.data = null;

            OrcaSwapV2InstructionProto.create = function create(properties) {
                return new OrcaSwapV2InstructionProto(properties);
            };

            OrcaSwapV2InstructionProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.OrcaSwapV2AccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.OrcaSwapV2IxDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            OrcaSwapV2InstructionProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OrcaSwapV2InstructionProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OrcaSwapV2InstructionProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.OrcaSwapV2AccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.OrcaSwapV2IxDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OrcaSwapV2InstructionProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OrcaSwapV2InstructionProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.OrcaSwapV2AccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.OrcaSwapV2IxDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            OrcaSwapV2InstructionProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OrcaSwapV2InstructionProto)
                    return object;
                var message = new $root.vixen.parser.OrcaSwapV2InstructionProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.OrcaSwapV2InstructionProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.OrcaSwapV2AccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.OrcaSwapV2InstructionProto.data: object expected");
                    message.data = $root.vixen.parser.OrcaSwapV2IxDataProto.fromObject(object.data);
                }
                return message;
            };

            OrcaSwapV2InstructionProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.OrcaSwapV2AccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.OrcaSwapV2IxDataProto.toObject(message.data, options);
                return object;
            };

            OrcaSwapV2InstructionProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OrcaSwapV2InstructionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OrcaSwapV2InstructionProto";
            };

            return OrcaSwapV2InstructionProto;
        })();

        parser.AmmConfigProto = (function() {

            function AmmConfigProto(properties) {
                this.padding = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            AmmConfigProto.prototype.bump = 0;
            AmmConfigProto.prototype.index = 0;
            AmmConfigProto.prototype.owner = "";
            AmmConfigProto.prototype.protocolFeeRate = 0;
            AmmConfigProto.prototype.tradeFeeRate = 0;
            AmmConfigProto.prototype.tickSpacing = 0;
            AmmConfigProto.prototype.fundFeeRate = 0;
            AmmConfigProto.prototype.paddingU32 = 0;
            AmmConfigProto.prototype.fundOwner = "";
            AmmConfigProto.prototype.padding = $util.emptyArray;

            AmmConfigProto.create = function create(properties) {
                return new AmmConfigProto(properties);
            };

            AmmConfigProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bump != null && Object.hasOwnProperty.call(message, "bump"))
                    writer.uint32(8).uint32(message.bump);
                if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                    writer.uint32(16).uint32(message.index);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.protocolFeeRate != null && Object.hasOwnProperty.call(message, "protocolFeeRate"))
                    writer.uint32(32).uint32(message.protocolFeeRate);
                if (message.tradeFeeRate != null && Object.hasOwnProperty.call(message, "tradeFeeRate"))
                    writer.uint32(40).uint32(message.tradeFeeRate);
                if (message.tickSpacing != null && Object.hasOwnProperty.call(message, "tickSpacing"))
                    writer.uint32(48).uint32(message.tickSpacing);
                if (message.fundFeeRate != null && Object.hasOwnProperty.call(message, "fundFeeRate"))
                    writer.uint32(56).uint32(message.fundFeeRate);
                if (message.paddingU32 != null && Object.hasOwnProperty.call(message, "paddingU32"))
                    writer.uint32(64).uint32(message.paddingU32);
                if (message.fundOwner != null && Object.hasOwnProperty.call(message, "fundOwner"))
                    writer.uint32(74).string(message.fundOwner);
                if (message.padding != null && message.padding.length) {
                    writer.uint32(82).fork();
                    for (var i = 0; i < message.padding.length; ++i)
                        writer.uint64(message.padding[i]);
                    writer.ldelim();
                }
                return writer;
            };

            AmmConfigProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            AmmConfigProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.AmmConfigProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.bump = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.index = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            message.protocolFeeRate = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.tradeFeeRate = reader.uint32();
                            break;
                        }
                    case 6: {
                            message.tickSpacing = reader.uint32();
                            break;
                        }
                    case 7: {
                            message.fundFeeRate = reader.uint32();
                            break;
                        }
                    case 8: {
                            message.paddingU32 = reader.uint32();
                            break;
                        }
                    case 9: {
                            message.fundOwner = reader.string();
                            break;
                        }
                    case 10: {
                            if (!(message.padding && message.padding.length))
                                message.padding = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.padding.push(reader.uint64());
                            } else
                                message.padding.push(reader.uint64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            AmmConfigProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            AmmConfigProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bump != null && message.hasOwnProperty("bump"))
                    if (!$util.isInteger(message.bump))
                        return "bump: integer expected";
                if (message.index != null && message.hasOwnProperty("index"))
                    if (!$util.isInteger(message.index))
                        return "index: integer expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.protocolFeeRate != null && message.hasOwnProperty("protocolFeeRate"))
                    if (!$util.isInteger(message.protocolFeeRate))
                        return "protocolFeeRate: integer expected";
                if (message.tradeFeeRate != null && message.hasOwnProperty("tradeFeeRate"))
                    if (!$util.isInteger(message.tradeFeeRate))
                        return "tradeFeeRate: integer expected";
                if (message.tickSpacing != null && message.hasOwnProperty("tickSpacing"))
                    if (!$util.isInteger(message.tickSpacing))
                        return "tickSpacing: integer expected";
                if (message.fundFeeRate != null && message.hasOwnProperty("fundFeeRate"))
                    if (!$util.isInteger(message.fundFeeRate))
                        return "fundFeeRate: integer expected";
                if (message.paddingU32 != null && message.hasOwnProperty("paddingU32"))
                    if (!$util.isInteger(message.paddingU32))
                        return "paddingU32: integer expected";
                if (message.fundOwner != null && message.hasOwnProperty("fundOwner"))
                    if (!$util.isString(message.fundOwner))
                        return "fundOwner: string expected";
                if (message.padding != null && message.hasOwnProperty("padding")) {
                    if (!Array.isArray(message.padding))
                        return "padding: array expected";
                    for (var i = 0; i < message.padding.length; ++i)
                        if (!$util.isInteger(message.padding[i]) && !(message.padding[i] && $util.isInteger(message.padding[i].low) && $util.isInteger(message.padding[i].high)))
                            return "padding: integer|Long[] expected";
                }
                return null;
            };

            AmmConfigProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.AmmConfigProto)
                    return object;
                var message = new $root.vixen.parser.AmmConfigProto();
                if (object.bump != null)
                    message.bump = object.bump >>> 0;
                if (object.index != null)
                    message.index = object.index >>> 0;
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.protocolFeeRate != null)
                    message.protocolFeeRate = object.protocolFeeRate >>> 0;
                if (object.tradeFeeRate != null)
                    message.tradeFeeRate = object.tradeFeeRate >>> 0;
                if (object.tickSpacing != null)
                    message.tickSpacing = object.tickSpacing >>> 0;
                if (object.fundFeeRate != null)
                    message.fundFeeRate = object.fundFeeRate >>> 0;
                if (object.paddingU32 != null)
                    message.paddingU32 = object.paddingU32 >>> 0;
                if (object.fundOwner != null)
                    message.fundOwner = String(object.fundOwner);
                if (object.padding) {
                    if (!Array.isArray(object.padding))
                        throw TypeError(".vixen.parser.AmmConfigProto.padding: array expected");
                    message.padding = [];
                    for (var i = 0; i < object.padding.length; ++i)
                        if ($util.Long)
                            (message.padding[i] = $util.Long.fromValue(object.padding[i])).unsigned = true;
                        else if (typeof object.padding[i] === "string")
                            message.padding[i] = parseInt(object.padding[i], 10);
                        else if (typeof object.padding[i] === "number")
                            message.padding[i] = object.padding[i];
                        else if (typeof object.padding[i] === "object")
                            message.padding[i] = new $util.LongBits(object.padding[i].low >>> 0, object.padding[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            AmmConfigProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.padding = [];
                if (options.defaults) {
                    object.bump = 0;
                    object.index = 0;
                    object.owner = "";
                    object.protocolFeeRate = 0;
                    object.tradeFeeRate = 0;
                    object.tickSpacing = 0;
                    object.fundFeeRate = 0;
                    object.paddingU32 = 0;
                    object.fundOwner = "";
                }
                if (message.bump != null && message.hasOwnProperty("bump"))
                    object.bump = message.bump;
                if (message.index != null && message.hasOwnProperty("index"))
                    object.index = message.index;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.protocolFeeRate != null && message.hasOwnProperty("protocolFeeRate"))
                    object.protocolFeeRate = message.protocolFeeRate;
                if (message.tradeFeeRate != null && message.hasOwnProperty("tradeFeeRate"))
                    object.tradeFeeRate = message.tradeFeeRate;
                if (message.tickSpacing != null && message.hasOwnProperty("tickSpacing"))
                    object.tickSpacing = message.tickSpacing;
                if (message.fundFeeRate != null && message.hasOwnProperty("fundFeeRate"))
                    object.fundFeeRate = message.fundFeeRate;
                if (message.paddingU32 != null && message.hasOwnProperty("paddingU32"))
                    object.paddingU32 = message.paddingU32;
                if (message.fundOwner != null && message.hasOwnProperty("fundOwner"))
                    object.fundOwner = message.fundOwner;
                if (message.padding && message.padding.length) {
                    object.padding = [];
                    for (var j = 0; j < message.padding.length; ++j)
                        if (typeof message.padding[j] === "number")
                            object.padding[j] = options.longs === String ? String(message.padding[j]) : message.padding[j];
                        else
                            object.padding[j] = options.longs === String ? $util.Long.prototype.toString.call(message.padding[j]) : options.longs === Number ? new $util.LongBits(message.padding[j].low >>> 0, message.padding[j].high >>> 0).toNumber(true) : message.padding[j];
                }
                return object;
            };

            AmmConfigProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            AmmConfigProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.AmmConfigProto";
            };

            return AmmConfigProto;
        })();

        parser.OperationStateProto = (function() {

            function OperationStateProto(properties) {
                this.operationOwners = [];
                this.whitelistMints = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            OperationStateProto.prototype.bump = 0;
            OperationStateProto.prototype.operationOwners = $util.emptyArray;
            OperationStateProto.prototype.whitelistMints = $util.emptyArray;

            OperationStateProto.create = function create(properties) {
                return new OperationStateProto(properties);
            };

            OperationStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bump != null && Object.hasOwnProperty.call(message, "bump"))
                    writer.uint32(8).uint32(message.bump);
                if (message.operationOwners != null && message.operationOwners.length)
                    for (var i = 0; i < message.operationOwners.length; ++i)
                        writer.uint32(18).string(message.operationOwners[i]);
                if (message.whitelistMints != null && message.whitelistMints.length)
                    for (var i = 0; i < message.whitelistMints.length; ++i)
                        writer.uint32(26).string(message.whitelistMints[i]);
                return writer;
            };

            OperationStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            OperationStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.OperationStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.bump = reader.uint32();
                            break;
                        }
                    case 2: {
                            if (!(message.operationOwners && message.operationOwners.length))
                                message.operationOwners = [];
                            message.operationOwners.push(reader.string());
                            break;
                        }
                    case 3: {
                            if (!(message.whitelistMints && message.whitelistMints.length))
                                message.whitelistMints = [];
                            message.whitelistMints.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            OperationStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            OperationStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bump != null && message.hasOwnProperty("bump"))
                    if (!$util.isInteger(message.bump))
                        return "bump: integer expected";
                if (message.operationOwners != null && message.hasOwnProperty("operationOwners")) {
                    if (!Array.isArray(message.operationOwners))
                        return "operationOwners: array expected";
                    for (var i = 0; i < message.operationOwners.length; ++i)
                        if (!$util.isString(message.operationOwners[i]))
                            return "operationOwners: string[] expected";
                }
                if (message.whitelistMints != null && message.hasOwnProperty("whitelistMints")) {
                    if (!Array.isArray(message.whitelistMints))
                        return "whitelistMints: array expected";
                    for (var i = 0; i < message.whitelistMints.length; ++i)
                        if (!$util.isString(message.whitelistMints[i]))
                            return "whitelistMints: string[] expected";
                }
                return null;
            };

            OperationStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.OperationStateProto)
                    return object;
                var message = new $root.vixen.parser.OperationStateProto();
                if (object.bump != null)
                    message.bump = object.bump >>> 0;
                if (object.operationOwners) {
                    if (!Array.isArray(object.operationOwners))
                        throw TypeError(".vixen.parser.OperationStateProto.operationOwners: array expected");
                    message.operationOwners = [];
                    for (var i = 0; i < object.operationOwners.length; ++i)
                        message.operationOwners[i] = String(object.operationOwners[i]);
                }
                if (object.whitelistMints) {
                    if (!Array.isArray(object.whitelistMints))
                        throw TypeError(".vixen.parser.OperationStateProto.whitelistMints: array expected");
                    message.whitelistMints = [];
                    for (var i = 0; i < object.whitelistMints.length; ++i)
                        message.whitelistMints[i] = String(object.whitelistMints[i]);
                }
                return message;
            };

            OperationStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.operationOwners = [];
                    object.whitelistMints = [];
                }
                if (options.defaults)
                    object.bump = 0;
                if (message.bump != null && message.hasOwnProperty("bump"))
                    object.bump = message.bump;
                if (message.operationOwners && message.operationOwners.length) {
                    object.operationOwners = [];
                    for (var j = 0; j < message.operationOwners.length; ++j)
                        object.operationOwners[j] = message.operationOwners[j];
                }
                if (message.whitelistMints && message.whitelistMints.length) {
                    object.whitelistMints = [];
                    for (var j = 0; j < message.whitelistMints.length; ++j)
                        object.whitelistMints[j] = message.whitelistMints[j];
                }
                return object;
            };

            OperationStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            OperationStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.OperationStateProto";
            };

            return OperationStateProto;
        })();

        parser.ObservationProto = (function() {

            function ObservationProto(properties) {
                this.padding = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ObservationProto.prototype.blockTimestamp = 0;
            ObservationProto.prototype.tickCumulative = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
            ObservationProto.prototype.padding = $util.emptyArray;

            ObservationProto.create = function create(properties) {
                return new ObservationProto(properties);
            };

            ObservationProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.blockTimestamp != null && Object.hasOwnProperty.call(message, "blockTimestamp"))
                    writer.uint32(8).uint32(message.blockTimestamp);
                if (message.tickCumulative != null && Object.hasOwnProperty.call(message, "tickCumulative"))
                    writer.uint32(16).int64(message.tickCumulative);
                if (message.padding != null && message.padding.length) {
                    writer.uint32(26).fork();
                    for (var i = 0; i < message.padding.length; ++i)
                        writer.uint64(message.padding[i]);
                    writer.ldelim();
                }
                return writer;
            };

            ObservationProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ObservationProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ObservationProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.blockTimestamp = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.tickCumulative = reader.int64();
                            break;
                        }
                    case 3: {
                            if (!(message.padding && message.padding.length))
                                message.padding = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.padding.push(reader.uint64());
                            } else
                                message.padding.push(reader.uint64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ObservationProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ObservationProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.blockTimestamp != null && message.hasOwnProperty("blockTimestamp"))
                    if (!$util.isInteger(message.blockTimestamp))
                        return "blockTimestamp: integer expected";
                if (message.tickCumulative != null && message.hasOwnProperty("tickCumulative"))
                    if (!$util.isInteger(message.tickCumulative) && !(message.tickCumulative && $util.isInteger(message.tickCumulative.low) && $util.isInteger(message.tickCumulative.high)))
                        return "tickCumulative: integer|Long expected";
                if (message.padding != null && message.hasOwnProperty("padding")) {
                    if (!Array.isArray(message.padding))
                        return "padding: array expected";
                    for (var i = 0; i < message.padding.length; ++i)
                        if (!$util.isInteger(message.padding[i]) && !(message.padding[i] && $util.isInteger(message.padding[i].low) && $util.isInteger(message.padding[i].high)))
                            return "padding: integer|Long[] expected";
                }
                return null;
            };

            ObservationProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ObservationProto)
                    return object;
                var message = new $root.vixen.parser.ObservationProto();
                if (object.blockTimestamp != null)
                    message.blockTimestamp = object.blockTimestamp >>> 0;
                if (object.tickCumulative != null)
                    if ($util.Long)
                        (message.tickCumulative = $util.Long.fromValue(object.tickCumulative)).unsigned = false;
                    else if (typeof object.tickCumulative === "string")
                        message.tickCumulative = parseInt(object.tickCumulative, 10);
                    else if (typeof object.tickCumulative === "number")
                        message.tickCumulative = object.tickCumulative;
                    else if (typeof object.tickCumulative === "object")
                        message.tickCumulative = new $util.LongBits(object.tickCumulative.low >>> 0, object.tickCumulative.high >>> 0).toNumber();
                if (object.padding) {
                    if (!Array.isArray(object.padding))
                        throw TypeError(".vixen.parser.ObservationProto.padding: array expected");
                    message.padding = [];
                    for (var i = 0; i < object.padding.length; ++i)
                        if ($util.Long)
                            (message.padding[i] = $util.Long.fromValue(object.padding[i])).unsigned = true;
                        else if (typeof object.padding[i] === "string")
                            message.padding[i] = parseInt(object.padding[i], 10);
                        else if (typeof object.padding[i] === "number")
                            message.padding[i] = object.padding[i];
                        else if (typeof object.padding[i] === "object")
                            message.padding[i] = new $util.LongBits(object.padding[i].low >>> 0, object.padding[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            ObservationProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.padding = [];
                if (options.defaults) {
                    object.blockTimestamp = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.tickCumulative = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.tickCumulative = options.longs === String ? "0" : 0;
                }
                if (message.blockTimestamp != null && message.hasOwnProperty("blockTimestamp"))
                    object.blockTimestamp = message.blockTimestamp;
                if (message.tickCumulative != null && message.hasOwnProperty("tickCumulative"))
                    if (typeof message.tickCumulative === "number")
                        object.tickCumulative = options.longs === String ? String(message.tickCumulative) : message.tickCumulative;
                    else
                        object.tickCumulative = options.longs === String ? $util.Long.prototype.toString.call(message.tickCumulative) : options.longs === Number ? new $util.LongBits(message.tickCumulative.low >>> 0, message.tickCumulative.high >>> 0).toNumber() : message.tickCumulative;
                if (message.padding && message.padding.length) {
                    object.padding = [];
                    for (var j = 0; j < message.padding.length; ++j)
                        if (typeof message.padding[j] === "number")
                            object.padding[j] = options.longs === String ? String(message.padding[j]) : message.padding[j];
                        else
                            object.padding[j] = options.longs === String ? $util.Long.prototype.toString.call(message.padding[j]) : options.longs === Number ? new $util.LongBits(message.padding[j].low >>> 0, message.padding[j].high >>> 0).toNumber(true) : message.padding[j];
                }
                return object;
            };

            ObservationProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ObservationProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ObservationProto";
            };

            return ObservationProto;
        })();

        parser.ObservationStateProto = (function() {

            function ObservationStateProto(properties) {
                this.observations = [];
                this.padding = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ObservationStateProto.prototype.initialized = false;
            ObservationStateProto.prototype.recentEpoch = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            ObservationStateProto.prototype.observationIndex = 0;
            ObservationStateProto.prototype.poolId = "";
            ObservationStateProto.prototype.observations = $util.emptyArray;
            ObservationStateProto.prototype.padding = $util.emptyArray;

            ObservationStateProto.create = function create(properties) {
                return new ObservationStateProto(properties);
            };

            ObservationStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.initialized != null && Object.hasOwnProperty.call(message, "initialized"))
                    writer.uint32(8).bool(message.initialized);
                if (message.recentEpoch != null && Object.hasOwnProperty.call(message, "recentEpoch"))
                    writer.uint32(16).uint64(message.recentEpoch);
                if (message.observationIndex != null && Object.hasOwnProperty.call(message, "observationIndex"))
                    writer.uint32(24).uint32(message.observationIndex);
                if (message.poolId != null && Object.hasOwnProperty.call(message, "poolId"))
                    writer.uint32(34).string(message.poolId);
                if (message.observations != null && message.observations.length)
                    for (var i = 0; i < message.observations.length; ++i)
                        $root.vixen.parser.ObservationProto.encode(message.observations[i], writer.uint32(42).fork()).ldelim();
                if (message.padding != null && message.padding.length) {
                    writer.uint32(50).fork();
                    for (var i = 0; i < message.padding.length; ++i)
                        writer.uint64(message.padding[i]);
                    writer.ldelim();
                }
                return writer;
            };

            ObservationStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ObservationStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ObservationStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.initialized = reader.bool();
                            break;
                        }
                    case 2: {
                            message.recentEpoch = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.observationIndex = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.poolId = reader.string();
                            break;
                        }
                    case 5: {
                            if (!(message.observations && message.observations.length))
                                message.observations = [];
                            message.observations.push($root.vixen.parser.ObservationProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 6: {
                            if (!(message.padding && message.padding.length))
                                message.padding = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.padding.push(reader.uint64());
                            } else
                                message.padding.push(reader.uint64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ObservationStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ObservationStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.initialized != null && message.hasOwnProperty("initialized"))
                    if (typeof message.initialized !== "boolean")
                        return "initialized: boolean expected";
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (!$util.isInteger(message.recentEpoch) && !(message.recentEpoch && $util.isInteger(message.recentEpoch.low) && $util.isInteger(message.recentEpoch.high)))
                        return "recentEpoch: integer|Long expected";
                if (message.observationIndex != null && message.hasOwnProperty("observationIndex"))
                    if (!$util.isInteger(message.observationIndex))
                        return "observationIndex: integer expected";
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    if (!$util.isString(message.poolId))
                        return "poolId: string expected";
                if (message.observations != null && message.hasOwnProperty("observations")) {
                    if (!Array.isArray(message.observations))
                        return "observations: array expected";
                    for (var i = 0; i < message.observations.length; ++i) {
                        var error = $root.vixen.parser.ObservationProto.verify(message.observations[i]);
                        if (error)
                            return "observations." + error;
                    }
                }
                if (message.padding != null && message.hasOwnProperty("padding")) {
                    if (!Array.isArray(message.padding))
                        return "padding: array expected";
                    for (var i = 0; i < message.padding.length; ++i)
                        if (!$util.isInteger(message.padding[i]) && !(message.padding[i] && $util.isInteger(message.padding[i].low) && $util.isInteger(message.padding[i].high)))
                            return "padding: integer|Long[] expected";
                }
                return null;
            };

            ObservationStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ObservationStateProto)
                    return object;
                var message = new $root.vixen.parser.ObservationStateProto();
                if (object.initialized != null)
                    message.initialized = Boolean(object.initialized);
                if (object.recentEpoch != null)
                    if ($util.Long)
                        (message.recentEpoch = $util.Long.fromValue(object.recentEpoch)).unsigned = true;
                    else if (typeof object.recentEpoch === "string")
                        message.recentEpoch = parseInt(object.recentEpoch, 10);
                    else if (typeof object.recentEpoch === "number")
                        message.recentEpoch = object.recentEpoch;
                    else if (typeof object.recentEpoch === "object")
                        message.recentEpoch = new $util.LongBits(object.recentEpoch.low >>> 0, object.recentEpoch.high >>> 0).toNumber(true);
                if (object.observationIndex != null)
                    message.observationIndex = object.observationIndex >>> 0;
                if (object.poolId != null)
                    message.poolId = String(object.poolId);
                if (object.observations) {
                    if (!Array.isArray(object.observations))
                        throw TypeError(".vixen.parser.ObservationStateProto.observations: array expected");
                    message.observations = [];
                    for (var i = 0; i < object.observations.length; ++i) {
                        if (typeof object.observations[i] !== "object")
                            throw TypeError(".vixen.parser.ObservationStateProto.observations: object expected");
                        message.observations[i] = $root.vixen.parser.ObservationProto.fromObject(object.observations[i]);
                    }
                }
                if (object.padding) {
                    if (!Array.isArray(object.padding))
                        throw TypeError(".vixen.parser.ObservationStateProto.padding: array expected");
                    message.padding = [];
                    for (var i = 0; i < object.padding.length; ++i)
                        if ($util.Long)
                            (message.padding[i] = $util.Long.fromValue(object.padding[i])).unsigned = true;
                        else if (typeof object.padding[i] === "string")
                            message.padding[i] = parseInt(object.padding[i], 10);
                        else if (typeof object.padding[i] === "number")
                            message.padding[i] = object.padding[i];
                        else if (typeof object.padding[i] === "object")
                            message.padding[i] = new $util.LongBits(object.padding[i].low >>> 0, object.padding[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            ObservationStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.observations = [];
                    object.padding = [];
                }
                if (options.defaults) {
                    object.initialized = false;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.recentEpoch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.recentEpoch = options.longs === String ? "0" : 0;
                    object.observationIndex = 0;
                    object.poolId = "";
                }
                if (message.initialized != null && message.hasOwnProperty("initialized"))
                    object.initialized = message.initialized;
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (typeof message.recentEpoch === "number")
                        object.recentEpoch = options.longs === String ? String(message.recentEpoch) : message.recentEpoch;
                    else
                        object.recentEpoch = options.longs === String ? $util.Long.prototype.toString.call(message.recentEpoch) : options.longs === Number ? new $util.LongBits(message.recentEpoch.low >>> 0, message.recentEpoch.high >>> 0).toNumber(true) : message.recentEpoch;
                if (message.observationIndex != null && message.hasOwnProperty("observationIndex"))
                    object.observationIndex = message.observationIndex;
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    object.poolId = message.poolId;
                if (message.observations && message.observations.length) {
                    object.observations = [];
                    for (var j = 0; j < message.observations.length; ++j)
                        object.observations[j] = $root.vixen.parser.ObservationProto.toObject(message.observations[j], options);
                }
                if (message.padding && message.padding.length) {
                    object.padding = [];
                    for (var j = 0; j < message.padding.length; ++j)
                        if (typeof message.padding[j] === "number")
                            object.padding[j] = options.longs === String ? String(message.padding[j]) : message.padding[j];
                        else
                            object.padding[j] = options.longs === String ? $util.Long.prototype.toString.call(message.padding[j]) : options.longs === Number ? new $util.LongBits(message.padding[j].low >>> 0, message.padding[j].high >>> 0).toNumber(true) : message.padding[j];
                }
                return object;
            };

            ObservationStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ObservationStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ObservationStateProto";
            };

            return ObservationStateProto;
        })();

        parser.RaydiumPositionRewardInfoProto = (function() {

            function RaydiumPositionRewardInfoProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumPositionRewardInfoProto.prototype.growthInsideLastX64 = "";
            RaydiumPositionRewardInfoProto.prototype.rewardAmountOwed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            RaydiumPositionRewardInfoProto.create = function create(properties) {
                return new RaydiumPositionRewardInfoProto(properties);
            };

            RaydiumPositionRewardInfoProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.growthInsideLastX64 != null && Object.hasOwnProperty.call(message, "growthInsideLastX64"))
                    writer.uint32(10).string(message.growthInsideLastX64);
                if (message.rewardAmountOwed != null && Object.hasOwnProperty.call(message, "rewardAmountOwed"))
                    writer.uint32(16).uint64(message.rewardAmountOwed);
                return writer;
            };

            RaydiumPositionRewardInfoProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumPositionRewardInfoProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumPositionRewardInfoProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.growthInsideLastX64 = reader.string();
                            break;
                        }
                    case 2: {
                            message.rewardAmountOwed = reader.uint64();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumPositionRewardInfoProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumPositionRewardInfoProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.growthInsideLastX64 != null && message.hasOwnProperty("growthInsideLastX64"))
                    if (!$util.isString(message.growthInsideLastX64))
                        return "growthInsideLastX64: string expected";
                if (message.rewardAmountOwed != null && message.hasOwnProperty("rewardAmountOwed"))
                    if (!$util.isInteger(message.rewardAmountOwed) && !(message.rewardAmountOwed && $util.isInteger(message.rewardAmountOwed.low) && $util.isInteger(message.rewardAmountOwed.high)))
                        return "rewardAmountOwed: integer|Long expected";
                return null;
            };

            RaydiumPositionRewardInfoProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumPositionRewardInfoProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumPositionRewardInfoProto();
                if (object.growthInsideLastX64 != null)
                    message.growthInsideLastX64 = String(object.growthInsideLastX64);
                if (object.rewardAmountOwed != null)
                    if ($util.Long)
                        (message.rewardAmountOwed = $util.Long.fromValue(object.rewardAmountOwed)).unsigned = true;
                    else if (typeof object.rewardAmountOwed === "string")
                        message.rewardAmountOwed = parseInt(object.rewardAmountOwed, 10);
                    else if (typeof object.rewardAmountOwed === "number")
                        message.rewardAmountOwed = object.rewardAmountOwed;
                    else if (typeof object.rewardAmountOwed === "object")
                        message.rewardAmountOwed = new $util.LongBits(object.rewardAmountOwed.low >>> 0, object.rewardAmountOwed.high >>> 0).toNumber(true);
                return message;
            };

            RaydiumPositionRewardInfoProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.growthInsideLastX64 = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.rewardAmountOwed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.rewardAmountOwed = options.longs === String ? "0" : 0;
                }
                if (message.growthInsideLastX64 != null && message.hasOwnProperty("growthInsideLastX64"))
                    object.growthInsideLastX64 = message.growthInsideLastX64;
                if (message.rewardAmountOwed != null && message.hasOwnProperty("rewardAmountOwed"))
                    if (typeof message.rewardAmountOwed === "number")
                        object.rewardAmountOwed = options.longs === String ? String(message.rewardAmountOwed) : message.rewardAmountOwed;
                    else
                        object.rewardAmountOwed = options.longs === String ? $util.Long.prototype.toString.call(message.rewardAmountOwed) : options.longs === Number ? new $util.LongBits(message.rewardAmountOwed.low >>> 0, message.rewardAmountOwed.high >>> 0).toNumber(true) : message.rewardAmountOwed;
                return object;
            };

            RaydiumPositionRewardInfoProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumPositionRewardInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumPositionRewardInfoProto";
            };

            return RaydiumPositionRewardInfoProto;
        })();

        parser.PersonalPositionStateProto = (function() {

            function PersonalPositionStateProto(properties) {
                this.rewardInfos = [];
                this.padding = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            PersonalPositionStateProto.prototype.bump = 0;
            PersonalPositionStateProto.prototype.nftMint = "";
            PersonalPositionStateProto.prototype.poolId = "";
            PersonalPositionStateProto.prototype.tickLowerIndex = 0;
            PersonalPositionStateProto.prototype.tickUpperIndex = 0;
            PersonalPositionStateProto.prototype.liquidity = "";
            PersonalPositionStateProto.prototype.feeGrowthInside_0LastX64 = "";
            PersonalPositionStateProto.prototype.feeGrowthInside_1LastX64 = "";
            PersonalPositionStateProto.prototype.tokenFeesOwed_0 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PersonalPositionStateProto.prototype.tokenFeesOwed_1 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PersonalPositionStateProto.prototype.rewardInfos = $util.emptyArray;
            PersonalPositionStateProto.prototype.recentEpoch = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PersonalPositionStateProto.prototype.padding = $util.emptyArray;

            PersonalPositionStateProto.create = function create(properties) {
                return new PersonalPositionStateProto(properties);
            };

            PersonalPositionStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bump != null && Object.hasOwnProperty.call(message, "bump"))
                    writer.uint32(8).uint32(message.bump);
                if (message.nftMint != null && Object.hasOwnProperty.call(message, "nftMint"))
                    writer.uint32(18).string(message.nftMint);
                if (message.poolId != null && Object.hasOwnProperty.call(message, "poolId"))
                    writer.uint32(26).string(message.poolId);
                if (message.tickLowerIndex != null && Object.hasOwnProperty.call(message, "tickLowerIndex"))
                    writer.uint32(32).int32(message.tickLowerIndex);
                if (message.tickUpperIndex != null && Object.hasOwnProperty.call(message, "tickUpperIndex"))
                    writer.uint32(40).int32(message.tickUpperIndex);
                if (message.liquidity != null && Object.hasOwnProperty.call(message, "liquidity"))
                    writer.uint32(50).string(message.liquidity);
                if (message.feeGrowthInside_0LastX64 != null && Object.hasOwnProperty.call(message, "feeGrowthInside_0LastX64"))
                    writer.uint32(58).string(message.feeGrowthInside_0LastX64);
                if (message.feeGrowthInside_1LastX64 != null && Object.hasOwnProperty.call(message, "feeGrowthInside_1LastX64"))
                    writer.uint32(66).string(message.feeGrowthInside_1LastX64);
                if (message.tokenFeesOwed_0 != null && Object.hasOwnProperty.call(message, "tokenFeesOwed_0"))
                    writer.uint32(72).uint64(message.tokenFeesOwed_0);
                if (message.tokenFeesOwed_1 != null && Object.hasOwnProperty.call(message, "tokenFeesOwed_1"))
                    writer.uint32(80).uint64(message.tokenFeesOwed_1);
                if (message.rewardInfos != null && message.rewardInfos.length)
                    for (var i = 0; i < message.rewardInfos.length; ++i)
                        $root.vixen.parser.RaydiumPositionRewardInfoProto.encode(message.rewardInfos[i], writer.uint32(90).fork()).ldelim();
                if (message.recentEpoch != null && Object.hasOwnProperty.call(message, "recentEpoch"))
                    writer.uint32(96).uint64(message.recentEpoch);
                if (message.padding != null && message.padding.length) {
                    writer.uint32(106).fork();
                    for (var i = 0; i < message.padding.length; ++i)
                        writer.uint64(message.padding[i]);
                    writer.ldelim();
                }
                return writer;
            };

            PersonalPositionStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            PersonalPositionStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.PersonalPositionStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.bump = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.nftMint = reader.string();
                            break;
                        }
                    case 3: {
                            message.poolId = reader.string();
                            break;
                        }
                    case 4: {
                            message.tickLowerIndex = reader.int32();
                            break;
                        }
                    case 5: {
                            message.tickUpperIndex = reader.int32();
                            break;
                        }
                    case 6: {
                            message.liquidity = reader.string();
                            break;
                        }
                    case 7: {
                            message.feeGrowthInside_0LastX64 = reader.string();
                            break;
                        }
                    case 8: {
                            message.feeGrowthInside_1LastX64 = reader.string();
                            break;
                        }
                    case 9: {
                            message.tokenFeesOwed_0 = reader.uint64();
                            break;
                        }
                    case 10: {
                            message.tokenFeesOwed_1 = reader.uint64();
                            break;
                        }
                    case 11: {
                            if (!(message.rewardInfos && message.rewardInfos.length))
                                message.rewardInfos = [];
                            message.rewardInfos.push($root.vixen.parser.RaydiumPositionRewardInfoProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 12: {
                            message.recentEpoch = reader.uint64();
                            break;
                        }
                    case 13: {
                            if (!(message.padding && message.padding.length))
                                message.padding = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.padding.push(reader.uint64());
                            } else
                                message.padding.push(reader.uint64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            PersonalPositionStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            PersonalPositionStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bump != null && message.hasOwnProperty("bump"))
                    if (!$util.isInteger(message.bump))
                        return "bump: integer expected";
                if (message.nftMint != null && message.hasOwnProperty("nftMint"))
                    if (!$util.isString(message.nftMint))
                        return "nftMint: string expected";
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    if (!$util.isString(message.poolId))
                        return "poolId: string expected";
                if (message.tickLowerIndex != null && message.hasOwnProperty("tickLowerIndex"))
                    if (!$util.isInteger(message.tickLowerIndex))
                        return "tickLowerIndex: integer expected";
                if (message.tickUpperIndex != null && message.hasOwnProperty("tickUpperIndex"))
                    if (!$util.isInteger(message.tickUpperIndex))
                        return "tickUpperIndex: integer expected";
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    if (!$util.isString(message.liquidity))
                        return "liquidity: string expected";
                if (message.feeGrowthInside_0LastX64 != null && message.hasOwnProperty("feeGrowthInside_0LastX64"))
                    if (!$util.isString(message.feeGrowthInside_0LastX64))
                        return "feeGrowthInside_0LastX64: string expected";
                if (message.feeGrowthInside_1LastX64 != null && message.hasOwnProperty("feeGrowthInside_1LastX64"))
                    if (!$util.isString(message.feeGrowthInside_1LastX64))
                        return "feeGrowthInside_1LastX64: string expected";
                if (message.tokenFeesOwed_0 != null && message.hasOwnProperty("tokenFeesOwed_0"))
                    if (!$util.isInteger(message.tokenFeesOwed_0) && !(message.tokenFeesOwed_0 && $util.isInteger(message.tokenFeesOwed_0.low) && $util.isInteger(message.tokenFeesOwed_0.high)))
                        return "tokenFeesOwed_0: integer|Long expected";
                if (message.tokenFeesOwed_1 != null && message.hasOwnProperty("tokenFeesOwed_1"))
                    if (!$util.isInteger(message.tokenFeesOwed_1) && !(message.tokenFeesOwed_1 && $util.isInteger(message.tokenFeesOwed_1.low) && $util.isInteger(message.tokenFeesOwed_1.high)))
                        return "tokenFeesOwed_1: integer|Long expected";
                if (message.rewardInfos != null && message.hasOwnProperty("rewardInfos")) {
                    if (!Array.isArray(message.rewardInfos))
                        return "rewardInfos: array expected";
                    for (var i = 0; i < message.rewardInfos.length; ++i) {
                        var error = $root.vixen.parser.RaydiumPositionRewardInfoProto.verify(message.rewardInfos[i]);
                        if (error)
                            return "rewardInfos." + error;
                    }
                }
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (!$util.isInteger(message.recentEpoch) && !(message.recentEpoch && $util.isInteger(message.recentEpoch.low) && $util.isInteger(message.recentEpoch.high)))
                        return "recentEpoch: integer|Long expected";
                if (message.padding != null && message.hasOwnProperty("padding")) {
                    if (!Array.isArray(message.padding))
                        return "padding: array expected";
                    for (var i = 0; i < message.padding.length; ++i)
                        if (!$util.isInteger(message.padding[i]) && !(message.padding[i] && $util.isInteger(message.padding[i].low) && $util.isInteger(message.padding[i].high)))
                            return "padding: integer|Long[] expected";
                }
                return null;
            };

            PersonalPositionStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.PersonalPositionStateProto)
                    return object;
                var message = new $root.vixen.parser.PersonalPositionStateProto();
                if (object.bump != null)
                    message.bump = object.bump >>> 0;
                if (object.nftMint != null)
                    message.nftMint = String(object.nftMint);
                if (object.poolId != null)
                    message.poolId = String(object.poolId);
                if (object.tickLowerIndex != null)
                    message.tickLowerIndex = object.tickLowerIndex | 0;
                if (object.tickUpperIndex != null)
                    message.tickUpperIndex = object.tickUpperIndex | 0;
                if (object.liquidity != null)
                    message.liquidity = String(object.liquidity);
                if (object.feeGrowthInside_0LastX64 != null)
                    message.feeGrowthInside_0LastX64 = String(object.feeGrowthInside_0LastX64);
                if (object.feeGrowthInside_1LastX64 != null)
                    message.feeGrowthInside_1LastX64 = String(object.feeGrowthInside_1LastX64);
                if (object.tokenFeesOwed_0 != null)
                    if ($util.Long)
                        (message.tokenFeesOwed_0 = $util.Long.fromValue(object.tokenFeesOwed_0)).unsigned = true;
                    else if (typeof object.tokenFeesOwed_0 === "string")
                        message.tokenFeesOwed_0 = parseInt(object.tokenFeesOwed_0, 10);
                    else if (typeof object.tokenFeesOwed_0 === "number")
                        message.tokenFeesOwed_0 = object.tokenFeesOwed_0;
                    else if (typeof object.tokenFeesOwed_0 === "object")
                        message.tokenFeesOwed_0 = new $util.LongBits(object.tokenFeesOwed_0.low >>> 0, object.tokenFeesOwed_0.high >>> 0).toNumber(true);
                if (object.tokenFeesOwed_1 != null)
                    if ($util.Long)
                        (message.tokenFeesOwed_1 = $util.Long.fromValue(object.tokenFeesOwed_1)).unsigned = true;
                    else if (typeof object.tokenFeesOwed_1 === "string")
                        message.tokenFeesOwed_1 = parseInt(object.tokenFeesOwed_1, 10);
                    else if (typeof object.tokenFeesOwed_1 === "number")
                        message.tokenFeesOwed_1 = object.tokenFeesOwed_1;
                    else if (typeof object.tokenFeesOwed_1 === "object")
                        message.tokenFeesOwed_1 = new $util.LongBits(object.tokenFeesOwed_1.low >>> 0, object.tokenFeesOwed_1.high >>> 0).toNumber(true);
                if (object.rewardInfos) {
                    if (!Array.isArray(object.rewardInfos))
                        throw TypeError(".vixen.parser.PersonalPositionStateProto.rewardInfos: array expected");
                    message.rewardInfos = [];
                    for (var i = 0; i < object.rewardInfos.length; ++i) {
                        if (typeof object.rewardInfos[i] !== "object")
                            throw TypeError(".vixen.parser.PersonalPositionStateProto.rewardInfos: object expected");
                        message.rewardInfos[i] = $root.vixen.parser.RaydiumPositionRewardInfoProto.fromObject(object.rewardInfos[i]);
                    }
                }
                if (object.recentEpoch != null)
                    if ($util.Long)
                        (message.recentEpoch = $util.Long.fromValue(object.recentEpoch)).unsigned = true;
                    else if (typeof object.recentEpoch === "string")
                        message.recentEpoch = parseInt(object.recentEpoch, 10);
                    else if (typeof object.recentEpoch === "number")
                        message.recentEpoch = object.recentEpoch;
                    else if (typeof object.recentEpoch === "object")
                        message.recentEpoch = new $util.LongBits(object.recentEpoch.low >>> 0, object.recentEpoch.high >>> 0).toNumber(true);
                if (object.padding) {
                    if (!Array.isArray(object.padding))
                        throw TypeError(".vixen.parser.PersonalPositionStateProto.padding: array expected");
                    message.padding = [];
                    for (var i = 0; i < object.padding.length; ++i)
                        if ($util.Long)
                            (message.padding[i] = $util.Long.fromValue(object.padding[i])).unsigned = true;
                        else if (typeof object.padding[i] === "string")
                            message.padding[i] = parseInt(object.padding[i], 10);
                        else if (typeof object.padding[i] === "number")
                            message.padding[i] = object.padding[i];
                        else if (typeof object.padding[i] === "object")
                            message.padding[i] = new $util.LongBits(object.padding[i].low >>> 0, object.padding[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            PersonalPositionStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.rewardInfos = [];
                    object.padding = [];
                }
                if (options.defaults) {
                    object.bump = 0;
                    object.nftMint = "";
                    object.poolId = "";
                    object.tickLowerIndex = 0;
                    object.tickUpperIndex = 0;
                    object.liquidity = "";
                    object.feeGrowthInside_0LastX64 = "";
                    object.feeGrowthInside_1LastX64 = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.tokenFeesOwed_0 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.tokenFeesOwed_0 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.tokenFeesOwed_1 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.tokenFeesOwed_1 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.recentEpoch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.recentEpoch = options.longs === String ? "0" : 0;
                }
                if (message.bump != null && message.hasOwnProperty("bump"))
                    object.bump = message.bump;
                if (message.nftMint != null && message.hasOwnProperty("nftMint"))
                    object.nftMint = message.nftMint;
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    object.poolId = message.poolId;
                if (message.tickLowerIndex != null && message.hasOwnProperty("tickLowerIndex"))
                    object.tickLowerIndex = message.tickLowerIndex;
                if (message.tickUpperIndex != null && message.hasOwnProperty("tickUpperIndex"))
                    object.tickUpperIndex = message.tickUpperIndex;
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    object.liquidity = message.liquidity;
                if (message.feeGrowthInside_0LastX64 != null && message.hasOwnProperty("feeGrowthInside_0LastX64"))
                    object.feeGrowthInside_0LastX64 = message.feeGrowthInside_0LastX64;
                if (message.feeGrowthInside_1LastX64 != null && message.hasOwnProperty("feeGrowthInside_1LastX64"))
                    object.feeGrowthInside_1LastX64 = message.feeGrowthInside_1LastX64;
                if (message.tokenFeesOwed_0 != null && message.hasOwnProperty("tokenFeesOwed_0"))
                    if (typeof message.tokenFeesOwed_0 === "number")
                        object.tokenFeesOwed_0 = options.longs === String ? String(message.tokenFeesOwed_0) : message.tokenFeesOwed_0;
                    else
                        object.tokenFeesOwed_0 = options.longs === String ? $util.Long.prototype.toString.call(message.tokenFeesOwed_0) : options.longs === Number ? new $util.LongBits(message.tokenFeesOwed_0.low >>> 0, message.tokenFeesOwed_0.high >>> 0).toNumber(true) : message.tokenFeesOwed_0;
                if (message.tokenFeesOwed_1 != null && message.hasOwnProperty("tokenFeesOwed_1"))
                    if (typeof message.tokenFeesOwed_1 === "number")
                        object.tokenFeesOwed_1 = options.longs === String ? String(message.tokenFeesOwed_1) : message.tokenFeesOwed_1;
                    else
                        object.tokenFeesOwed_1 = options.longs === String ? $util.Long.prototype.toString.call(message.tokenFeesOwed_1) : options.longs === Number ? new $util.LongBits(message.tokenFeesOwed_1.low >>> 0, message.tokenFeesOwed_1.high >>> 0).toNumber(true) : message.tokenFeesOwed_1;
                if (message.rewardInfos && message.rewardInfos.length) {
                    object.rewardInfos = [];
                    for (var j = 0; j < message.rewardInfos.length; ++j)
                        object.rewardInfos[j] = $root.vixen.parser.RaydiumPositionRewardInfoProto.toObject(message.rewardInfos[j], options);
                }
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (typeof message.recentEpoch === "number")
                        object.recentEpoch = options.longs === String ? String(message.recentEpoch) : message.recentEpoch;
                    else
                        object.recentEpoch = options.longs === String ? $util.Long.prototype.toString.call(message.recentEpoch) : options.longs === Number ? new $util.LongBits(message.recentEpoch.low >>> 0, message.recentEpoch.high >>> 0).toNumber(true) : message.recentEpoch;
                if (message.padding && message.padding.length) {
                    object.padding = [];
                    for (var j = 0; j < message.padding.length; ++j)
                        if (typeof message.padding[j] === "number")
                            object.padding[j] = options.longs === String ? String(message.padding[j]) : message.padding[j];
                        else
                            object.padding[j] = options.longs === String ? $util.Long.prototype.toString.call(message.padding[j]) : options.longs === Number ? new $util.LongBits(message.padding[j].low >>> 0, message.padding[j].high >>> 0).toNumber(true) : message.padding[j];
                }
                return object;
            };

            PersonalPositionStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            PersonalPositionStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.PersonalPositionStateProto";
            };

            return PersonalPositionStateProto;
        })();

        parser.RewardInfoProto = (function() {

            function RewardInfoProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RewardInfoProto.prototype.rewardState = 0;
            RewardInfoProto.prototype.openTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            RewardInfoProto.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            RewardInfoProto.prototype.lastUpdateTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            RewardInfoProto.prototype.emissionsPerSecondX64 = "";
            RewardInfoProto.prototype.rewardTotalEmissioned = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            RewardInfoProto.prototype.rewardClaimed = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            RewardInfoProto.prototype.tokenMint = "";
            RewardInfoProto.prototype.tokenVault = "";
            RewardInfoProto.prototype.authority = "";
            RewardInfoProto.prototype.rewardGrowthGlobalX64 = "";

            RewardInfoProto.create = function create(properties) {
                return new RewardInfoProto(properties);
            };

            RewardInfoProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rewardState != null && Object.hasOwnProperty.call(message, "rewardState"))
                    writer.uint32(8).uint32(message.rewardState);
                if (message.openTime != null && Object.hasOwnProperty.call(message, "openTime"))
                    writer.uint32(16).uint64(message.openTime);
                if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                    writer.uint32(24).uint64(message.endTime);
                if (message.lastUpdateTime != null && Object.hasOwnProperty.call(message, "lastUpdateTime"))
                    writer.uint32(32).uint64(message.lastUpdateTime);
                if (message.emissionsPerSecondX64 != null && Object.hasOwnProperty.call(message, "emissionsPerSecondX64"))
                    writer.uint32(42).string(message.emissionsPerSecondX64);
                if (message.rewardTotalEmissioned != null && Object.hasOwnProperty.call(message, "rewardTotalEmissioned"))
                    writer.uint32(48).uint64(message.rewardTotalEmissioned);
                if (message.rewardClaimed != null && Object.hasOwnProperty.call(message, "rewardClaimed"))
                    writer.uint32(56).uint64(message.rewardClaimed);
                if (message.tokenMint != null && Object.hasOwnProperty.call(message, "tokenMint"))
                    writer.uint32(66).string(message.tokenMint);
                if (message.tokenVault != null && Object.hasOwnProperty.call(message, "tokenVault"))
                    writer.uint32(74).string(message.tokenVault);
                if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                    writer.uint32(82).string(message.authority);
                if (message.rewardGrowthGlobalX64 != null && Object.hasOwnProperty.call(message, "rewardGrowthGlobalX64"))
                    writer.uint32(90).string(message.rewardGrowthGlobalX64);
                return writer;
            };

            RewardInfoProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RewardInfoProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RewardInfoProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.rewardState = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.openTime = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.endTime = reader.uint64();
                            break;
                        }
                    case 4: {
                            message.lastUpdateTime = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.emissionsPerSecondX64 = reader.string();
                            break;
                        }
                    case 6: {
                            message.rewardTotalEmissioned = reader.uint64();
                            break;
                        }
                    case 7: {
                            message.rewardClaimed = reader.uint64();
                            break;
                        }
                    case 8: {
                            message.tokenMint = reader.string();
                            break;
                        }
                    case 9: {
                            message.tokenVault = reader.string();
                            break;
                        }
                    case 10: {
                            message.authority = reader.string();
                            break;
                        }
                    case 11: {
                            message.rewardGrowthGlobalX64 = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RewardInfoProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RewardInfoProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rewardState != null && message.hasOwnProperty("rewardState"))
                    if (!$util.isInteger(message.rewardState))
                        return "rewardState: integer expected";
                if (message.openTime != null && message.hasOwnProperty("openTime"))
                    if (!$util.isInteger(message.openTime) && !(message.openTime && $util.isInteger(message.openTime.low) && $util.isInteger(message.openTime.high)))
                        return "openTime: integer|Long expected";
                if (message.endTime != null && message.hasOwnProperty("endTime"))
                    if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))
                        return "endTime: integer|Long expected";
                if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime"))
                    if (!$util.isInteger(message.lastUpdateTime) && !(message.lastUpdateTime && $util.isInteger(message.lastUpdateTime.low) && $util.isInteger(message.lastUpdateTime.high)))
                        return "lastUpdateTime: integer|Long expected";
                if (message.emissionsPerSecondX64 != null && message.hasOwnProperty("emissionsPerSecondX64"))
                    if (!$util.isString(message.emissionsPerSecondX64))
                        return "emissionsPerSecondX64: string expected";
                if (message.rewardTotalEmissioned != null && message.hasOwnProperty("rewardTotalEmissioned"))
                    if (!$util.isInteger(message.rewardTotalEmissioned) && !(message.rewardTotalEmissioned && $util.isInteger(message.rewardTotalEmissioned.low) && $util.isInteger(message.rewardTotalEmissioned.high)))
                        return "rewardTotalEmissioned: integer|Long expected";
                if (message.rewardClaimed != null && message.hasOwnProperty("rewardClaimed"))
                    if (!$util.isInteger(message.rewardClaimed) && !(message.rewardClaimed && $util.isInteger(message.rewardClaimed.low) && $util.isInteger(message.rewardClaimed.high)))
                        return "rewardClaimed: integer|Long expected";
                if (message.tokenMint != null && message.hasOwnProperty("tokenMint"))
                    if (!$util.isString(message.tokenMint))
                        return "tokenMint: string expected";
                if (message.tokenVault != null && message.hasOwnProperty("tokenVault"))
                    if (!$util.isString(message.tokenVault))
                        return "tokenVault: string expected";
                if (message.authority != null && message.hasOwnProperty("authority"))
                    if (!$util.isString(message.authority))
                        return "authority: string expected";
                if (message.rewardGrowthGlobalX64 != null && message.hasOwnProperty("rewardGrowthGlobalX64"))
                    if (!$util.isString(message.rewardGrowthGlobalX64))
                        return "rewardGrowthGlobalX64: string expected";
                return null;
            };

            RewardInfoProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RewardInfoProto)
                    return object;
                var message = new $root.vixen.parser.RewardInfoProto();
                if (object.rewardState != null)
                    message.rewardState = object.rewardState >>> 0;
                if (object.openTime != null)
                    if ($util.Long)
                        (message.openTime = $util.Long.fromValue(object.openTime)).unsigned = true;
                    else if (typeof object.openTime === "string")
                        message.openTime = parseInt(object.openTime, 10);
                    else if (typeof object.openTime === "number")
                        message.openTime = object.openTime;
                    else if (typeof object.openTime === "object")
                        message.openTime = new $util.LongBits(object.openTime.low >>> 0, object.openTime.high >>> 0).toNumber(true);
                if (object.endTime != null)
                    if ($util.Long)
                        (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = true;
                    else if (typeof object.endTime === "string")
                        message.endTime = parseInt(object.endTime, 10);
                    else if (typeof object.endTime === "number")
                        message.endTime = object.endTime;
                    else if (typeof object.endTime === "object")
                        message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber(true);
                if (object.lastUpdateTime != null)
                    if ($util.Long)
                        (message.lastUpdateTime = $util.Long.fromValue(object.lastUpdateTime)).unsigned = true;
                    else if (typeof object.lastUpdateTime === "string")
                        message.lastUpdateTime = parseInt(object.lastUpdateTime, 10);
                    else if (typeof object.lastUpdateTime === "number")
                        message.lastUpdateTime = object.lastUpdateTime;
                    else if (typeof object.lastUpdateTime === "object")
                        message.lastUpdateTime = new $util.LongBits(object.lastUpdateTime.low >>> 0, object.lastUpdateTime.high >>> 0).toNumber(true);
                if (object.emissionsPerSecondX64 != null)
                    message.emissionsPerSecondX64 = String(object.emissionsPerSecondX64);
                if (object.rewardTotalEmissioned != null)
                    if ($util.Long)
                        (message.rewardTotalEmissioned = $util.Long.fromValue(object.rewardTotalEmissioned)).unsigned = true;
                    else if (typeof object.rewardTotalEmissioned === "string")
                        message.rewardTotalEmissioned = parseInt(object.rewardTotalEmissioned, 10);
                    else if (typeof object.rewardTotalEmissioned === "number")
                        message.rewardTotalEmissioned = object.rewardTotalEmissioned;
                    else if (typeof object.rewardTotalEmissioned === "object")
                        message.rewardTotalEmissioned = new $util.LongBits(object.rewardTotalEmissioned.low >>> 0, object.rewardTotalEmissioned.high >>> 0).toNumber(true);
                if (object.rewardClaimed != null)
                    if ($util.Long)
                        (message.rewardClaimed = $util.Long.fromValue(object.rewardClaimed)).unsigned = true;
                    else if (typeof object.rewardClaimed === "string")
                        message.rewardClaimed = parseInt(object.rewardClaimed, 10);
                    else if (typeof object.rewardClaimed === "number")
                        message.rewardClaimed = object.rewardClaimed;
                    else if (typeof object.rewardClaimed === "object")
                        message.rewardClaimed = new $util.LongBits(object.rewardClaimed.low >>> 0, object.rewardClaimed.high >>> 0).toNumber(true);
                if (object.tokenMint != null)
                    message.tokenMint = String(object.tokenMint);
                if (object.tokenVault != null)
                    message.tokenVault = String(object.tokenVault);
                if (object.authority != null)
                    message.authority = String(object.authority);
                if (object.rewardGrowthGlobalX64 != null)
                    message.rewardGrowthGlobalX64 = String(object.rewardGrowthGlobalX64);
                return message;
            };

            RewardInfoProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.rewardState = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.openTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.openTime = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.endTime = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.lastUpdateTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.lastUpdateTime = options.longs === String ? "0" : 0;
                    object.emissionsPerSecondX64 = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.rewardTotalEmissioned = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.rewardTotalEmissioned = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.rewardClaimed = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.rewardClaimed = options.longs === String ? "0" : 0;
                    object.tokenMint = "";
                    object.tokenVault = "";
                    object.authority = "";
                    object.rewardGrowthGlobalX64 = "";
                }
                if (message.rewardState != null && message.hasOwnProperty("rewardState"))
                    object.rewardState = message.rewardState;
                if (message.openTime != null && message.hasOwnProperty("openTime"))
                    if (typeof message.openTime === "number")
                        object.openTime = options.longs === String ? String(message.openTime) : message.openTime;
                    else
                        object.openTime = options.longs === String ? $util.Long.prototype.toString.call(message.openTime) : options.longs === Number ? new $util.LongBits(message.openTime.low >>> 0, message.openTime.high >>> 0).toNumber(true) : message.openTime;
                if (message.endTime != null && message.hasOwnProperty("endTime"))
                    if (typeof message.endTime === "number")
                        object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
                    else
                        object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;
                if (message.lastUpdateTime != null && message.hasOwnProperty("lastUpdateTime"))
                    if (typeof message.lastUpdateTime === "number")
                        object.lastUpdateTime = options.longs === String ? String(message.lastUpdateTime) : message.lastUpdateTime;
                    else
                        object.lastUpdateTime = options.longs === String ? $util.Long.prototype.toString.call(message.lastUpdateTime) : options.longs === Number ? new $util.LongBits(message.lastUpdateTime.low >>> 0, message.lastUpdateTime.high >>> 0).toNumber(true) : message.lastUpdateTime;
                if (message.emissionsPerSecondX64 != null && message.hasOwnProperty("emissionsPerSecondX64"))
                    object.emissionsPerSecondX64 = message.emissionsPerSecondX64;
                if (message.rewardTotalEmissioned != null && message.hasOwnProperty("rewardTotalEmissioned"))
                    if (typeof message.rewardTotalEmissioned === "number")
                        object.rewardTotalEmissioned = options.longs === String ? String(message.rewardTotalEmissioned) : message.rewardTotalEmissioned;
                    else
                        object.rewardTotalEmissioned = options.longs === String ? $util.Long.prototype.toString.call(message.rewardTotalEmissioned) : options.longs === Number ? new $util.LongBits(message.rewardTotalEmissioned.low >>> 0, message.rewardTotalEmissioned.high >>> 0).toNumber(true) : message.rewardTotalEmissioned;
                if (message.rewardClaimed != null && message.hasOwnProperty("rewardClaimed"))
                    if (typeof message.rewardClaimed === "number")
                        object.rewardClaimed = options.longs === String ? String(message.rewardClaimed) : message.rewardClaimed;
                    else
                        object.rewardClaimed = options.longs === String ? $util.Long.prototype.toString.call(message.rewardClaimed) : options.longs === Number ? new $util.LongBits(message.rewardClaimed.low >>> 0, message.rewardClaimed.high >>> 0).toNumber(true) : message.rewardClaimed;
                if (message.tokenMint != null && message.hasOwnProperty("tokenMint"))
                    object.tokenMint = message.tokenMint;
                if (message.tokenVault != null && message.hasOwnProperty("tokenVault"))
                    object.tokenVault = message.tokenVault;
                if (message.authority != null && message.hasOwnProperty("authority"))
                    object.authority = message.authority;
                if (message.rewardGrowthGlobalX64 != null && message.hasOwnProperty("rewardGrowthGlobalX64"))
                    object.rewardGrowthGlobalX64 = message.rewardGrowthGlobalX64;
                return object;
            };

            RewardInfoProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RewardInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RewardInfoProto";
            };

            return RewardInfoProto;
        })();

        parser.PoolStateProto = (function() {

            function PoolStateProto(properties) {
                this.rewardInfos = [];
                this.tickArrayBitmap = [];
                this.padding1 = [];
                this.padding2 = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            PoolStateProto.prototype.bump = 0;
            PoolStateProto.prototype.ammConfig = "";
            PoolStateProto.prototype.owner = "";
            PoolStateProto.prototype.tokenMint_0 = "";
            PoolStateProto.prototype.tokenMint_1 = "";
            PoolStateProto.prototype.tokenVault_0 = "";
            PoolStateProto.prototype.tokenVault_1 = "";
            PoolStateProto.prototype.observationKey = "";
            PoolStateProto.prototype.mintDecimals_0 = 0;
            PoolStateProto.prototype.mintDecimals_1 = 0;
            PoolStateProto.prototype.tickSpacing = 0;
            PoolStateProto.prototype.liquidity = "";
            PoolStateProto.prototype.sqrtPriceX64 = "";
            PoolStateProto.prototype.tickCurrent = 0;
            PoolStateProto.prototype.padding3 = 0;
            PoolStateProto.prototype.padding4 = 0;
            PoolStateProto.prototype.feeGrowthGlobal_0X64 = "";
            PoolStateProto.prototype.feeGrowthGlobal_1X64 = "";
            PoolStateProto.prototype.protocolFeesToken_0 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.protocolFeesToken_1 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.swapInAmountToken_0 = "";
            PoolStateProto.prototype.swapOutAmountToken_1 = "";
            PoolStateProto.prototype.swapInAmountToken_1 = "";
            PoolStateProto.prototype.swapOutAmountToken_0 = "";
            PoolStateProto.prototype.status = 0;
            PoolStateProto.prototype.padding = $util.newBuffer([]);
            PoolStateProto.prototype.rewardInfos = $util.emptyArray;
            PoolStateProto.prototype.tickArrayBitmap = $util.emptyArray;
            PoolStateProto.prototype.totalFeesToken_0 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.totalFeesClaimedToken_0 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.totalFeesToken_1 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.totalFeesClaimedToken_1 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.fundFeesToken_0 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.fundFeesToken_1 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.openTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.recentEpoch = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            PoolStateProto.prototype.padding1 = $util.emptyArray;
            PoolStateProto.prototype.padding2 = $util.emptyArray;

            PoolStateProto.create = function create(properties) {
                return new PoolStateProto(properties);
            };

            PoolStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bump != null && Object.hasOwnProperty.call(message, "bump"))
                    writer.uint32(8).uint32(message.bump);
                if (message.ammConfig != null && Object.hasOwnProperty.call(message, "ammConfig"))
                    writer.uint32(18).string(message.ammConfig);
                if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                    writer.uint32(26).string(message.owner);
                if (message.tokenMint_0 != null && Object.hasOwnProperty.call(message, "tokenMint_0"))
                    writer.uint32(34).string(message.tokenMint_0);
                if (message.tokenMint_1 != null && Object.hasOwnProperty.call(message, "tokenMint_1"))
                    writer.uint32(42).string(message.tokenMint_1);
                if (message.tokenVault_0 != null && Object.hasOwnProperty.call(message, "tokenVault_0"))
                    writer.uint32(50).string(message.tokenVault_0);
                if (message.tokenVault_1 != null && Object.hasOwnProperty.call(message, "tokenVault_1"))
                    writer.uint32(58).string(message.tokenVault_1);
                if (message.observationKey != null && Object.hasOwnProperty.call(message, "observationKey"))
                    writer.uint32(66).string(message.observationKey);
                if (message.mintDecimals_0 != null && Object.hasOwnProperty.call(message, "mintDecimals_0"))
                    writer.uint32(72).uint32(message.mintDecimals_0);
                if (message.mintDecimals_1 != null && Object.hasOwnProperty.call(message, "mintDecimals_1"))
                    writer.uint32(80).uint32(message.mintDecimals_1);
                if (message.tickSpacing != null && Object.hasOwnProperty.call(message, "tickSpacing"))
                    writer.uint32(88).uint32(message.tickSpacing);
                if (message.liquidity != null && Object.hasOwnProperty.call(message, "liquidity"))
                    writer.uint32(98).string(message.liquidity);
                if (message.sqrtPriceX64 != null && Object.hasOwnProperty.call(message, "sqrtPriceX64"))
                    writer.uint32(106).string(message.sqrtPriceX64);
                if (message.tickCurrent != null && Object.hasOwnProperty.call(message, "tickCurrent"))
                    writer.uint32(112).int32(message.tickCurrent);
                if (message.padding3 != null && Object.hasOwnProperty.call(message, "padding3"))
                    writer.uint32(120).uint32(message.padding3);
                if (message.padding4 != null && Object.hasOwnProperty.call(message, "padding4"))
                    writer.uint32(128).uint32(message.padding4);
                if (message.feeGrowthGlobal_0X64 != null && Object.hasOwnProperty.call(message, "feeGrowthGlobal_0X64"))
                    writer.uint32(138).string(message.feeGrowthGlobal_0X64);
                if (message.feeGrowthGlobal_1X64 != null && Object.hasOwnProperty.call(message, "feeGrowthGlobal_1X64"))
                    writer.uint32(146).string(message.feeGrowthGlobal_1X64);
                if (message.protocolFeesToken_0 != null && Object.hasOwnProperty.call(message, "protocolFeesToken_0"))
                    writer.uint32(152).uint64(message.protocolFeesToken_0);
                if (message.protocolFeesToken_1 != null && Object.hasOwnProperty.call(message, "protocolFeesToken_1"))
                    writer.uint32(160).uint64(message.protocolFeesToken_1);
                if (message.swapInAmountToken_0 != null && Object.hasOwnProperty.call(message, "swapInAmountToken_0"))
                    writer.uint32(170).string(message.swapInAmountToken_0);
                if (message.swapOutAmountToken_1 != null && Object.hasOwnProperty.call(message, "swapOutAmountToken_1"))
                    writer.uint32(178).string(message.swapOutAmountToken_1);
                if (message.swapInAmountToken_1 != null && Object.hasOwnProperty.call(message, "swapInAmountToken_1"))
                    writer.uint32(186).string(message.swapInAmountToken_1);
                if (message.swapOutAmountToken_0 != null && Object.hasOwnProperty.call(message, "swapOutAmountToken_0"))
                    writer.uint32(194).string(message.swapOutAmountToken_0);
                if (message.status != null && Object.hasOwnProperty.call(message, "status"))
                    writer.uint32(200).uint32(message.status);
                if (message.padding != null && Object.hasOwnProperty.call(message, "padding"))
                    writer.uint32(210).bytes(message.padding);
                if (message.rewardInfos != null && message.rewardInfos.length)
                    for (var i = 0; i < message.rewardInfos.length; ++i)
                        $root.vixen.parser.RewardInfoProto.encode(message.rewardInfos[i], writer.uint32(218).fork()).ldelim();
                if (message.tickArrayBitmap != null && message.tickArrayBitmap.length) {
                    writer.uint32(226).fork();
                    for (var i = 0; i < message.tickArrayBitmap.length; ++i)
                        writer.uint64(message.tickArrayBitmap[i]);
                    writer.ldelim();
                }
                if (message.totalFeesToken_0 != null && Object.hasOwnProperty.call(message, "totalFeesToken_0"))
                    writer.uint32(232).uint64(message.totalFeesToken_0);
                if (message.totalFeesClaimedToken_0 != null && Object.hasOwnProperty.call(message, "totalFeesClaimedToken_0"))
                    writer.uint32(240).uint64(message.totalFeesClaimedToken_0);
                if (message.totalFeesToken_1 != null && Object.hasOwnProperty.call(message, "totalFeesToken_1"))
                    writer.uint32(248).uint64(message.totalFeesToken_1);
                if (message.totalFeesClaimedToken_1 != null && Object.hasOwnProperty.call(message, "totalFeesClaimedToken_1"))
                    writer.uint32(256).uint64(message.totalFeesClaimedToken_1);
                if (message.fundFeesToken_0 != null && Object.hasOwnProperty.call(message, "fundFeesToken_0"))
                    writer.uint32(264).uint64(message.fundFeesToken_0);
                if (message.fundFeesToken_1 != null && Object.hasOwnProperty.call(message, "fundFeesToken_1"))
                    writer.uint32(272).uint64(message.fundFeesToken_1);
                if (message.openTime != null && Object.hasOwnProperty.call(message, "openTime"))
                    writer.uint32(280).uint64(message.openTime);
                if (message.recentEpoch != null && Object.hasOwnProperty.call(message, "recentEpoch"))
                    writer.uint32(288).uint64(message.recentEpoch);
                if (message.padding1 != null && message.padding1.length) {
                    writer.uint32(298).fork();
                    for (var i = 0; i < message.padding1.length; ++i)
                        writer.uint64(message.padding1[i]);
                    writer.ldelim();
                }
                if (message.padding2 != null && message.padding2.length) {
                    writer.uint32(306).fork();
                    for (var i = 0; i < message.padding2.length; ++i)
                        writer.uint64(message.padding2[i]);
                    writer.ldelim();
                }
                return writer;
            };

            PoolStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            PoolStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.PoolStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.bump = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.ammConfig = reader.string();
                            break;
                        }
                    case 3: {
                            message.owner = reader.string();
                            break;
                        }
                    case 4: {
                            message.tokenMint_0 = reader.string();
                            break;
                        }
                    case 5: {
                            message.tokenMint_1 = reader.string();
                            break;
                        }
                    case 6: {
                            message.tokenVault_0 = reader.string();
                            break;
                        }
                    case 7: {
                            message.tokenVault_1 = reader.string();
                            break;
                        }
                    case 8: {
                            message.observationKey = reader.string();
                            break;
                        }
                    case 9: {
                            message.mintDecimals_0 = reader.uint32();
                            break;
                        }
                    case 10: {
                            message.mintDecimals_1 = reader.uint32();
                            break;
                        }
                    case 11: {
                            message.tickSpacing = reader.uint32();
                            break;
                        }
                    case 12: {
                            message.liquidity = reader.string();
                            break;
                        }
                    case 13: {
                            message.sqrtPriceX64 = reader.string();
                            break;
                        }
                    case 14: {
                            message.tickCurrent = reader.int32();
                            break;
                        }
                    case 15: {
                            message.padding3 = reader.uint32();
                            break;
                        }
                    case 16: {
                            message.padding4 = reader.uint32();
                            break;
                        }
                    case 17: {
                            message.feeGrowthGlobal_0X64 = reader.string();
                            break;
                        }
                    case 18: {
                            message.feeGrowthGlobal_1X64 = reader.string();
                            break;
                        }
                    case 19: {
                            message.protocolFeesToken_0 = reader.uint64();
                            break;
                        }
                    case 20: {
                            message.protocolFeesToken_1 = reader.uint64();
                            break;
                        }
                    case 21: {
                            message.swapInAmountToken_0 = reader.string();
                            break;
                        }
                    case 22: {
                            message.swapOutAmountToken_1 = reader.string();
                            break;
                        }
                    case 23: {
                            message.swapInAmountToken_1 = reader.string();
                            break;
                        }
                    case 24: {
                            message.swapOutAmountToken_0 = reader.string();
                            break;
                        }
                    case 25: {
                            message.status = reader.uint32();
                            break;
                        }
                    case 26: {
                            message.padding = reader.bytes();
                            break;
                        }
                    case 27: {
                            if (!(message.rewardInfos && message.rewardInfos.length))
                                message.rewardInfos = [];
                            message.rewardInfos.push($root.vixen.parser.RewardInfoProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 28: {
                            if (!(message.tickArrayBitmap && message.tickArrayBitmap.length))
                                message.tickArrayBitmap = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.tickArrayBitmap.push(reader.uint64());
                            } else
                                message.tickArrayBitmap.push(reader.uint64());
                            break;
                        }
                    case 29: {
                            message.totalFeesToken_0 = reader.uint64();
                            break;
                        }
                    case 30: {
                            message.totalFeesClaimedToken_0 = reader.uint64();
                            break;
                        }
                    case 31: {
                            message.totalFeesToken_1 = reader.uint64();
                            break;
                        }
                    case 32: {
                            message.totalFeesClaimedToken_1 = reader.uint64();
                            break;
                        }
                    case 33: {
                            message.fundFeesToken_0 = reader.uint64();
                            break;
                        }
                    case 34: {
                            message.fundFeesToken_1 = reader.uint64();
                            break;
                        }
                    case 35: {
                            message.openTime = reader.uint64();
                            break;
                        }
                    case 36: {
                            message.recentEpoch = reader.uint64();
                            break;
                        }
                    case 37: {
                            if (!(message.padding1 && message.padding1.length))
                                message.padding1 = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.padding1.push(reader.uint64());
                            } else
                                message.padding1.push(reader.uint64());
                            break;
                        }
                    case 38: {
                            if (!(message.padding2 && message.padding2.length))
                                message.padding2 = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.padding2.push(reader.uint64());
                            } else
                                message.padding2.push(reader.uint64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            PoolStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            PoolStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bump != null && message.hasOwnProperty("bump"))
                    if (!$util.isInteger(message.bump))
                        return "bump: integer expected";
                if (message.ammConfig != null && message.hasOwnProperty("ammConfig"))
                    if (!$util.isString(message.ammConfig))
                        return "ammConfig: string expected";
                if (message.owner != null && message.hasOwnProperty("owner"))
                    if (!$util.isString(message.owner))
                        return "owner: string expected";
                if (message.tokenMint_0 != null && message.hasOwnProperty("tokenMint_0"))
                    if (!$util.isString(message.tokenMint_0))
                        return "tokenMint_0: string expected";
                if (message.tokenMint_1 != null && message.hasOwnProperty("tokenMint_1"))
                    if (!$util.isString(message.tokenMint_1))
                        return "tokenMint_1: string expected";
                if (message.tokenVault_0 != null && message.hasOwnProperty("tokenVault_0"))
                    if (!$util.isString(message.tokenVault_0))
                        return "tokenVault_0: string expected";
                if (message.tokenVault_1 != null && message.hasOwnProperty("tokenVault_1"))
                    if (!$util.isString(message.tokenVault_1))
                        return "tokenVault_1: string expected";
                if (message.observationKey != null && message.hasOwnProperty("observationKey"))
                    if (!$util.isString(message.observationKey))
                        return "observationKey: string expected";
                if (message.mintDecimals_0 != null && message.hasOwnProperty("mintDecimals_0"))
                    if (!$util.isInteger(message.mintDecimals_0))
                        return "mintDecimals_0: integer expected";
                if (message.mintDecimals_1 != null && message.hasOwnProperty("mintDecimals_1"))
                    if (!$util.isInteger(message.mintDecimals_1))
                        return "mintDecimals_1: integer expected";
                if (message.tickSpacing != null && message.hasOwnProperty("tickSpacing"))
                    if (!$util.isInteger(message.tickSpacing))
                        return "tickSpacing: integer expected";
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    if (!$util.isString(message.liquidity))
                        return "liquidity: string expected";
                if (message.sqrtPriceX64 != null && message.hasOwnProperty("sqrtPriceX64"))
                    if (!$util.isString(message.sqrtPriceX64))
                        return "sqrtPriceX64: string expected";
                if (message.tickCurrent != null && message.hasOwnProperty("tickCurrent"))
                    if (!$util.isInteger(message.tickCurrent))
                        return "tickCurrent: integer expected";
                if (message.padding3 != null && message.hasOwnProperty("padding3"))
                    if (!$util.isInteger(message.padding3))
                        return "padding3: integer expected";
                if (message.padding4 != null && message.hasOwnProperty("padding4"))
                    if (!$util.isInteger(message.padding4))
                        return "padding4: integer expected";
                if (message.feeGrowthGlobal_0X64 != null && message.hasOwnProperty("feeGrowthGlobal_0X64"))
                    if (!$util.isString(message.feeGrowthGlobal_0X64))
                        return "feeGrowthGlobal_0X64: string expected";
                if (message.feeGrowthGlobal_1X64 != null && message.hasOwnProperty("feeGrowthGlobal_1X64"))
                    if (!$util.isString(message.feeGrowthGlobal_1X64))
                        return "feeGrowthGlobal_1X64: string expected";
                if (message.protocolFeesToken_0 != null && message.hasOwnProperty("protocolFeesToken_0"))
                    if (!$util.isInteger(message.protocolFeesToken_0) && !(message.protocolFeesToken_0 && $util.isInteger(message.protocolFeesToken_0.low) && $util.isInteger(message.protocolFeesToken_0.high)))
                        return "protocolFeesToken_0: integer|Long expected";
                if (message.protocolFeesToken_1 != null && message.hasOwnProperty("protocolFeesToken_1"))
                    if (!$util.isInteger(message.protocolFeesToken_1) && !(message.protocolFeesToken_1 && $util.isInteger(message.protocolFeesToken_1.low) && $util.isInteger(message.protocolFeesToken_1.high)))
                        return "protocolFeesToken_1: integer|Long expected";
                if (message.swapInAmountToken_0 != null && message.hasOwnProperty("swapInAmountToken_0"))
                    if (!$util.isString(message.swapInAmountToken_0))
                        return "swapInAmountToken_0: string expected";
                if (message.swapOutAmountToken_1 != null && message.hasOwnProperty("swapOutAmountToken_1"))
                    if (!$util.isString(message.swapOutAmountToken_1))
                        return "swapOutAmountToken_1: string expected";
                if (message.swapInAmountToken_1 != null && message.hasOwnProperty("swapInAmountToken_1"))
                    if (!$util.isString(message.swapInAmountToken_1))
                        return "swapInAmountToken_1: string expected";
                if (message.swapOutAmountToken_0 != null && message.hasOwnProperty("swapOutAmountToken_0"))
                    if (!$util.isString(message.swapOutAmountToken_0))
                        return "swapOutAmountToken_0: string expected";
                if (message.status != null && message.hasOwnProperty("status"))
                    if (!$util.isInteger(message.status))
                        return "status: integer expected";
                if (message.padding != null && message.hasOwnProperty("padding"))
                    if (!(message.padding && typeof message.padding.length === "number" || $util.isString(message.padding)))
                        return "padding: buffer expected";
                if (message.rewardInfos != null && message.hasOwnProperty("rewardInfos")) {
                    if (!Array.isArray(message.rewardInfos))
                        return "rewardInfos: array expected";
                    for (var i = 0; i < message.rewardInfos.length; ++i) {
                        var error = $root.vixen.parser.RewardInfoProto.verify(message.rewardInfos[i]);
                        if (error)
                            return "rewardInfos." + error;
                    }
                }
                if (message.tickArrayBitmap != null && message.hasOwnProperty("tickArrayBitmap")) {
                    if (!Array.isArray(message.tickArrayBitmap))
                        return "tickArrayBitmap: array expected";
                    for (var i = 0; i < message.tickArrayBitmap.length; ++i)
                        if (!$util.isInteger(message.tickArrayBitmap[i]) && !(message.tickArrayBitmap[i] && $util.isInteger(message.tickArrayBitmap[i].low) && $util.isInteger(message.tickArrayBitmap[i].high)))
                            return "tickArrayBitmap: integer|Long[] expected";
                }
                if (message.totalFeesToken_0 != null && message.hasOwnProperty("totalFeesToken_0"))
                    if (!$util.isInteger(message.totalFeesToken_0) && !(message.totalFeesToken_0 && $util.isInteger(message.totalFeesToken_0.low) && $util.isInteger(message.totalFeesToken_0.high)))
                        return "totalFeesToken_0: integer|Long expected";
                if (message.totalFeesClaimedToken_0 != null && message.hasOwnProperty("totalFeesClaimedToken_0"))
                    if (!$util.isInteger(message.totalFeesClaimedToken_0) && !(message.totalFeesClaimedToken_0 && $util.isInteger(message.totalFeesClaimedToken_0.low) && $util.isInteger(message.totalFeesClaimedToken_0.high)))
                        return "totalFeesClaimedToken_0: integer|Long expected";
                if (message.totalFeesToken_1 != null && message.hasOwnProperty("totalFeesToken_1"))
                    if (!$util.isInteger(message.totalFeesToken_1) && !(message.totalFeesToken_1 && $util.isInteger(message.totalFeesToken_1.low) && $util.isInteger(message.totalFeesToken_1.high)))
                        return "totalFeesToken_1: integer|Long expected";
                if (message.totalFeesClaimedToken_1 != null && message.hasOwnProperty("totalFeesClaimedToken_1"))
                    if (!$util.isInteger(message.totalFeesClaimedToken_1) && !(message.totalFeesClaimedToken_1 && $util.isInteger(message.totalFeesClaimedToken_1.low) && $util.isInteger(message.totalFeesClaimedToken_1.high)))
                        return "totalFeesClaimedToken_1: integer|Long expected";
                if (message.fundFeesToken_0 != null && message.hasOwnProperty("fundFeesToken_0"))
                    if (!$util.isInteger(message.fundFeesToken_0) && !(message.fundFeesToken_0 && $util.isInteger(message.fundFeesToken_0.low) && $util.isInteger(message.fundFeesToken_0.high)))
                        return "fundFeesToken_0: integer|Long expected";
                if (message.fundFeesToken_1 != null && message.hasOwnProperty("fundFeesToken_1"))
                    if (!$util.isInteger(message.fundFeesToken_1) && !(message.fundFeesToken_1 && $util.isInteger(message.fundFeesToken_1.low) && $util.isInteger(message.fundFeesToken_1.high)))
                        return "fundFeesToken_1: integer|Long expected";
                if (message.openTime != null && message.hasOwnProperty("openTime"))
                    if (!$util.isInteger(message.openTime) && !(message.openTime && $util.isInteger(message.openTime.low) && $util.isInteger(message.openTime.high)))
                        return "openTime: integer|Long expected";
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (!$util.isInteger(message.recentEpoch) && !(message.recentEpoch && $util.isInteger(message.recentEpoch.low) && $util.isInteger(message.recentEpoch.high)))
                        return "recentEpoch: integer|Long expected";
                if (message.padding1 != null && message.hasOwnProperty("padding1")) {
                    if (!Array.isArray(message.padding1))
                        return "padding1: array expected";
                    for (var i = 0; i < message.padding1.length; ++i)
                        if (!$util.isInteger(message.padding1[i]) && !(message.padding1[i] && $util.isInteger(message.padding1[i].low) && $util.isInteger(message.padding1[i].high)))
                            return "padding1: integer|Long[] expected";
                }
                if (message.padding2 != null && message.hasOwnProperty("padding2")) {
                    if (!Array.isArray(message.padding2))
                        return "padding2: array expected";
                    for (var i = 0; i < message.padding2.length; ++i)
                        if (!$util.isInteger(message.padding2[i]) && !(message.padding2[i] && $util.isInteger(message.padding2[i].low) && $util.isInteger(message.padding2[i].high)))
                            return "padding2: integer|Long[] expected";
                }
                return null;
            };

            PoolStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.PoolStateProto)
                    return object;
                var message = new $root.vixen.parser.PoolStateProto();
                if (object.bump != null)
                    message.bump = object.bump >>> 0;
                if (object.ammConfig != null)
                    message.ammConfig = String(object.ammConfig);
                if (object.owner != null)
                    message.owner = String(object.owner);
                if (object.tokenMint_0 != null)
                    message.tokenMint_0 = String(object.tokenMint_0);
                if (object.tokenMint_1 != null)
                    message.tokenMint_1 = String(object.tokenMint_1);
                if (object.tokenVault_0 != null)
                    message.tokenVault_0 = String(object.tokenVault_0);
                if (object.tokenVault_1 != null)
                    message.tokenVault_1 = String(object.tokenVault_1);
                if (object.observationKey != null)
                    message.observationKey = String(object.observationKey);
                if (object.mintDecimals_0 != null)
                    message.mintDecimals_0 = object.mintDecimals_0 >>> 0;
                if (object.mintDecimals_1 != null)
                    message.mintDecimals_1 = object.mintDecimals_1 >>> 0;
                if (object.tickSpacing != null)
                    message.tickSpacing = object.tickSpacing >>> 0;
                if (object.liquidity != null)
                    message.liquidity = String(object.liquidity);
                if (object.sqrtPriceX64 != null)
                    message.sqrtPriceX64 = String(object.sqrtPriceX64);
                if (object.tickCurrent != null)
                    message.tickCurrent = object.tickCurrent | 0;
                if (object.padding3 != null)
                    message.padding3 = object.padding3 >>> 0;
                if (object.padding4 != null)
                    message.padding4 = object.padding4 >>> 0;
                if (object.feeGrowthGlobal_0X64 != null)
                    message.feeGrowthGlobal_0X64 = String(object.feeGrowthGlobal_0X64);
                if (object.feeGrowthGlobal_1X64 != null)
                    message.feeGrowthGlobal_1X64 = String(object.feeGrowthGlobal_1X64);
                if (object.protocolFeesToken_0 != null)
                    if ($util.Long)
                        (message.protocolFeesToken_0 = $util.Long.fromValue(object.protocolFeesToken_0)).unsigned = true;
                    else if (typeof object.protocolFeesToken_0 === "string")
                        message.protocolFeesToken_0 = parseInt(object.protocolFeesToken_0, 10);
                    else if (typeof object.protocolFeesToken_0 === "number")
                        message.protocolFeesToken_0 = object.protocolFeesToken_0;
                    else if (typeof object.protocolFeesToken_0 === "object")
                        message.protocolFeesToken_0 = new $util.LongBits(object.protocolFeesToken_0.low >>> 0, object.protocolFeesToken_0.high >>> 0).toNumber(true);
                if (object.protocolFeesToken_1 != null)
                    if ($util.Long)
                        (message.protocolFeesToken_1 = $util.Long.fromValue(object.protocolFeesToken_1)).unsigned = true;
                    else if (typeof object.protocolFeesToken_1 === "string")
                        message.protocolFeesToken_1 = parseInt(object.protocolFeesToken_1, 10);
                    else if (typeof object.protocolFeesToken_1 === "number")
                        message.protocolFeesToken_1 = object.protocolFeesToken_1;
                    else if (typeof object.protocolFeesToken_1 === "object")
                        message.protocolFeesToken_1 = new $util.LongBits(object.protocolFeesToken_1.low >>> 0, object.protocolFeesToken_1.high >>> 0).toNumber(true);
                if (object.swapInAmountToken_0 != null)
                    message.swapInAmountToken_0 = String(object.swapInAmountToken_0);
                if (object.swapOutAmountToken_1 != null)
                    message.swapOutAmountToken_1 = String(object.swapOutAmountToken_1);
                if (object.swapInAmountToken_1 != null)
                    message.swapInAmountToken_1 = String(object.swapInAmountToken_1);
                if (object.swapOutAmountToken_0 != null)
                    message.swapOutAmountToken_0 = String(object.swapOutAmountToken_0);
                if (object.status != null)
                    message.status = object.status >>> 0;
                if (object.padding != null)
                    if (typeof object.padding === "string")
                        $util.base64.decode(object.padding, message.padding = $util.newBuffer($util.base64.length(object.padding)), 0);
                    else if (object.padding.length >= 0)
                        message.padding = object.padding;
                if (object.rewardInfos) {
                    if (!Array.isArray(object.rewardInfos))
                        throw TypeError(".vixen.parser.PoolStateProto.rewardInfos: array expected");
                    message.rewardInfos = [];
                    for (var i = 0; i < object.rewardInfos.length; ++i) {
                        if (typeof object.rewardInfos[i] !== "object")
                            throw TypeError(".vixen.parser.PoolStateProto.rewardInfos: object expected");
                        message.rewardInfos[i] = $root.vixen.parser.RewardInfoProto.fromObject(object.rewardInfos[i]);
                    }
                }
                if (object.tickArrayBitmap) {
                    if (!Array.isArray(object.tickArrayBitmap))
                        throw TypeError(".vixen.parser.PoolStateProto.tickArrayBitmap: array expected");
                    message.tickArrayBitmap = [];
                    for (var i = 0; i < object.tickArrayBitmap.length; ++i)
                        if ($util.Long)
                            (message.tickArrayBitmap[i] = $util.Long.fromValue(object.tickArrayBitmap[i])).unsigned = true;
                        else if (typeof object.tickArrayBitmap[i] === "string")
                            message.tickArrayBitmap[i] = parseInt(object.tickArrayBitmap[i], 10);
                        else if (typeof object.tickArrayBitmap[i] === "number")
                            message.tickArrayBitmap[i] = object.tickArrayBitmap[i];
                        else if (typeof object.tickArrayBitmap[i] === "object")
                            message.tickArrayBitmap[i] = new $util.LongBits(object.tickArrayBitmap[i].low >>> 0, object.tickArrayBitmap[i].high >>> 0).toNumber(true);
                }
                if (object.totalFeesToken_0 != null)
                    if ($util.Long)
                        (message.totalFeesToken_0 = $util.Long.fromValue(object.totalFeesToken_0)).unsigned = true;
                    else if (typeof object.totalFeesToken_0 === "string")
                        message.totalFeesToken_0 = parseInt(object.totalFeesToken_0, 10);
                    else if (typeof object.totalFeesToken_0 === "number")
                        message.totalFeesToken_0 = object.totalFeesToken_0;
                    else if (typeof object.totalFeesToken_0 === "object")
                        message.totalFeesToken_0 = new $util.LongBits(object.totalFeesToken_0.low >>> 0, object.totalFeesToken_0.high >>> 0).toNumber(true);
                if (object.totalFeesClaimedToken_0 != null)
                    if ($util.Long)
                        (message.totalFeesClaimedToken_0 = $util.Long.fromValue(object.totalFeesClaimedToken_0)).unsigned = true;
                    else if (typeof object.totalFeesClaimedToken_0 === "string")
                        message.totalFeesClaimedToken_0 = parseInt(object.totalFeesClaimedToken_0, 10);
                    else if (typeof object.totalFeesClaimedToken_0 === "number")
                        message.totalFeesClaimedToken_0 = object.totalFeesClaimedToken_0;
                    else if (typeof object.totalFeesClaimedToken_0 === "object")
                        message.totalFeesClaimedToken_0 = new $util.LongBits(object.totalFeesClaimedToken_0.low >>> 0, object.totalFeesClaimedToken_0.high >>> 0).toNumber(true);
                if (object.totalFeesToken_1 != null)
                    if ($util.Long)
                        (message.totalFeesToken_1 = $util.Long.fromValue(object.totalFeesToken_1)).unsigned = true;
                    else if (typeof object.totalFeesToken_1 === "string")
                        message.totalFeesToken_1 = parseInt(object.totalFeesToken_1, 10);
                    else if (typeof object.totalFeesToken_1 === "number")
                        message.totalFeesToken_1 = object.totalFeesToken_1;
                    else if (typeof object.totalFeesToken_1 === "object")
                        message.totalFeesToken_1 = new $util.LongBits(object.totalFeesToken_1.low >>> 0, object.totalFeesToken_1.high >>> 0).toNumber(true);
                if (object.totalFeesClaimedToken_1 != null)
                    if ($util.Long)
                        (message.totalFeesClaimedToken_1 = $util.Long.fromValue(object.totalFeesClaimedToken_1)).unsigned = true;
                    else if (typeof object.totalFeesClaimedToken_1 === "string")
                        message.totalFeesClaimedToken_1 = parseInt(object.totalFeesClaimedToken_1, 10);
                    else if (typeof object.totalFeesClaimedToken_1 === "number")
                        message.totalFeesClaimedToken_1 = object.totalFeesClaimedToken_1;
                    else if (typeof object.totalFeesClaimedToken_1 === "object")
                        message.totalFeesClaimedToken_1 = new $util.LongBits(object.totalFeesClaimedToken_1.low >>> 0, object.totalFeesClaimedToken_1.high >>> 0).toNumber(true);
                if (object.fundFeesToken_0 != null)
                    if ($util.Long)
                        (message.fundFeesToken_0 = $util.Long.fromValue(object.fundFeesToken_0)).unsigned = true;
                    else if (typeof object.fundFeesToken_0 === "string")
                        message.fundFeesToken_0 = parseInt(object.fundFeesToken_0, 10);
                    else if (typeof object.fundFeesToken_0 === "number")
                        message.fundFeesToken_0 = object.fundFeesToken_0;
                    else if (typeof object.fundFeesToken_0 === "object")
                        message.fundFeesToken_0 = new $util.LongBits(object.fundFeesToken_0.low >>> 0, object.fundFeesToken_0.high >>> 0).toNumber(true);
                if (object.fundFeesToken_1 != null)
                    if ($util.Long)
                        (message.fundFeesToken_1 = $util.Long.fromValue(object.fundFeesToken_1)).unsigned = true;
                    else if (typeof object.fundFeesToken_1 === "string")
                        message.fundFeesToken_1 = parseInt(object.fundFeesToken_1, 10);
                    else if (typeof object.fundFeesToken_1 === "number")
                        message.fundFeesToken_1 = object.fundFeesToken_1;
                    else if (typeof object.fundFeesToken_1 === "object")
                        message.fundFeesToken_1 = new $util.LongBits(object.fundFeesToken_1.low >>> 0, object.fundFeesToken_1.high >>> 0).toNumber(true);
                if (object.openTime != null)
                    if ($util.Long)
                        (message.openTime = $util.Long.fromValue(object.openTime)).unsigned = true;
                    else if (typeof object.openTime === "string")
                        message.openTime = parseInt(object.openTime, 10);
                    else if (typeof object.openTime === "number")
                        message.openTime = object.openTime;
                    else if (typeof object.openTime === "object")
                        message.openTime = new $util.LongBits(object.openTime.low >>> 0, object.openTime.high >>> 0).toNumber(true);
                if (object.recentEpoch != null)
                    if ($util.Long)
                        (message.recentEpoch = $util.Long.fromValue(object.recentEpoch)).unsigned = true;
                    else if (typeof object.recentEpoch === "string")
                        message.recentEpoch = parseInt(object.recentEpoch, 10);
                    else if (typeof object.recentEpoch === "number")
                        message.recentEpoch = object.recentEpoch;
                    else if (typeof object.recentEpoch === "object")
                        message.recentEpoch = new $util.LongBits(object.recentEpoch.low >>> 0, object.recentEpoch.high >>> 0).toNumber(true);
                if (object.padding1) {
                    if (!Array.isArray(object.padding1))
                        throw TypeError(".vixen.parser.PoolStateProto.padding1: array expected");
                    message.padding1 = [];
                    for (var i = 0; i < object.padding1.length; ++i)
                        if ($util.Long)
                            (message.padding1[i] = $util.Long.fromValue(object.padding1[i])).unsigned = true;
                        else if (typeof object.padding1[i] === "string")
                            message.padding1[i] = parseInt(object.padding1[i], 10);
                        else if (typeof object.padding1[i] === "number")
                            message.padding1[i] = object.padding1[i];
                        else if (typeof object.padding1[i] === "object")
                            message.padding1[i] = new $util.LongBits(object.padding1[i].low >>> 0, object.padding1[i].high >>> 0).toNumber(true);
                }
                if (object.padding2) {
                    if (!Array.isArray(object.padding2))
                        throw TypeError(".vixen.parser.PoolStateProto.padding2: array expected");
                    message.padding2 = [];
                    for (var i = 0; i < object.padding2.length; ++i)
                        if ($util.Long)
                            (message.padding2[i] = $util.Long.fromValue(object.padding2[i])).unsigned = true;
                        else if (typeof object.padding2[i] === "string")
                            message.padding2[i] = parseInt(object.padding2[i], 10);
                        else if (typeof object.padding2[i] === "number")
                            message.padding2[i] = object.padding2[i];
                        else if (typeof object.padding2[i] === "object")
                            message.padding2[i] = new $util.LongBits(object.padding2[i].low >>> 0, object.padding2[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            PoolStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.rewardInfos = [];
                    object.tickArrayBitmap = [];
                    object.padding1 = [];
                    object.padding2 = [];
                }
                if (options.defaults) {
                    object.bump = 0;
                    object.ammConfig = "";
                    object.owner = "";
                    object.tokenMint_0 = "";
                    object.tokenMint_1 = "";
                    object.tokenVault_0 = "";
                    object.tokenVault_1 = "";
                    object.observationKey = "";
                    object.mintDecimals_0 = 0;
                    object.mintDecimals_1 = 0;
                    object.tickSpacing = 0;
                    object.liquidity = "";
                    object.sqrtPriceX64 = "";
                    object.tickCurrent = 0;
                    object.padding3 = 0;
                    object.padding4 = 0;
                    object.feeGrowthGlobal_0X64 = "";
                    object.feeGrowthGlobal_1X64 = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.protocolFeesToken_0 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.protocolFeesToken_0 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.protocolFeesToken_1 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.protocolFeesToken_1 = options.longs === String ? "0" : 0;
                    object.swapInAmountToken_0 = "";
                    object.swapOutAmountToken_1 = "";
                    object.swapInAmountToken_1 = "";
                    object.swapOutAmountToken_0 = "";
                    object.status = 0;
                    if (options.bytes === String)
                        object.padding = "";
                    else {
                        object.padding = [];
                        if (options.bytes !== Array)
                            object.padding = $util.newBuffer(object.padding);
                    }
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.totalFeesToken_0 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalFeesToken_0 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.totalFeesClaimedToken_0 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalFeesClaimedToken_0 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.totalFeesToken_1 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalFeesToken_1 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.totalFeesClaimedToken_1 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.totalFeesClaimedToken_1 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.fundFeesToken_0 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.fundFeesToken_0 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.fundFeesToken_1 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.fundFeesToken_1 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.openTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.openTime = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.recentEpoch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.recentEpoch = options.longs === String ? "0" : 0;
                }
                if (message.bump != null && message.hasOwnProperty("bump"))
                    object.bump = message.bump;
                if (message.ammConfig != null && message.hasOwnProperty("ammConfig"))
                    object.ammConfig = message.ammConfig;
                if (message.owner != null && message.hasOwnProperty("owner"))
                    object.owner = message.owner;
                if (message.tokenMint_0 != null && message.hasOwnProperty("tokenMint_0"))
                    object.tokenMint_0 = message.tokenMint_0;
                if (message.tokenMint_1 != null && message.hasOwnProperty("tokenMint_1"))
                    object.tokenMint_1 = message.tokenMint_1;
                if (message.tokenVault_0 != null && message.hasOwnProperty("tokenVault_0"))
                    object.tokenVault_0 = message.tokenVault_0;
                if (message.tokenVault_1 != null && message.hasOwnProperty("tokenVault_1"))
                    object.tokenVault_1 = message.tokenVault_1;
                if (message.observationKey != null && message.hasOwnProperty("observationKey"))
                    object.observationKey = message.observationKey;
                if (message.mintDecimals_0 != null && message.hasOwnProperty("mintDecimals_0"))
                    object.mintDecimals_0 = message.mintDecimals_0;
                if (message.mintDecimals_1 != null && message.hasOwnProperty("mintDecimals_1"))
                    object.mintDecimals_1 = message.mintDecimals_1;
                if (message.tickSpacing != null && message.hasOwnProperty("tickSpacing"))
                    object.tickSpacing = message.tickSpacing;
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    object.liquidity = message.liquidity;
                if (message.sqrtPriceX64 != null && message.hasOwnProperty("sqrtPriceX64"))
                    object.sqrtPriceX64 = message.sqrtPriceX64;
                if (message.tickCurrent != null && message.hasOwnProperty("tickCurrent"))
                    object.tickCurrent = message.tickCurrent;
                if (message.padding3 != null && message.hasOwnProperty("padding3"))
                    object.padding3 = message.padding3;
                if (message.padding4 != null && message.hasOwnProperty("padding4"))
                    object.padding4 = message.padding4;
                if (message.feeGrowthGlobal_0X64 != null && message.hasOwnProperty("feeGrowthGlobal_0X64"))
                    object.feeGrowthGlobal_0X64 = message.feeGrowthGlobal_0X64;
                if (message.feeGrowthGlobal_1X64 != null && message.hasOwnProperty("feeGrowthGlobal_1X64"))
                    object.feeGrowthGlobal_1X64 = message.feeGrowthGlobal_1X64;
                if (message.protocolFeesToken_0 != null && message.hasOwnProperty("protocolFeesToken_0"))
                    if (typeof message.protocolFeesToken_0 === "number")
                        object.protocolFeesToken_0 = options.longs === String ? String(message.protocolFeesToken_0) : message.protocolFeesToken_0;
                    else
                        object.protocolFeesToken_0 = options.longs === String ? $util.Long.prototype.toString.call(message.protocolFeesToken_0) : options.longs === Number ? new $util.LongBits(message.protocolFeesToken_0.low >>> 0, message.protocolFeesToken_0.high >>> 0).toNumber(true) : message.protocolFeesToken_0;
                if (message.protocolFeesToken_1 != null && message.hasOwnProperty("protocolFeesToken_1"))
                    if (typeof message.protocolFeesToken_1 === "number")
                        object.protocolFeesToken_1 = options.longs === String ? String(message.protocolFeesToken_1) : message.protocolFeesToken_1;
                    else
                        object.protocolFeesToken_1 = options.longs === String ? $util.Long.prototype.toString.call(message.protocolFeesToken_1) : options.longs === Number ? new $util.LongBits(message.protocolFeesToken_1.low >>> 0, message.protocolFeesToken_1.high >>> 0).toNumber(true) : message.protocolFeesToken_1;
                if (message.swapInAmountToken_0 != null && message.hasOwnProperty("swapInAmountToken_0"))
                    object.swapInAmountToken_0 = message.swapInAmountToken_0;
                if (message.swapOutAmountToken_1 != null && message.hasOwnProperty("swapOutAmountToken_1"))
                    object.swapOutAmountToken_1 = message.swapOutAmountToken_1;
                if (message.swapInAmountToken_1 != null && message.hasOwnProperty("swapInAmountToken_1"))
                    object.swapInAmountToken_1 = message.swapInAmountToken_1;
                if (message.swapOutAmountToken_0 != null && message.hasOwnProperty("swapOutAmountToken_0"))
                    object.swapOutAmountToken_0 = message.swapOutAmountToken_0;
                if (message.status != null && message.hasOwnProperty("status"))
                    object.status = message.status;
                if (message.padding != null && message.hasOwnProperty("padding"))
                    object.padding = options.bytes === String ? $util.base64.encode(message.padding, 0, message.padding.length) : options.bytes === Array ? Array.prototype.slice.call(message.padding) : message.padding;
                if (message.rewardInfos && message.rewardInfos.length) {
                    object.rewardInfos = [];
                    for (var j = 0; j < message.rewardInfos.length; ++j)
                        object.rewardInfos[j] = $root.vixen.parser.RewardInfoProto.toObject(message.rewardInfos[j], options);
                }
                if (message.tickArrayBitmap && message.tickArrayBitmap.length) {
                    object.tickArrayBitmap = [];
                    for (var j = 0; j < message.tickArrayBitmap.length; ++j)
                        if (typeof message.tickArrayBitmap[j] === "number")
                            object.tickArrayBitmap[j] = options.longs === String ? String(message.tickArrayBitmap[j]) : message.tickArrayBitmap[j];
                        else
                            object.tickArrayBitmap[j] = options.longs === String ? $util.Long.prototype.toString.call(message.tickArrayBitmap[j]) : options.longs === Number ? new $util.LongBits(message.tickArrayBitmap[j].low >>> 0, message.tickArrayBitmap[j].high >>> 0).toNumber(true) : message.tickArrayBitmap[j];
                }
                if (message.totalFeesToken_0 != null && message.hasOwnProperty("totalFeesToken_0"))
                    if (typeof message.totalFeesToken_0 === "number")
                        object.totalFeesToken_0 = options.longs === String ? String(message.totalFeesToken_0) : message.totalFeesToken_0;
                    else
                        object.totalFeesToken_0 = options.longs === String ? $util.Long.prototype.toString.call(message.totalFeesToken_0) : options.longs === Number ? new $util.LongBits(message.totalFeesToken_0.low >>> 0, message.totalFeesToken_0.high >>> 0).toNumber(true) : message.totalFeesToken_0;
                if (message.totalFeesClaimedToken_0 != null && message.hasOwnProperty("totalFeesClaimedToken_0"))
                    if (typeof message.totalFeesClaimedToken_0 === "number")
                        object.totalFeesClaimedToken_0 = options.longs === String ? String(message.totalFeesClaimedToken_0) : message.totalFeesClaimedToken_0;
                    else
                        object.totalFeesClaimedToken_0 = options.longs === String ? $util.Long.prototype.toString.call(message.totalFeesClaimedToken_0) : options.longs === Number ? new $util.LongBits(message.totalFeesClaimedToken_0.low >>> 0, message.totalFeesClaimedToken_0.high >>> 0).toNumber(true) : message.totalFeesClaimedToken_0;
                if (message.totalFeesToken_1 != null && message.hasOwnProperty("totalFeesToken_1"))
                    if (typeof message.totalFeesToken_1 === "number")
                        object.totalFeesToken_1 = options.longs === String ? String(message.totalFeesToken_1) : message.totalFeesToken_1;
                    else
                        object.totalFeesToken_1 = options.longs === String ? $util.Long.prototype.toString.call(message.totalFeesToken_1) : options.longs === Number ? new $util.LongBits(message.totalFeesToken_1.low >>> 0, message.totalFeesToken_1.high >>> 0).toNumber(true) : message.totalFeesToken_1;
                if (message.totalFeesClaimedToken_1 != null && message.hasOwnProperty("totalFeesClaimedToken_1"))
                    if (typeof message.totalFeesClaimedToken_1 === "number")
                        object.totalFeesClaimedToken_1 = options.longs === String ? String(message.totalFeesClaimedToken_1) : message.totalFeesClaimedToken_1;
                    else
                        object.totalFeesClaimedToken_1 = options.longs === String ? $util.Long.prototype.toString.call(message.totalFeesClaimedToken_1) : options.longs === Number ? new $util.LongBits(message.totalFeesClaimedToken_1.low >>> 0, message.totalFeesClaimedToken_1.high >>> 0).toNumber(true) : message.totalFeesClaimedToken_1;
                if (message.fundFeesToken_0 != null && message.hasOwnProperty("fundFeesToken_0"))
                    if (typeof message.fundFeesToken_0 === "number")
                        object.fundFeesToken_0 = options.longs === String ? String(message.fundFeesToken_0) : message.fundFeesToken_0;
                    else
                        object.fundFeesToken_0 = options.longs === String ? $util.Long.prototype.toString.call(message.fundFeesToken_0) : options.longs === Number ? new $util.LongBits(message.fundFeesToken_0.low >>> 0, message.fundFeesToken_0.high >>> 0).toNumber(true) : message.fundFeesToken_0;
                if (message.fundFeesToken_1 != null && message.hasOwnProperty("fundFeesToken_1"))
                    if (typeof message.fundFeesToken_1 === "number")
                        object.fundFeesToken_1 = options.longs === String ? String(message.fundFeesToken_1) : message.fundFeesToken_1;
                    else
                        object.fundFeesToken_1 = options.longs === String ? $util.Long.prototype.toString.call(message.fundFeesToken_1) : options.longs === Number ? new $util.LongBits(message.fundFeesToken_1.low >>> 0, message.fundFeesToken_1.high >>> 0).toNumber(true) : message.fundFeesToken_1;
                if (message.openTime != null && message.hasOwnProperty("openTime"))
                    if (typeof message.openTime === "number")
                        object.openTime = options.longs === String ? String(message.openTime) : message.openTime;
                    else
                        object.openTime = options.longs === String ? $util.Long.prototype.toString.call(message.openTime) : options.longs === Number ? new $util.LongBits(message.openTime.low >>> 0, message.openTime.high >>> 0).toNumber(true) : message.openTime;
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (typeof message.recentEpoch === "number")
                        object.recentEpoch = options.longs === String ? String(message.recentEpoch) : message.recentEpoch;
                    else
                        object.recentEpoch = options.longs === String ? $util.Long.prototype.toString.call(message.recentEpoch) : options.longs === Number ? new $util.LongBits(message.recentEpoch.low >>> 0, message.recentEpoch.high >>> 0).toNumber(true) : message.recentEpoch;
                if (message.padding1 && message.padding1.length) {
                    object.padding1 = [];
                    for (var j = 0; j < message.padding1.length; ++j)
                        if (typeof message.padding1[j] === "number")
                            object.padding1[j] = options.longs === String ? String(message.padding1[j]) : message.padding1[j];
                        else
                            object.padding1[j] = options.longs === String ? $util.Long.prototype.toString.call(message.padding1[j]) : options.longs === Number ? new $util.LongBits(message.padding1[j].low >>> 0, message.padding1[j].high >>> 0).toNumber(true) : message.padding1[j];
                }
                if (message.padding2 && message.padding2.length) {
                    object.padding2 = [];
                    for (var j = 0; j < message.padding2.length; ++j)
                        if (typeof message.padding2[j] === "number")
                            object.padding2[j] = options.longs === String ? String(message.padding2[j]) : message.padding2[j];
                        else
                            object.padding2[j] = options.longs === String ? $util.Long.prototype.toString.call(message.padding2[j]) : options.longs === Number ? new $util.LongBits(message.padding2[j].low >>> 0, message.padding2[j].high >>> 0).toNumber(true) : message.padding2[j];
                }
                return object;
            };

            PoolStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            PoolStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.PoolStateProto";
            };

            return PoolStateProto;
        })();

        parser.ProtocolPositionStateProto = (function() {

            function ProtocolPositionStateProto(properties) {
                this.rewardGrowthInside = [];
                this.padding = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            ProtocolPositionStateProto.prototype.bump = 0;
            ProtocolPositionStateProto.prototype.poolId = "";
            ProtocolPositionStateProto.prototype.tickLowerIndex = 0;
            ProtocolPositionStateProto.prototype.tickUpperIndex = 0;
            ProtocolPositionStateProto.prototype.liquidity = "";
            ProtocolPositionStateProto.prototype.feeGrowthInside_0LastX64 = "";
            ProtocolPositionStateProto.prototype.feeGrowthInside_1LastX64 = "";
            ProtocolPositionStateProto.prototype.tokenFeesOwed_0 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            ProtocolPositionStateProto.prototype.tokenFeesOwed_1 = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            ProtocolPositionStateProto.prototype.rewardGrowthInside = $util.emptyArray;
            ProtocolPositionStateProto.prototype.recentEpoch = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            ProtocolPositionStateProto.prototype.padding = $util.emptyArray;

            ProtocolPositionStateProto.create = function create(properties) {
                return new ProtocolPositionStateProto(properties);
            };

            ProtocolPositionStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.bump != null && Object.hasOwnProperty.call(message, "bump"))
                    writer.uint32(8).uint32(message.bump);
                if (message.poolId != null && Object.hasOwnProperty.call(message, "poolId"))
                    writer.uint32(18).string(message.poolId);
                if (message.tickLowerIndex != null && Object.hasOwnProperty.call(message, "tickLowerIndex"))
                    writer.uint32(24).int32(message.tickLowerIndex);
                if (message.tickUpperIndex != null && Object.hasOwnProperty.call(message, "tickUpperIndex"))
                    writer.uint32(32).int32(message.tickUpperIndex);
                if (message.liquidity != null && Object.hasOwnProperty.call(message, "liquidity"))
                    writer.uint32(42).string(message.liquidity);
                if (message.feeGrowthInside_0LastX64 != null && Object.hasOwnProperty.call(message, "feeGrowthInside_0LastX64"))
                    writer.uint32(50).string(message.feeGrowthInside_0LastX64);
                if (message.feeGrowthInside_1LastX64 != null && Object.hasOwnProperty.call(message, "feeGrowthInside_1LastX64"))
                    writer.uint32(58).string(message.feeGrowthInside_1LastX64);
                if (message.tokenFeesOwed_0 != null && Object.hasOwnProperty.call(message, "tokenFeesOwed_0"))
                    writer.uint32(64).uint64(message.tokenFeesOwed_0);
                if (message.tokenFeesOwed_1 != null && Object.hasOwnProperty.call(message, "tokenFeesOwed_1"))
                    writer.uint32(72).uint64(message.tokenFeesOwed_1);
                if (message.rewardGrowthInside != null && message.rewardGrowthInside.length)
                    for (var i = 0; i < message.rewardGrowthInside.length; ++i)
                        writer.uint32(82).string(message.rewardGrowthInside[i]);
                if (message.recentEpoch != null && Object.hasOwnProperty.call(message, "recentEpoch"))
                    writer.uint32(88).uint64(message.recentEpoch);
                if (message.padding != null && message.padding.length) {
                    writer.uint32(98).fork();
                    for (var i = 0; i < message.padding.length; ++i)
                        writer.uint64(message.padding[i]);
                    writer.ldelim();
                }
                return writer;
            };

            ProtocolPositionStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            ProtocolPositionStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.ProtocolPositionStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.bump = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.poolId = reader.string();
                            break;
                        }
                    case 3: {
                            message.tickLowerIndex = reader.int32();
                            break;
                        }
                    case 4: {
                            message.tickUpperIndex = reader.int32();
                            break;
                        }
                    case 5: {
                            message.liquidity = reader.string();
                            break;
                        }
                    case 6: {
                            message.feeGrowthInside_0LastX64 = reader.string();
                            break;
                        }
                    case 7: {
                            message.feeGrowthInside_1LastX64 = reader.string();
                            break;
                        }
                    case 8: {
                            message.tokenFeesOwed_0 = reader.uint64();
                            break;
                        }
                    case 9: {
                            message.tokenFeesOwed_1 = reader.uint64();
                            break;
                        }
                    case 10: {
                            if (!(message.rewardGrowthInside && message.rewardGrowthInside.length))
                                message.rewardGrowthInside = [];
                            message.rewardGrowthInside.push(reader.string());
                            break;
                        }
                    case 11: {
                            message.recentEpoch = reader.uint64();
                            break;
                        }
                    case 12: {
                            if (!(message.padding && message.padding.length))
                                message.padding = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.padding.push(reader.uint64());
                            } else
                                message.padding.push(reader.uint64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            ProtocolPositionStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            ProtocolPositionStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.bump != null && message.hasOwnProperty("bump"))
                    if (!$util.isInteger(message.bump))
                        return "bump: integer expected";
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    if (!$util.isString(message.poolId))
                        return "poolId: string expected";
                if (message.tickLowerIndex != null && message.hasOwnProperty("tickLowerIndex"))
                    if (!$util.isInteger(message.tickLowerIndex))
                        return "tickLowerIndex: integer expected";
                if (message.tickUpperIndex != null && message.hasOwnProperty("tickUpperIndex"))
                    if (!$util.isInteger(message.tickUpperIndex))
                        return "tickUpperIndex: integer expected";
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    if (!$util.isString(message.liquidity))
                        return "liquidity: string expected";
                if (message.feeGrowthInside_0LastX64 != null && message.hasOwnProperty("feeGrowthInside_0LastX64"))
                    if (!$util.isString(message.feeGrowthInside_0LastX64))
                        return "feeGrowthInside_0LastX64: string expected";
                if (message.feeGrowthInside_1LastX64 != null && message.hasOwnProperty("feeGrowthInside_1LastX64"))
                    if (!$util.isString(message.feeGrowthInside_1LastX64))
                        return "feeGrowthInside_1LastX64: string expected";
                if (message.tokenFeesOwed_0 != null && message.hasOwnProperty("tokenFeesOwed_0"))
                    if (!$util.isInteger(message.tokenFeesOwed_0) && !(message.tokenFeesOwed_0 && $util.isInteger(message.tokenFeesOwed_0.low) && $util.isInteger(message.tokenFeesOwed_0.high)))
                        return "tokenFeesOwed_0: integer|Long expected";
                if (message.tokenFeesOwed_1 != null && message.hasOwnProperty("tokenFeesOwed_1"))
                    if (!$util.isInteger(message.tokenFeesOwed_1) && !(message.tokenFeesOwed_1 && $util.isInteger(message.tokenFeesOwed_1.low) && $util.isInteger(message.tokenFeesOwed_1.high)))
                        return "tokenFeesOwed_1: integer|Long expected";
                if (message.rewardGrowthInside != null && message.hasOwnProperty("rewardGrowthInside")) {
                    if (!Array.isArray(message.rewardGrowthInside))
                        return "rewardGrowthInside: array expected";
                    for (var i = 0; i < message.rewardGrowthInside.length; ++i)
                        if (!$util.isString(message.rewardGrowthInside[i]))
                            return "rewardGrowthInside: string[] expected";
                }
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (!$util.isInteger(message.recentEpoch) && !(message.recentEpoch && $util.isInteger(message.recentEpoch.low) && $util.isInteger(message.recentEpoch.high)))
                        return "recentEpoch: integer|Long expected";
                if (message.padding != null && message.hasOwnProperty("padding")) {
                    if (!Array.isArray(message.padding))
                        return "padding: array expected";
                    for (var i = 0; i < message.padding.length; ++i)
                        if (!$util.isInteger(message.padding[i]) && !(message.padding[i] && $util.isInteger(message.padding[i].low) && $util.isInteger(message.padding[i].high)))
                            return "padding: integer|Long[] expected";
                }
                return null;
            };

            ProtocolPositionStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.ProtocolPositionStateProto)
                    return object;
                var message = new $root.vixen.parser.ProtocolPositionStateProto();
                if (object.bump != null)
                    message.bump = object.bump >>> 0;
                if (object.poolId != null)
                    message.poolId = String(object.poolId);
                if (object.tickLowerIndex != null)
                    message.tickLowerIndex = object.tickLowerIndex | 0;
                if (object.tickUpperIndex != null)
                    message.tickUpperIndex = object.tickUpperIndex | 0;
                if (object.liquidity != null)
                    message.liquidity = String(object.liquidity);
                if (object.feeGrowthInside_0LastX64 != null)
                    message.feeGrowthInside_0LastX64 = String(object.feeGrowthInside_0LastX64);
                if (object.feeGrowthInside_1LastX64 != null)
                    message.feeGrowthInside_1LastX64 = String(object.feeGrowthInside_1LastX64);
                if (object.tokenFeesOwed_0 != null)
                    if ($util.Long)
                        (message.tokenFeesOwed_0 = $util.Long.fromValue(object.tokenFeesOwed_0)).unsigned = true;
                    else if (typeof object.tokenFeesOwed_0 === "string")
                        message.tokenFeesOwed_0 = parseInt(object.tokenFeesOwed_0, 10);
                    else if (typeof object.tokenFeesOwed_0 === "number")
                        message.tokenFeesOwed_0 = object.tokenFeesOwed_0;
                    else if (typeof object.tokenFeesOwed_0 === "object")
                        message.tokenFeesOwed_0 = new $util.LongBits(object.tokenFeesOwed_0.low >>> 0, object.tokenFeesOwed_0.high >>> 0).toNumber(true);
                if (object.tokenFeesOwed_1 != null)
                    if ($util.Long)
                        (message.tokenFeesOwed_1 = $util.Long.fromValue(object.tokenFeesOwed_1)).unsigned = true;
                    else if (typeof object.tokenFeesOwed_1 === "string")
                        message.tokenFeesOwed_1 = parseInt(object.tokenFeesOwed_1, 10);
                    else if (typeof object.tokenFeesOwed_1 === "number")
                        message.tokenFeesOwed_1 = object.tokenFeesOwed_1;
                    else if (typeof object.tokenFeesOwed_1 === "object")
                        message.tokenFeesOwed_1 = new $util.LongBits(object.tokenFeesOwed_1.low >>> 0, object.tokenFeesOwed_1.high >>> 0).toNumber(true);
                if (object.rewardGrowthInside) {
                    if (!Array.isArray(object.rewardGrowthInside))
                        throw TypeError(".vixen.parser.ProtocolPositionStateProto.rewardGrowthInside: array expected");
                    message.rewardGrowthInside = [];
                    for (var i = 0; i < object.rewardGrowthInside.length; ++i)
                        message.rewardGrowthInside[i] = String(object.rewardGrowthInside[i]);
                }
                if (object.recentEpoch != null)
                    if ($util.Long)
                        (message.recentEpoch = $util.Long.fromValue(object.recentEpoch)).unsigned = true;
                    else if (typeof object.recentEpoch === "string")
                        message.recentEpoch = parseInt(object.recentEpoch, 10);
                    else if (typeof object.recentEpoch === "number")
                        message.recentEpoch = object.recentEpoch;
                    else if (typeof object.recentEpoch === "object")
                        message.recentEpoch = new $util.LongBits(object.recentEpoch.low >>> 0, object.recentEpoch.high >>> 0).toNumber(true);
                if (object.padding) {
                    if (!Array.isArray(object.padding))
                        throw TypeError(".vixen.parser.ProtocolPositionStateProto.padding: array expected");
                    message.padding = [];
                    for (var i = 0; i < object.padding.length; ++i)
                        if ($util.Long)
                            (message.padding[i] = $util.Long.fromValue(object.padding[i])).unsigned = true;
                        else if (typeof object.padding[i] === "string")
                            message.padding[i] = parseInt(object.padding[i], 10);
                        else if (typeof object.padding[i] === "number")
                            message.padding[i] = object.padding[i];
                        else if (typeof object.padding[i] === "object")
                            message.padding[i] = new $util.LongBits(object.padding[i].low >>> 0, object.padding[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            ProtocolPositionStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.rewardGrowthInside = [];
                    object.padding = [];
                }
                if (options.defaults) {
                    object.bump = 0;
                    object.poolId = "";
                    object.tickLowerIndex = 0;
                    object.tickUpperIndex = 0;
                    object.liquidity = "";
                    object.feeGrowthInside_0LastX64 = "";
                    object.feeGrowthInside_1LastX64 = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.tokenFeesOwed_0 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.tokenFeesOwed_0 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.tokenFeesOwed_1 = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.tokenFeesOwed_1 = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.recentEpoch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.recentEpoch = options.longs === String ? "0" : 0;
                }
                if (message.bump != null && message.hasOwnProperty("bump"))
                    object.bump = message.bump;
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    object.poolId = message.poolId;
                if (message.tickLowerIndex != null && message.hasOwnProperty("tickLowerIndex"))
                    object.tickLowerIndex = message.tickLowerIndex;
                if (message.tickUpperIndex != null && message.hasOwnProperty("tickUpperIndex"))
                    object.tickUpperIndex = message.tickUpperIndex;
                if (message.liquidity != null && message.hasOwnProperty("liquidity"))
                    object.liquidity = message.liquidity;
                if (message.feeGrowthInside_0LastX64 != null && message.hasOwnProperty("feeGrowthInside_0LastX64"))
                    object.feeGrowthInside_0LastX64 = message.feeGrowthInside_0LastX64;
                if (message.feeGrowthInside_1LastX64 != null && message.hasOwnProperty("feeGrowthInside_1LastX64"))
                    object.feeGrowthInside_1LastX64 = message.feeGrowthInside_1LastX64;
                if (message.tokenFeesOwed_0 != null && message.hasOwnProperty("tokenFeesOwed_0"))
                    if (typeof message.tokenFeesOwed_0 === "number")
                        object.tokenFeesOwed_0 = options.longs === String ? String(message.tokenFeesOwed_0) : message.tokenFeesOwed_0;
                    else
                        object.tokenFeesOwed_0 = options.longs === String ? $util.Long.prototype.toString.call(message.tokenFeesOwed_0) : options.longs === Number ? new $util.LongBits(message.tokenFeesOwed_0.low >>> 0, message.tokenFeesOwed_0.high >>> 0).toNumber(true) : message.tokenFeesOwed_0;
                if (message.tokenFeesOwed_1 != null && message.hasOwnProperty("tokenFeesOwed_1"))
                    if (typeof message.tokenFeesOwed_1 === "number")
                        object.tokenFeesOwed_1 = options.longs === String ? String(message.tokenFeesOwed_1) : message.tokenFeesOwed_1;
                    else
                        object.tokenFeesOwed_1 = options.longs === String ? $util.Long.prototype.toString.call(message.tokenFeesOwed_1) : options.longs === Number ? new $util.LongBits(message.tokenFeesOwed_1.low >>> 0, message.tokenFeesOwed_1.high >>> 0).toNumber(true) : message.tokenFeesOwed_1;
                if (message.rewardGrowthInside && message.rewardGrowthInside.length) {
                    object.rewardGrowthInside = [];
                    for (var j = 0; j < message.rewardGrowthInside.length; ++j)
                        object.rewardGrowthInside[j] = message.rewardGrowthInside[j];
                }
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (typeof message.recentEpoch === "number")
                        object.recentEpoch = options.longs === String ? String(message.recentEpoch) : message.recentEpoch;
                    else
                        object.recentEpoch = options.longs === String ? $util.Long.prototype.toString.call(message.recentEpoch) : options.longs === Number ? new $util.LongBits(message.recentEpoch.low >>> 0, message.recentEpoch.high >>> 0).toNumber(true) : message.recentEpoch;
                if (message.padding && message.padding.length) {
                    object.padding = [];
                    for (var j = 0; j < message.padding.length; ++j)
                        if (typeof message.padding[j] === "number")
                            object.padding[j] = options.longs === String ? String(message.padding[j]) : message.padding[j];
                        else
                            object.padding[j] = options.longs === String ? $util.Long.prototype.toString.call(message.padding[j]) : options.longs === Number ? new $util.LongBits(message.padding[j].low >>> 0, message.padding[j].high >>> 0).toNumber(true) : message.padding[j];
                }
                return object;
            };

            ProtocolPositionStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            ProtocolPositionStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.ProtocolPositionStateProto";
            };

            return ProtocolPositionStateProto;
        })();

        parser.RaydiumTickStateProto = (function() {

            function RaydiumTickStateProto(properties) {
                this.rewardGrowthsOutsideX64 = [];
                this.padding = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumTickStateProto.prototype.tick = 0;
            RaydiumTickStateProto.prototype.liquidityNet = "";
            RaydiumTickStateProto.prototype.liquidityGross = "";
            RaydiumTickStateProto.prototype.feeGrowthOutside_0X64 = "";
            RaydiumTickStateProto.prototype.feeGrowthOutside_1X64 = "";
            RaydiumTickStateProto.prototype.rewardGrowthsOutsideX64 = $util.emptyArray;
            RaydiumTickStateProto.prototype.padding = $util.emptyArray;

            RaydiumTickStateProto.create = function create(properties) {
                return new RaydiumTickStateProto(properties);
            };

            RaydiumTickStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.tick != null && Object.hasOwnProperty.call(message, "tick"))
                    writer.uint32(8).int32(message.tick);
                if (message.liquidityNet != null && Object.hasOwnProperty.call(message, "liquidityNet"))
                    writer.uint32(18).string(message.liquidityNet);
                if (message.liquidityGross != null && Object.hasOwnProperty.call(message, "liquidityGross"))
                    writer.uint32(26).string(message.liquidityGross);
                if (message.feeGrowthOutside_0X64 != null && Object.hasOwnProperty.call(message, "feeGrowthOutside_0X64"))
                    writer.uint32(34).string(message.feeGrowthOutside_0X64);
                if (message.feeGrowthOutside_1X64 != null && Object.hasOwnProperty.call(message, "feeGrowthOutside_1X64"))
                    writer.uint32(42).string(message.feeGrowthOutside_1X64);
                if (message.rewardGrowthsOutsideX64 != null && message.rewardGrowthsOutsideX64.length)
                    for (var i = 0; i < message.rewardGrowthsOutsideX64.length; ++i)
                        writer.uint32(50).string(message.rewardGrowthsOutsideX64[i]);
                if (message.padding != null && message.padding.length) {
                    writer.uint32(58).fork();
                    for (var i = 0; i < message.padding.length; ++i)
                        writer.uint32(message.padding[i]);
                    writer.ldelim();
                }
                return writer;
            };

            RaydiumTickStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumTickStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumTickStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.tick = reader.int32();
                            break;
                        }
                    case 2: {
                            message.liquidityNet = reader.string();
                            break;
                        }
                    case 3: {
                            message.liquidityGross = reader.string();
                            break;
                        }
                    case 4: {
                            message.feeGrowthOutside_0X64 = reader.string();
                            break;
                        }
                    case 5: {
                            message.feeGrowthOutside_1X64 = reader.string();
                            break;
                        }
                    case 6: {
                            if (!(message.rewardGrowthsOutsideX64 && message.rewardGrowthsOutsideX64.length))
                                message.rewardGrowthsOutsideX64 = [];
                            message.rewardGrowthsOutsideX64.push(reader.string());
                            break;
                        }
                    case 7: {
                            if (!(message.padding && message.padding.length))
                                message.padding = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.padding.push(reader.uint32());
                            } else
                                message.padding.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumTickStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumTickStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.tick != null && message.hasOwnProperty("tick"))
                    if (!$util.isInteger(message.tick))
                        return "tick: integer expected";
                if (message.liquidityNet != null && message.hasOwnProperty("liquidityNet"))
                    if (!$util.isString(message.liquidityNet))
                        return "liquidityNet: string expected";
                if (message.liquidityGross != null && message.hasOwnProperty("liquidityGross"))
                    if (!$util.isString(message.liquidityGross))
                        return "liquidityGross: string expected";
                if (message.feeGrowthOutside_0X64 != null && message.hasOwnProperty("feeGrowthOutside_0X64"))
                    if (!$util.isString(message.feeGrowthOutside_0X64))
                        return "feeGrowthOutside_0X64: string expected";
                if (message.feeGrowthOutside_1X64 != null && message.hasOwnProperty("feeGrowthOutside_1X64"))
                    if (!$util.isString(message.feeGrowthOutside_1X64))
                        return "feeGrowthOutside_1X64: string expected";
                if (message.rewardGrowthsOutsideX64 != null && message.hasOwnProperty("rewardGrowthsOutsideX64")) {
                    if (!Array.isArray(message.rewardGrowthsOutsideX64))
                        return "rewardGrowthsOutsideX64: array expected";
                    for (var i = 0; i < message.rewardGrowthsOutsideX64.length; ++i)
                        if (!$util.isString(message.rewardGrowthsOutsideX64[i]))
                            return "rewardGrowthsOutsideX64: string[] expected";
                }
                if (message.padding != null && message.hasOwnProperty("padding")) {
                    if (!Array.isArray(message.padding))
                        return "padding: array expected";
                    for (var i = 0; i < message.padding.length; ++i)
                        if (!$util.isInteger(message.padding[i]))
                            return "padding: integer[] expected";
                }
                return null;
            };

            RaydiumTickStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumTickStateProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumTickStateProto();
                if (object.tick != null)
                    message.tick = object.tick | 0;
                if (object.liquidityNet != null)
                    message.liquidityNet = String(object.liquidityNet);
                if (object.liquidityGross != null)
                    message.liquidityGross = String(object.liquidityGross);
                if (object.feeGrowthOutside_0X64 != null)
                    message.feeGrowthOutside_0X64 = String(object.feeGrowthOutside_0X64);
                if (object.feeGrowthOutside_1X64 != null)
                    message.feeGrowthOutside_1X64 = String(object.feeGrowthOutside_1X64);
                if (object.rewardGrowthsOutsideX64) {
                    if (!Array.isArray(object.rewardGrowthsOutsideX64))
                        throw TypeError(".vixen.parser.RaydiumTickStateProto.rewardGrowthsOutsideX64: array expected");
                    message.rewardGrowthsOutsideX64 = [];
                    for (var i = 0; i < object.rewardGrowthsOutsideX64.length; ++i)
                        message.rewardGrowthsOutsideX64[i] = String(object.rewardGrowthsOutsideX64[i]);
                }
                if (object.padding) {
                    if (!Array.isArray(object.padding))
                        throw TypeError(".vixen.parser.RaydiumTickStateProto.padding: array expected");
                    message.padding = [];
                    for (var i = 0; i < object.padding.length; ++i)
                        message.padding[i] = object.padding[i] >>> 0;
                }
                return message;
            };

            RaydiumTickStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.rewardGrowthsOutsideX64 = [];
                    object.padding = [];
                }
                if (options.defaults) {
                    object.tick = 0;
                    object.liquidityNet = "";
                    object.liquidityGross = "";
                    object.feeGrowthOutside_0X64 = "";
                    object.feeGrowthOutside_1X64 = "";
                }
                if (message.tick != null && message.hasOwnProperty("tick"))
                    object.tick = message.tick;
                if (message.liquidityNet != null && message.hasOwnProperty("liquidityNet"))
                    object.liquidityNet = message.liquidityNet;
                if (message.liquidityGross != null && message.hasOwnProperty("liquidityGross"))
                    object.liquidityGross = message.liquidityGross;
                if (message.feeGrowthOutside_0X64 != null && message.hasOwnProperty("feeGrowthOutside_0X64"))
                    object.feeGrowthOutside_0X64 = message.feeGrowthOutside_0X64;
                if (message.feeGrowthOutside_1X64 != null && message.hasOwnProperty("feeGrowthOutside_1X64"))
                    object.feeGrowthOutside_1X64 = message.feeGrowthOutside_1X64;
                if (message.rewardGrowthsOutsideX64 && message.rewardGrowthsOutsideX64.length) {
                    object.rewardGrowthsOutsideX64 = [];
                    for (var j = 0; j < message.rewardGrowthsOutsideX64.length; ++j)
                        object.rewardGrowthsOutsideX64[j] = message.rewardGrowthsOutsideX64[j];
                }
                if (message.padding && message.padding.length) {
                    object.padding = [];
                    for (var j = 0; j < message.padding.length; ++j)
                        object.padding[j] = message.padding[j];
                }
                return object;
            };

            RaydiumTickStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumTickStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumTickStateProto";
            };

            return RaydiumTickStateProto;
        })();

        parser.RaydiumTickArrayStateProto = (function() {

            function RaydiumTickArrayStateProto(properties) {
                this.ticks = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumTickArrayStateProto.prototype.poolId = "";
            RaydiumTickArrayStateProto.prototype.startTickIndex = 0;
            RaydiumTickArrayStateProto.prototype.ticks = $util.emptyArray;
            RaydiumTickArrayStateProto.prototype.initializedTickCount = 0;
            RaydiumTickArrayStateProto.prototype.recentEpoch = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            RaydiumTickArrayStateProto.prototype.padding = $util.newBuffer([]);

            RaydiumTickArrayStateProto.create = function create(properties) {
                return new RaydiumTickArrayStateProto(properties);
            };

            RaydiumTickArrayStateProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.poolId != null && Object.hasOwnProperty.call(message, "poolId"))
                    writer.uint32(10).string(message.poolId);
                if (message.startTickIndex != null && Object.hasOwnProperty.call(message, "startTickIndex"))
                    writer.uint32(16).int32(message.startTickIndex);
                if (message.ticks != null && message.ticks.length)
                    for (var i = 0; i < message.ticks.length; ++i)
                        $root.vixen.parser.RaydiumTickStateProto.encode(message.ticks[i], writer.uint32(26).fork()).ldelim();
                if (message.initializedTickCount != null && Object.hasOwnProperty.call(message, "initializedTickCount"))
                    writer.uint32(32).uint32(message.initializedTickCount);
                if (message.recentEpoch != null && Object.hasOwnProperty.call(message, "recentEpoch"))
                    writer.uint32(40).uint64(message.recentEpoch);
                if (message.padding != null && Object.hasOwnProperty.call(message, "padding"))
                    writer.uint32(50).bytes(message.padding);
                return writer;
            };

            RaydiumTickArrayStateProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumTickArrayStateProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumTickArrayStateProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.poolId = reader.string();
                            break;
                        }
                    case 2: {
                            message.startTickIndex = reader.int32();
                            break;
                        }
                    case 3: {
                            if (!(message.ticks && message.ticks.length))
                                message.ticks = [];
                            message.ticks.push($root.vixen.parser.RaydiumTickStateProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            message.initializedTickCount = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.recentEpoch = reader.uint64();
                            break;
                        }
                    case 6: {
                            message.padding = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumTickArrayStateProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumTickArrayStateProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    if (!$util.isString(message.poolId))
                        return "poolId: string expected";
                if (message.startTickIndex != null && message.hasOwnProperty("startTickIndex"))
                    if (!$util.isInteger(message.startTickIndex))
                        return "startTickIndex: integer expected";
                if (message.ticks != null && message.hasOwnProperty("ticks")) {
                    if (!Array.isArray(message.ticks))
                        return "ticks: array expected";
                    for (var i = 0; i < message.ticks.length; ++i) {
                        var error = $root.vixen.parser.RaydiumTickStateProto.verify(message.ticks[i]);
                        if (error)
                            return "ticks." + error;
                    }
                }
                if (message.initializedTickCount != null && message.hasOwnProperty("initializedTickCount"))
                    if (!$util.isInteger(message.initializedTickCount))
                        return "initializedTickCount: integer expected";
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (!$util.isInteger(message.recentEpoch) && !(message.recentEpoch && $util.isInteger(message.recentEpoch.low) && $util.isInteger(message.recentEpoch.high)))
                        return "recentEpoch: integer|Long expected";
                if (message.padding != null && message.hasOwnProperty("padding"))
                    if (!(message.padding && typeof message.padding.length === "number" || $util.isString(message.padding)))
                        return "padding: buffer expected";
                return null;
            };

            RaydiumTickArrayStateProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumTickArrayStateProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumTickArrayStateProto();
                if (object.poolId != null)
                    message.poolId = String(object.poolId);
                if (object.startTickIndex != null)
                    message.startTickIndex = object.startTickIndex | 0;
                if (object.ticks) {
                    if (!Array.isArray(object.ticks))
                        throw TypeError(".vixen.parser.RaydiumTickArrayStateProto.ticks: array expected");
                    message.ticks = [];
                    for (var i = 0; i < object.ticks.length; ++i) {
                        if (typeof object.ticks[i] !== "object")
                            throw TypeError(".vixen.parser.RaydiumTickArrayStateProto.ticks: object expected");
                        message.ticks[i] = $root.vixen.parser.RaydiumTickStateProto.fromObject(object.ticks[i]);
                    }
                }
                if (object.initializedTickCount != null)
                    message.initializedTickCount = object.initializedTickCount >>> 0;
                if (object.recentEpoch != null)
                    if ($util.Long)
                        (message.recentEpoch = $util.Long.fromValue(object.recentEpoch)).unsigned = true;
                    else if (typeof object.recentEpoch === "string")
                        message.recentEpoch = parseInt(object.recentEpoch, 10);
                    else if (typeof object.recentEpoch === "number")
                        message.recentEpoch = object.recentEpoch;
                    else if (typeof object.recentEpoch === "object")
                        message.recentEpoch = new $util.LongBits(object.recentEpoch.low >>> 0, object.recentEpoch.high >>> 0).toNumber(true);
                if (object.padding != null)
                    if (typeof object.padding === "string")
                        $util.base64.decode(object.padding, message.padding = $util.newBuffer($util.base64.length(object.padding)), 0);
                    else if (object.padding.length >= 0)
                        message.padding = object.padding;
                return message;
            };

            RaydiumTickArrayStateProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.ticks = [];
                if (options.defaults) {
                    object.poolId = "";
                    object.startTickIndex = 0;
                    object.initializedTickCount = 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.recentEpoch = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.recentEpoch = options.longs === String ? "0" : 0;
                    if (options.bytes === String)
                        object.padding = "";
                    else {
                        object.padding = [];
                        if (options.bytes !== Array)
                            object.padding = $util.newBuffer(object.padding);
                    }
                }
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    object.poolId = message.poolId;
                if (message.startTickIndex != null && message.hasOwnProperty("startTickIndex"))
                    object.startTickIndex = message.startTickIndex;
                if (message.ticks && message.ticks.length) {
                    object.ticks = [];
                    for (var j = 0; j < message.ticks.length; ++j)
                        object.ticks[j] = $root.vixen.parser.RaydiumTickStateProto.toObject(message.ticks[j], options);
                }
                if (message.initializedTickCount != null && message.hasOwnProperty("initializedTickCount"))
                    object.initializedTickCount = message.initializedTickCount;
                if (message.recentEpoch != null && message.hasOwnProperty("recentEpoch"))
                    if (typeof message.recentEpoch === "number")
                        object.recentEpoch = options.longs === String ? String(message.recentEpoch) : message.recentEpoch;
                    else
                        object.recentEpoch = options.longs === String ? $util.Long.prototype.toString.call(message.recentEpoch) : options.longs === Number ? new $util.LongBits(message.recentEpoch.low >>> 0, message.recentEpoch.high >>> 0).toNumber(true) : message.recentEpoch;
                if (message.padding != null && message.hasOwnProperty("padding"))
                    object.padding = options.bytes === String ? $util.base64.encode(message.padding, 0, message.padding.length) : options.bytes === Array ? Array.prototype.slice.call(message.padding) : message.padding;
                return object;
            };

            RaydiumTickArrayStateProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumTickArrayStateProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumTickArrayStateProto";
            };

            return RaydiumTickArrayStateProto;
        })();

        parser.TickArrayBitmapProto = (function() {

            function TickArrayBitmapProto(properties) {
                this.data = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TickArrayBitmapProto.prototype.data = $util.emptyArray;

            TickArrayBitmapProto.create = function create(properties) {
                return new TickArrayBitmapProto(properties);
            };

            TickArrayBitmapProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.data != null && message.data.length) {
                    writer.uint32(10).fork();
                    for (var i = 0; i < message.data.length; ++i)
                        writer.uint64(message.data[i]);
                    writer.ldelim();
                }
                return writer;
            };

            TickArrayBitmapProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TickArrayBitmapProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TickArrayBitmapProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.data && message.data.length))
                                message.data = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.data.push(reader.uint64());
                            } else
                                message.data.push(reader.uint64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TickArrayBitmapProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TickArrayBitmapProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.data != null && message.hasOwnProperty("data")) {
                    if (!Array.isArray(message.data))
                        return "data: array expected";
                    for (var i = 0; i < message.data.length; ++i)
                        if (!$util.isInteger(message.data[i]) && !(message.data[i] && $util.isInteger(message.data[i].low) && $util.isInteger(message.data[i].high)))
                            return "data: integer|Long[] expected";
                }
                return null;
            };

            TickArrayBitmapProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TickArrayBitmapProto)
                    return object;
                var message = new $root.vixen.parser.TickArrayBitmapProto();
                if (object.data) {
                    if (!Array.isArray(object.data))
                        throw TypeError(".vixen.parser.TickArrayBitmapProto.data: array expected");
                    message.data = [];
                    for (var i = 0; i < object.data.length; ++i)
                        if ($util.Long)
                            (message.data[i] = $util.Long.fromValue(object.data[i])).unsigned = true;
                        else if (typeof object.data[i] === "string")
                            message.data[i] = parseInt(object.data[i], 10);
                        else if (typeof object.data[i] === "number")
                            message.data[i] = object.data[i];
                        else if (typeof object.data[i] === "object")
                            message.data[i] = new $util.LongBits(object.data[i].low >>> 0, object.data[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            TickArrayBitmapProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.data = [];
                if (message.data && message.data.length) {
                    object.data = [];
                    for (var j = 0; j < message.data.length; ++j)
                        if (typeof message.data[j] === "number")
                            object.data[j] = options.longs === String ? String(message.data[j]) : message.data[j];
                        else
                            object.data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.data[j]) : options.longs === Number ? new $util.LongBits(message.data[j].low >>> 0, message.data[j].high >>> 0).toNumber(true) : message.data[j];
                }
                return object;
            };

            TickArrayBitmapProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TickArrayBitmapProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TickArrayBitmapProto";
            };

            return TickArrayBitmapProto;
        })();

        parser.TickArrayBitmapExtensionProto = (function() {

            function TickArrayBitmapExtensionProto(properties) {
                this.positiveTickArrayBitmap = [];
                this.negativeTickArrayBitmap = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            TickArrayBitmapExtensionProto.prototype.poolId = "";
            TickArrayBitmapExtensionProto.prototype.positiveTickArrayBitmap = $util.emptyArray;
            TickArrayBitmapExtensionProto.prototype.negativeTickArrayBitmap = $util.emptyArray;

            TickArrayBitmapExtensionProto.create = function create(properties) {
                return new TickArrayBitmapExtensionProto(properties);
            };

            TickArrayBitmapExtensionProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.poolId != null && Object.hasOwnProperty.call(message, "poolId"))
                    writer.uint32(10).string(message.poolId);
                if (message.positiveTickArrayBitmap != null && message.positiveTickArrayBitmap.length)
                    for (var i = 0; i < message.positiveTickArrayBitmap.length; ++i)
                        $root.vixen.parser.TickArrayBitmapProto.encode(message.positiveTickArrayBitmap[i], writer.uint32(18).fork()).ldelim();
                if (message.negativeTickArrayBitmap != null && message.negativeTickArrayBitmap.length)
                    for (var i = 0; i < message.negativeTickArrayBitmap.length; ++i)
                        $root.vixen.parser.TickArrayBitmapProto.encode(message.negativeTickArrayBitmap[i], writer.uint32(26).fork()).ldelim();
                return writer;
            };

            TickArrayBitmapExtensionProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            TickArrayBitmapExtensionProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.TickArrayBitmapExtensionProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.poolId = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.positiveTickArrayBitmap && message.positiveTickArrayBitmap.length))
                                message.positiveTickArrayBitmap = [];
                            message.positiveTickArrayBitmap.push($root.vixen.parser.TickArrayBitmapProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.negativeTickArrayBitmap && message.negativeTickArrayBitmap.length))
                                message.negativeTickArrayBitmap = [];
                            message.negativeTickArrayBitmap.push($root.vixen.parser.TickArrayBitmapProto.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            TickArrayBitmapExtensionProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            TickArrayBitmapExtensionProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    if (!$util.isString(message.poolId))
                        return "poolId: string expected";
                if (message.positiveTickArrayBitmap != null && message.hasOwnProperty("positiveTickArrayBitmap")) {
                    if (!Array.isArray(message.positiveTickArrayBitmap))
                        return "positiveTickArrayBitmap: array expected";
                    for (var i = 0; i < message.positiveTickArrayBitmap.length; ++i) {
                        var error = $root.vixen.parser.TickArrayBitmapProto.verify(message.positiveTickArrayBitmap[i]);
                        if (error)
                            return "positiveTickArrayBitmap." + error;
                    }
                }
                if (message.negativeTickArrayBitmap != null && message.hasOwnProperty("negativeTickArrayBitmap")) {
                    if (!Array.isArray(message.negativeTickArrayBitmap))
                        return "negativeTickArrayBitmap: array expected";
                    for (var i = 0; i < message.negativeTickArrayBitmap.length; ++i) {
                        var error = $root.vixen.parser.TickArrayBitmapProto.verify(message.negativeTickArrayBitmap[i]);
                        if (error)
                            return "negativeTickArrayBitmap." + error;
                    }
                }
                return null;
            };

            TickArrayBitmapExtensionProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.TickArrayBitmapExtensionProto)
                    return object;
                var message = new $root.vixen.parser.TickArrayBitmapExtensionProto();
                if (object.poolId != null)
                    message.poolId = String(object.poolId);
                if (object.positiveTickArrayBitmap) {
                    if (!Array.isArray(object.positiveTickArrayBitmap))
                        throw TypeError(".vixen.parser.TickArrayBitmapExtensionProto.positiveTickArrayBitmap: array expected");
                    message.positiveTickArrayBitmap = [];
                    for (var i = 0; i < object.positiveTickArrayBitmap.length; ++i) {
                        if (typeof object.positiveTickArrayBitmap[i] !== "object")
                            throw TypeError(".vixen.parser.TickArrayBitmapExtensionProto.positiveTickArrayBitmap: object expected");
                        message.positiveTickArrayBitmap[i] = $root.vixen.parser.TickArrayBitmapProto.fromObject(object.positiveTickArrayBitmap[i]);
                    }
                }
                if (object.negativeTickArrayBitmap) {
                    if (!Array.isArray(object.negativeTickArrayBitmap))
                        throw TypeError(".vixen.parser.TickArrayBitmapExtensionProto.negativeTickArrayBitmap: array expected");
                    message.negativeTickArrayBitmap = [];
                    for (var i = 0; i < object.negativeTickArrayBitmap.length; ++i) {
                        if (typeof object.negativeTickArrayBitmap[i] !== "object")
                            throw TypeError(".vixen.parser.TickArrayBitmapExtensionProto.negativeTickArrayBitmap: object expected");
                        message.negativeTickArrayBitmap[i] = $root.vixen.parser.TickArrayBitmapProto.fromObject(object.negativeTickArrayBitmap[i]);
                    }
                }
                return message;
            };

            TickArrayBitmapExtensionProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.positiveTickArrayBitmap = [];
                    object.negativeTickArrayBitmap = [];
                }
                if (options.defaults)
                    object.poolId = "";
                if (message.poolId != null && message.hasOwnProperty("poolId"))
                    object.poolId = message.poolId;
                if (message.positiveTickArrayBitmap && message.positiveTickArrayBitmap.length) {
                    object.positiveTickArrayBitmap = [];
                    for (var j = 0; j < message.positiveTickArrayBitmap.length; ++j)
                        object.positiveTickArrayBitmap[j] = $root.vixen.parser.TickArrayBitmapProto.toObject(message.positiveTickArrayBitmap[j], options);
                }
                if (message.negativeTickArrayBitmap && message.negativeTickArrayBitmap.length) {
                    object.negativeTickArrayBitmap = [];
                    for (var j = 0; j < message.negativeTickArrayBitmap.length; ++j)
                        object.negativeTickArrayBitmap[j] = $root.vixen.parser.TickArrayBitmapProto.toObject(message.negativeTickArrayBitmap[j], options);
                }
                return object;
            };

            TickArrayBitmapExtensionProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            TickArrayBitmapExtensionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.TickArrayBitmapExtensionProto";
            };

            return TickArrayBitmapExtensionProto;
        })();

        parser.RaydiumSwapAccountsProto = (function() {

            function RaydiumSwapAccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumSwapAccountsProto.prototype.payer = "";
            RaydiumSwapAccountsProto.prototype.ammConfig = "";
            RaydiumSwapAccountsProto.prototype.poolState = "";
            RaydiumSwapAccountsProto.prototype.inputTokenAccount = "";
            RaydiumSwapAccountsProto.prototype.outputTokenAccount = "";
            RaydiumSwapAccountsProto.prototype.inputVault = "";
            RaydiumSwapAccountsProto.prototype.outputVault = "";
            RaydiumSwapAccountsProto.prototype.observationState = "";
            RaydiumSwapAccountsProto.prototype.tokenProgram = "";
            RaydiumSwapAccountsProto.prototype.tickArray = "";

            RaydiumSwapAccountsProto.create = function create(properties) {
                return new RaydiumSwapAccountsProto(properties);
            };

            RaydiumSwapAccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.payer != null && Object.hasOwnProperty.call(message, "payer"))
                    writer.uint32(10).string(message.payer);
                if (message.ammConfig != null && Object.hasOwnProperty.call(message, "ammConfig"))
                    writer.uint32(18).string(message.ammConfig);
                if (message.poolState != null && Object.hasOwnProperty.call(message, "poolState"))
                    writer.uint32(26).string(message.poolState);
                if (message.inputTokenAccount != null && Object.hasOwnProperty.call(message, "inputTokenAccount"))
                    writer.uint32(34).string(message.inputTokenAccount);
                if (message.outputTokenAccount != null && Object.hasOwnProperty.call(message, "outputTokenAccount"))
                    writer.uint32(42).string(message.outputTokenAccount);
                if (message.inputVault != null && Object.hasOwnProperty.call(message, "inputVault"))
                    writer.uint32(50).string(message.inputVault);
                if (message.outputVault != null && Object.hasOwnProperty.call(message, "outputVault"))
                    writer.uint32(58).string(message.outputVault);
                if (message.observationState != null && Object.hasOwnProperty.call(message, "observationState"))
                    writer.uint32(66).string(message.observationState);
                if (message.tokenProgram != null && Object.hasOwnProperty.call(message, "tokenProgram"))
                    writer.uint32(74).string(message.tokenProgram);
                if (message.tickArray != null && Object.hasOwnProperty.call(message, "tickArray"))
                    writer.uint32(82).string(message.tickArray);
                return writer;
            };

            RaydiumSwapAccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumSwapAccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumSwapAccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.payer = reader.string();
                            break;
                        }
                    case 2: {
                            message.ammConfig = reader.string();
                            break;
                        }
                    case 3: {
                            message.poolState = reader.string();
                            break;
                        }
                    case 4: {
                            message.inputTokenAccount = reader.string();
                            break;
                        }
                    case 5: {
                            message.outputTokenAccount = reader.string();
                            break;
                        }
                    case 6: {
                            message.inputVault = reader.string();
                            break;
                        }
                    case 7: {
                            message.outputVault = reader.string();
                            break;
                        }
                    case 8: {
                            message.observationState = reader.string();
                            break;
                        }
                    case 9: {
                            message.tokenProgram = reader.string();
                            break;
                        }
                    case 10: {
                            message.tickArray = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumSwapAccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumSwapAccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.payer != null && message.hasOwnProperty("payer"))
                    if (!$util.isString(message.payer))
                        return "payer: string expected";
                if (message.ammConfig != null && message.hasOwnProperty("ammConfig"))
                    if (!$util.isString(message.ammConfig))
                        return "ammConfig: string expected";
                if (message.poolState != null && message.hasOwnProperty("poolState"))
                    if (!$util.isString(message.poolState))
                        return "poolState: string expected";
                if (message.inputTokenAccount != null && message.hasOwnProperty("inputTokenAccount"))
                    if (!$util.isString(message.inputTokenAccount))
                        return "inputTokenAccount: string expected";
                if (message.outputTokenAccount != null && message.hasOwnProperty("outputTokenAccount"))
                    if (!$util.isString(message.outputTokenAccount))
                        return "outputTokenAccount: string expected";
                if (message.inputVault != null && message.hasOwnProperty("inputVault"))
                    if (!$util.isString(message.inputVault))
                        return "inputVault: string expected";
                if (message.outputVault != null && message.hasOwnProperty("outputVault"))
                    if (!$util.isString(message.outputVault))
                        return "outputVault: string expected";
                if (message.observationState != null && message.hasOwnProperty("observationState"))
                    if (!$util.isString(message.observationState))
                        return "observationState: string expected";
                if (message.tokenProgram != null && message.hasOwnProperty("tokenProgram"))
                    if (!$util.isString(message.tokenProgram))
                        return "tokenProgram: string expected";
                if (message.tickArray != null && message.hasOwnProperty("tickArray"))
                    if (!$util.isString(message.tickArray))
                        return "tickArray: string expected";
                return null;
            };

            RaydiumSwapAccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumSwapAccountsProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumSwapAccountsProto();
                if (object.payer != null)
                    message.payer = String(object.payer);
                if (object.ammConfig != null)
                    message.ammConfig = String(object.ammConfig);
                if (object.poolState != null)
                    message.poolState = String(object.poolState);
                if (object.inputTokenAccount != null)
                    message.inputTokenAccount = String(object.inputTokenAccount);
                if (object.outputTokenAccount != null)
                    message.outputTokenAccount = String(object.outputTokenAccount);
                if (object.inputVault != null)
                    message.inputVault = String(object.inputVault);
                if (object.outputVault != null)
                    message.outputVault = String(object.outputVault);
                if (object.observationState != null)
                    message.observationState = String(object.observationState);
                if (object.tokenProgram != null)
                    message.tokenProgram = String(object.tokenProgram);
                if (object.tickArray != null)
                    message.tickArray = String(object.tickArray);
                return message;
            };

            RaydiumSwapAccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.payer = "";
                    object.ammConfig = "";
                    object.poolState = "";
                    object.inputTokenAccount = "";
                    object.outputTokenAccount = "";
                    object.inputVault = "";
                    object.outputVault = "";
                    object.observationState = "";
                    object.tokenProgram = "";
                    object.tickArray = "";
                }
                if (message.payer != null && message.hasOwnProperty("payer"))
                    object.payer = message.payer;
                if (message.ammConfig != null && message.hasOwnProperty("ammConfig"))
                    object.ammConfig = message.ammConfig;
                if (message.poolState != null && message.hasOwnProperty("poolState"))
                    object.poolState = message.poolState;
                if (message.inputTokenAccount != null && message.hasOwnProperty("inputTokenAccount"))
                    object.inputTokenAccount = message.inputTokenAccount;
                if (message.outputTokenAccount != null && message.hasOwnProperty("outputTokenAccount"))
                    object.outputTokenAccount = message.outputTokenAccount;
                if (message.inputVault != null && message.hasOwnProperty("inputVault"))
                    object.inputVault = message.inputVault;
                if (message.outputVault != null && message.hasOwnProperty("outputVault"))
                    object.outputVault = message.outputVault;
                if (message.observationState != null && message.hasOwnProperty("observationState"))
                    object.observationState = message.observationState;
                if (message.tokenProgram != null && message.hasOwnProperty("tokenProgram"))
                    object.tokenProgram = message.tokenProgram;
                if (message.tickArray != null && message.hasOwnProperty("tickArray"))
                    object.tickArray = message.tickArray;
                return object;
            };

            RaydiumSwapAccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumSwapAccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumSwapAccountsProto";
            };

            return RaydiumSwapAccountsProto;
        })();

        parser.RaydiumSwapV2AccountsProto = (function() {

            function RaydiumSwapV2AccountsProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumSwapV2AccountsProto.prototype.payer = "";
            RaydiumSwapV2AccountsProto.prototype.ammConfig = "";
            RaydiumSwapV2AccountsProto.prototype.poolState = "";
            RaydiumSwapV2AccountsProto.prototype.inputTokenAccount = "";
            RaydiumSwapV2AccountsProto.prototype.outputTokenAccount = "";
            RaydiumSwapV2AccountsProto.prototype.inputVault = "";
            RaydiumSwapV2AccountsProto.prototype.outputVault = "";
            RaydiumSwapV2AccountsProto.prototype.observationState = "";
            RaydiumSwapV2AccountsProto.prototype.tokenProgram = "";
            RaydiumSwapV2AccountsProto.prototype.token_2022Program = "";
            RaydiumSwapV2AccountsProto.prototype.memoProgram = "";
            RaydiumSwapV2AccountsProto.prototype.inputVaultMint = "";
            RaydiumSwapV2AccountsProto.prototype.outputVaultMint = "";
            RaydiumSwapV2AccountsProto.prototype.tickArray = "";

            RaydiumSwapV2AccountsProto.create = function create(properties) {
                return new RaydiumSwapV2AccountsProto(properties);
            };

            RaydiumSwapV2AccountsProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.payer != null && Object.hasOwnProperty.call(message, "payer"))
                    writer.uint32(10).string(message.payer);
                if (message.ammConfig != null && Object.hasOwnProperty.call(message, "ammConfig"))
                    writer.uint32(18).string(message.ammConfig);
                if (message.poolState != null && Object.hasOwnProperty.call(message, "poolState"))
                    writer.uint32(26).string(message.poolState);
                if (message.inputTokenAccount != null && Object.hasOwnProperty.call(message, "inputTokenAccount"))
                    writer.uint32(34).string(message.inputTokenAccount);
                if (message.outputTokenAccount != null && Object.hasOwnProperty.call(message, "outputTokenAccount"))
                    writer.uint32(42).string(message.outputTokenAccount);
                if (message.inputVault != null && Object.hasOwnProperty.call(message, "inputVault"))
                    writer.uint32(50).string(message.inputVault);
                if (message.outputVault != null && Object.hasOwnProperty.call(message, "outputVault"))
                    writer.uint32(58).string(message.outputVault);
                if (message.observationState != null && Object.hasOwnProperty.call(message, "observationState"))
                    writer.uint32(66).string(message.observationState);
                if (message.tokenProgram != null && Object.hasOwnProperty.call(message, "tokenProgram"))
                    writer.uint32(74).string(message.tokenProgram);
                if (message.token_2022Program != null && Object.hasOwnProperty.call(message, "token_2022Program"))
                    writer.uint32(82).string(message.token_2022Program);
                if (message.memoProgram != null && Object.hasOwnProperty.call(message, "memoProgram"))
                    writer.uint32(90).string(message.memoProgram);
                if (message.inputVaultMint != null && Object.hasOwnProperty.call(message, "inputVaultMint"))
                    writer.uint32(98).string(message.inputVaultMint);
                if (message.outputVaultMint != null && Object.hasOwnProperty.call(message, "outputVaultMint"))
                    writer.uint32(106).string(message.outputVaultMint);
                if (message.tickArray != null && Object.hasOwnProperty.call(message, "tickArray"))
                    writer.uint32(114).string(message.tickArray);
                return writer;
            };

            RaydiumSwapV2AccountsProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumSwapV2AccountsProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumSwapV2AccountsProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.payer = reader.string();
                            break;
                        }
                    case 2: {
                            message.ammConfig = reader.string();
                            break;
                        }
                    case 3: {
                            message.poolState = reader.string();
                            break;
                        }
                    case 4: {
                            message.inputTokenAccount = reader.string();
                            break;
                        }
                    case 5: {
                            message.outputTokenAccount = reader.string();
                            break;
                        }
                    case 6: {
                            message.inputVault = reader.string();
                            break;
                        }
                    case 7: {
                            message.outputVault = reader.string();
                            break;
                        }
                    case 8: {
                            message.observationState = reader.string();
                            break;
                        }
                    case 9: {
                            message.tokenProgram = reader.string();
                            break;
                        }
                    case 10: {
                            message.token_2022Program = reader.string();
                            break;
                        }
                    case 11: {
                            message.memoProgram = reader.string();
                            break;
                        }
                    case 12: {
                            message.inputVaultMint = reader.string();
                            break;
                        }
                    case 13: {
                            message.outputVaultMint = reader.string();
                            break;
                        }
                    case 14: {
                            message.tickArray = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumSwapV2AccountsProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumSwapV2AccountsProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.payer != null && message.hasOwnProperty("payer"))
                    if (!$util.isString(message.payer))
                        return "payer: string expected";
                if (message.ammConfig != null && message.hasOwnProperty("ammConfig"))
                    if (!$util.isString(message.ammConfig))
                        return "ammConfig: string expected";
                if (message.poolState != null && message.hasOwnProperty("poolState"))
                    if (!$util.isString(message.poolState))
                        return "poolState: string expected";
                if (message.inputTokenAccount != null && message.hasOwnProperty("inputTokenAccount"))
                    if (!$util.isString(message.inputTokenAccount))
                        return "inputTokenAccount: string expected";
                if (message.outputTokenAccount != null && message.hasOwnProperty("outputTokenAccount"))
                    if (!$util.isString(message.outputTokenAccount))
                        return "outputTokenAccount: string expected";
                if (message.inputVault != null && message.hasOwnProperty("inputVault"))
                    if (!$util.isString(message.inputVault))
                        return "inputVault: string expected";
                if (message.outputVault != null && message.hasOwnProperty("outputVault"))
                    if (!$util.isString(message.outputVault))
                        return "outputVault: string expected";
                if (message.observationState != null && message.hasOwnProperty("observationState"))
                    if (!$util.isString(message.observationState))
                        return "observationState: string expected";
                if (message.tokenProgram != null && message.hasOwnProperty("tokenProgram"))
                    if (!$util.isString(message.tokenProgram))
                        return "tokenProgram: string expected";
                if (message.token_2022Program != null && message.hasOwnProperty("token_2022Program"))
                    if (!$util.isString(message.token_2022Program))
                        return "token_2022Program: string expected";
                if (message.memoProgram != null && message.hasOwnProperty("memoProgram"))
                    if (!$util.isString(message.memoProgram))
                        return "memoProgram: string expected";
                if (message.inputVaultMint != null && message.hasOwnProperty("inputVaultMint"))
                    if (!$util.isString(message.inputVaultMint))
                        return "inputVaultMint: string expected";
                if (message.outputVaultMint != null && message.hasOwnProperty("outputVaultMint"))
                    if (!$util.isString(message.outputVaultMint))
                        return "outputVaultMint: string expected";
                if (message.tickArray != null && message.hasOwnProperty("tickArray"))
                    if (!$util.isString(message.tickArray))
                        return "tickArray: string expected";
                return null;
            };

            RaydiumSwapV2AccountsProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumSwapV2AccountsProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumSwapV2AccountsProto();
                if (object.payer != null)
                    message.payer = String(object.payer);
                if (object.ammConfig != null)
                    message.ammConfig = String(object.ammConfig);
                if (object.poolState != null)
                    message.poolState = String(object.poolState);
                if (object.inputTokenAccount != null)
                    message.inputTokenAccount = String(object.inputTokenAccount);
                if (object.outputTokenAccount != null)
                    message.outputTokenAccount = String(object.outputTokenAccount);
                if (object.inputVault != null)
                    message.inputVault = String(object.inputVault);
                if (object.outputVault != null)
                    message.outputVault = String(object.outputVault);
                if (object.observationState != null)
                    message.observationState = String(object.observationState);
                if (object.tokenProgram != null)
                    message.tokenProgram = String(object.tokenProgram);
                if (object.token_2022Program != null)
                    message.token_2022Program = String(object.token_2022Program);
                if (object.memoProgram != null)
                    message.memoProgram = String(object.memoProgram);
                if (object.inputVaultMint != null)
                    message.inputVaultMint = String(object.inputVaultMint);
                if (object.outputVaultMint != null)
                    message.outputVaultMint = String(object.outputVaultMint);
                if (object.tickArray != null)
                    message.tickArray = String(object.tickArray);
                return message;
            };

            RaydiumSwapV2AccountsProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.payer = "";
                    object.ammConfig = "";
                    object.poolState = "";
                    object.inputTokenAccount = "";
                    object.outputTokenAccount = "";
                    object.inputVault = "";
                    object.outputVault = "";
                    object.observationState = "";
                    object.tokenProgram = "";
                    object.token_2022Program = "";
                    object.memoProgram = "";
                    object.inputVaultMint = "";
                    object.outputVaultMint = "";
                    object.tickArray = "";
                }
                if (message.payer != null && message.hasOwnProperty("payer"))
                    object.payer = message.payer;
                if (message.ammConfig != null && message.hasOwnProperty("ammConfig"))
                    object.ammConfig = message.ammConfig;
                if (message.poolState != null && message.hasOwnProperty("poolState"))
                    object.poolState = message.poolState;
                if (message.inputTokenAccount != null && message.hasOwnProperty("inputTokenAccount"))
                    object.inputTokenAccount = message.inputTokenAccount;
                if (message.outputTokenAccount != null && message.hasOwnProperty("outputTokenAccount"))
                    object.outputTokenAccount = message.outputTokenAccount;
                if (message.inputVault != null && message.hasOwnProperty("inputVault"))
                    object.inputVault = message.inputVault;
                if (message.outputVault != null && message.hasOwnProperty("outputVault"))
                    object.outputVault = message.outputVault;
                if (message.observationState != null && message.hasOwnProperty("observationState"))
                    object.observationState = message.observationState;
                if (message.tokenProgram != null && message.hasOwnProperty("tokenProgram"))
                    object.tokenProgram = message.tokenProgram;
                if (message.token_2022Program != null && message.hasOwnProperty("token_2022Program"))
                    object.token_2022Program = message.token_2022Program;
                if (message.memoProgram != null && message.hasOwnProperty("memoProgram"))
                    object.memoProgram = message.memoProgram;
                if (message.inputVaultMint != null && message.hasOwnProperty("inputVaultMint"))
                    object.inputVaultMint = message.inputVaultMint;
                if (message.outputVaultMint != null && message.hasOwnProperty("outputVaultMint"))
                    object.outputVaultMint = message.outputVaultMint;
                if (message.tickArray != null && message.hasOwnProperty("tickArray"))
                    object.tickArray = message.tickArray;
                return object;
            };

            RaydiumSwapV2AccountsProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumSwapV2AccountsProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumSwapV2AccountsProto";
            };

            return RaydiumSwapV2AccountsProto;
        })();

        parser.RaydiumSwapIxDataProto = (function() {

            function RaydiumSwapIxDataProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumSwapIxDataProto.prototype.amount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            RaydiumSwapIxDataProto.prototype.otherAmountThreshold = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
            RaydiumSwapIxDataProto.prototype.sqrtPriceLimitX64 = "";
            RaydiumSwapIxDataProto.prototype.isBaseInput = false;

            RaydiumSwapIxDataProto.create = function create(properties) {
                return new RaydiumSwapIxDataProto(properties);
            };

            RaydiumSwapIxDataProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                    writer.uint32(8).uint64(message.amount);
                if (message.otherAmountThreshold != null && Object.hasOwnProperty.call(message, "otherAmountThreshold"))
                    writer.uint32(16).uint64(message.otherAmountThreshold);
                if (message.sqrtPriceLimitX64 != null && Object.hasOwnProperty.call(message, "sqrtPriceLimitX64"))
                    writer.uint32(26).string(message.sqrtPriceLimitX64);
                if (message.isBaseInput != null && Object.hasOwnProperty.call(message, "isBaseInput"))
                    writer.uint32(32).bool(message.isBaseInput);
                return writer;
            };

            RaydiumSwapIxDataProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumSwapIxDataProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumSwapIxDataProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.amount = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.otherAmountThreshold = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.sqrtPriceLimitX64 = reader.string();
                            break;
                        }
                    case 4: {
                            message.isBaseInput = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumSwapIxDataProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumSwapIxDataProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (!$util.isInteger(message.amount) && !(message.amount && $util.isInteger(message.amount.low) && $util.isInteger(message.amount.high)))
                        return "amount: integer|Long expected";
                if (message.otherAmountThreshold != null && message.hasOwnProperty("otherAmountThreshold"))
                    if (!$util.isInteger(message.otherAmountThreshold) && !(message.otherAmountThreshold && $util.isInteger(message.otherAmountThreshold.low) && $util.isInteger(message.otherAmountThreshold.high)))
                        return "otherAmountThreshold: integer|Long expected";
                if (message.sqrtPriceLimitX64 != null && message.hasOwnProperty("sqrtPriceLimitX64"))
                    if (!$util.isString(message.sqrtPriceLimitX64))
                        return "sqrtPriceLimitX64: string expected";
                if (message.isBaseInput != null && message.hasOwnProperty("isBaseInput"))
                    if (typeof message.isBaseInput !== "boolean")
                        return "isBaseInput: boolean expected";
                return null;
            };

            RaydiumSwapIxDataProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumSwapIxDataProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumSwapIxDataProto();
                if (object.amount != null)
                    if ($util.Long)
                        (message.amount = $util.Long.fromValue(object.amount)).unsigned = true;
                    else if (typeof object.amount === "string")
                        message.amount = parseInt(object.amount, 10);
                    else if (typeof object.amount === "number")
                        message.amount = object.amount;
                    else if (typeof object.amount === "object")
                        message.amount = new $util.LongBits(object.amount.low >>> 0, object.amount.high >>> 0).toNumber(true);
                if (object.otherAmountThreshold != null)
                    if ($util.Long)
                        (message.otherAmountThreshold = $util.Long.fromValue(object.otherAmountThreshold)).unsigned = true;
                    else if (typeof object.otherAmountThreshold === "string")
                        message.otherAmountThreshold = parseInt(object.otherAmountThreshold, 10);
                    else if (typeof object.otherAmountThreshold === "number")
                        message.otherAmountThreshold = object.otherAmountThreshold;
                    else if (typeof object.otherAmountThreshold === "object")
                        message.otherAmountThreshold = new $util.LongBits(object.otherAmountThreshold.low >>> 0, object.otherAmountThreshold.high >>> 0).toNumber(true);
                if (object.sqrtPriceLimitX64 != null)
                    message.sqrtPriceLimitX64 = String(object.sqrtPriceLimitX64);
                if (object.isBaseInput != null)
                    message.isBaseInput = Boolean(object.isBaseInput);
                return message;
            };

            RaydiumSwapIxDataProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.amount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.amount = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.otherAmountThreshold = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.otherAmountThreshold = options.longs === String ? "0" : 0;
                    object.sqrtPriceLimitX64 = "";
                    object.isBaseInput = false;
                }
                if (message.amount != null && message.hasOwnProperty("amount"))
                    if (typeof message.amount === "number")
                        object.amount = options.longs === String ? String(message.amount) : message.amount;
                    else
                        object.amount = options.longs === String ? $util.Long.prototype.toString.call(message.amount) : options.longs === Number ? new $util.LongBits(message.amount.low >>> 0, message.amount.high >>> 0).toNumber(true) : message.amount;
                if (message.otherAmountThreshold != null && message.hasOwnProperty("otherAmountThreshold"))
                    if (typeof message.otherAmountThreshold === "number")
                        object.otherAmountThreshold = options.longs === String ? String(message.otherAmountThreshold) : message.otherAmountThreshold;
                    else
                        object.otherAmountThreshold = options.longs === String ? $util.Long.prototype.toString.call(message.otherAmountThreshold) : options.longs === Number ? new $util.LongBits(message.otherAmountThreshold.low >>> 0, message.otherAmountThreshold.high >>> 0).toNumber(true) : message.otherAmountThreshold;
                if (message.sqrtPriceLimitX64 != null && message.hasOwnProperty("sqrtPriceLimitX64"))
                    object.sqrtPriceLimitX64 = message.sqrtPriceLimitX64;
                if (message.isBaseInput != null && message.hasOwnProperty("isBaseInput"))
                    object.isBaseInput = message.isBaseInput;
                return object;
            };

            RaydiumSwapIxDataProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumSwapIxDataProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumSwapIxDataProto";
            };

            return RaydiumSwapIxDataProto;
        })();

        parser.RaydiumSwapInstructionProto = (function() {

            function RaydiumSwapInstructionProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumSwapInstructionProto.prototype.accounts = null;
            RaydiumSwapInstructionProto.prototype.data = null;

            RaydiumSwapInstructionProto.create = function create(properties) {
                return new RaydiumSwapInstructionProto(properties);
            };

            RaydiumSwapInstructionProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.RaydiumSwapAccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.RaydiumSwapIxDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            RaydiumSwapInstructionProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumSwapInstructionProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumSwapInstructionProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.RaydiumSwapAccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.RaydiumSwapIxDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumSwapInstructionProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumSwapInstructionProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.RaydiumSwapAccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.RaydiumSwapIxDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            RaydiumSwapInstructionProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumSwapInstructionProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumSwapInstructionProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.RaydiumSwapInstructionProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.RaydiumSwapAccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.RaydiumSwapInstructionProto.data: object expected");
                    message.data = $root.vixen.parser.RaydiumSwapIxDataProto.fromObject(object.data);
                }
                return message;
            };

            RaydiumSwapInstructionProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.RaydiumSwapAccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.RaydiumSwapIxDataProto.toObject(message.data, options);
                return object;
            };

            RaydiumSwapInstructionProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumSwapInstructionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumSwapInstructionProto";
            };

            return RaydiumSwapInstructionProto;
        })();

        parser.RaydiumSwapV2InstructionProto = (function() {

            function RaydiumSwapV2InstructionProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            RaydiumSwapV2InstructionProto.prototype.accounts = null;
            RaydiumSwapV2InstructionProto.prototype.data = null;

            RaydiumSwapV2InstructionProto.create = function create(properties) {
                return new RaydiumSwapV2InstructionProto(properties);
            };

            RaydiumSwapV2InstructionProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.accounts != null && Object.hasOwnProperty.call(message, "accounts"))
                    $root.vixen.parser.RaydiumSwapV2AccountsProto.encode(message.accounts, writer.uint32(10).fork()).ldelim();
                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                    $root.vixen.parser.RaydiumSwapIxDataProto.encode(message.data, writer.uint32(18).fork()).ldelim();
                return writer;
            };

            RaydiumSwapV2InstructionProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            RaydiumSwapV2InstructionProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.vixen.parser.RaydiumSwapV2InstructionProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.accounts = $root.vixen.parser.RaydiumSwapV2AccountsProto.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.data = $root.vixen.parser.RaydiumSwapIxDataProto.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            RaydiumSwapV2InstructionProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            RaydiumSwapV2InstructionProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.accounts != null && message.hasOwnProperty("accounts")) {
                    var error = $root.vixen.parser.RaydiumSwapV2AccountsProto.verify(message.accounts);
                    if (error)
                        return "accounts." + error;
                }
                if (message.data != null && message.hasOwnProperty("data")) {
                    var error = $root.vixen.parser.RaydiumSwapIxDataProto.verify(message.data);
                    if (error)
                        return "data." + error;
                }
                return null;
            };

            RaydiumSwapV2InstructionProto.fromObject = function fromObject(object) {
                if (object instanceof $root.vixen.parser.RaydiumSwapV2InstructionProto)
                    return object;
                var message = new $root.vixen.parser.RaydiumSwapV2InstructionProto();
                if (object.accounts != null) {
                    if (typeof object.accounts !== "object")
                        throw TypeError(".vixen.parser.RaydiumSwapV2InstructionProto.accounts: object expected");
                    message.accounts = $root.vixen.parser.RaydiumSwapV2AccountsProto.fromObject(object.accounts);
                }
                if (object.data != null) {
                    if (typeof object.data !== "object")
                        throw TypeError(".vixen.parser.RaydiumSwapV2InstructionProto.data: object expected");
                    message.data = $root.vixen.parser.RaydiumSwapIxDataProto.fromObject(object.data);
                }
                return message;
            };

            RaydiumSwapV2InstructionProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.accounts = null;
                    object.data = null;
                }
                if (message.accounts != null && message.hasOwnProperty("accounts"))
                    object.accounts = $root.vixen.parser.RaydiumSwapV2AccountsProto.toObject(message.accounts, options);
                if (message.data != null && message.hasOwnProperty("data"))
                    object.data = $root.vixen.parser.RaydiumSwapIxDataProto.toObject(message.data, options);
                return object;
            };

            RaydiumSwapV2InstructionProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            RaydiumSwapV2InstructionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/vixen.parser.RaydiumSwapV2InstructionProto";
            };

            return RaydiumSwapV2InstructionProto;
        })();

        return parser;
    })();

    return vixen;
})();

$root.google = (function() {

    var google = {};

    google.protobuf = (function() {

        var protobuf = {};

        protobuf.Any = (function() {

            function Any(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            Any.prototype.type_url = "";
            Any.prototype.value = $util.newBuffer([]);

            Any.create = function create(properties) {
                return new Any(properties);
            };

            Any.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                    writer.uint32(10).string(message.type_url);
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(18).bytes(message.value);
                return writer;
            };

            Any.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            Any.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.type_url = reader.string();
                            break;
                        }
                    case 2: {
                            message.value = reader.bytes();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            Any.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            Any.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    if (!$util.isString(message.type_url))
                        return "type_url: string expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            Any.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Any)
                    return object;
                var message = new $root.google.protobuf.Any();
                if (object.type_url != null)
                    message.type_url = String(object.type_url);
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length >= 0)
                        message.value = object.value;
                return message;
            };

            Any.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.type_url = "";
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                }
                if (message.type_url != null && message.hasOwnProperty("type_url"))
                    object.type_url = message.type_url;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            Any.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            Any.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.Any";
            };

            return Any;
        })();

        return protobuf;
    })();

    return google;
})();

module.exports = $root;
